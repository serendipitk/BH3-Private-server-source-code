package bh3;
syntax = "proto2";

message AccelerateRestaurantWorkReq {
    optional uint32 activity_id = 1;
    optional uint32 room_id = 2;
    optional uint32 num = 3;

    enum CmdId {
        CMD_ID = 5872;
    }
}

message AccelerateRestaurantWorkRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 room_id = 3;
    optional uint32 num = 4;

    enum CmdId {
        CMD_ID = 5873;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        ROOM_NOT_EXIST = 3;
        WORK_NOT_DOING = 4;
        TICKET_LACK = 5;
        STOCK_LIMIT = 6;
        AVATAR_INVALID = 7;
    }
}


message AcceptFriendInviteReq {
    optional string invite_code = 1;
    optional InviteeActivityType invite_type = 2;
    optional uint32 schedule_id = 3;

    enum CmdId {
        CMD_ID = 227;
    }
}

message AcceptFriendInviteRsp {
    optional Retcode retcode = 1;
    optional uint32 invite_uid = 2;

    enum CmdId {
        CMD_ID = 228;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        INVITE_CODE_ERROR = 2;
        LEVEL_LACK = 3;
        INVITE_FULL = 4;
        INVITE_INVALID_REGION = 5;
    }
}




message AcceptGratuityStageReq {
    optional GratuityAcceptType accept_type = 1;
    optional GratuityPlayerInfo player_info = 2;
    repeated GratuityStageMeta stage_meta_list = 3;

    enum CmdId {
        CMD_ID = 4102;
    }
}



message AcceptGratuityStageRsp {
    optional Retcode retcode = 1;
    repeated GratuityStage stage_list = 2;
    optional GratuityAcceptType accept_type = 3;
    optional uint32 today_left_free_stage_num = 4;

    enum CmdId {
        CMD_ID = 4103;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TIMES_LACK = 2;
        NOT_OPEN = 3;
    }
}

message AcceptScDLCDailyQuestReq {
    optional uint32 quest_id = 1;

    enum CmdId {
        CMD_ID = 6320;
    }
}


message AcceptScDLCDailyQuestRsp {
    optional Retcode retcode = 1;
    optional OpenworldQuest quest = 2;

    enum CmdId {
        CMD_ID = 6321;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        QUEST_ERROR = 2;
        STAMINA_LACK = 3;
        ACCEPT_TIMES_LACK = 4;
        SLOT_LACK = 5;
    }
}

message AccountBuffReward {
    optional uint32 scoin_reward = 1;
    optional uint32 avatar_exp_reward = 2;
    optional uint32 player_exp_reward = 3;
}

enum AccountType {
    ACCOUNT_NONE = 0;
    ACCOUNT_MIHOYO = 1;
    ACCOUNT_BILIBILI = 2;
    ACCOUNT_UC = 3;
    ACCOUNT_360 = 4;
    ACCOUNT_YYB = 5;
    ACCOUNT_XIAOMI = 6;
    ACCOUNT_HUAWEI = 7;
    ACCOUNT_OPPO = 8;
    ACCOUNT_VIVO = 9;
    ACCOUNT_MEIZU = 10;
    ACCOUNT_COOLPAD = 11;
    ACCOUNT_LENOVO = 12;
    ACCOUNT_GIONEE = 13;
    ACCOUNT_BAIDU = 14;
    ACCOUNT_WANDOUJIA = 15;
    ACCOUNT_LESHI = 16;
    ACCOUNT_GOOGLE = 17;
    ACCOUNT_FACEBOOK = 18;
    ACCOUNT_ITUNES_GC = 19;
    ACCOUNT_SIGNIN_APPLE = 20;
    ACCOUNT_WEGAME = 21;
    ACCOUNT_BYTEDANCE = 22;
    ACCOUNT_STEAM = 23;
    ACCOUNT_HOYOLAB = 24;
}

enum AccurateGoodsTriggerType {
    ACCURATE_GOODS_TRIGGER_TYPE_NONE = 0;
    ACCURATE_GOODS_TRIGGER_TYPE_UNLOCK_AVATAR = 1;
    ACCURATE_GOODS_TRIGGER_TYPE_FIRST_GOT = 2;
    ACCURATE_GOODS_TRIGGER_TYPE_REPEAT_GOT = 3;
    ACCURATE_GOODS_TRIGGER_TYPE_UNLOCK_ELF = 4;
    ACCURATE_GOODS_TRIGGER_TYPE_FINISH_MISSION = 5;
    ACCURATE_GOODS_TRIGGER_TYPE_EXCHANGE_SCOIN = 6;
    ACCURATE_GOODS_TRIGGER_TYPE_EXCHANGE_STAMINA = 7;
    ACCURATE_GOODS_TRIGGER_TYPE_LOSE_STAGE = 8;
    ACCURATE_GOODS_TRIGGER_TYPE_WIN_STAGE_FIRST = 9;
    ACCURATE_GOODS_TRIGGER_TYPE_AVATAR_LEVEL = 10;
    ACCURATE_GOODS_TRIGGER_TYPE_PLAYER_LEVEL = 11;
    ACCURATE_GOODS_TRIGGER_TYPE_GOBACK_DAYS = 12;
    ACCURATE_GOODS_TRIGGER_TYPE_AVATAR_STAR = 13;
}

enum AchievementType {
    ACHIEVE_TYPE_NONE = 0;
    ACHIEVE_TYPE_CAPTAIN = 1;
    ACHIEVE_TYPE_DEVELOP = 2;
    ACHIEVE_TYPE_SOCIAL = 3;
    ACHIEVE_TYPE_STAGE = 4;
    ACHIEVE_TYPE_ISLAND = 5;
    ACHIEVE_TYPE_CHALLENGE = 6;
    ACHIEVE_TYPE_DORM = 7;
    ACHIEVE_TYPE_EXTRA_STORY = 8;
}

message ActivateTrialAvatarReq {
    optional uint32 sample_id = 1;

    enum CmdId {
        CMD_ID = 583;
    }
}


message ActivateTrialAvatarRsp {
    optional Retcode retcode = 1;
    optional TrialAvatar avatar = 2;

    enum CmdId {
        CMD_ID = 584;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        REPEATE_ACTIVATE = 2;
        MATERIAL_LACK = 3;
        TYPE_ERROR = 4;
        LEVEL_LIMIT = 5;
    }
}


message ActiveRaidReq {
    optional RaidActiveType active_type = 1;

    enum CmdId {
        CMD_ID = 1624;
    }
}


message ActiveRaidRsp {
    optional Retcode retcode = 1;
    optional RaidActiveType active_type = 2;

    enum CmdId {
        CMD_ID = 1625;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        ALREADY_ACTIVED = 3;
        TYPE_ERROR = 4;
    }
}

message ActiveScDLCFeverSuiteReq {
    optional uint32 suite_id = 1;

    enum CmdId {
        CMD_ID = 6306;
    }
}

message ActiveScDLCFeverSuiteRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 6307;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ActivityBuff {
    optional uint32 id = 1;
    repeated uint32 candidate_buff_id_list = 2;
    repeated Buff buff_list = 3;
    optional uint32 charge_value = 4;
    optional uint32 buff_charged_times = 5;
    message Buff {
        optional uint32 buff_id = 1;
        optional uint32 buff_num = 2;
    }
}






message ActivityGachaData {
    optional uint32 ticket_hcoin_cost = 2;
    optional uint32 ticket_material_id = 3;
    optional uint32 cost_material_id = 4;
    optional uint32 cost_material_num = 5;
    optional uint32 baodi_times = 6;
    optional GachaType gacha_type = 9;
    optional uint32 gacha_times = 10;
    repeated ProtectEntry display_protect_entry_list = 11;
    optional bool is_protect_recycle = 12;
    optional uint32 display_protect_times = 13;
    optional uint32 no_protect_gacha_times = 14;
    optional GachaExRewardInfo gacha_ex_reward_info = 15;
    optional SettingDict display_setting_dict = 16;
    optional WishWellData wish_well_data = 17;
}

message ActivityPanelSwitchData {
    optional uint32 panel_id = 1;
}


message ActivityRewardStatisticData {
    optional uint32 id = 1;
    repeated ActivityRewardStatisticItemData item_data_list = 2;
}

message ActivityRewardStatisticItemData {
    optional uint32 show_id = 1;
    optional uint32 num = 2;
}

message ActivitySeries {
    optional uint32 series_id = 1;
    optional uint32 available_sweep_num = 2;
}

enum ActivitySeriesSweepTimesType {
    ACTIVITY_SERIES_SWEEP_TIMES_NONE = 0;
    ACTIVITY_SERIES_SWEEP_TIMES_DAILY = 1;
    ACTIVITY_SERIES_SWEEP_TIMES_WEEKLY = 2;
}

message ActivitySwitchData {
    optional uint32 activity_type = 1;
}

enum ActivityType {
    ACTIVITY_NONE = 0;
    ACTIVITY_WEEK_DAY = 1;
    ACTIVITY_BEFALL = 2;
    ACTIVITY_NUCLEAR = 3;
    ACTIVITY_MULTIPLAYER = 4;
    ACTIVITY_MP_RAID = 5;
    ACTIVITY_SIMULATE_RANK = 7;
    ACTIVITY_BOSS_RUSH = 8;
    ACTIVITY_MINUTE = 9;
    ACTIVITY_SIMULATE_NO_RANK = 10;
    ACTIVITY_WORLDBOSS = 11;
    ACTIVITY_RECLAIM = 12;
    ACTIVITY_MP_OPENWORLD_BOSS = 13;
    ACTIVITY_MATRIX = 14;
}

enum ActivityWorldChatroomType {
    ACTIVITY_WORLD_CHATROOM_TYPE_NONE = 0;
    ACTIVITY_WORLD_CHATROOM_TYPE_KINGDOM = 1;
    ACTIVITY_WORLD_CHATROOM_TYPE_GLOBAL_WAR = 2;
    ACTIVITY_WORLD_CHATROOM_TYPE_CHATWORLD_BEAST = 3;
    ACTIVITY_WORLD_CHATROOM_TYPE_SLG = 4;
}

message AddAvatarExpByMaterialReq {
    optional uint32 avatar_id = 1;
    optional uint32 material_id = 2;
    optional uint32 material_num = 3;

    enum CmdId {
        CMD_ID = 35;
    }
}

message AddAvatarExpByMaterialRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 36;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        AVATAR_LEVEL_FULL = 3;
        MATERAIL_NOT_ENOUGH = 4;
        MATERAIL_CAN_NOT_ADD_EXP = 5;
    }
}

message AddElfExpByMaterialReq {
    optional uint32 elf_id = 1;
    optional uint32 material_id = 2;
    optional uint32 material_num = 3;

    enum CmdId {
        CMD_ID = 2107;
    }
}

message AddElfExpByMaterialRsp {
    optional Retcode retcode = 1;
    optional uint32 old_level = 2;
    optional uint32 old_exp = 3;

    enum CmdId {
        CMD_ID = 2108;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ELF_NOT_EXIST = 2;
        ELF_LEVEL_FULL = 3;
        MATERIAL_NOT_ENOUGH = 4;
        MATERIAL_CAN_NOT_ADD_EXP = 5;
        SCOIN_LACK = 6;
    }
}

enum AddFriendAction {
    ADD_FRIEND_ACTION_ASK = 1;
    ADD_FRIEND_ACTION_AGREE = 2;
    ADD_FRIEND_ACTION_REJECT = 3;
}


message AddFriendReq {
    optional AddFriendAction action = 1;
    repeated uint32 target_uid_list = 2;

    enum CmdId {
        CMD_ID = 66;
    }
}


message AddFriendRsp {
    optional Retcode retcode = 1;
    optional AddFriendAction action = 2;
    repeated uint32 target_uid_list = 3;

    enum CmdId {
        CMD_ID = 67;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TARGET_NOT_EXIST = 2;
        FRIEND_FULL = 3;
        TARGET_FRIEND_FULL = 4;
        IS_SELF = 5;
        IS_FRIEND = 6;
        ASK_TOO_OFTEN = 7;
        ldupAndTest = 8;
        TARGET_IN_ASK_LIST = 9;
        REDIS_MULTI_ERROR = 10;
        NOT_ALLOW_CROSS_REGION_FRIEND = 11;
        CROSS_REGION_FRIEND_FULL = 12;
        FEATURE_LIMIT = 13;
        FORBIDDEN = 14;
        FEATURE_CLOSED = 15;
    }
}

message AddGoodfeelReq {
    optional uint32 avatar_id = 1;
    optional int32 add_goodfeel = 2;
    optional uint32 add_goodfeel_type = 3;

    enum CmdId {
        CMD_ID = 154;
    }
    enum AddGoodfeelType {
        TOUCH = 1;
        STAGE = 2;
        DORM = 3;
    }
}

message AddGoodfeelRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 155;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
    }
}


message AddOnActivityRewardNotify {
    optional uint32 mission_id = 1;
    optional RewardData reward_data = 2;

    enum CmdId {
        CMD_ID = 4156;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message AddScDLCSupportNPCExpReq {
    optional uint32 npc_id = 1;
    optional uint32 material_id = 2;

    enum CmdId {
        CMD_ID = 6308;
    }
}

message AddScDLCSupportNPCExpRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 6309;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        NPC_ERROR = 3;
        MATERIAL_ERROR = 4;
    }
}

message AddTechExpReq {
    optional uint32 material_id = 1;
    optional uint32 material_num = 2;
    optional uint32 map_id = 3;

    enum CmdId {
        CMD_ID = 538;
    }
}

message AddTechExpRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 539;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TECH_NOT_OPEN = 2;
        TECH_LEVEL_FULL = 3;
        MATERAIL_NOT_ENOUGH = 4;
        MATERAIL_CAN_NOT_ADD_EXP = 5;
    }
}

message AddToBlackListReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 1596;
    }
}

message AddToBlackListRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;

    enum CmdId {
        CMD_ID = 1597;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ALREADY_IN_LIST = 2;
        LIST_FULL = 3;
        TARGET_NOT_EXIST = 4;
    }
}

message AdventureAvatar {
    optional uint32 avatar_id = 1;
    optional uint32 star = 2;
    repeated Skill skill_list = 3;
    message Skill {
        optional uint32 skill_id = 1;
        optional uint32 skill_level = 2;
    }
}

message AdventureDecorationSlot {
    optional uint32 slot_id = 1;
    optional uint32 furniture_id = 2;
    optional uint32 direction = 3;
}

message AdventureGroupAvailableQuest {
    optional uint32 pool_id = 1;
    optional uint32 quest_id = 2;
}

message AdventureGroupAvatar {
    optional uint32 avatar_id = 1;
    repeated uint32 finished_record_list = 2;
}

message AdventureGroupQuest {
    optional uint32 pool_id = 1;
    optional uint32 quest_id = 2;
    optional uint32 accept_time = 3;
    repeated uint32 avatar_list = 4;
    optional uint32 status = 5;
    optional uint32 elf_id = 6;
}

enum AdventureQuestResult {
    ADVENTURE_QUEST_RESULT_NONE = 0;
    ADVENTURE_QUEST_RESULT_FAIL = 1;
    ADVENTURE_QUEST_RESULT_SUCC = 2;
    ADVENTURE_QUEST_RESULT_BIG_SUCC = 3;
}

enum AdventureQuestStatus {
    ADVENTURE_QUEST_STATUS_NONE = 0;
    ADVENTURE_QUEST_STATUS_DOING = 1;
    ADVENTURE_QUEST_STATUS_FINISHED = 2;
}

enum AdventureRecordType {
    ADVENTURE_RECORD_NONE = 0;
    ADVENTURE_RECORD_GROWTH = 1;
    ADVENTURE_RECORD_GROWTH_STAGE = 2;
    ADVENTURE_RECORD_SKILL_STAGE = 3;
}

message AdventureStorySweepReq {
    optional uint32 sweep_id = 1;
    repeated uint32 avatar_id_list = 2;

    enum CmdId {
        CMD_ID = 3912;
    }
}


message AdventureStorySweepRsp {
    optional Retcode retcode = 1;
    optional IslandStorySweepData sweep_data = 2;
    optional uint32 used_stamina = 3;

    enum CmdId {
        CMD_ID = 3913;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_MEET_RESTRICT = 2;
        HAS_TAKEN = 3;
        LACK_MATERIAL = 4;
        STAMINA_LACK = 5;
        EQUIPMENT_FULL = 6;
        EQUIPMENT_MATERIAL_LIMIT = 7;
        EQUIPMENT_FRAGMENT_LIMIT = 8;
        ENTER_TIMES_LACK = 9;
        NOT_MEET_FAST = 10;
        EXCEED_STAMINA = 11;
        NOT_FINISH_CHALLENGE = 12;
        AVATAR_SWEEPING = 13;
        TEAM_LIMIT = 14;
        AVATAR_ERROR = 15;
        STAGE_NOT_EXIST = 16;
        ACTIVITY_ENTER_TIMES_LACK = 17;
        LEVEL_LACK = 18;
    }
}

enum AdventureWelfareType {
    ADVENTURE_WELFARE_NONE = 0;
    ADVENTURE_WELFARE_VENTURE_STAMINA = 1;
    ADVENTURE_WELFARE_SHOP = 2;
    ADVENTURE_WELFARE_QUEST_LEVEL = 3;
    ADVENTURE_WELFARE_SCOIN = 4;
    ADVENTURE_WELFARE_STAMINA = 5;
}

message AnswerQuestionReq {
    optional uint32 question_id = 1;
    repeated uint32 answer_list = 2;

    enum CmdId {
        CMD_ID = 4260;
    }
}



message AnswerQuestionRsp {
    optional Retcode retcode = 1;
    optional Question question = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 4261;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        NO_QUESTION = 3;
        HAVE_ANSWER = 4;
        NO_ANSWER = 5;
        NOT_JOIN_ARMADA = 6;
    }
}

message AntiAddict {
    optional uint32 child_age = 1;
    optional uint32 teenage_age = 2;
    optional uint32 age = 3;
    optional uint32 max_today_recharge_price = 4;
    optional bool is_max_game_time = 5;
    optional bool is_force_kick = 6;
    optional uint32 warning_today_recharge_price = 7;
    optional uint32 warning_game_time = 8;
    optional bool is_warning_game_time = 9;
    optional uint32 max_game_time = 10;
    optional bool is_force_kick_for_latest_time = 11;
    optional bool is_force_kick_for_max_time = 12;
    optional string teenager_login_latest_time = 13;
    optional string teenager_login_earliest_time = 14;
    optional bool is_lastest_time = 15;
}

message AntiAddictNotify {
    optional AntiAddictMsgType msg_type = 1;
    optional string msg = 2;
    optional string level = 3;

    enum CmdId {
        CMD_ID = 5004;
    }
    enum AntiAddictMsgType {
        ANTI_ADDICT_MSG_ERROR = 0;
        ANTI_ADDICT_MSG_ANTI_ADDICT = 1;
        ANTI_ADDICT_MSG_SHOULD_BIND_ACCOUNT = 2;
    }
}

message AntiCheatReportReq {
    optional uint32 cheat_type = 1;
    optional string ext = 2;

    enum CmdId {
        CMD_ID = 217;
    }
    enum CheatType {
        EMPTY = 0;
        CHEATER = 1;
        EMULATOR = 2;
        HASH_CHANGED = 3;
        MEMORY_SCAN = 4;
        JAIL_BREAK = 5;
    }
}

message AntiCheatReportRsp {
    optional Retcode retcode = 1;
    optional uint32 cheat_type = 2;
    optional ProgressWay progress_way = 3;

    enum CmdId {
        CMD_ID = 218;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
    enum ProgressWay {
        IGNORE = 1;
        EXIT_GAME = 2;
    }
}

message ApplyJoinArmadaReq {
    optional uint32 armada_id = 1;
    optional uint32 level = 2;

    enum CmdId {
        CMD_ID = 2607;
    }
}

message ApplyJoinArmadaRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2608;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STATUS_ERROR = 2;
        ARMADA_NOT_EXIST = 3;
        LEVEL_LACK = 4;
        MEMBER_FULL = 5;
        APPLY_FULL = 6;
        IN_CD_TIME = 7;
        APPLY_LIMIT = 8;
        HAS_APPLYED = 9;
        IN_LOW_POPL_CD_TIME = 10;
        FEATURE_CLOSED = 11;
    }
}

enum AreaType {
    AREA_CN = 1;
    AREA_JP = 2;
    AREA_ASIA = 3;
    AREA_WEST = 4;
    AREA_KR = 5;
    AREA_OVERSEAS = 6;
}


message ArmadaActivity {
    optional ArmadaActivityType type = 1;
    optional uint32 schedule_id = 2;
    optional uint32 begin_time = 3;
    optional uint32 end_time = 4;
    optional uint32 open_day_time = 5;
    optional uint32 close_day_time = 6;
}

enum ArmadaActivityType {
    ARMADA_ACTIVITY_TYPE_NONE = 0;
    ARMADA_ACTIVITY_ARMADA_BOSS = 1;
    ARMADA_ACTIVITY_MATRIX = 2;
    ARMADA_ACTIVITY_QUESTION = 3;
    ARMADA_ACTIVITY_TRADING_CARD = 4;
    ARMADA_ACTIVITY_ARMADA_STAGE_SCORE_ACTIVITY = 5;
    ARMADA_ACTIVITY_REUNION = 6;
}


message ArmadaApply {
    optional uint32 uid = 1;
    optional PlayerFriendBriefData brief_data = 2;
}


message ArmadaApplyNotify {
    optional ArmadaApplyNotifyType type = 1;
    optional uint32 target_uid = 2;

    enum CmdId {
        CMD_ID = 2682;
    }
}

enum ArmadaApplyNotifyType {
    ARMADA_APPLY_NOTIFY_NEW = 1;
    ARMADA_APPLY_NOTIFY_APPROVE = 2;
    ARMADA_APPLY_NOTIFY_REJECT = 3;
}


message ArmadaApplyResult {
    optional uint32 uid = 1;
    optional PlayerFriendBriefData brief_data = 2;
    optional bool agree = 3;
}

message ArmadaBossGetMpStatusReq {
    repeated uint32 uid_list = 1;
    optional bool is_fight_body = 2;

    enum CmdId {
        CMD_ID = 554;
    }
}


message ArmadaBossGetMpStatusRsp {
    optional Retcode retcode = 1;
    repeated ArmadaBossMemberStatus member_status_list = 2;

    enum CmdId {
        CMD_ID = 555;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
    }
}

message ArmadaBossMemberStatus {
    optional uint32 uid = 1;
    optional uint32 error_status = 2;
    optional uint32 next_fight_time = 3;
}

message ArmadaBossroom {
    optional uint32 id = 1;
    optional uint32 level = 2;
}



message ArmadaBriefData {
    optional uint32 id = 1;
    optional string name = 2;
    optional uint32 level = 3;
    optional string bulletin = 4;
    optional uint32 apply_level = 5;
    optional bool auto_pass = 6;
    optional uint32 auto_pass_level = 7;
    optional uint32 fund = 8;
    optional uint32 fund_cap = 9;
    optional uint32 ap = 10;
    optional uint32 ap_cap = 11;
    optional uint32 popl = 12;
    optional uint32 popl_cap = 13;
    optional uint32 member_num = 14;
    optional uint32 member_cap = 15;
    optional uint32 leader_id = 16;
    optional string leader_name = 17;
    optional string contact = 18;
    optional uint32 contribution = 19;
    optional bool is_low_popl = 20;
    optional uint32 recent_contribution = 21;
    optional uint32 active_level = 23;
    optional uint32 active_member_num = 24;
    repeated uint32 friend_uid_list = 25;
    optional PlayerFriendBriefData leader_brief_data = 26;
    optional ArmadaLabel label = 27;
}




message ArmadaBuildNotify {
    optional ArmadaBuildNotifyType type = 1;
    optional ArmadaData armada_data = 2;
    repeated ArmadaGrid grid_list = 3;

    enum CmdId {
        CMD_ID = 2678;
    }
}

enum ArmadaBuildNotifyType {
    ARMADA_BUILD_NOTIFY_START = 1;
    ARMADA_BUILD_NOTIFY_CANCEL = 2;
    ARMADA_BUILD_NOTIFY_FINISH = 3;
    ARMADA_BUILD_NOTIFY_MOVE = 4;
}

message ArmadaBulletinNotify {
    optional string bulletin = 1;
    optional string contact = 2;

    enum CmdId {
        CMD_ID = 2679;
    }
}

enum ArmadaCabinType {
    ARMADA_CABIN_NONE = 0;
    ARMADA_CABIN_MAIN = 1;
    ARMADA_CABIN_CONTACT = 2;
    ARMADA_CABIN_HANGAR = 3;
    ARMADA_CABIN_WORKSHOP = 4;
    ARMADA_CABIN_EXCHEQUER = 5;
    ARMADA_CABIN_BOSS = 6;
}

message ArmadaContact {
    optional uint32 id = 1;
    optional uint32 level = 2;
    repeated uint32 member_list = 3;
}













message ArmadaData {
    optional ArmadaBriefData brief = 1;
    repeated ArmadaMember member_list = 2;
    optional ArmadaPosition position = 3;
    repeated ArmadaGrid grid_list = 4;
    repeated ArmadaContact contact_list = 5;
    repeated ArmadaHangar hangar_list = 6;
    repeated ArmadaWorkshop workshop_list = 7;
    repeated ArmadaExchequer exchequer_list = 8;
    repeated ArmadaBossroom bossroom_list = 9;
    optional ArmadaCabinType level_up_cabin_type = 10;
    optional uint32 level_up_cabin_id = 11;
    optional uint32 level_up_end_time = 12;
    optional uint32 dissolve_time = 13;
    optional ArmadaPlayerData armada_player_data = 14;
    optional ArmadaImpeachData impeach_data = 15;
    optional bool is_armada_change_name_free = 16;
}

message ArmadaDiscoveryRewardConfig {
    optional uint32 discovery = 1;
    optional uint32 reward_id = 2;
}

message ArmadaExchequer {
    optional uint32 id = 1;
    optional uint32 level = 2;
}


message ArmadaGrid {
    optional uint32 id = 1;
    optional ArmadaCabinType type = 2;
    optional uint32 cabin_id = 3;
}

message ArmadaHangar {
    optional uint32 id = 1;
    optional uint32 level = 2;
}


message ArmadaImpeachData {
    optional uint32 impeach_status = 1;
    repeated ArmadaOptionalLeader optional_leader_list = 2;
    optional uint32 election_end_time = 3;
}

enum ArmadaImpeachOperation {
    START_IMPEACH = 1;
    END_IMPEACH = 2;
    CANCEL_IMPEACH = 3;
}

enum ArmadaImpeachStatus {
    ARMADA_IMPEACH_STATUS_NORMAL = 0;
    ARMADA_IMPEACH_STATUS_IMPEACH = 1;
    ARMADA_IMPEACH_STATUS_ELECTION = 2;
}

message ArmadaLabel {
    optional uint32 prefix_id = 1;
    repeated uint32 label_id_list = 2;
    optional string recruit = 3;
}

enum ArmadaLabelType {
    ARMADA_LABEL_PREFIX = 1;
    ARMADA_LABEL = 2;
}

message ArmadaLogoutNotify {

    enum CmdId {
        CMD_ID = 2731;
    }
}


message ArmadaManageNotify {
    optional ArmadaManageNotifyType type = 1;
    optional uint32 target_uid = 2;

    enum CmdId {
        CMD_ID = 2680;
    }
}

enum ArmadaManageNotifyType {
    ARMADA_MANAGE_NOTIFY_LEADER = 1;
    ARMADA_MANAGE_NOTIFY_VICE_LEADER_SET = 2;
    ARMADA_MANAGE_NOTIFY_VICE_LEADER_CANCEL = 3;
}

message ArmadaMatrixActivateBuffReq {
    optional uint32 buff_id = 1;
    optional bool activated = 2;

    enum CmdId {
        CMD_ID = 2753;
    }
}

message ArmadaMatrixActivateBuffRsp {
    optional Retcode retcode = 1;
    optional uint32 buff_id = 2;
    optional bool activated = 3;

    enum CmdId {
        CMD_ID = 2754;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVATE_LIMIT = 2;
        NO_BUFF = 3;
        SAME_STATUS = 4;
        NO_ARMADA = 5;
    }
}

message ArmadaMatrixActiveReq {

    enum CmdId {
        CMD_ID = 2808;
    }
}

message ArmadaMatrixActiveRsp {
    optional Retcode retcode = 1;
    optional uint32 active_days = 2;
    optional uint32 supply_add = 3;
    optional uint32 cur_supply = 4;

    enum CmdId {
        CMD_ID = 2809;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_SUPPLY = 2;
    }
}


message ArmadaMatrixAdvancePath {
    optional ArmadaMatrixGridPos path_from = 1;
    optional ArmadaMatrixGridPos path_to = 2;
}



message ArmadaMatrixAdvanceReq {
    optional ArmadaMatrixGridPos from = 1;
    optional ArmadaMatrixGridPos to = 2;
    repeated ArmadaMatrixAdvancePath path_list = 3;
    optional uint32 cur_schedule_id = 4;
    optional uint32 level = 5;
    optional uint32 map_id = 6;

    enum CmdId {
        CMD_ID = 2738;
    }
}



message ArmadaMatrixAdvanceRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    optional ArmadaMatrixGridPos cur_pos = 2;

    enum CmdId {
        CMD_ID = 2739;
    }
}


message ArmadaMatrixAnswerQuestionReq {
    optional ArmadaMatrixGridPos pos = 1;
    optional uint32 question_id = 2;
    repeated uint32 answer_list = 3;

    enum CmdId {
        CMD_ID = 2832;
    }
}



message ArmadaMatrixAnswerQuestionRsp {
    optional Retcode retcode = 1;
    optional Question question = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 2833;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAVE_ANSWER = 2;
        NOT_QUESTION = 3;
    }
}


message ArmadaMatrixArmadaBoss {
    optional uint32 max_hp = 1;
    optional uint32 left_hp = 2;
    repeated ArmadaMatrixItemLay item_lay_list = 3;
    repeated uint32 damage_uid_list = 4;
}

message ArmadaMatrixArmadaOverview {
    optional uint32 member_num = 1;
    optional uint32 deep_level = 2;
    optional uint32 deep_level_uid = 3;
    optional uint32 total_explore_value = 4;
}

message ArmadaMatrixAskSupplyReq {

    enum CmdId {
        CMD_ID = 2810;
    }
}

message ArmadaMatrixAskSupplyRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2811;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SUPPLY_LIMIT = 2;
        HAVE_ASK = 3;
    }
}

enum ArmadaMatrixAvatarState {
    ARMADA_MATRIX_AVATAR_STATE_INVALID = 0;
    ARMADA_MATRIX_AVATAR_STATE_LIVE = 1;
    ARMADA_MATRIX_AVATAR_STATE_DEAD = 2;
}

enum ArmadaMatrixBuffCategory {
    ARMADA_MATRIX_BUFF_OVERLAP = 1;
    ARMADA_MATRIX_BUFF_TEMPORARY = 2;
    ARMADA_MATRIX_BUFF_FLOOR = 3;
}

message ArmadaMatrixBuffData {
    optional uint32 id = 1;
    optional uint32 num = 2;
    optional bool activated = 3;
}

message ArmadaMatrixChangeLevelReq {
    optional uint32 level = 1;
    optional uint32 cur_schedule_id = 2;

    enum CmdId {
        CMD_ID = 2772;
    }
}


message ArmadaMatrixChangeLevelRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    optional uint32 level = 2;

    enum CmdId {
        CMD_ID = 2773;
    }
}


message ArmadaMatrixChoosePathReq {
    repeated ArmadaMatrixGridPos path_list = 1;

    enum CmdId {
        CMD_ID = 2827;
    }
}


message ArmadaMatrixChoosePathRsp {
    optional Retcode retcode = 1;
    optional ArmadaMatrixGridPos target_pos = 2;

    enum CmdId {
        CMD_ID = 2828;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        INVALID_START = 2;
        INVALID_PATH = 3;
        CONDITION_LACK = 4;
        ENTER_LIMIT = 5;
    }
}


message ArmadaMatrixChooseTemporaryDepositReq {
    repeated ArmadaMatrixChosenDeposit chosen_deposit_list = 1;

    enum CmdId {
        CMD_ID = 2788;
    }
}


message ArmadaMatrixChooseTemporaryDepositRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2789;
    }
}


message ArmadaMatrixChosenDeposit {
    optional uint32 index = 1;
    optional ArmadaMatrixTemporaryDeposit deposit = 2;
}


message ArmadaMatrixConfirmPosReq {
    optional ArmadaMatrixGridPos target_pos = 1;

    enum CmdId {
        CMD_ID = 2829;
    }
}


message ArmadaMatrixConfirmPosRsp {
    optional Retcode retcode = 1;
    optional ArmadaMatrixGridPos cur_pos = 2;

    enum CmdId {
        CMD_ID = 2830;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TARGET_DISMATCH = 2;
        TRIGGER_FAILED = 3;
    }
}

message ArmadaMatrixDialogChooseEventReq {
    optional uint32 select_event_id = 1;

    enum CmdId {
        CMD_ID = 2797;
    }
}

message ArmadaMatrixDialogChooseEventRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2798;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ArmadaMatrixDialogEventNotify {
    optional uint32 dialog_event_id = 1;

    enum CmdId {
        CMD_ID = 2795;
    }
}

enum ArmadaMatrixEventType {
    ARMADA_MATRIX_EVENT_TYPE_ITEM = 1;
    ARMADA_MATRIX_EVENT_TYPE_DEPOSIT = 2;
    ARMADA_MATRIX_EVENT_TYPE_BATTLE = 3;
    ARMADA_MATRIX_EVENT_TYPE_FATIGUE = 4;
    ARMADA_MATRIX_EVENT_TYPE_EXPLORE_POWER = 5;
    ARMADA_MATRIX_EVENT_TYPE_SHOP = 6;
    ARMADA_MATRIX_EVENT_TYPE_OUTER_ITEM = 7;
    ARMADA_MATRIX_EVENT_TYPE_SUPPLY = 8;
}

message ArmadaMatrixExchangeExplorePowerReq {
    optional uint32 stamina = 1;

    enum CmdId {
        CMD_ID = 2758;
    }
}


message ArmadaMatrixExchangeExplorePowerRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    optional uint32 explore_power_added = 2;
    optional uint32 exp_added = 3;
    optional uint32 exp_convert_scoin = 4;

    enum CmdId {
        CMD_ID = 2759;
    }
}


message ArmadaMatrixExitCondition {
    optional uint32 floor_id = 1;
    optional uint32 exit_condition_id = 2;
    optional uint32 progress = 3;
    optional ArmadaMatrixExitConditionStatus status = 4;
}

enum ArmadaMatrixExitConditionStatus {
    ARMADA_MATRIX_EXIT_CONDITION_STATUS_NONE = 0;
    ARMADA_MATRIX_EXIT_CONDITION_STATUS_DOING = 1;
    ARMADA_MATRIX_EXIT_CONDITION_STATUS_FINISH = 2;
}


message ArmadaMatrixExitConditionSyncNotify {
    optional ArmadaMatrixExitCondition exit_condition = 1;

    enum CmdId {
        CMD_ID = 2790;
    }
}

enum ArmadaMatrixExitConditionType {
    ARMADA_MATRIX_EXIT_CONDITION_BOSS = 1;
    ARMADA_MATRIX_EXIT_CONDITION_MONSTER = 2;
    ARMADA_MATRIX_EXIT_CONDITION_ITEM = 3;
    ARMADA_MATRIX_EXIT_CONDITION_TREASURE = 4;
}


message ArmadaMatrixFireBossItemReq {
    optional uint32 level = 1;
    optional ArmadaMatrixGridPos pos = 2;
    optional uint32 item_id = 3;

    enum CmdId {
        CMD_ID = 2814;
    }
}

message ArmadaMatrixFireBossItemRsp {
    optional Retcode retcode = 1;
    optional uint32 explore_add = 2;
    optional uint32 lay_uid = 3;
    optional uint32 boss_left_hp = 4;

    enum CmdId {
        CMD_ID = 2815;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        IS_SELF = 2;
        NO_ITEM = 3;
        BOSS_DEAD = 4;
    }
}

message ArmadaMatrixGetAvatarTeamReq {

    enum CmdId {
        CMD_ID = 2748;
    }
}




message ArmadaMatrixGetAvatarTeamRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    repeated ArmadaMatrixTeamInfo team_list = 2;
    repeated ArmadaMatrixPlayerAvatarInfo avatar_list = 3;
    optional uint32 cur_team_index = 4;

    enum CmdId {
        CMD_ID = 2749;
    }
}

message ArmadaMatrixGetExchangeExplorePowerInfoReq {

    enum CmdId {
        CMD_ID = 2760;
    }
}


message ArmadaMatrixGetExchangeExplorePowerInfoRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    optional uint32 stamina_exchanged = 2;

    enum CmdId {
        CMD_ID = 2761;
    }
}

message ArmadaMatrixGetGenericItemReq {
    repeated uint32 item_id_list = 1;
    repeated uint32 buff_id_list = 2;

    enum CmdId {
        CMD_ID = 2755;
    }
}



message ArmadaMatrixGetGenericItemRsp {
    optional Retcode retcode = 1;
    repeated GenericItemNum item_list = 2;
    repeated ArmadaMatrixBuffData buff_list = 3;

    enum CmdId {
        CMD_ID = 2756;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ArmadaMatrixGetLevelBriefDataReq {

    enum CmdId {
        CMD_ID = 2774;
    }
}



message ArmadaMatrixGetLevelBriefDataRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    repeated ArmadaMatrixLevelBriefData level_data_list = 2;

    enum CmdId {
        CMD_ID = 2775;
    }
}



message ArmadaMatrixGetLocationReq {
    optional ArmadaMatrixLocationType location_type = 1;
    optional uint32 uid = 2;
    optional uint32 level = 3;
    optional ArmadaMatrixGridPos pos = 4;

    enum CmdId {
        CMD_ID = 2819;
    }
}






message ArmadaMatrixGetLocationRsp {
    optional Retcode retcode = 1;
    optional ArmadaMatrixLocationType location_type = 2;
    optional uint32 level = 3;
    optional ArmadaMatrixGridPos pos = 4;
    optional ArmadaMatrixMemberPos player_info = 5;
    optional ArmadaMatrixStageConfig stage_info = 6;
    optional ArmadaMatrixMapInfo map_info = 7;

    enum CmdId {
        CMD_ID = 2820;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        NO_PLAYER = 3;
        NO_MONSTER = 4;
        MONSTER_DEAD = 5;
        NOT_ARMADA_BOSS = 6;
        NOT_JOIN = 7;
    }
}

message ArmadaMatrixGetLockedGridInfoReq {

    enum CmdId {
        CMD_ID = 2784;
    }
}


message ArmadaMatrixGetLockedGridInfoRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2785;
    }
}

message ArmadaMatrixGetMainInfoReq {
    optional uint32 cur_schedule_id = 1;
    optional uint32 level = 2;
    optional bool is_schedule_refresh = 3;

    enum CmdId {
        CMD_ID = 2736;
    }
}







message ArmadaMatrixGetMainInfoRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    optional ArmadaMatrixMapInfo matrix_map_info = 2;
    optional ArmadaMatrixPlayerMainInfo player_main_info = 3;
    optional ArmadaMatrixSettleInfo settle_info = 4;
    optional ArmadaMatrixExitCondition exit_condition = 5;
    repeated ArmadaMatrixLevelBrief level_brief_list = 6;
    optional uint32 map_cycle_id = 7;

    enum CmdId {
        CMD_ID = 2737;
    }
}

message ArmadaMatrixGetOverviewReq {

    enum CmdId {
        CMD_ID = 2782;
    }
}




message ArmadaMatrixGetOverviewRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    optional ArmadaMatrixPlayerOverview player_overview = 2;
    optional ArmadaMatrixArmadaOverview armada_overview = 3;

    enum CmdId {
        CMD_ID = 2783;
    }
}

message ArmadaMatrixGetRandomInfoReq {

    enum CmdId {
        CMD_ID = 2817;
    }
}


message ArmadaMatrixGetRandomInfoRsp {
    optional Retcode retcode = 1;
    repeated ArmadaMatrixStageConfig stage_list = 2;

    enum CmdId {
        CMD_ID = 2818;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message ArmadaMatrixGetRankListReq {

    enum CmdId {
        CMD_ID = 2780;
    }
}



message ArmadaMatrixGetRankListRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    repeated ArmadaMatrixRankItem rank_item_list = 2;

    enum CmdId {
        CMD_ID = 2781;
    }
}

message ArmadaMatrixGetScheduleReq {

    enum CmdId {
        CMD_ID = 2734;
    }
}


message ArmadaMatrixGetScheduleRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    optional uint32 open_time = 2;
    optional uint32 close_time = 3;
    optional uint32 settle_time = 4;
    optional uint32 open_day_time = 5;
    optional uint32 close_day_time = 6;
    optional uint32 group_id = 7;
    optional uint32 schedule_id = 8;

    enum CmdId {
        CMD_ID = 2735;
    }
}

message ArmadaMatrixGetScoreRewardInfoReq {

    enum CmdId {
        CMD_ID = 2778;
    }
}


message ArmadaMatrixGetScoreRewardInfoRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    repeated uint32 reward_granted_id_list = 2;
    repeated uint32 armada_reward_granted_id_list = 3;

    enum CmdId {
        CMD_ID = 2779;
    }
}

message ArmadaMatrixGetTemporaryDepositReq {

    enum CmdId {
        CMD_ID = 2786;
    }
}



message ArmadaMatrixGetTemporaryDepositRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    repeated ArmadaMatrixTemporaryDeposit deposit_list = 2;
    repeated uint32 choosen_idx_list = 3;

    enum CmdId {
        CMD_ID = 2787;
    }
}


message ArmadaMatrixGrantScoreRewardNotify {
    repeated RewardData reward_list = 1;
    optional uint32 id = 2;

    enum CmdId {
        CMD_ID = 2777;
    }
}





message ArmadaMatrixGrid {
    optional ArmadaMatrixGridPos pos = 1;
    optional ArmadaMatrixGridType type = 2;
    optional ArmadaMatrixGridState state = 3;
    optional bool is_visited = 4;
    optional bool is_win = 5;
    optional uint32 preset_id = 6;
    optional uint32 show_type = 7;
    optional ArmadaMatrixArmadaBoss armada_boss = 8;
    optional uint32 expire_time = 9;
}




message ArmadaMatrixGridDetail {
    optional ArmadaMatrixGridPos pos = 1;
    optional ArmadaMatrixStageConfig stage_info = 2;
    optional ArmadaMatrixShopInfo shop_info = 3;
}

message ArmadaMatrixGridPos {
    optional uint32 row_index = 1;
    optional uint32 col_index = 2;
}

enum ArmadaMatrixGridState {
    ARMADA_MATRIX_GRID_STATE_NONE = 0;
    ARMADA_MATRIX_GRID_STATE_FOG = 1;
    ARMADA_MATRIX_GRID_STATE_VISBLE = 2;
}

enum ArmadaMatrixGridType {
    ARMADA_MATRIX_GRID_NONE = 0;
    ARMADA_MATRIX_GRID_EMPTY = 1;
    ARMADA_MATRIX_GRID_BARRIER = 2;
    ARMADA_MATRIX_GRID_START = 3;
    ARMADA_MATRIX_GRID_ITEM = 4;
    ARMADA_MATRIX_GRID_MONSTER = 5;
    ARMADA_MATRIX_GRID_RANDOM = 6;
    ARMADA_MATRIX_GRID_TRAP = 7;
    ARMADA_MATRIX_GRID_SHOP = 8;
    ARMADA_MATRIX_GRID_EXIT = 9;
    ARMADA_MATRIX_GRID_DIALOG = 10;
    ARMADA_MATRIX_GRID_TRANSPORT = 11;
    ARMADA_MATRIX_GRID_QUESTION = 12;
    ARMADA_MATRIX_GRID_INVALID = -1;
}

message ArmadaMatrixInteractNotify {
    optional InteractType type = 1;
    optional uint32 schedule_id = 2;
    optional uint32 interact_uid = 3;
    optional uint32 supply_add = 4;
    optional uint32 explore_add = 5;

    enum CmdId {
        CMD_ID = 2813;
    }
    enum InteractType {
        INTERACT_TYPE_NONE = 0;
        INTERACT_TYPE_SUPPLY = 1;
        INTERACT_TYPE_BOSS = 2;
    }
}

enum ArmadaMatrixItemEffectType {
    ARMADA_MATRIX_ITEM_EFFECT_TYPE_RECOVER_FATIGUE = 1;
    ARMADA_MATRIX_ITEM_EFFECT_TYPE_BUFF = 2;
    ARMADA_MATRIX_ITEM_EFFECT_TYPE_FLARE = 3;
    ARMADA_MATRIX_ITEM_EFFECT_TYPE_SIGNAL_FLARE = 4;
    ARMADA_MATRIX_ITEM_EFFECT_TYPE_EXPLORE_POWER = 5;
    ARMADA_MATRIX_ITEM_EFFECT_TYPE_INTERACT_SUPPLY = 6;
    ARMADA_MATRIX_ITEM_EFFECT_TYPE_INTERACT_BOSS = 7;
}

message ArmadaMatrixItemLay {
    optional uint32 item_id = 1;
    optional uint32 lay_uid = 2;
    optional uint32 lay_time = 3;
}

enum ArmadaMatrixItemSubType {
    ARMADA_MATRIX_ITEM_TYPE_TEAM = 1;
    ARMADA_MATRIX_ITEM_TYPE_AVATAR = 2;
    ARMADA_MATRIX_ITEM_TYPE_MAP = 3;
    ARMADA_MATRIX_ITEM_TYPE_GLOBAL = 4;
    ARMADA_MATRIX_ITEM_TYPE_OTHERS = 5;
}

enum ArmadaMatrixItemType {
    ARMADA_MATRIX_NONE = 0;
    ARMADA_MATRIX_ITEM = 2;
    ARMADA_MATRIX_BUFF = 3;
}


message ArmadaMatrixLeaveMsgSyncNotify {
    optional uint32 id = 1;
    optional ArmadaMatrixGridPos pos = 2;
    optional uint32 msg_idx = 3;
    optional uint32 level = 4;
    optional uint32 map_id = 5;
    optional uint32 uid = 6;

    enum CmdId {
        CMD_ID = 2765;
    }
}

message ArmadaMatrixLevelBrief {
    optional uint32 level = 1;
    optional uint32 map_id = 2;
    optional uint32 buff_id = 3;
}

message ArmadaMatrixLevelBriefData {
    optional uint32 level = 1;
    optional uint32 monster_left = 2;
    optional uint32 treasure_left = 3;
    optional uint32 shop_num = 4;
}


message ArmadaMatrixLevelBriefDataNotify {
    optional ArmadaMatrixLevelBriefData level_data = 1;

    enum CmdId {
        CMD_ID = 2776;
    }
}

enum ArmadaMatrixLocationType {
    ARMADA_MATRIX_LOCATION_NONE = 0;
    ARMADA_MATRIX_LOCATION_PLAYER = 1;
    ARMADA_MATRIX_LOCATION_MONSTER = 2;
}







message ArmadaMatrixMapInfo {
    repeated ArmadaMatrixGrid vision_grid_list = 1;
    optional uint32 cur_level = 2;
    optional ArmadaMatrixGridPos current_pos = 3;
    repeated ArmadaMatrixMemberPos member_pos_list = 4;
    optional uint32 map_id = 5;
    optional uint32 width = 6;
    optional uint32 height = 7;
    optional bool is_all = 8;
    optional uint32 floor_id = 9;
    optional uint32 floor_buff_id = 10;
    repeated ArmadaMatrixMsgPos msg_pos_list = 11;
    optional uint32 item_temp_buff = 12;
    optional bool is_locked = 13;
    repeated uint32 event_temp_buff_list = 14;
    repeated ArmadaMatrixGrid flare_grid_list = 15;
    repeated ArmadaMatrixGridDetail grid_detail_list = 16;
    repeated ArmadaMatrixRandomGrid random_grid_list = 17;
}


message ArmadaMatrixMemberPos {
    optional uint32 uid = 1;
    optional ArmadaMatrixGridPos pos = 2;
    optional uint32 avatar_id = 3;
    optional uint32 cur_level = 4;
    optional uint32 ask_supply_time = 5;
    optional uint32 cur_supply = 6;
    optional uint32 explore_value = 7;
    optional uint32 boom_item_num = 8;
    optional uint32 supply_item_num = 9;
    optional uint32 monster_defeat = 10;
    optional uint32 armada_boss_defeat = 11;
    optional uint32 collect_item_num = 12;
    optional uint32 collect_buff_num = 13;
}

enum ArmadaMatrixMissionMonsterType {
    ARMADA_MATRIX_MISSION_MONSTER_ANY = 0;
    ARMADA_MATRIX_MISSION_MONSTER_LOCAL = 1;
    ARMADA_MATRIX_MISSION_MONSTER_ARMADA = 2;
}

message ArmadaMatrixMonster {
    optional uint32 monster_id = 1;
    optional uint32 num = 2;
}

enum ArmadaMatrixMonsterType {
    ARMADA_MATRIX_MONSTER_TYPE_NONE = 0;
    ARMADA_MATRIX_MONSTER_TYPE_1 = 1;
    ARMADA_MATRIX_MONSTER_TYPE_2 = 2;
    ARMADA_MATRIX_MONSTER_TYPE_3 = 3;
}


message ArmadaMatrixMsgPos {
    optional ArmadaMatrixGridPos pos = 1;
    repeated Message msg_list = 2;
    message Message {
        optional uint32 uid = 1;
        optional uint32 msg_idx = 2;
    }
}

message ArmadaMatrixOuterItem {
    optional uint32 item_id = 1;
    optional uint32 level = 2;
    optional uint32 num = 3;
}


message ArmadaMatrixPlayerAvatarInfo {
    optional uint32 avatar_id = 1;
    optional ArmadaMatrixAvatarState state = 2;
    optional uint32 cur_fatigue = 3;
}


message ArmadaMatrixPlayerAvatarSyncNotify {
    repeated ArmadaMatrixPlayerAvatarInfo avatar_list = 1;

    enum CmdId {
        CMD_ID = 2750;
    }
}

message ArmadaMatrixPlayerMainInfo {
    optional uint32 explore_power = 1;
    optional uint32 explore_value = 2;
    optional uint32 honkai_energy = 3;
    optional uint32 total_explore_value = 4;
    optional uint32 take_fatigue_reward_days = 5;
    optional uint32 cur_supply = 6;
}


message ArmadaMatrixPlayerMainInfoSyncNotify {
    optional ArmadaMatrixPlayerMainInfo player_main_info = 1;

    enum CmdId {
        CMD_ID = 2757;
    }
}

message ArmadaMatrixPlayerOverview {
    optional uint32 monster_defeated = 1;
    optional uint32 boss_defeated = 2;
    optional uint32 honkai_energy = 3;
    optional uint32 treasure_found = 4;
    optional uint32 item_gathered = 5;
    optional uint32 buff_got = 6;
    optional uint32 shop_found = 7;
    optional uint32 region_marked = 8;
    optional uint32 explore_value = 9;
}

enum ArmadaMatrixPresetType {
    ARMADA_MATRIX_PRESET_TYPE_NONE = 0;
    ARMADA_MATRIX_PRESET_TYPE_ARMADA_BOSS = 100;
}



message ArmadaMatrixQuestionNotify {
    optional uint32 level = 1;
    optional ArmadaMatrixGridPos pos = 2;
    optional uint32 question_pool_id = 3;
    repeated Question question_list = 4;

    enum CmdId {
        CMD_ID = 2831;
    }
}




message ArmadaMatrixRandomEvent {
    optional uint32 event_id = 1;
    optional ArmadaMatrixEventType event_type = 2;
    optional int32 param = 3;
    optional ArmadaMatrixTemporaryDeposit deposit = 4;
    optional ArmadaMatrixOuterItem outer_item = 5;
}



message ArmadaMatrixRandomEventNotify {
    optional ArmadaMatrixGridPos pos = 1;
    optional ArmadaMatrixRandomEvent random_event = 2;

    enum CmdId {
        CMD_ID = 2770;
    }
}


message ArmadaMatrixRandomGrid {
    optional ArmadaMatrixGridPos pos = 1;
    optional uint32 grid_type = 2;
    optional uint32 expire_time = 3;
}

message ArmadaMatrixRankItem {
    optional uint32 uid = 1;
    optional uint32 explore_value = 2;
}

message ArmadaMatrixRetcode {

    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_ERROR = 2;
        STAMINA_EXCHANGE_LIMIT = 3;
        STAMINA_LACK = 4;
        EXPLORE_POWER_LIMIT = 5;
        GRID_LOCKED = 6;
        CONDITION_LACK = 7;
        SUPPLY_LACK = 8;
    }
}

enum ArmadaMatrixRewardType {
    ARMADA_MATRIX_REWARD_TYPE_NONE = 0;
    ARMADA_MATRIX_REWARD_TYPE_PERSONAL = 1;
    ARMADA_MATRIX_REWARD_TYPE_ARMADA = 2;
}


message ArmadaMatrixSetAvatarTeamReq {
    optional uint32 index = 1;
    optional ArmadaMatrixTeamInfo team_info = 2;

    enum CmdId {
        CMD_ID = 2746;
    }
}



message ArmadaMatrixSetAvatarTeamRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    optional uint32 index = 2;
    optional ArmadaMatrixTeamInfo team_info = 3;

    enum CmdId {
        CMD_ID = 2747;
    }
}

message ArmadaMatrixSetCurAvatarTeamReq {
    optional uint32 index = 1;

    enum CmdId {
        CMD_ID = 2751;
    }
}


message ArmadaMatrixSetCurAvatarTeamRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    optional uint32 cur_team_index = 2;

    enum CmdId {
        CMD_ID = 2752;
    }
}


message ArmadaMatrixSettleInfo {
    optional uint32 explore_value = 1;
    optional uint32 total_explore_value = 2;
    optional ArmadaMatrixSettleWinner explore_winner = 3;
    optional ArmadaMatrixSettleWinner monster_winner = 4;
    optional ArmadaMatrixSettleWinner honkai_energy_winner = 5;
    optional uint32 floor_id = 6;
    optional uint32 monster_defeated = 7;
    optional uint32 boss_defeated = 8;
    optional uint32 treasure_found = 9;
}

message ArmadaMatrixSettleWinner {
    optional uint32 uid = 1;
    optional uint32 value = 2;
}


message ArmadaMatrixShopBuyReq {
    optional ArmadaMatrixGridPos pos = 1;
    optional uint32 goods_id = 2;

    enum CmdId {
        CMD_ID = 2768;
    }
}

message ArmadaMatrixShopBuyRsp {
    optional Retcode retcode = 1;
    optional uint32 goods_id = 2;
    optional bool is_sold = 3;

    enum CmdId {
        CMD_ID = 2769;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SOLD_OUT = 2;
        LACK_MONEY = 3;
        NO_ARMADA = 4;
    }
}


message ArmadaMatrixShopInfo {
    optional uint32 shop_id = 1;
    repeated DropItem goods_list = 2;
}



message ArmadaMatrixShopSyncNotify {
    optional PlayerMatrixShop shop = 1;
    optional ArmadaMatrixGridPos pos = 2;

    enum CmdId {
        CMD_ID = 2767;
    }
}

enum ArmadaMatrixShopType {
    ARMADA_MATRIX_SHOP_TYPE_GRID = 1;
    ARMADA_MATRIX_SHOP_TYPE_EVENT = 2;
}



message ArmadaMatrixStageBattleNotify {
    optional ArmadaMatrixStageConfig stage_config = 1;
    optional ArmadaMatrixGridPos pos = 2;
    optional uint32 boss_lose_hp_percent = 3;

    enum CmdId {
        CMD_ID = 2745;
    }
}


message ArmadaMatrixStageBeginReq {
    optional ArmadaMatrixGridPos pos = 1;
    repeated uint32 avatar_id_list = 2;

    enum CmdId {
        CMD_ID = 2740;
    }
}



message ArmadaMatrixStageBeginRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    repeated DropItem drop_item_list = 2;

    enum CmdId {
        CMD_ID = 2741;
    }
}



message ArmadaMatrixStageConfig {
    optional uint32 preset_id = 1;
    optional uint32 hard_level = 2;
    repeated ArmadaMatrixMonster monster_list = 3;
    repeated uint32 monster_buff_list = 4;
    optional uint32 discovery_value = 5;
    optional uint32 honkai_energy = 6;
    optional uint32 fund_reward = 7;
    repeated uint32 displayer_drop_list = 8;
    optional uint32 supply_cost = 9;
    optional ArmadaMatrixArmadaBoss armada_boss = 10;
    optional uint32 armada_discovery_value = 11;
}

message ArmadaMatrixStageDropItem {
    optional uint32 matrix_material_id = 1;
    optional uint32 matrix_material_num = 2;
}





message ArmadaMatrixStageEndReq {
    optional ArmadaMatrixGridPos pos = 1;
    optional StageEndStatus end_status = 2;
    repeated StageCheatData cheat_data_list = 3;
    repeated DropItem drop_item_list = 4;
    optional uint32 boss_lose_hp_percent = 5;

    enum CmdId {
        CMD_ID = 2742;
    }
}



message ArmadaMatrixStageEndRsp {
    optional ArmadaMatrixRetcode.Retcode retcode = 1;
    repeated DropItem drop_item_list = 2;
    repeated DropItem matrix_drop_item_list = 3;
    optional uint32 discovery_value = 4;
    optional uint32 honkai_energy = 5;
    optional uint32 fund_reward = 6;

    enum CmdId {
        CMD_ID = 2743;
    }
}

message ArmadaMatrixSyncArmadaInfoNotify {
    optional uint32 schedule_id = 1;
    optional uint32 total_explore_value = 2;

    enum CmdId {
        CMD_ID = 2816;
    }
}


message ArmadaMatrixSyncMemberNotify {
    optional ArmadaMatrixMemberPos member = 1;

    enum CmdId {
        CMD_ID = 2812;
    }
}



message ArmadaMatrixSyncNotify {
    optional ArmadaMatrixMapInfo matrix_map_info = 1;
    optional ArmadaMatrixSyncNotifyType notify_type = 2;
    optional uint32 schedule_id = 3;

    enum CmdId {
        CMD_ID = 2744;
    }
}

enum ArmadaMatrixSyncNotifyType {
    ARMADA_MATRIX_NOTIFY_UNKNOWN = 0;
    ARMADA_MATRIX_NOTIFY_ADVANCE = 1;
    ARMADA_MATRIX_NOTIFY_TRANSPORT = 2;
}

message ArmadaMatrixTakeFatigueRewardReq {

    enum CmdId {
        CMD_ID = 2793;
    }
}

message ArmadaMatrixTakeFatigueRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 reward_num = 2;
    optional uint32 item_id = 3;
    optional uint32 item_count = 4;

    enum CmdId {
        CMD_ID = 2794;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_REWARD = 2;
        NOT_OPEN = 3;
    }
}

message ArmadaMatrixTeamInfo {
    repeated uint32 avatar_id_list = 1;
    optional uint32 index = 2;
}

message ArmadaMatrixTemporaryBuffSyncNotify {
    optional uint32 item_temp_buff = 1;
    repeated uint32 event_temp_buff_list = 2;

    enum CmdId {
        CMD_ID = 2766;
    }
}

message ArmadaMatrixTemporaryDeposit {
    optional uint32 item_id = 1;
    optional uint32 level = 2;
    optional uint32 num = 3;
}


message ArmadaMatrixTransportNotify {
    optional ArmadaMatrixGridPos target_pos = 1;

    enum CmdId {
        CMD_ID = 2796;
    }
}


message ArmadaMatrixTreasure {
    optional uint32 treasure_id = 1;
    optional DropItem treasure_item = 2;
}



message ArmadaMatrixTreasureNotify {
    optional ArmadaMatrixGridPos pos = 1;
    optional ArmadaMatrixTreasure treasure = 2;

    enum CmdId {
        CMD_ID = 2771;
    }
}

enum ArmadaMatrixTreasureType {
    ARMADA_MATRIX_TREASURE_ITEM = 1;
    ARMADA_MATRIX_TREASURE_DEPOSIT = 2;
    ARMADA_MATRIX_TREASURE_OUTER_ITEM = 3;
}

message ArmadaMatrixUseItemNotify {
    optional uint32 id = 1;
    repeated uint32 target_list = 2;
    optional uint32 cur_schedule_id = 3;
    optional uint32 level = 4;
    optional uint32 map_id = 5;

    enum CmdId {
        CMD_ID = 2764;
    }
}

message ArmadaMatrixUseItemReq {
    optional uint32 id = 1;
    repeated uint32 target_list = 2;

    enum CmdId {
        CMD_ID = 2762;
    }
}

message ArmadaMatrixUseItemRsp {
    optional Retcode retcode = 1;
    optional uint32 id = 2;
    repeated uint32 target_list = 3;

    enum CmdId {
        CMD_ID = 2763;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LACK = 2;
        EMPTY_MSG = 3;
        MSG_ERROR = 4;
        POS_ERROR = 5;
        SAME_TEMP_BUFF = 6;
        OUT_EFFECTIVE_RANGE = 7;
        NO_ARMADA = 8;
        FATIGUE_FULL = 9;
        TARGET_SELF = 10;
        HAVE_ANSWER = 11;
        BOSS_DEAD = 12;
        HAVE_USE_ITEM = 13;
    }
}

message ArmadaMatrixUseTempBuffReq {

    enum CmdId {
        CMD_ID = 2791;
    }
}

message ArmadaMatrixUseTempBuffRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2792;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_ALLOW = 2;
        BUFF_USED_UP = 3;
    }
}



message ArmadaMember {
    optional uint32 uid = 1;
    optional ArmadaPosition position = 2;
    optional PlayerFriendBriefData brief_data = 3;
    optional uint32 week_popl = 4;
    optional uint32 total_popl = 5;
    optional uint32 week_fund = 6;
    optional uint32 total_fund = 7;
    optional uint32 week_contribution = 8;
    optional uint32 total_contribution = 9;
}

message ArmadaMemberDiscovery {
    optional uint32 uid = 1;
    optional uint32 week_discovery = 2;
}

message ArmadaOptionalLeader {
    optional uint32 id = 1;
    optional uint32 contribution = 2;
}

message ArmadaPlayerContributionSyncNotify {
    optional uint32 armada_contribution = 1;
    optional uint32 uid = 2;
    optional uint32 week_contribution = 3;
    optional uint32 total_contribution = 4;

    enum CmdId {
        CMD_ID = 2806;
    }
}

message ArmadaPlayerData {
    optional uint32 uid = 1;
    repeated uint32 take_achievement_id_list = 2;
}



message ArmadaPlayerNotify {
    optional ArmadaPlayerNotifyType type = 1;
    optional uint32 target_uid = 2;
    optional ArmadaMember member = 3;
    repeated uint32 member_list = 5;
    optional string new_name = 6;

    enum CmdId {
        CMD_ID = 2681;
    }
}

enum ArmadaPlayerNotifyType {
    ARMADA_PLAYER_NOTIFY_JOIN = 1;
    ARMADA_PLAYER_NOTIFY_QUIT = 2;
    ARMADA_PLAYER_NOTIFY_KICK = 3;
    ARMADA_PLAYER_NOTIFY_DISSOLVE = 4;
    ARMADA_PLAYER_NOTIFY_CHANGE_NAME = 5;
}

enum ArmadaPlayerStatus {
    ARMADA_PLAYER_NOT_JOIN = 1;
    ARMADA_PLAYER_APPLY = 2;
    ARMADA_PLAYER_CHOOSE_CONTACT = 3;
    ARMADA_PLAYER_JOINED = 4;
}

enum ArmadaPosition {
    ARMADA_POSITION_NONE = 0;
    ARMADA_POSITION_LEADER = 1;
    ARMADA_POSITION_VICELEADER = 2;
    ARMADA_POSITION_MEMBER = 3;
}

message ArmadaReunionMission {
    optional uint32 mission_id = 1;
    optional uint32 finish_times = 2;
}


message ArmadaReunionPlayer {
    optional uint32 uid = 1;
    repeated Material material_list = 2;
}



message ArmadaReunionRewardNotify {
    optional ArmadaReunionMission mission = 1;
    optional RewardData reward_data = 2;

    enum CmdId {
        CMD_ID = 2836;
    }
}

message ArmadaSendMailReq {
    optional string content = 1;
    optional string sender = 2;

    enum CmdId {
        CMD_ID = 2689;
    }
}

message ArmadaSendMailRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2690;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_GRANTED = 2;
        NOT_IN_ARMADA = 3;
        FORMAT_ERROR = 4;
        SENSITIVE_WORDS = 5;
        SEND_CD = 6;
    }
}

message ArmadaStageBeginReq {
    repeated uint32 avatar_id_list = 1;
    optional bool is_fight_body = 2;
    optional bool is_mp_mode = 3;

    enum CmdId {
        CMD_ID = 2669;
    }
}

message ArmadaStageBeginRsp {
    optional Retcode retcode = 1;
    optional bool is_fight_body = 2;
    optional bool is_mp_mode = 3;

    enum CmdId {
        CMD_ID = 2670;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        NOT_OPEN = 3;
        BOSS_DEAD = 4;
        FIGHT_INTERVAL = 5;
        NOT_BEGIN = 6;
        AVATAR_ERROR = 7;
        FIGHT_TIMES_LACK = 8;
        BOSS_NO_DEAD = 9;
        HAS_FIGHT = 10;
        LEVEL_LACK = 11;
        FEATURE_CLOSED = 12;
    }
}




message ArmadaStageEndReq {
    optional uint32 boss_damage = 1;
    optional StageEndStatus end_status = 2;
    optional uint32 cheat_type = 3;
    repeated StageCheatData cheat_data_list = 4;
    optional bool is_fight_body = 5;
    optional StageEndReqBody body = 6;

    enum CmdId {
        CMD_ID = 2671;
    }
}



message ArmadaStageEndRsp {
    optional Retcode retcode = 1;
    optional uint32 add_scoin = 2;
    optional StageEndStatus end_status = 3;
    optional bool is_fight_body = 5;
    optional StageEndReqBody body = 6;

    enum CmdId {
        CMD_ID = 2672;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        NOT_OPEN = 3;
        BOSS_DEAD = 4;
        FIGHT_INTERVAL = 5;
        STAGE_ERROR = 6;
        STAGE_FAIL = 7;
        FIGHT_TIMES_LACK = 8;
        BOSS_NO_DEAD = 9;
        HAS_FIGHT = 10;
    }
}

message ArmadaStageFightInfo {
    optional uint32 uid = 1;
    optional uint32 total_damage = 2;
    optional bool is_fight_body = 3;
    optional uint32 kill_reward_material_num = 4;
}

message ArmadaStageScore {
    optional uint32 stage_id = 1;
    optional uint32 score = 2;
}

enum ArmadaStageScoreActivityRewardType {
    ARMADA_STAGE_SCORE_ACTIVITY_REWARD_TYPE_NONE = 0;
    ARMADA_STAGE_SCORE_ACTIVITY_REWARD_TYPE_SELF = 1;
    ARMADA_STAGE_SCORE_ACTIVITY_REWARD_TYPE_ARMADA = 2;
}

message ArmadaStageScorePlayerScore {
    optional uint32 uid = 1;
    optional uint32 score = 2;
    repeated uint32 avatar_list = 3;
}





message ArmadaSystemChatMsg {
    optional ArmadaSystemChatMsgType type = 1;
    optional uint32 uid = 2;
    optional string nickname = 3;
    optional uint32 avatar_id = 4;
    optional uint32 dress_id = 5;
    optional uint32 time = 6;
    optional GachaType gacha_type = 7;
    optional uint32 item_id = 8;
    optional uint32 target_avatar_id = 9;
    optional uint32 mission_id = 10;
    optional uint32 armada_level = 11;
    optional ArmadaCabinType cabin_type = 12;
    optional uint32 cabin_level = 13;
    optional ArmadaPosition position = 14;
    optional uint32 target_uid = 15;
    optional uint32 popl_cost = 16;
    optional string old_name = 17;
    optional string new_name = 18;
    optional string text_map = 19;
}

enum ArmadaSystemChatMsgType {
    ARMADA_CHAT_MSG_GACHA = 1;
    ARMADA_CHAT_MSG_AVATAR_STAR_UP = 2;
    ARMADA_CHAT_MSG_AVATAR_UNLOCK = 3;
    ARMADA_CHAT_MSG_JOIN_ARMADA = 4;
    ARMADA_CHAT_MSG_MISSION_FINISH = 5;
    ARMADA_CHAT_MSG_LEVEL_UP = 6;
    ARMADA_CHAT_MSG_CABIN_BUILD_FINISH = 7;
    ARMADA_CHAT_MSG_CABIN_LEVEL_UP = 8;
    ARMADA_CHAT_MSG_POSITION = 9;
    ARMADA_CHAT_MSG_KICK = 10;
    ARMADA_CHAT_MSG_KEEPUP = 11;
    ARMADA_CHAT_MSG_CANCEL_DISSOLVE = 12;
    ARMADA_CHAT_MSG_CHANGE_NAME = 13;
    ARMADA_CHAT_MSG_TEXT_MAP = 14;
}

message ArmadaWorkshop {
    optional uint32 id = 1;
    optional uint32 level = 2;
}


message AskForMasterOrPupilReq {
    optional MasterPupilType type = 1;
    optional uint32 ask_uid = 2;
    optional uint32 time = 3;

    enum CmdId {
        CMD_ID = 570;
    }
}



message AskForMasterOrPupilRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    optional MasterPupilType type = 2;
    optional uint32 ask_uid = 3;

    enum CmdId {
        CMD_ID = 571;
    }
}


message AsMasterPupilCardReq {
    optional MasterPupilCard card = 1;

    enum CmdId {
        CMD_ID = 566;
    }
}


message AsMasterPupilCardRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    optional uint32 cd_end_time = 2;

    enum CmdId {
        CMD_ID = 567;
    }
}

message AssignRestaurantWorkReq {
    optional uint32 activity_id = 1;
    optional uint32 room_id = 2;
    optional uint32 avatar_id = 3;
    optional uint32 material_id = 4;

    enum CmdId {
        CMD_ID = 5864;
    }
}

message AssignRestaurantWorkRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 room_id = 3;
    optional uint32 avatar_id = 4;
    optional uint32 material_id = 5;

    enum CmdId {
        CMD_ID = 5865;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ROOM_NOT_EXIST = 2;
        ALREADY_ASSIGN = 3;
        AVATAR_WORK_LIMIT = 4;
    }
}

message AssistantFrozen {
    optional uint32 uid = 1;
    optional uint32 left_frozen_time = 2;
    optional uint32 left_assistant_times = 3;
}


message AssistGratuityStageReq {
    optional uint32 stage_unique_id = 1;
    optional GratuityPlayerInfo player_info = 2;
    optional uint32 relation_tag = 3;

    enum CmdId {
        CMD_ID = 4104;
    }
}


message AssistGratuityStageRsp {
    optional Retcode retcode = 1;
    optional GratuityStage stage = 2;
    optional uint32 relation_tag = 3;

    enum CmdId {
        CMD_ID = 4105;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
        STAGE_EXPIRED = 3;
        STAGE_FINISH = 4;
        HAVE_ASSIST = 5;
        PLAYER_FULL = 6;
        ASSIST_FULL = 7;
        IS_SELF = 8;
        ASSIST_STAMINA_LACK = 9;
    }
}

enum AuditOpType {
    AUDIT_OP_NONE = 0;
    AUDIT_OP_CHANGE_NICKNAME = 1;
    AUDIT_OP_CHANGE_DESC = 2;
    AUDIT_OP_CHANGE_ARMADA_NAME = 3;
    AUDIT_OP_CHANGE_ARMADA_BULLETIN = 4;
    AUDIT_OP_CREATE_CHATGROUP = 5;
    AUDIT_OP_CHANGE_CHATGROUP = 6;
    AUDIT_OP_CHANGE_DORM = 7;
    AUDIT_OP_CHANGE_MASTER_PUPIL_CARD = 8;
}

enum AuthkeySignType {
    AUTHKEY_SIGN_TYPE_DEFAULT = 1;
    AUTHKEY_SIGN_TYPE_RSA = 2;
}

enum AutoDeleteType {
    AUTO_DELETE_BINGO = 2;
    AUTO_DELETE_BULLETIN_SCORE = 3;
    AUTO_DELETE_CONTINUOUS_RECHARGE = 4;
    AUTO_DELETE_FARM = 5;
    AUTO_DELETE_FLOP = 6;
    AUTO_DELETE_KINGDOM = 7;
    AUTO_DELETE_LOTTERY = 8;
    AUTO_DELETE_ELF_EQUIP_TALENT_FREE = 9;
    AUTO_DELETE_THEME = 10;
    AUTO_DELETE_RELATION = 11;
    AUTO_DELETE_BBQ = 12;
    AUTO_DELETE_CITY = 13;
    AUTO_DELETE_GRATUITY = 14;
    AUTO_DELETE_MONOPOLY = 15;
    AUTO_DELETE_OVERLAP = 16;
    AUTO_DELETE_RECLAIM = 17;
    AUTO_DELETE_SCRATCH = 18;
    AUTO_DELETE_SEASON = 19;
    AUTO_DELETE_TOWER_RAID = 20;
    AUTO_DELETE_VERSION = 21;
    AUTO_DELETE_GLOBAL_WAR = 22;
    AUTO_DELETE_LOGIN = 23;
    AUTO_DELETE_GENERAL = 24;
    AUTO_DELETE_NINJA = 25;
    AUTO_DELETE_QUESTION = 26;
    AUTO_DELETE_TRADING_CARD = 27;
    AUTO_DELETE_ARMADA_STAGE_SCORE = 28;
    AUTO_DELETE_PICTURE = 29;
    AUTO_DELETE_JIGSAW = 30;
    AUTO_DELETE_ARMADA_REUNION = 31;
    AUTO_DELETE_GARDEN = 32;
    AUTO_DELETE_DROP_LIMIT = 33;
    AUTO_DELETE_RPG_TALE = 34;
    AUTO_DELETE_SANCTUARY = 35;
    AUTO_DELETE_ACTIVITY_REWARD = 36;
    AUTO_DELETE_SLOT_MACHINE = 37;
    AUTO_DELETE_EXAMINATION = 38;
    AUTO_DELETE_SUPPORT = 39;
    AUTO_DELETE_MOSAIC = 40;
    AUTO_DELETE_LOGIN_WISH = 41;
    AUTO_DELETE_TVT = 43;
    AUTO_DELETE_BURDEN_ALLEVIATION = 44;
    AUTO_DELETE_CHATWORLD_BEAST = 45;
    AUTO_DELETE_CHATWORLD_BOX = 46;
    AUTO_DELETE_DREAM = 47;
    AUTO_DELETE_OPENWORLD_AVATAR = 48;
    AUTO_DELETE_GRANT_TICKET = 49;
    AUTO_DELETE_SLG = 50;
    AUTO_DELETE_GLOBAL_POLLING = 51;
    AUTO_DELETE_REWARD_LINE_SCHEDULE = 52;
    AUTO_DELETE_GOD_WAR_TALE = 53;
    AUTO_DELETE_OPENWORLD_HUNT = 54;
    AUTO_DELETE_BUFF_ASSIST = 55;
}




message Avatar {
    optional uint32 avatar_id = 1;
    optional uint32 star = 2;
    optional uint32 level = 3;
    optional uint32 exp = 4;
    optional uint32 fragment = 5;
    optional uint32 weapon_unique_id = 6;
    optional uint32 stigmata_unique_id_1 = 7;
    optional uint32 stigmata_unique_id_2 = 8;
    optional uint32 stigmata_unique_id_3 = 9;
    repeated AvatarSkill skill_list = 10;
    optional uint32 touch_goodfeel = 11;
    optional uint32 today_has_add_goodfeel = 12;
    optional uint32 stage_goodfeel = 13;
    repeated uint32 dress_list = 14;
    optional uint32 dress_id = 15;
    optional AvatarBindEquipMode mode = 17;
    optional AvatarArtifactDetail avatar_artifact = 18;
    optional uint32 sub_star = 19;
}

message AvatarArtifactDetail {
    optional uint32 artifact_id = 1;
    optional uint32 artifact_level = 2;
    optional bool is_artifact_switch_on = 3;
}

message AvatarArtifactLevelUpReq {
    optional uint32 avatar_id = 1;
    optional uint32 artifact_id = 2;

    enum CmdId {
        CMD_ID = 1446;
    }
}



message AvatarArtifactLevelUpRsp {
    optional Retcode retcode = 1;
    optional uint32 avatar_id = 2;
    optional uint32 artifact_id = 3;
    optional AvatarDetailData avatar_detail = 4;
    optional RewardData reward_data = 5;

    enum CmdId {
        CMD_ID = 1447;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_LEVEL_LACK = 2;
        AVATAR_STAR_LACK = 3;
        MATERIAL_LACK = 4;
        FEATURE_CLOSED = 5;
    }
}

message AvatarArtifactSwitch {
    optional uint32 avatar_id = 1;
    optional bool is_artifact_switch_on = 2;
}

message AvatarArtifactUnlockReq {
    optional uint32 avatar_id = 1;
    optional uint32 artifact_id = 2;

    enum CmdId {
        CMD_ID = 1444;
    }
}


message AvatarArtifactUnlockRsp {
    optional Retcode retcode = 1;
    optional uint32 avatar_id = 2;
    optional uint32 artifact_id = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 1445;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_LEVEL_LACK = 2;
        AVATAR_STAR_LACK = 3;
        MATERIAL_LACK = 4;
        FEATURE_CLOSED = 5;
    }
}

enum AvatarAttrType {
    AVATAR_HP = 1;
    AVATAR_SP = 2;
    AVATAR_ATTACK = 3;
    AVATAR_DEFENSE = 4;
    AVATAR_CRITICAL = 5;
}

message AvatarBindEquipData {
    optional uint32 avatar_id = 1;
    optional uint32 weapon_uid = 2;
    repeated uint32 stigmata_uid_list = 3;
}

enum AvatarBindEquipMode {
    AVATAR_BIND_EQUIP_COMMON = 0;
    AVATAR_BIND_EQUIP_EXTRA_STORY = 1;
}

message AvatarBriefInfo {
    optional uint32 avatar_id = 1;
    optional uint32 avatar_level = 2;
    optional uint32 avatar_star = 3;
    optional uint32 weapon_id = 4;
    repeated uint32 stigmata_id_list = 5;
    optional uint32 sub_weapon_id = 6;
    optional uint32 dress_id = 7;
    optional bool is_artifact_switch_on = 8;
}

enum AvatarClassType {
    AVATAR_KIANA = 1;
    AVATAR_MEI = 2;
    AVATAR_BRONYA = 3;
    AVATAR_HIMEKO = 4;
    AVATAR_THERESA = 5;
    AVATAR_FUKA = 6;
    AVATAR_RITA = 7;
    AVATAR_DURANDAL = 8;
    AVATAR_FISCHL = 9;
    AVATAR_PARDOFELIS = 10;
}

message AvatarCostPlusConfig {
    optional uint32 star = 1;
    optional uint32 cost_plus = 2;
}





message AvatarDetailData {
    optional uint32 avatar_id = 1;
    optional uint32 avatar_star = 2;
    optional uint32 avatar_level = 3;
    optional WeaponDetailData weapon = 4;
    optional StigmataDetailData stigmata_1 = 5;
    optional StigmataDetailData stigmata_2 = 6;
    optional StigmataDetailData stigmata_3 = 7;
    repeated AvatarSkillDetailData skill_list = 8;
    optional uint32 dress_id = 9;
    optional uint32 avatar_combat = 10;
    optional AvatarArtifactDetail avatar_artifact = 12;
    optional uint32 avatar_sub_star = 13;
}

message AvatarEquipBuff {
    optional uint32 avatar_id = 1;
    optional string buff_name = 2;
    optional uint32 buff_num = 3;
}

message AvatarEquipSuite {
    optional uint32 suite_id = 1;
    optional uint32 weapon_unique_id = 2;
    optional uint32 stigmata_unique_id_1 = 3;
    optional uint32 stigmata_unique_id_2 = 4;
    optional uint32 stigmata_unique_id_3 = 5;
    optional string suite_name = 6;
}

message AvatarFragment {
    optional uint32 fragment_id = 1;
    optional uint32 num = 2;
}

message AvatarFragmentSwitchData {
    optional uint32 avatar_id = 1;
}

message AvatarFragmentTransformReq {
    optional uint32 id = 1;
    optional uint32 num = 2;

    enum CmdId {
        CMD_ID = 827;
    }
}

message AvatarFragmentTransformRsp {
    optional Retcode retcode = 1;
    optional uint32 return_id = 2;
    optional uint32 return_num = 3;

    enum CmdId {
        CMD_ID = 828;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NEED_SSS = 2;
        LACK = 3;
        FULL = 4;
        FEATURE_CLOSED = 5;
    }
}

enum AvatarID {
    AVATAR_KIANA_PT = 101;
    AVATAR_KIANA_FX = 102;
    AVATAR_KIANA_YN = 103;
    AVATAR_KIANA_QN = 104;
    AVATAR_MEI_CK = 201;
    AVATAR_MEI_WS = 202;
    AVATAR_MEI_DH = 203;
    AVATAR_MEI_LD = 204;
    AVATAR_SAKURA_YS = 211;
    AVATAR_SAKURA_ZF = 212;
    AVATAR_BRONYA_ZP = 301;
    AVATAR_BRONYA_BQ = 302;
    AVATAR_BRONYA_JJ = 303;
    AVATAR_BRONYA_BX = 304;
    AVATAR_HIMEKO_VV = 401;
    AVATAR_HIMEKO_NX = 402;
    AVATAR_HIMEKO_KZ = 403;
    AVATAR_HIMEKO_BZ = 404;
    AVATAR_THERESA_YD = 501;
    AVATAR_THERESA_TP = 502;
    AVATAR_THERESA_FY = 503;
    AVATAR_THERESA_JX = 504;
    AVATAR_RITA_NP = 701;
}

enum AvatarRecommendSource {
    AVATAR_RECOMMEND_SOURCE_NONE = 0;
    AVATAR_RECOMMEND_SOURCE_DB = 1;
    AVATAR_RECOMMEND_SOURCE_DESIGN_DATA = 2;
}

enum AvatarRecommendStyle {
    AVATAR_RECOMMEND_STYLE_NONE = 0;
    AVATAR_RECOMMEND_STYLE_HOT = 1;
    AVATAR_RECOMMEND_STYLE_CHOICE = 2;
    AVATAR_RECOMMEND_STYLE_SINGLE_AVATAR = 3;
}

enum AvatarRecommendType {
    AVATAR_RECOMMEND_NONE = 0;
    AVATAR_RECOMMEND_STAGE = 1;
    AVATAR_RECOMMEND_EXBOSS = 2;
    AVATAR_RECOMMEND_WEEKLY_REPORT_ENDLESS = 3;
    AVATAR_RECOMMEND_WEEKLY_REPORT_EX_BOSS = 4;
    AVATAR_RECOMMEND_WEEKLY_REPORT_ULTRA_ENDLESS = 5;
    AVATAR_RECOMMEND_ULTRA_ENDLESS = 6;
    AVATAR_RECOMMEND_GREEDY = 7;
    AVATAR_RECOMMEND_WEEKLY_REPORT_GREEDY = 8;
}

enum AvatarReviveEnum {
    AVATAR_REVIVE_TIMES_UN_LIMIT = 65535;
}

message AvatarReviveReq {
    optional bool is_retry = 1;
    optional uint32 revive_use_id = 2;

    enum CmdId {
        CMD_ID = 106;
    }
}

message AvatarReviveRsp {
    optional Retcode retcode = 1;
    optional uint32 revive_times = 2;

    enum CmdId {
        CMD_ID = 107;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HCOIN_LACK = 2;
        TIMES_LACK = 3;
        NOT_IN_STAGE = 4;
        MATERIAL_LACK = 5;
    }
}

enum AvatarRoleType {
    AVATAR_ROLE_KIANA = 1;
    AVATAR_ROLE_MEI = 2;
    AVATAR_ROLE_BRONYA = 3;
    AVATAR_ROLE_HIMEKO = 4;
    AVATAR_ROLE_THERESA = 5;
    AVATAR_ROLE_FUKA = 6;
    AVATAR_ROLE_RITA = 7;
    AVATAR_ROLE_TWINS = 8;
    AVATAR_ROLE_SEELE = 9;
    AVATAR_ROLE_DURANDAL = 10;
    AVATAR_ROLE_ASUKA = 11;
    AVATAR_ROLE_FISCHL = 12;
    AVATAR_ROLE_KEQING = 13;
    AVATAR_ROLE_ELYSIA = 14;
    AVATAR_ROLE_MOBIUS = 15;
    AVATAR_ROLE_RAVEN = 16;
    AVATAR_ROLE_PARDOFELIS = 17;
    AVATAR_ROLE_APONIA = 18;
    AVATAR_ROLE_EDEN = 19;
    AVATAR_ROLE_GRISEO = 20;
    AVATAR_ROLE_VILL_V = 21;
    AVATAR_ROLE_LISUSHANG = 22;
    AVATAR_ROLE_SAKURA = 101;
    AVATAR_ROLE_KALLEN = 102;
    AVATAR_ROLE_DLC_MEI = 103;
    AVATAR_ROLE_DLC_ADAM = 104;
    AVATAR_ROLE_DLC_CAROL = 105;
    AVATAR_ROLE_DLC_BRONYA = 106;
    AVATAR_ROLE_DLC_KONG = 107;
}

message AvatarRoll {
    optional uint32 avatar_id = 1;
    optional uint32 progress = 2;
    repeated uint32 has_take_group_list = 3;
    optional bool is_unlock = 4;
}

enum AvatarRollType {
    AVATAR_ROLL_AVATAR = 1;
    AVATAR_ROLL_STIGMATA = 2;
    AVATAR_ROLL_ERROR = 100;
}


message AvatarSkill {
    optional uint32 skill_id = 1;
    repeated AvatarSubSkill sub_skill_list = 2;
}


message AvatarSkillDetailData {
    optional uint32 skill_id = 1;
    repeated AvatarSubSkillDetailData sub_skill_list = 2;
}

message AvatarStarUpReq {
    optional uint32 avatar_id = 1;

    enum CmdId {
        CMD_ID = 29;
    }
}

message AvatarStarUpRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 30;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        FRAGMENT_LACK = 3;
        STAR_FULL = 4;
        FEATURE_CLOSED = 5;
    }
}

message AvatarSubSkill {
    optional uint32 sub_skill_id = 1;
    optional uint32 level = 2;
    optional bool is_mask = 3;
}

message AvatarSubSkillDetailData {
    optional uint32 sub_skill_id = 1;
    optional uint32 level = 2;
    optional bool is_mask = 3;
}

message AvatarSubSkillLevelUpReq {
    optional uint32 avatar_id = 1;
    optional uint32 skill_id = 2;
    optional uint32 sub_skill_id = 3;
    optional bool is_level_up_all = 4;

    enum CmdId {
        CMD_ID = 50;
    }
}

message AvatarSubSkillLevelUpRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 51;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        SKILL_NOT_EXIST = 3;
        SUB_SKILL_NOT_EXIST = 4;
        AVATAR_LEVEL_LACK = 5;
        AVATAR_STAR_LACK = 6;
        SCOIN_LACK = 7;
        SKILL_POINT_LACK = 8;
        MATERIAL_LACK = 9;
        LEVEL_FULL = 10;
    }
}


message AvatarSuite {
    optional ObjSelected avatar = 1;
    optional ObjSelected weapon = 2;
    repeated ObjSelected stigmata_list = 3;
    optional ObjSelected skill = 4;
}





message AvatarSuiteSelection {
    optional AvatarSuiteSelectionStatus status = 1;
    optional AvatarSuiteSelectionSystem sys_id = 2;
    optional uint32 begin_time = 3;
    optional AvatarSuiteSelectionStep cur_step = 4;
    repeated uint32 choice_list = 5;
    optional AvatarSuite avatar_suite = 6;
}


message AvatarSuiteSelectionNotify {
    optional AvatarSuiteSelection avatar_selection = 1;

    enum CmdId {
        CMD_ID = 582;
    }
}

enum AvatarSuiteSelectionStatus {
    SELECTION_NONE = 0;
    SELECTION_ING = 1;
    SELECTION_FINSH = 2;
}

enum AvatarSuiteSelectionStep {
    STEP_NONE = 0;
    STEP_AVATAR = 1;
    STEP_WEAPON = 2;
    STEP_STIGMATA_UP = 3;
    STEP_STIGMATA_MID = 4;
    STEP_STIGMATA_DOWN = 5;
    STEP_SKILL = 6;
}

enum AvatarSuiteSelectionSystem {
    SYSTEM_SEALED_MODE = 1;
}

message AvatarTeam {
    optional uint32 stage_type = 1;
    repeated uint32 avatar_id_list = 2;
}

enum AvatarTeamType {
    AVATAR_TEAM_NORMAL = 1;
    AVATAR_TEAM_VIRTUAL = 2;
    AVATAR_TEAM_DLC = 3;
    AVATAR_TEAM_SC_DLC = 4;
}

enum AvatarType {
    AVATAR_TRIAL_TYPE = 1;
    AVATAR_LIMIT_TYPE = 2;
    AVATAR_FORMAL_TYPE = 3;
}

message BackEquipmentActivity {
    repeated uint32 mainid_list = 1;
    optional uint32 remain_back_times = 2;
}

message BackEquipmentReq {
    optional uint32 unique_id = 1;

    enum CmdId {
        CMD_ID = 3663;
    }
}


message BackEquipmentRsp {
    optional Retcode retcode = 1;
    repeated uint32 unique_id_list = 2;
    repeated Material material_list = 3;
    optional uint32 remain_back_times = 4;

    enum CmdId {
        CMD_ID = 3664;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        CONSUME_ITEM_NOT_EXIST = 3;
        CONSUME_ITEM_IN_USE = 4;
        CONSUME_ITEM_PROTECTED = 5;
        COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 6;
        COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 7;
        EQUIPMENT_NOT_OPEN = 8;
        TIMES_LACK = 9;
        CONSUME_ITEM_IN_FACILITY = 10;
        CONSUME_ITEM_GRAND_KEY = 11;
        CONSUME_ITEM_REPEAT = 12;
        COST_GACHA_TICKET = 13;
        CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 14;
    }
}


message BattleChatParam {
    optional BattleMode battle_mode = 1;
    optional uint32 battle_para = 2;
}

enum BattleMode {
    BATTLE_MODE_NONE = 0;
    BATTLE_MODE_QAVATAR_BATTLE = 1;
}

message BattlePassMission {
    optional uint32 mission_id = 1;
    optional uint32 mission_finish_times = 2;
}

message BattlePassSwitchData {
}

message BattlePassThemeExpTransformNotify {
    optional uint32 add_exp = 1;
    optional uint32 add_theme_exp = 2;

    enum CmdId {
        CMD_ID = 3766;
    }
}

enum BattlePassTicketType {
    BATTLE_PASS_TICKET_NONE = 0;
    BATTLE_PASS_TICKET_NORMAL = 1;
    BATTLE_PASS_TICKET_ADVANCED = 2;
    BATTLE_PASS_TICKET_LUXURY = 3;
}

message BbqActivityCookReq {
    optional uint32 activity_id = 1;
    optional uint32 bonus_level = 2;

    enum CmdId {
        CMD_ID = 4252;
    }
}


message BbqActivityCookRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional RewardData reward_data = 3;
    optional uint32 bbq_level = 4;
    optional uint32 bbq_exp = 5;
    optional uint32 can_use_bbq_count = 6;

    enum CmdId {
        CMD_ID = 4253;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        ITEMS_LACK = 3;
    }
}

message BbqActivityTakeLevelUpRewardReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4254;
    }
}


message BbqActivityTakeLevelUpRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_data_list = 2;
    optional uint32 max_reward_taken_level = 3;

    enum CmdId {
        CMD_ID = 4255;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        NO_REWARD = 3;
    }
}

message BindAccountReq {
    optional uint32 account_type = 1;
    optional string account_uid = 2;
    optional string account_token = 3;
    optional string account_ext = 4;

    enum CmdId {
        CMD_ID = 119;
    }
}

message BindAccountRsp {
    optional Retcode retcode = 1;
    optional uint32 account_type = 2;
    optional string account_uid = 3;

    enum CmdId {
        CMD_ID = 120;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACCOUNT_TYPE_ERROR = 2;
        ACCOUNT_VERIFY_FAILED = 3;
        ACCOUNT_BIND_TO_OTHER_UID = 4;
        REPEAT_BIND = 5;
    }
}

message BindHoyolabAccountReq {
    optional uint32 hoyolab_channel_id = 1;
    optional string hoyolab_account_uid = 2;
    optional string hoyolab_token = 3;

    enum CmdId {
        CMD_ID = 1658;
    }
}

message BindHoyolabAccountRsp {
    optional Retcode retcode = 1;
    optional string hoyolab_account_uid = 2;

    enum CmdId {
        CMD_ID = 1659;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ALREADY_BIND = 2;
        BIND_BY_OTHER = 3;
    }
}

message BingoActivityFlopCardReq {
    optional uint32 activity_id = 1;
    optional uint32 bingo_id = 2;
    optional uint32 card_id = 3;

    enum CmdId {
        CMD_ID = 4159;
    }
}



message BingoActivityFlopCardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 bingo_id = 3;
    optional uint32 card_id = 4;
    repeated RewardData reward_list = 5;
    repeated DropItem drop_item_list = 6;
    optional bool is_all_finished = 7;

    enum CmdId {
        CMD_ID = 4160;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        ITEMS_LACK = 3;
        HAS_FINISED = 4;
        HAS_FLOPED = 5;
    }
}

message BingoActivityResetBingoReq {
    optional uint32 activity_id = 1;
    optional uint32 bingo_id = 2;

    enum CmdId {
        CMD_ID = 4161;
    }
}

message BingoActivityResetBingoRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;

    enum CmdId {
        CMD_ID = 4162;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_TIMES = 2;
        NO_COMPLETE = 3;
        NOT_OPEN = 4;
        ITEMS_LACK = 5;
    }
}

message BingoCard {
    optional uint32 card_id = 1;
    optional BingoCardStatus card_status = 2;

    enum BingoCardStatus {
        CARD_STATUS_WRONG = 0;
        CARD_STATUS_CORRECT = 1;
    }
}

enum BingoCardType {
    BINGO_CARD_WRONG = 0;
    BINGO_CARD_CORRECT = 1;
}


message BingoData {
    optional uint32 bingo_id = 1;
    repeated BingoCard card_list = 2;
    optional uint32 reset_times = 3;
}

enum BonusThemeType {
    BONUS_THEME_TYPE_NONE = 0;
    BONUS_THEME_TYPE_BONUS_SCORE_RATIO = 1;
    BONUS_THEME_TYPE_BONUS_SCORE_FIXED = 2;
    BONUS_THEME_TYPE_BONUS_DROP_PROB = 3;
    BONUS_THEME_TYPE_BONUS_DROP_FIXED = 4;
}


message BossChallengeActivity {
    repeated BossChallengeStage stage_list = 1;
}

message BossChallengeActivityGetStageRankReq {
    optional uint32 activity_id = 1;
    optional uint32 stage_id = 2;

    enum CmdId {
        CMD_ID = 4062;
    }
}

message BossChallengeActivityGetStageRankRsp {
    optional Retcode retcode = 1;
    optional uint32 rank = 2;
    optional uint32 rank_ratio = 3;

    enum CmdId {
        CMD_ID = 4063;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message BossChallengeAvatar {
    optional uint32 avatar_id = 1;
    optional uint32 hp_percent = 2;
    optional uint32 sp_percent = 3;
}

message BossChallengeScDLCStatus {
    optional uint32 sc_dlc_fever_score = 1;
    optional uint32 sc_dlc_climax_score = 2;
}



message BossChallengeStage {
    optional uint32 stage_id = 1;
    optional uint32 unlock_time = 2;
    optional uint32 max_reward_idx = 3;
    optional uint32 cur_floor = 4;
    optional uint32 cur_stage_cost_time = 5;
    optional uint32 min_stage_cost_time = 6;
    repeated BossChallengeAvatar avatar_list = 7;
    optional BossChallengeScDLCStatus sc_dlc_status = 8;
}

message BossRushBuff {
    optional uint32 pool_id = 1;
    optional uint32 buff_id = 2;
}


message BoxGachaData {
    optional BoxGachaDisplayData box_gacha_data = 2;
    optional uint32 ticket_hcoin_cost = 3;
    optional uint32 ticket_material_id = 4;
    optional uint32 cost_material_id = 5;
    optional uint32 cost_material_num = 6;
    optional bool is_enable_baodi = 7;
    optional uint32 max_gacha_times = 10;
    optional uint32 gacha_times = 11;
}



message BoxGachaDisplayData {
    repeated BoxGachaItemData item_list = 1;
    repeated GachaItem show_list = 2;
    optional uint32 pre_gacha_id = 3;
    optional string web_link = 4;
    optional uint32 link_type = 5;
    optional string link_para = 6;
    optional string link_para_str = 7;
}

message BoxGachaItemData {
    optional uint32 id = 1;
    optional uint32 total_num = 2;
    optional uint32 gacha_num = 3;
    optional uint32 item_num_per_drop = 4;
}

enum BuffAcquireType {
    BUFF_ACQUIRE_GOBACK = 1;
    BUFF_ACQUIRE_ITEMUSE = 3;
}




message BuffAssistActivity {
    optional uint32 activity_id = 1;
    optional uint32 buff_schedule_id = 2;
    optional BuffAssistBuffPool wait_select_buff_pool = 3;
    repeated BuffAssistBuffPool produce_buff_pool_list = 4;
    repeated BuffAssistPlayerBuffSlot buff_slot_list = 5;
    optional uint32 refresh_buff_pool_times = 6;
    optional uint32 cur_stage_group_id = 7;
    optional uint32 left_select_buff_times = 8;
    repeated BuffAssistHistory history_list = 9;
    optional uint32 assist_level = 10;
    optional uint32 assist_num = 11;
    optional uint32 be_assisted_num = 12;
    optional uint32 publish_buff_pool_times = 13;
}


message BuffAssistBuffPool {
    optional uint32 pool_id = 1;
    optional uint32 unique_id = 2;
    optional uint32 producer_uid = 3;
    optional string producer_nickname = 4;
    repeated BuffAssistBuffSlot buff_slot_list = 5;
    optional uint32 expire_time = 6;
    repeated uint32 assist_word_id_list = 7;
    optional uint32 buff_schedule_id = 8;
    optional uint32 producer_type = 9;
    optional uint32 producer_head_id = 10;
    optional uint32 producer_assist_level = 11;
}

enum BuffAssistBuffProducerType {
    BUFF_ASSIST_BUFF_PRODUCER_PLAYER = 1;
    BUFF_ASSIST_BUFF_PRODUCER_NPC = 2;
    BUFF_ASSIST_BUFF_PRODUCER_ROBOT = 3;
}

message BuffAssistBuffSlot {
    optional uint32 slot_id = 1;
    optional uint32 buff_id = 2;
    optional bool is_used = 3;
}

message BuffAssistGetActivityReq {

    enum CmdId {
        CMD_ID = 5941;
    }
}


message BuffAssistGetActivityRsp {
    optional Retcode retcode = 1;
    optional BuffAssistActivity activity = 2;

    enum CmdId {
        CMD_ID = 5942;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message BuffAssistHistory {
    optional uint32 assist_type = 1;
    optional string peer_nickname = 2;
    optional uint32 peer_assist_level = 3;
    optional uint32 assist_stage_id = 4;
    repeated uint32 assist_word_id_list = 5;
}

message BuffAssistPlayerBuffSlot {
    optional uint32 slot_id = 1;
    optional uint32 buff_id = 2;
    optional bool is_replace = 3;
}


message BuffAssistPublishBuffPoolReq {
    optional uint32 pool_id = 1;
    repeated uint32 assist_word_id_list = 2;
    optional BuffAssistBuffPool buff_pool = 3;
    optional bool is_anonymous = 4;

    enum CmdId {
        CMD_ID = 5947;
    }
}

message BuffAssistPublishBuffPoolRsp {
    optional Retcode retcode = 1;
    optional uint32 pool_id = 2;

    enum CmdId {
        CMD_ID = 5948;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        ASSIST_WORD_ERROR = 3;
        POOL_ERROR = 4;
        BUFF_SCHEDULE_ERROR = 5;
        BUFF_POOL_FULL = 6;
        LACK_TIMES = 7;
        REPEATED_PUBLISH = 8;
    }
}


message BuffAssistRecvStageAssistInfoNotify {
    optional uint32 activity_id = 1;
    optional BuffAssistStageAssistInfo assist_info = 2;

    enum CmdId {
        CMD_ID = 5950;
    }
}

message BuffAssistRefreshWaitSelectBuffPoolReq {

    enum CmdId {
        CMD_ID = 5943;
    }
}


message BuffAssistRefreshWaitSelectBuffPoolRsp {
    optional Retcode retcode = 1;
    optional BuffAssistBuffPool buff_pool = 2;

    enum CmdId {
        CMD_ID = 5944;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        NO_VALID_POOL = 3;
        REFRESH_TIMES_LACK = 4;
        SYSTEM_BUSY = 5;
    }
}

message BuffAssistSelectBuffReq {
    optional uint32 buff_slot_id = 1;
    optional uint32 wait_select_buff_slot_id = 2;

    enum CmdId {
        CMD_ID = 5945;
    }
}

message BuffAssistSelectBuffRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5946;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        NO_BUFF = 3;
        BUFF_SLOT_ERROR = 4;
        BUFF_SLOT_REPLACED = 5;
        WAIT_SELECT_BUFF_SLOT_ERROR = 6;
        SELECT_TIMES_LACK = 7;
        BUFF_SLOT_LOCKED = 8;
    }
}


message BuffAssistStageAssistInfo {
    optional uint32 producer_uid = 1;
    optional uint32 peer_uid = 2;
    optional uint32 peer_assist_level = 3;
    optional uint32 assist_stage_id = 4;
    repeated uint32 assist_word_id_list = 5;
    repeated BuffAssistBuffSlot buff_slot_list = 6;
    optional uint32 buff_pool_unique_id = 7;
}


message BuffAssistStageEndNotify {
    optional uint32 stage_id = 1;
    repeated BuffAssistBuffPool cur_stage_buff_pool_list = 2;

    enum CmdId {
        CMD_ID = 5949;
    }
}

enum BuffAssistType {
    BUFF_ASSIST_PRODUCER = 1;
    BUFF_ASSIST_CONSUMER = 2;
}

message BuffEffect {
    optional uint32 effect_id = 1;
    optional uint32 end_time = 2;
    optional uint32 max_during = 3;
    optional uint32 total_contri_num = 4;
}

enum BuffEffectType {
    BUFF_EFFECT_COMMANDER_EXP = 1;
    BUFF_EFFECT_AVATAR_EXP = 2;
    BUFF_EFFECT_SCOIN = 3;
    BUFF_EFFECT_NEWBIE = 4;
    BUFF_EFFECT_GOBACK = 5;
}

enum BuffEffectUseType {
    BUFF_EFFECT_USE_STAGE = 1;
    BUFF_EFFECT_USE_MISSION = 2;
    BUFF_EFFECT_USE_VIRTUAL_EQUIPMENT = 3;
}

message Bulletin {
    optional uint32 id = 1;
    optional uint32 type = 2;
    optional uint32 weight = 3;
    optional string title_button = 4;
    optional string title = 5;
    optional string banner_path = 6;
    optional string event_date_str = 7;
    optional string content = 8;
    optional uint32 mark = 9;
    optional uint32 begin_time = 10;
    optional uint32 end_time = 11;
    optional uint32 update_time = 12;
    optional uint32 show_config_id = 13;
}

message BulletinActivityConfig {
    optional uint32 activity_id = 1;
    optional uint32 activity_type = 2;
    optional uint32 begin_time = 3;
    optional uint32 end_time = 4;
    optional uint32 bulletin_id = 5;
    repeated uint32 mission_ids = 6;
    repeated uint32 type_param_list = 7;
    optional string type_param_str = 8;
    optional uint32 min_player_level = 9;
    optional uint32 max_player_level = 10;
    repeated uint32 item_list = 11;
    optional string title_name = 12;
    optional string title_image = 13;
    optional string image_path = 14;
    optional string link_button = 15;
    optional string description = 16;
    optional uint32 weight = 17;
    optional string background_path = 18;
    optional string text_image_path = 19;
    repeated uint32 currency_list = 20;
    optional string unlock_param_str = 21;
}

enum BulletinActivityType {
    BULLETIN_ACTIVITY_TYPE_NONE = 0;
    BULLETIN_ACTIVITY_TYPE_MOSAIC = 1;
    BULLETIN_ACTIVITY_TYPE_GACHA = 2;
    BULLETIN_ACTIVITY_TYPE_SHOP = 3;
    BULLETIN_ACTIVITY_TYPE_MISSION = 4;
    BULLETIN_ACTIVITY_TYPE_BULLETIN = 5;
    BULLETIN_ACTIVITY_TYPE_CITYACTIVITY = 6;
    BULLETIN_ACTIVITY_TYPE_NEWROLE = 7;
    BULLETIN_ACTIVITY_TYPE_GACHA_TIMELINE = 8;
    BULLETIN_ACTIVITY_TYPE_ACTIVITY_TIMELINE = 9;
    BULLETIN_ACTIVITY_TYPE_FLOP_CARD = 10;
    BULLETIN_ACTIVITY_TYPE_BINGO = 11;
    BULLETIN_ACTIVITY_TYPE_SCORE = 12;
    BULLETIN_ACTIVITY_TYPE_RELATION = 13;
    BULLETIN_ACTIVITY_TYPE_WEB = 14;
    BULLETIN_ACTIVITY_TYPE_LOTTERY_DRAW_NUMBER = 15;
    BULLETIN_ACTIVITY_TYPE_LOTTERY_TAKE_REWARD = 16;
    BULLETIN_ACTIVITY_TYPE_CONTINUOUS_RECHARGE = 17;
    BULLETIN_ACTIVITY_TYPE_SUPER_SIGN_IN = 18;
    BULLETIN_ACTIVITY_TYPE_OVERLAP = 19;
    BULLETIN_ACTIVITY_TYPE_REWARD_OVERVIEW = 20;
    BULLETIN_ACTIVITY_TYPE_SCRATCH_TICKET = 21;
    BULLETIN_ACTIVITY_TYPE_BBQ = 22;
    BULLETIN_ACTIVITY_TYPE_PICTURE = 23;
    BULLETIN_ACTIVITY_TYPE_JIGSAW = 24;
    BULLETIN_ACTIVITY_TYPE_REUNION = 25;
    BULLETIN_ACTIVITY_TYPE_GIFT = 26;
    BULLETIN_ACTIVITY_TYPE_SLOT_MACHINE = 27;
    BULLETIN_ACTIVITY_TYPE_RAFFLE = 28;
    BULLETIN_ACTIVITY_TYPE_LOGIN_REWARD = 29;
    BULLETIN_ACTIVITY_TYPE_LOGIN_WISH = 30;
    BULLETIN_ACTIVITY_TYPE_WEBVIEW = 31;
    BULLETIN_ACTIVITY_TYPE_ALLEVIATION = 32;
    BULLETIN_ACTIVITY_TYPE_SHOW_PICTURE = 33;
    BULLETIN_ACTIVITY_TYPE_SHOW_MAIN_EVENT_INFO = 34;
    BULLETIN_ACTIVITY_TYPE_REUNION_COOK = 35;
    BULLETIN_ACTIVITY_TYPE_REUNION_TIMELINE = 36;
    BULLETIN_ACTIVITY_TYPE_DREAM = 37;
    BULLETIN_ACTIVITY_TYPE_SPACESHIP_GIFT = 38;
    BULLETIN_ACTIVITY_TYPE_MISSION_THEME = 39;
    BULLETIN_ACTIVITY_TYPE_RECHARGE_ADD_UP = 41;
    BULLETIN_ACTIVITY_TYPE_NEW_GIFT = 42;
    BULLETIN_ACTIVITY_TYPE_ANNIVERSARY_GIFT = 43;
    BULLETIN_ACTIVITY_TYPE_DATA_REFACTOR = 44;
    BULLETIN_ACTIVITY_TYPE_OW_CHAPTER = 45;
    BULLETIN_ACTIVITY_TYPE_PLAYER_LEVEL_LOCK = 46;
    BULLETIN_ACTIVITY_TYPE_PV_LOGIN = 47;
}

message BulletinMission {
    optional uint32 mission_id = 1;
    repeated BulletinMissionCycle cycle_list = 2;
    message BulletinMissionCycle {
        optional uint32 cycle_id = 1;
        optional uint32 begin_time = 2;
        optional uint32 end_time = 3;
    }
}


message BulletinMissionGroup {
    optional uint32 activity_id = 1;
    repeated BulletinMission mission_list = 2;
}

message BulletinScoreActivity {
    optional uint32 activity_id = 1;
    optional uint32 score = 2;
    repeated uint32 has_take_reward_list = 3;
    repeated uint32 has_take_reward_progress_list = 4;
}

message BurdenAlleviation {
    optional uint32 alleviation_id = 1;
    optional uint32 show_begin_time = 2;
    optional uint32 show_end_time = 3;
    optional uint32 begin_time = 4;
    optional uint32 end_time = 5;
    optional uint32 alleviate_times = 6;
}


message BurdenAlleviationActivity {
    optional uint32 cur_schedule_id = 1;
    repeated BurdenAlleviation alleviation_list = 2;
}

enum BurdenAlleviationType {
    BURDEN_ALLEVIATION_NONE = 0;
    BURDEN_ALLEVIATION_EX_BOSS = 1;
    BURDEN_ALLEVIATION_WEEKDAY = 2;
    BURDEN_ALLEVIATION_RPG_TALE = 3;
    BURDEN_ALLEVIATION_RAID = 4;
    BURDEN_ALLEVIATION_DAILY_MP = 5;
    BURDEN_ALLEVIATION_GRANT_REWARD = 6;
    BURDEN_ALLEVIATION_MISSION = 7;
}

message BuyBattlePassLevelReq {
    optional uint32 target_level = 1;
    optional uint32 hcoin_cost = 2;

    enum CmdId {
        CMD_ID = 3756;
    }
}

message BuyBattlePassLevelRsp {
    optional Retcode retcode = 1;
    optional uint32 hcoin_cost = 2;

    enum CmdId {
        CMD_ID = 3757;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HCOIN_LACK = 3;
        LEVEL_ERROR = 4;
        HCOIN_ERROR = 5;
        FEATURE_CLOSED = 6;
    }
}

message BuyBattlePassThemeLevelReq {
    optional uint32 target_level = 1;
    optional uint32 hcoin_cost = 2;

    enum CmdId {
        CMD_ID = 3764;
    }
}

message BuyBattlePassThemeLevelRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3765;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HCOIN_LACK = 3;
        LEVEL_ERROR = 4;
        HCOIN_ERROR = 5;
        FEATURE_CLOSED = 6;
    }
}


message BuyBattlePassTicketReq {
    optional BattlePassTicketType type = 1;

    enum CmdId {
        CMD_ID = 3752;
    }
}


message BuyBattlePassTicketRsp {
    optional Retcode retcode = 1;
    repeated RewardData advanced_reward_list = 2;
    repeated RewardData luxury_reward_list = 3;

    enum CmdId {
        CMD_ID = 3753;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        TYPE_ERROR = 3;
        HAS_GOT = 4;
        LACK_MCOIN = 5;
        FEATURE_CLOSED = 6;
    }
}


message BuyFurnitureReq {
    repeated DepotFurniture furniture_list = 1;

    enum CmdId {
        CMD_ID = 621;
    }
}

message BuyFurnitureRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 622;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LOCK = 2;
        HCOIN_LACK = 3;
        SCOIN_LACK = 4;
        MATERIAL_LACK = 5;
        KEEP_LIMIT = 6;
    }
}


message BuyGoodsCost {
    optional uint32 hcoin_cost = 1;
    optional uint32 scoin_cost = 2;
    optional uint32 mcoin_cost = 3;
    repeated Material cost_item_list = 4;
}

message BuyGoodsReq {
    optional uint32 shop_id = 1;
    optional uint32 goods_id = 2;
    optional uint32 coupon_material_id = 3;
    optional uint32 coupon_num = 4;
    optional uint32 mcoin_coupon_material_id = 5;
    optional uint32 goods_num = 6;
    optional uint32 gift_pack_select_reward_id = 7;
    optional uint32 discount_save_num = 8;

    enum CmdId {
        CMD_ID = 203;
    }
}

message BuyGoodsRsp {
    optional Retcode retcode = 1;
    optional uint32 shop_id = 2;
    optional uint32 goods_id = 3;
    optional uint32 goods_buy_times = 4;
    optional uint32 item_id = 5;
    optional uint32 level = 6;
    optional uint32 num = 7;
    optional uint32 gift_pack_select_reward_id = 8;

    enum CmdId {
        CMD_ID = 204;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        GOODS_NOT_EXIST = 2;
        BUY_TIMES_LACK = 3;
        MONEY_LACK = 4;
        EQUIPMENT_FULL = 5;
        SHOP_CLOSE = 6;
        SHOP_OVERDUE = 7;
        GIFT_GOODS_EFFECT = 8;
        GOODS_LOCKED = 9;
        COUPON_ERROR = 10;
        COUPON_LACK = 11;
        FEATURE_CLOSED = 12;
        MCOIN_LIMIT = 13;
        GLOBAL_GOODS_NUM_LIMIT = 14;
        NOT_IN_DISCOUNT = 15;
        IN_DISCOUNT = 16;
        DISCOUNT_ERROR = 17;
    }
}

message BuyProductReq {
    optional string name = 1;
    optional uint32 price = 2;
    optional string currency_code = 3;
    optional string format_price = 4;

    enum CmdId {
        CMD_ID = 805;
    }
}

message BuyProductRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 806;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        DEVICE_ERROR = 2;
        PRODUCT_INVALID = 3;
        TIMES_LIMIT = 4;
    }
}


message Cabin {
    optional uint32 type = 1;
    optional uint32 level = 2;
    optional uint32 extend_grade = 3;
    optional uint32 level_up_end_time = 4;
    repeated CabinTech tech_list = 5;
}

message CabinLevel {
    optional uint32 cabin_type = 1;
    optional uint32 level = 2;
    optional uint32 extend_grade = 3;
}

message CabinTech {
    optional int32 pos_x = 1;
    optional int32 pos_y = 2;
}


message CabinTechAddAttr {
    optional AvatarAttrType attr_type = 1;
    optional float add_ratio = 2;
}

enum CabinTechEffectType {
    CABIN_TECH_ADD_AVATAR_ATTR = 1;
    CABIN_TECH_ADD_VENTURE_MAX_NUM = 2;
    CABIN_TECH_ADD_PROCESS_VENTURE_MAX_NUM = 3;
    CABIN_TECH_ADD_REFRESH_VENTURE_ATTR = 4;
    CABIN_TECH_ADD_FRIEND_NUM = 5;
    CABIN_TECH_DISJOIN_EQUIPMENT = 6;
    CABIN_TECH_ADD_COLLECT_SPEED = 7;
    CABIN_TECH_ADD_COLLECT_STORAGE = 8;
    CABIN_TECH_ADD_COLLECT_EXTRA_PERCENT = 9;
    CABIN_TECH_ADD_COLLECT_EXTRA_RATE = 10;
    CABIN_TECH_ADD_SKILL_POINT_LIMIT = 11;
    CABIN_TECH_ADD_COLLECT_EQUIPMENT_DROP = 12;
    CABIN_TECH_ADD_COLLECT_EQUIPMENT_PACKAGE_NUM = 13;
    CABIN_TECH_SUB_COLLECT_EQUIPMENT_TIME = 14;
}

enum CabinType {
    CABIN_POWER = 1;
    CABIN_ENHANCE_KIANA = 2;
    CABIN_COLLECT = 3;
    CABIN_MISC = 4;
    CABIN_VENTURE = 5;
    CABIN_ENHANCE_MEI = 6;
    CABIN_ENHANCE_BRONYA = 7;
    CABIN_ENHANCE_HIMEKO = 8;
    CABIN_ENHANCE_THERESA = 9;
    CABIN_ENHANCE_FUKA = 10;
}

message CancelAdventureQuestReq {
    optional uint32 pool_id = 1;

    enum CmdId {
        CMD_ID = 3922;
    }
}

message CancelAdventureQuestRsp {
    optional Retcode retcode = 1;
    optional uint32 pool_id = 2;

    enum CmdId {
        CMD_ID = 3923;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_SELECTED = 2;
        OVER_TIME = 3;
    }
}

message CancelApplyArmadaReq {
    optional uint32 armada_id = 1;

    enum CmdId {
        CMD_ID = 2629;
    }
}

message CancelApplyArmadaRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2630;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message CancelDissolveArmadaReq {

    enum CmdId {
        CMD_ID = 2683;
    }
}

message CancelDissolveArmadaRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2684;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_GRANTED = 2;
        NOT_IN_ARMADA = 3;
    }
}

message CancelGratuityStageReq {
    optional uint32 stage_unique_id = 1;

    enum CmdId {
        CMD_ID = 4106;
    }
}

message CancelGratuityStageRsp {
    optional Retcode retcode = 1;
    optional uint32 stage_unique_id = 2;

    enum CmdId {
        CMD_ID = 4107;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACCEPTOR = 2;
    }
}


message CancelLevelUpArmadaCabinReq {
    optional ArmadaCabinType type = 1;
    optional uint32 cabin_id = 2;

    enum CmdId {
        CMD_ID = 2633;
    }
}

message CancelLevelUpArmadaCabinRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2634;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CABIN_NOT_IN_LEVELUP = 2;
        NOT_GRANTED = 3;
        NOT_IN_ARMADA = 4;
        NO_OWNERSHIP = 5;
    }
}

message CancelRestaurantWorkReq {
    optional uint32 activity_id = 1;
    optional uint32 room_id = 2;

    enum CmdId {
        CMD_ID = 5866;
    }
}

message CancelRestaurantWorkRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 room_id = 3;

    enum CmdId {
        CMD_ID = 5867;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ROOM_NOT_EXIST = 2;
        WORK_NOT_BEGIN = 3;
    }
}

message CancelRoomMatchReq {

    enum CmdId {
        CMD_ID = 3167;
    }
}

message CancelRoomMatchRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3168;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_MATCH = 2;
        TOO_FREQUENT = 3;
    }
}

message CancelWareHouseDemandReq {

    enum CmdId {
        CMD_ID = 2651;
    }
}

message CancelWareHouseDemandRsp {
    optional Retcode retcode = 1;
    optional uint32 demand_id = 2;
    optional bool is_auto_cancel = 3;

    enum CmdId {
        CMD_ID = 2652;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        STATUS_ERROR = 3;
    }
}

message CardProductInfo {
    optional string product_name = 1;
    optional uint32 expire_time = 2;
    optional uint32 reward_num = 3;
    optional uint32 hcoin = 4;
    optional uint32 take_reward_days = 5;
    optional uint32 last_daily_reward_time = 6;
    optional uint32 bonus_need_days = 7;
    optional uint32 bonus_hcoin = 8;
    optional uint32 bonus_max_save_days = 9;
    optional uint32 card_left_days = 10;
}

message CardProductReward {
    optional string product_name = 1;
    optional uint32 hcoin = 2;
    optional uint32 take_reward_days = 3;
}

enum CGType {
    CG_NONE = 0;
    CG_START = 1;
    CG_SEVEN_CHAPTER = 2;
}


message ChallengeMissionData {
    optional bool is_unlock = 1;
    repeated ChallengeMissionStep step_list = 2;
}

message ChallengeMissionStep {
    optional uint32 step_id = 1;
    optional StepStatus status = 2;
    optional bool has_take_bonus = 3;

    enum StepStatus {
        UNLOCK = 0;
        DOING = 1;
        REWARDING = 2;
        FINISH = 3;
    }
}


message ChallengeModeArea {
    optional uint32 area_id = 1;
    repeated ChallengeModeAvatar avatar_list = 2;
    repeated uint32 weapon_uid_list = 3;
    repeated uint32 stigmata_uid_list = 4;
}

message ChallengeModeAvatar {
    optional uint32 avatar_id = 1;
    optional uint32 hp_percent = 2;
    optional uint32 sp_percent = 3;
    optional uint32 last_recover_time = 4;
    optional bool is_die = 5;
}


message ChallengeStepCompensation {
    optional uint32 compensation_id = 1;
    optional bool is_take_compensation = 2;
    repeated StepCompensation new_challenge_step_compensation_list = 3;
    repeated StepCompensation old_challenge_step_compensation_list = 4;
    repeated StepCompensation mainline_step_compensation_list = 5;
}



message ChallengeWarActivity {
    repeated GeneralActivityStageGroupScheduleInfo stage_group_schedule_list = 1;
    repeated StageAvatarTeam team_list = 2;
    repeated ChallengeWarStage stage_list = 3;
    message StageAvatarTeam {
        optional uint32 stage_id = 1;
        repeated uint32 avatar_id_list = 2;
        repeated uint32 support_avatar_id_list = 3;
    }
}


message ChallengeWarActivityFinishFloorReq {
    optional uint32 stage_id = 1;
    optional uint32 floor = 2;
    optional uint32 score = 3;
    repeated StageCheatData cheat_data_list = 4;

    enum CmdId {
        CMD_ID = 4058;
    }
}

message ChallengeWarActivityFinishFloorRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4059;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_CUR_FLOOR = 2;
    }
}

message ChallengeWarStage {
    optional uint32 stage_id = 1;
    repeated StageFloorScore floor_score_list = 2;
    optional uint32 max_finish_floor = 3;
    message StageFloorScore {
        optional uint32 floor = 1;
        optional uint32 score = 2;
    }
}

message ChallengeWarUpdateTeamReq {
    optional uint32 stage_id = 1;
    repeated uint32 avatar_id_list = 2;
    repeated uint32 support_avatar_id_list = 3;

    enum CmdId {
        CMD_ID = 4054;
    }
}

message ChallengeWarUpdateTeamRsp {
    optional Retcode retcode = 1;
    optional uint32 stage_id = 2;

    enum CmdId {
        CMD_ID = 4055;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_REPEATED = 2;
        AVATAR_NOT_EXIST = 3;
    }
}

message ChangeArmadaNameReq {
    optional string name = 1;
    optional bool is_scoin_lack = 2;
    optional bool is_hcoin_lack = 3;

    enum CmdId {
        CMD_ID = 2691;
    }
}

message ChangeArmadaNameRsp {
    optional Retcode retcode = 1;
    optional string name = 2;
    optional string old_name = 3;
    optional string audit_name = 4;
    optional bool is_change_name_free = 5;
    optional uint32 cd_end_time = 6;

    enum CmdId {
        CMD_ID = 2692;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SCOIN_LACK = 2;
        HCOIN_LACK = 3;
        NAME_REPEAT = 4;
        NAME_FORMAT_ERROR = 5;
        NAME_SENSITIVE_WORDS = 6;
        NOT_IN_ARMADA = 7;
        POSITION_LIMIT = 8;
        IN_CD = 9;
        IN_AUDIT = 10;
    }
}

message ChangeFriendRemarkSwitchData {
}

message ChangeGodWarChallengeSupportAvatarReq {
    optional uint32 god_war_id = 1;
    optional uint32 tale_id = 2;
    repeated uint32 support_avatar_id_list = 3;
    optional uint32 extra_item_id = 4;
    optional uint32 assistant_extra_item_id = 5;

    enum CmdId {
        CMD_ID = 0;
    }
}




message ChangePlayerCardReq {
    optional PlayerCardType type = 1;
    repeated PlayerCardSlot slot_list = 2;
    optional PlayerCardMsgConfig msg_config = 3;

    enum CmdId {
        CMD_ID = 482;
    }
}




message ChangePlayerCardRsp {
    optional Retcode retcode = 1;
    optional PlayerCardType type = 2;
    repeated PlayerCardSlot slot_list = 3;
    optional PlayerCardMsgConfig msg_config = 4;

    enum CmdId {
        CMD_ID = 483;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ChangeSecurityPasswordReq {
    optional string old_password = 1;
    optional string new_password = 2;

    enum CmdId {
        CMD_ID = 5025;
    }
}


message ChangeSecurityPasswordRsp {
    optional Retcode retcode = 1;
    optional SecurityPasswordInfo security_password_info = 2;

    enum CmdId {
        CMD_ID = 5026;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TOO_MANY_FAILS = 2;
        IS_IN_RESETTING = 3;
        WRONG_PASSWORD = 4;
    }
}

message ChapterActCompensation {
    optional uint32 act_id = 1;
    optional uint32 difficulty = 2;
    repeated uint32 challenge_reward_id_list = 3;
}



message ChapterActivity {
    optional uint32 chapter_id = 1;
    optional uint32 level = 2;
    optional uint32 level_exp = 3;
    repeated uint32 has_take_reward_level_list = 4;
    optional bool is_take_daily_reward = 5;
    repeated ChapterActivityBoss boss_list = 6;
    optional uint32 player_level = 7;
    optional uint32 daily_reward_id = 8;
    repeated ChapterActivityStage stage_list = 10;
}

message ChapterActivityBoss {
    optional uint32 boss_stage_id = 1;
    optional uint32 left_hp = 2;
    optional uint32 cur_section_id = 3;
}


message ChapterActivityDailyRewardNotify {
    optional uint32 chapter_id = 1;
    optional RewardData daily_reward = 2;

    enum CmdId {
        CMD_ID = 4331;
    }
}

message ChapterActivityExclusiveStage {
    optional uint32 group_id = 1;
    optional uint32 stage_id = 2;
}

message ChapterActivityStage {
    optional uint32 stage_id = 1;
    optional uint32 max_floor = 2;
    optional uint32 pass_times = 3;
    optional uint32 max_score = 4;
}

message ChapterActivityTakeDailyRewardReq {
    optional uint32 chapter_id = 1;

    enum CmdId {
        CMD_ID = 4350;
    }
}


message ChapterActivityTakeDailyRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 chapter_id = 2;
    optional RewardData daily_reward = 3;

    enum CmdId {
        CMD_ID = 4351;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
        ACTIVITY_NOT_OPEN = 3;
    }
}



message ChapterCompensationInfo {
    optional uint32 compensation_id = 1;
    repeated ChapterStageCompensation stage_compensation_list = 2;
    repeated ChapterActCompensation act_compensation_list = 3;
    optional bool is_taken_compensation = 4;
    optional uint32 chapter_id = 5;
}


message ChapterGroup {
    optional uint32 id = 1;
    repeated ChapterGroupSite site_list = 2;
}

message ChapterGroupGetDataReq {
    optional uint32 chapter_group_id = 1;

    enum CmdId {
        CMD_ID = 1660;
    }
}


message ChapterGroupGetDataRsp {
    optional Retcode retcode = 1;
    repeated ChapterGroup chapter_group_list = 2;
    optional bool is_all = 3;
    optional uint32 chapter_group_id = 4;

    enum CmdId {
        CMD_ID = 1661;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_EXIST = 2;
    }
}


message ChapterGroupSite {
    optional uint32 site_id = 1;
    optional uint32 chapter_id = 2;
    optional ChapterGroupSiteStatus status = 3;
}

enum ChapterGroupSiteFinishWay {
    CHAPTER_GROUP_SITE_FINISH_WAY_INVALID = 0;
    CHAPTER_GROUP_SITE_FINISH_WAY_PASS_STAGE_AND = 1;
    CHAPTER_GROUP_SITE_FINISH_WAY_PASS_STAGE_OR = 2;
    CHAPTER_GROUP_SITE_FINISH_WAY_FINISH_MISSION_AND = 3;
    CHAPTER_GROUP_SITE_FINISH_WAY_FINISH_MISSION_OR = 4;
    CHAPTER_GROUP_SITE_FINISH_WAY_TIME_ARRIVED = 5;
}

enum ChapterGroupSiteStatus {
    CHAPTER_GROUP_SITE_STATUS_INVALID = 0;
    CHAPTER_GROUP_SITE_STATUS_LOCKED = 1;
    CHAPTER_GROUP_SITE_STATUS_UNLOCKED = 2;
    CHAPTER_GROUP_SITE_STATUS_FINISHED = 3;
}

enum ChapterGroupSiteType {
    CHAPTER_GROUP_SITE_TYPE_INVALID = 0;
    CHAPTER_GROUP_SITE_TYPE_CHAPTER = 1;
    CHAPTER_GROUP_SITE_TYPE_VIDEO = 2;
    CHAPTER_GROUP_SITE_TYPE_OPENWORLD = 3;
}

message ChapterStageCompensation {
    optional uint32 stage_id = 1;
    optional bool is_first_win = 2;
    repeated uint32 challenge_reward_id_list = 3;
}

enum ChapterType {
    CHAPTER_TYPE_MAIN_STORY = 1;
    CHAPTER_TYPE_EVENT = 2;
    CHAPTER_TYPE_SPECIAL_STORY = 3;
    CHAPTER_MP = 4;
    CHAPTER_TYPE_CHAPTER_ACTIVITY = 5;
    CHAPTER_TYPE_HYBRID_SITE_ACTIVITY = 6;
    CHAPTER_TYPE_OPENWORLD = 7;
}

message ChargeActivityBuffReq {
    optional uint32 activity_buff_id = 1;

    enum CmdId {
        CMD_ID = 1605;
    }
}

message ChargeActivityBuffRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_buff_id = 2;

    enum CmdId {
        CMD_ID = 1606;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_FOUND = 2;
        NOT_ALLOWED = 3;
        FULL_CHARGED = 4;
        MATERIAL_LACK = 5;
    }
}

message ChatCloseNotify {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2239;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FEATURE_CLOSE = 2;
        LEVEL_LIMIT = 3;
    }
}

message ChatForbidNotify {
    optional uint32 forbid_finish_time = 1;
    optional ForbidType forbid_type = 2;

    enum CmdId {
        CMD_ID = 1154;
    }
    enum ForbidType {
        FORBID_COMMON = 0;
        REPEAT_CHAT = 1;
    }
}

message ChatForbidSnsNotify {
    optional uint32 credit_bound = 1;
    optional uint32 chat_forbid_finish_time = 2;
    optional uint32 chat_forbid_times = 3;

    enum CmdId {
        CMD_ID = 1161;
    }
}


message Chatgroup {
    optional uint32 chatgroup_id = 1;
    optional string name = 2;
    optional string notice = 3;
    optional uint32 icon_id = 4;
    repeated ChatgroupMember member_list = 5;
    repeated uint32 label_id_list = 6;
}


message ChatgroupInvite {
    optional uint32 chatgroup_id = 1;
    optional string name = 2;
    optional string notice = 3;
    optional uint32 icon_id = 4;
    optional uint32 inviter_uid = 5;
    optional PlayerFriendBriefData inviter_info = 6;
    optional uint32 invite_time = 7;
    optional uint32 chatgroup_member_num = 8;
}


message ChatgroupJoinMsg {
    optional uint32 inviter_uid = 1;
    repeated ChatgroupMember member_list = 2;
}

message ChatgroupLeaveMsg {
    optional uint32 operator_uid = 1;
    optional uint32 leave_uid = 2;
}



message ChatgroupMember {
    optional uint32 uid = 1;
    optional ChatgroupPosition position = 2;
    optional PlayerFriendBriefData brief_data = 3;
}

enum ChatgroupPosition {
    CHATGROUP_POSITION_NONE = 0;
    CHATGROUP_POSITION_CREATER = 1;
    CHATGROUP_POSITION_MEMBER = 2;
}

message ChatgroupSettingMsg {
    optional uint32 operator_uid = 1;
    optional string name = 2;
    optional string notice = 3;
    optional uint32 icon_id = 4;
    repeated uint32 label_id_list = 5;
}







message ChatgroupSystemNotify {
    optional ChatgroupSystemNotifyType type = 1;
    optional uint32 chatgroup_id = 2;
    optional Chatgroup chatgroup = 3;
    optional ChatgroupJoinMsg join_msg = 4;
    optional ChatgroupLeaveMsg leave_msg = 5;
    optional ChatgroupSettingMsg setting_msg = 6;
    optional ChatgroupInvite invite = 7;
    repeated uint32 target_uid_list = 8;
    optional string chatgroup_name = 9;
    optional uint32 time = 10;

    enum CmdId {
        CMD_ID = 2211;
    }
}

enum ChatgroupSystemNotifyType {
    CHATGROUP_NOTIFY_NONE = 0;
    CHATGROUP_NOTIFY_NEW = 1;
    CHATGROUP_NOTIFY_JOIN = 2;
    CHATGROUP_NOTIFY_LEAVE = 3;
    CHATGROUP_NOTIFY_DISSOLVE = 4;
    CHATGROUP_NOTIFY_SETTING = 5;
    CHATGROUP_NOTIFY_INVITE = 6;
}






message ChatMsg {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 time = 3;
    optional string msg = 4;
    optional uint32 avatar_id = 5;
    optional uint32 dress_id = 6;
    optional ChatMsgContent content = 7;
    optional MsgChannel channel = 8;
    optional uint32 frame_id = 9;
    optional bool is_sensitive = 10;
    optional bool is_goback = 11;
    optional uint32 channel_id = 12;
    optional uint32 custom_head_id = 13;
    optional MasterPupilType master_pupil_tag = 14;
    optional SystemChatMsg system_msg = 15;
    optional uint32 target_uid = 16;
    optional uint32 season_id = 17;
    optional uint32 season_group_id = 18;
    optional uint32 season_level = 19;
    optional uint32 mode = 20;
    optional uint32 mode_para = 21;
    optional bool is_armada_leader = 22;
    optional bool is_team_leader = 23;
    optional ChatMsgSensitiveCheckResult check_result = 24;
    optional bool is_lobby_invite = 25;

    enum MsgChannel {
        DEFAULT = 0;
        WORLD = 1;
        FRIEND = 2;
        ARMADA = 3;
        PLAYER_CARD = 4;
        LOBBY = 5;
        MASTER_PUPIL = 6;
        COMMON_CHATWORLD = 7;
        GROUP = 8;
        TEAM = 9;
        CAMPAIGN = 10;
        ROOM = 11;
        WORLD_ACTIVITY = 12;
        PRIVATE = 13;
        BATTLE = 14;
    }
    message SystemChatMsg {
        optional SystemChatMsgType type = 1;
        optional uint32 item_id = 2;
        optional uint32 item_level = 3;
        optional uint32 item_num = 4;
        optional GachaType gacha_type = 5;
    }
}


message ChatMsgAvatar {
    optional uint32 id = 1;
    optional AvatarDetailData avatar = 2;
}


message ChatMsgContent {
    repeated ChatMsgItem items = 1;
}


message ChatMsgElf {
    optional uint32 id = 1;
    optional ElfDetailData elf = 2;
}


message ChatMsgInternal {
    repeated ChatMsgKeyValue key_value_list = 1;
}











message ChatMsgItem {
    optional ChatMsgType type = 1;
    optional string msg_str = 2;
    optional ChatMsgWeapon weapon = 3;
    optional ChatMsgStigmata stigmata = 4;
    optional ChatMsgAvatar avatar = 5;
    optional ChatMsgLobby lobby = 6;
    optional ChatMsgInternal internal = 7;
    optional ChatSendRedEnvelope send_red_envelope = 8;
    optional ChatTakeRedEnvelope take_red_envelope = 9;
    optional uint32 emoji_id = 10;
    optional ChatMsgElf elf = 11;
    optional ChatRedEnvelopeTakeOver red_envelope_take_over = 12;
    optional ChatMsgWorldBeast chatworld_beast = 13;

    enum ChatMsgType {
        STR_MSG = 1;
        WEAPON_MSG = 2;
        STIGMATA_MSG = 3;
        AVATAR_MSG = 4;
        LOBBY_MSG = 5;
        INTERNAL_MSG = 6;
        SEND_RED_ENVELOPE_MSG = 7;
        TAKE_RED_ENVELOPE_MSG = 8;
        EMOJI = 9;
        ELF_MSG = 10;
        RED_ENVELOPE_TAKE_OVER_MSG = 11;
        CHATWORLD_BEAST_MSG = 12;
    }
}

message ChatMsgKeyValue {
    optional string key = 1;
    optional string value = 2;
}

message ChatMsgLobby {
    optional string msg = 1;
    optional uint32 level = 2;
}

message ChatMsgSensitiveCheckResult {
    optional int32 shield_type = 1;
    optional int32 number_check = 2;
    optional string rewrite_text = 3;
}


message ChatMsgStigmata {
    optional uint32 unique_id = 1;
    optional StigmataDetailData stigmata = 2;
}


message ChatMsgWeapon {
    optional uint32 unique_id = 1;
    optional WeaponDetailData weapon = 2;
}

message ChatMsgWorldBeast {
    optional uint32 chatworld_id = 1;
    optional uint32 scene_id = 2;
    optional uint64 beast_unique_id_u64 = 3;
    optional uint32 stage_id = 4;
}

message ChatRedEnvelopeTakeOver {
    optional uint32 sender_uid = 1;
    optional string sender_nickname = 2;
    optional uint32 item_id = 3;
    optional string msg = 4;
    optional uint32 red_envelope_id = 5;
}

enum ChatRelationType {
    CHAT_RELATION_TYPE_NONE = 0;
    CHAT_RELATION_TYPE_FRIEND = 1;
    CHAT_RELATION_TYPE_MASTER_PUPIL = 2;
}

message ChatReport {
    optional uint32 target_uid = 1;
    optional uint32 report_type = 2;
    optional string report_detail = 3;
    optional uint32 reporter_uid = 4;
}

message ChatReportNotify {
    optional uint32 report_uid = 1;
    optional uint32 target_uid = 2;
    optional uint32 report_type = 3;
    optional uint32 lost_chat_credit = 4;
    optional uint32 chat_forbid_times = 5;

    enum CmdId {
        CMD_ID = 1152;
    }
}


message ChatReportReq {
    optional ChatReport chat_report = 1;

    enum CmdId {
        CMD_ID = 1150;
    }
}

message ChatReportRsp {
    optional Retcode retcode = 1;
    optional uint32 cd_left_time = 2;

    enum CmdId {
        CMD_ID = 1151;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CHAT_BLOCKED = 2;
        IN_REPORT_CD = 3;
    }
}

message ChatSendRedEnvelope {
    optional uint32 item_id = 1;
    optional string msg = 2;
    optional uint32 red_envelope_id = 3;
}

enum ChatSwitchChannelType {
    CHAT_SWITCH_CHANNEL_TYPE_NONE = 0;
    CHAT_SWITCH_CHANNEL_TYPE_WORLD = 1;
    CHAT_SWITCH_CHANNEL_TYPE_PRIVATE = 2;
    CHAT_SWITCH_CHANNEL_TYPE_ARMADA = 3;
    CHAT_SWITCH_CHANNEL_TYPE_TEAM = 4;
    CHAT_SWITCH_CHANNEL_TYPE_GROUP = 5;
    CHAT_SWITCH_CHANNEL_TYPE_COMMON_CHATWORLD = 6;
    CHAT_SWITCH_CHANNEL_TYPE_OTHERS = 7;
}

message ChatSwitchData {
    optional uint32 chat_switch_channel_type = 1;
}



message ChatTakeRedEnvelope {
    optional uint32 sender_uid = 1;
    optional string sender_nickname = 2;
    optional uint32 item_id = 3;
    optional uint32 take_scoin = 4;
    repeated DropItem drop_item_list = 5;
    optional string msg = 6;
    optional Material take_material = 7;
}

message ChatUnforbidNotify {
    repeated uint32 uid_list = 1;

    enum CmdId {
        CMD_ID = 1153;
    }
}

enum ChatwoldBeastLevel {
    CHATWORLD_BEAST_SENIOR = 1;
    CHATWORLD_BEAST_JUNIOR = 2;
}

message ChatworldActivityInfo {
    optional uint32 treasure_schedule_id = 1;
    optional bool is_has_npc_red_envelope = 2;
}

message ChatworldActivitySchedule {
    optional uint32 schedule_id = 1;
    optional uint32 activity_id = 2;
    optional uint32 begin_time = 3;
    optional uint32 end_time = 4;
    optional uint32 begin_day_time = 5;
    optional uint32 end_day_time = 6;
}

enum ChatworldActivityType {
    CHATWORLD_ACTIVITY_TYPE_MAIN_PAGE_NOTICE = 1;
    CHATWORLD_ACTIVITY_TYPE_ACTIVITY_NOTICE = 2;
    CHATWORLD_ACTIVITY_TYPE_FIRE_WORKS = 3;
    CHATWORLD_ACTIVITY_TYPE_FISH = 4;
    CHATWORLD_ACTIVITY_TYPE_PRAY = 5;
    CHATWORLD_ACTIVITY_TYPE_QUESTION = 6;
    CHATWORLD_ACTIVITY_TYPE_PREPARE = 7;
    CHATWORLD_ACTIVITY_TYPE_ARMADA_REUNION = 8;
    CHATWORLD_ACTIVITY_TYPE_DISH = 9;
    CHATWORLD_ACTIVITY_TYPE_BEAST = 10;
    CHATWORLD_ACTIVITY_TYPE_BOX = 11;
    CHATWORLD_ACTIVITY_TYPE_PRAY_WITH_ORDER = 12;
}


message ChatworldBattle {
    optional uint32 score = 1;
    optional uint32 kill_num = 2;
    optional uint32 kill_streak = 3;
    optional uint32 legendary_times = 4;
    repeated ChatworldCollectBattleItem collect_battle_item_list = 5;
}

enum ChatworldBattleCampTag {
    CHATWORLD_BATTLE_CAMP_TAG_NONE = 0;
    CHATWORLD_BATTLE_CAMP_TAG_1 = 1;
    CHATWORLD_BATTLE_CAMP_TAG_2 = 2;
}

message ChatworldBattleCollectItemReq {
    optional uint32 item_id = 1;
    optional uint32 item_unique_id = 2;

    enum CmdId {
        CMD_ID = 2425;
    }
}


message ChatworldBattleCollectItemRsp {
    optional Retcode retcode = 1;
    optional uint32 item_id = 2;
    optional uint32 item_unique_id = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 2426;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_CHATWORLD = 2;
        NOT_EXIST = 3;
        CAMP_INVALID = 4;
        LACK_TIMES = 5;
        ITEM_NOT_USED = 6;
        ITEM_LIMIT = 7;
    }
}

enum ChatworldBattleItemEffectTarget {
    CHATWORLD_BATTLE_ITEM_EFFECT_ALL = 0;
    CHATWORLD_BATTLE_ITEM_EFFECT_ENEMY_CAMP = 1;
    CHATWORLD_BATTLE_ITEM_EFFECT_SELF_CAMP = 2;
}

message ChatworldBattleUseItemReq {
    optional uint32 item_id = 1;

    enum CmdId {
        CMD_ID = 2422;
    }
}

message ChatworldBattleUseItemRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2423;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_CHATWORLD = 2;
        NOT_EXIST = 3;
    }
}

message ChatworldBeast {
    optional uint64 beast_unique_id_u64 = 1;
    optional uint32 beast_id = 2;
    optional uint32 stage_id = 4;
    optional uint32 left_hp = 5;
    optional Status status = 6;
    repeated uint32 wait_take_treasure_uid_list = 7;
    optional uint32 expire_time = 8;
    optional uint32 challenger_num = 9;
    optional uint32 treasure_rank_id = 10;

    enum Status {
        CHALLENGE = 1;
        TREASURE = 2;
    }
}

message ChatworldBeastAbandonChallengeReq {

    enum CmdId {
        CMD_ID = 2473;
    }
}

message ChatworldBeastAbandonChallengeRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2474;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ChatworldBeastAddResultNotify {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2460;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_POSITION = 2;
        ROOM_LIMIT = 3;
    }
}

enum ChatworldBeastAwardType {
    CHATWORLD_BEAST_AWARD_HP_RATIO = 1;
    CHATWORLD_BEAST_AWARD_SCORE = 2;
}

message ChatworldBeastChallengeReq {
    optional uint64 beast_unique_id_u64 = 1;
    optional uint32 beast_id = 2;

    enum CmdId {
        CMD_ID = 2461;
    }
}


message ChatworldBeastChallengeRsp {
    optional Retcode retcode = 1;
    optional ChatworldBeast beast = 2;
    optional uint32 chatworld_id = 3;
    optional uint32 scene_id = 4;

    enum CmdId {
        CMD_ID = 2462;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        DAILY_LIMIT = 3;
        PLAYER_FULL = 4;
        EXPIRE = 5;
        FINISH = 6;
        TIME_NOT_ENOUGH = 7;
    }
}

message ChatworldBeastGetActivityReq {

    enum CmdId {
        CMD_ID = 2465;
    }
}

message ChatworldBeastGetActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 daily_senior_challenge_times = 2;
    optional uint32 daily_junior_challenge_times = 3;
    optional uint32 daily_senior_treasure_times = 4;
    optional uint32 daily_junior_treasure_times = 5;
    optional uint32 refresh_begin_time = 6;
    optional uint32 refresh_end_time = 7;
    optional uint32 refresh_interval = 8;

    enum CmdId {
        CMD_ID = 2466;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message ChatworldBeastSyncReq {
    optional uint64 beast_unique_id_u64 = 1;
    optional uint32 cost_hp = 2;

    enum CmdId {
        CMD_ID = 2463;
    }
}

message ChatworldBeastSyncRsp {
    optional Retcode retcode = 1;
    optional uint64 beast_unique_id_u64 = 2;
    optional uint32 from_uid = 3;
    optional uint32 cost_hp = 4;
    optional uint32 left_hp = 5;

    enum CmdId {
        CMD_ID = 2464;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ChatworldBeastTakeTreasureReq {
    optional uint64 beast_unique_id_u64 = 1;
    optional uint32 beast_id = 2;

    enum CmdId {
        CMD_ID = 2471;
    }
}


message ChatworldBeastTakeTreasureRsp {
    optional Retcode retcode = 1;
    repeated DropItem drop_item_list = 2;
    optional uint32 beast_id = 3;
    optional uint32 treasure_rank_id = 4;

    enum CmdId {
        CMD_ID = 2472;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
        DAILY_LIMIT = 3;
        NOT_EXIST = 4;
        NO_RIGHT = 5;
        NOT_OPEN = 6;
    }
}

message ChatworldBox {
    optional uint32 box_series_id = 1;
    optional uint32 schedule_id = 3;
    optional uint32 expire_time = 4;
}

message ChatworldBoxActivity {
    optional uint32 schedule_id = 1;
    repeated uint64 open_box_unique_id_u64_list = 2;
}

message ChatworldBoxGetDataReq {

    enum CmdId {
        CMD_ID = 2467;
    }
}


message ChatworldBoxGetDataRsp {
    optional Retcode retcode = 1;
    repeated ChatworldBoxActivity box_activity_list = 3;

    enum CmdId {
        CMD_ID = 2468;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message ChatworldBoxTakeRewardReq {
    optional uint32 unique_id = 1;
    optional uint32 schedule_id = 2;

    enum CmdId {
        CMD_ID = 2469;
    }
}


message ChatworldBoxTakeRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;
    optional uint32 box_series_id = 4;
    optional uint32 schedule_id = 5;
    optional uint32 stage_id = 6;
    optional uint32 box_unique_id = 7;
    repeated uint64 open_box_unique_id_u64_list = 8;
    optional uint32 chatworld_id = 9;
    optional uint32 scene_id = 10;

    enum CmdId {
        CMD_ID = 2470;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        HAS_TAKE = 3;
        DAILY_LIMIT = 4;
        BOX_NOT_EXIST = 5;
        FINISH = 6;
    }
}

enum ChatworldBoxType {
    CHATWORLD_BOX_TYPE_NONE = 0;
    CHATWORLD_BOX_TYPE_REWARD = 1;
    CHATWORLD_BOX_TYPE_BATTLE = 2;
}

message ChatworldBrief {
    optional uint32 chatworld_id = 1;
    optional uint32 player_num = 2;
    optional bool is_has_untaken_treasure = 3;
    optional uint32 beast_num = 4;
}

message ChatworldBuff {
    optional uint32 buff_id = 1;
    optional uint64 expire_time_ms_u64 = 2;
}

enum ChatworldBuffType {
    CHATWORLD_BUFF_TYPE_NONE = 0;
    CHATWORLD_BUFF_TYPE_DAMAGE_FREE = 1;
    CHATWORLD_BUFF_TYPE_SPEED = 2;
}

message ChatworldChangeAvatarReq {
    optional uint32 avatar_id = 1;
    optional uint32 scene_id = 2;

    enum CmdId {
        CMD_ID = 2409;
    }
}

message ChatworldChangeAvatarRsp {
    optional Retcode retcode = 1;
    optional uint32 avatar_id = 2;
    optional uint32 scene_id = 3;

    enum CmdId {
        CMD_ID = 2410;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_CHATWORLD = 2;
        AVATAR_LOCK = 3;
        SCENE_NOT_EXIST = 4;
    }
}

message ChatworldCollectBattleItem {
    optional uint32 item_id = 1;
    optional uint32 item_num = 2;
}

enum ChatworldComponentType {
    CHATWORLD_COMPONENT_TYPE_NONE = 0;
    CHATWORLD_COMPONENT_TYPE_MOVE = 1;
    CHATWORLD_COMPONENT_TYPE_BUFF = 2;
    CHATWORLD_COMPONENT_TYPE_SKILL = 3;
    CHATWORLD_COMPONENT_TYPE_HEALTH = 4;
    CHATWORLD_COMPONENT_TYPE_COLLISION = 5;
}

message ChatworldDishReward {
    optional uint32 reward_id = 1;
    optional uint32 taken_times = 2;
    optional uint32 last_take_time = 3;
}

enum ChatworldEnterType {
    CHATWORLD_ENTER_TYPE_NONE = 0;
    CHATWORLD_ENTER_TYPE_WORLD = 1;
    CHATWORLD_ENTER_TYPE_ARMADA = 2;
}









message ChatworldEntity {
    optional uint32 unique_id = 1;
    optional uint32 entity_type = 2;
    optional uint32 camp_tag = 3;
    optional ChatworldPosition position = 4;
    optional ChatworldPlayerInfo player_info = 16;
    optional ChatworldItem chatworld_item = 17;
    optional ChatworldStance chatworld_stance = 18;
    optional ChatworldFishSpot chatworld_fish_spot = 19;
    optional ChatworldQuestion chatworld_question = 20;
    optional ChatworldBeast chatworld_beast = 21;
    optional ChatworldBox chatworld_box = 22;
}

message ChatworldEntityHp {
    optional uint32 hit_unique_id = 1;
    optional uint32 old_hp = 2;
    optional uint32 left_hp = 3;
}


message ChatworldEntityMsg {
    repeated ChatworldEntity update_entity_list = 1;
    repeated uint32 delete_entity_list = 2;
}

enum ChatworldEntityType {
    CHATWORLD_ENTITY_TYPE_NONE = 0;
    CHATWORLD_ENTITY_TYPE_PLAYER = 1;
    CHATWORLD_ENTITY_TYPE_SKILL = 2;
    CHATWORLD_ENTITY_TYPE_ITEM = 3;
    CHATWORLD_ENTITY_TYPE_STANCE = 4;
    CHATWORLD_ENTITY_TYPE_FISH = 5;
    CHATWORLD_ENTITY_TYPE_QUESTION = 6;
    CHATWORLD_ENTITY_TYPE_BEAST = 7;
    CHATWORLD_ENTITY_TYPE_BOX = 8;
}

message ChatworldFishAssistReq {
    optional uint32 fish_spot_id = 1;
    optional uint32 target_uid = 2;

    enum CmdId {
        CMD_ID = 2437;
    }
}

message ChatworldFishAssistRsp {
    optional Retcode retcode = 1;
    optional uint32 fish_spot_id = 2;
    optional uint32 target_uid = 3;

    enum CmdId {
        CMD_ID = 2438;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CURRENCY_LIMIT = 2;
    }
}

message ChatworldFishCancelWaitAssistReq {
    optional uint32 fish_spot_id = 1;

    enum CmdId {
        CMD_ID = 2442;
    }
}

message ChatworldFishCancelWaitAssistRsp {
    optional Retcode retcode = 1;
    optional uint32 fish_spot_id = 2;

    enum CmdId {
        CMD_ID = 2443;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_WAIT = 2;
    }
}

message ChatworldFishEndReq {
    optional FishEndStatus fish_end_status = 1;
    optional uint32 fish_spot_id = 2;
    optional uint32 fish_group_id = 3;
    optional uint32 fish_hard_level = 4;

    enum CmdId {
        CMD_ID = 2435;
    }
    enum FishEndStatus {
        FISH_END_SUCC = 0;
        FISH_END_WAIT_ASSIST = 1;
        FISH_END_FAIL = 2;
    }
}

message ChatworldFishEndRsp {
    optional Retcode retcode = 1;
    optional uint32 fish_spot_id = 2;

    enum CmdId {
        CMD_ID = 2436;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}



message ChatworldFisher {
    optional uint32 uid = 1;
    optional uint32 seat_idx = 2;
    optional ChatworldFisherStatus fisher_status = 3;
    optional uint64 status_start_time_ms_u64 = 4;
    optional uint32 wait_assist_fish_hard_level = 5;
    repeated uint32 assist_uid_list = 6;
    repeated uint32 like_uid_list = 7;
    optional uint32 last_get_fish_id = 8;
    optional uint64 last_get_fish_time_ms_u64 = 9;
    optional ChatworldFishInfo fish_info = 10;
}

enum ChatworldFisherStatus {
    CHATWORLD_FISHER_STATUS_NONE = 0;
    CHATWORLD_FISHER_STATUS_PREPARE = 1;
    CHATWORLD_FISHER_STATUS_START = 2;
    CHATWORLD_FISHER_STATUS_END = 3;
    CHATWORLD_FISHER_STATUS_WAIT_ASSIST = 4;
}

message ChatworldFishGetActivityInfoReq {

    enum CmdId {
        CMD_ID = 2445;
    }
}


message ChatworldFishGetActivityInfoRsp {
    optional Retcode retcode = 1;
    optional ChatworldFishInfo fish_info = 2;

    enum CmdId {
        CMD_ID = 2446;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

enum ChatworldFishHardLevel {
    CHATWORLD_FISH_HARD_LEVEL_NONE = 0;
    CHATWORLD_FISH_HARD_LEVEL_EASY = 1;
    CHATWORLD_FISH_HARD_LEVEL_NORMAL = 2;
    CHATWORLD_FISH_HARD_LEVEL_HARD = 3;
}

message ChatworldFishInfo {
    optional uint32 daily_get_currency_num = 1;
}


message ChatworldFishJoinSpotReq {
    optional uint32 fish_spot_id = 1;
    optional uint32 seat_idx = 2;
    optional ChatworldFishInfo fish_info = 3;

    enum CmdId {
        CMD_ID = 2429;
    }
}

message ChatworldFishJoinSpotRsp {
    optional Retcode retcode = 1;
    optional uint32 fish_spot_id = 2;
    optional uint32 seat_idx = 3;

    enum CmdId {
        CMD_ID = 2430;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SPOT_FULL = 2;
        CURRENCY_LIMIT = 3;
    }
}

message ChatworldFishKickPlayerNotify {
    optional KickReason kick_reason = 1;

    enum CmdId {
        CMD_ID = 2444;
    }
    enum KickReason {
        KICK_NONE = 0;
        KICK_CURRENCY_FULL = 1;
        KICK_NO_ACTION = 2;
    }
}

message ChatworldFishLeaveSpotReq {
    optional uint32 fish_spot_id = 1;

    enum CmdId {
        CMD_ID = 2431;
    }
}

message ChatworldFishLeaveSpotRsp {
    optional Retcode retcode = 1;
    optional uint32 fish_spot_id = 2;

    enum CmdId {
        CMD_ID = 2432;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ChatworldFishLikeReq {
    optional uint32 fish_spot_id = 1;
    optional uint32 target_uid = 2;

    enum CmdId {
        CMD_ID = 2439;
    }
}

message ChatworldFishLikeRsp {
    optional Retcode retcode = 1;
    optional uint32 fish_spot_id = 2;
    optional uint32 target_uid = 3;

    enum CmdId {
        CMD_ID = 2440;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CURRENCY_LIMIT = 2;
    }
}



message ChatworldFishRewardNotify {
    optional FishRewardSrc reward_src = 1;
    optional uint32 fish_id = 2;
    optional uint32 add_currency_num = 3;
    optional uint32 cur_daily_get_currency_num = 4;
    optional RewardData extra_reward_data = 5;

    enum CmdId {
        CMD_ID = 2441;
    }
}


message ChatworldFishSpot {
    optional uint32 fish_spot_id = 1;
    repeated ChatworldFisher fisher_list = 2;
}

message ChatworldFishStartReq {
    optional uint32 fish_spot_id = 1;

    enum CmdId {
        CMD_ID = 2433;
    }
}

message ChatworldFishStartRsp {
    optional Retcode retcode = 1;
    optional uint32 fish_spot_id = 2;

    enum CmdId {
        CMD_ID = 2434;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CURRENCY_LIMIT = 2;
    }
}

message ChatworldGetActivityScheduleReq {
    optional uint32 scene_id = 1;

    enum CmdId {
        CMD_ID = 2427;
    }
}


message ChatworldGetActivityScheduleRsp {
    optional Retcode retcode = 1;
    optional uint32 scene_id = 2;
    repeated ChatworldActivitySchedule schedule_list = 3;

    enum CmdId {
        CMD_ID = 2428;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ChatworldGetDishInfoReq {

    enum CmdId {
        CMD_ID = 2456;
    }
}


message ChatworldGetDishInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional bool is_prepare_reward_taken = 3;
    repeated ChatworldDishReward dish_reward_list = 4;
    repeated uint32 taken_dish_limited_reward_list = 5;

    enum CmdId {
        CMD_ID = 2457;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message ChatworldGetPrayInfoReq {
    optional uint32 scene_id = 1;

    enum CmdId {
        CMD_ID = 2451;
    }
}

message ChatworldGetPrayInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 pray_id = 2;
    optional bool is_has_prayed = 3;

    enum CmdId {
        CMD_ID = 2452;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}


message ChatworldGrantRewardNotify {
    optional uint32 activity_type = 1;
    optional uint32 activity_id = 2;
    optional uint32 reward_id = 3;
    optional uint32 extra_int = 4;
    optional RewardData reward_data = 5;

    enum CmdId {
        CMD_ID = 2455;
    }
}


message ChatworldInteractReq {
    optional ChatworldMsgInteract interact_msg = 1;

    enum CmdId {
        CMD_ID = 2413;
    }
}


message ChatworldInteractRsp {
    optional Retcode retcode = 1;
    optional ChatworldMsgInteract interact_msg = 2;

    enum CmdId {
        CMD_ID = 2414;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_CHATWORLD = 3;
        HELD_BY_OTHER = 4;
        NOT_HOLD = 5;
    }
}

enum ChatworldInteractType {
    CHATWORLD_INTERACT_TYPE_NONE = 0;
    CHATWORLD_INTERACT_TYPE_HOLD = 1;
    CHATWORLD_INTERACT_TYPE_UNHOLD = 2;
}

message ChatworldItem {
    optional uint32 item_id = 1;
    optional uint32 item_hp = 2;
}


message ChatworldItemMsg {
    repeated ChatworldItem update_item_list = 1;
    repeated uint32 delete_item_list = 2;
}



message ChatworldMsg {
    repeated ChatworldMsgItem item_list = 1;
    optional uint32 uid = 2;
    optional uint64 time_ms_u64 = 3;
    optional float client_time = 4;
    optional bool is_system_msg = 5;
    optional ChatMsgSensitiveCheckResult check_result = 6;
}

message ChatworldMsgAction {
    optional uint32 action_id = 1;
    optional uint32 target_uid = 2;
}


message ChatworldMsgInteract {
    optional ChatworldInteractType interact_type = 1;
    optional uint32 target_npc_id = 2;
}













message ChatworldMsgItem {
    optional ChatworldMsgType type = 1;
    optional ChatworldEntity player_info = 2;
    optional int32 msg_int = 5;
    optional bytes client_msg = 6;
    optional ChatMsgItem normal_msg = 7;
    optional ChatworldMsgUseItem use_item_msg = 8;
    optional ChatworldMsgInteract interact_msg = 10;
    optional ChatworldMsgAction action_msg = 11;
    optional CommonChatworldRedEnvelopeMsg red_envelope_msg = 12;
    optional ChatworldTreasureMsg chatworld_treasure_msg = 13;
    optional ChatworldSkillAttackMsg skill_attack_msg = 14;
    optional ChatworldSkillDamageMsg skill_damage_msg = 15;
    optional ChatworldSkillCancelMsg skill_cancel_msg = 17;
    optional ChatworldEntityMsg entity_msg = 20;
    optional ChatworldEntityHp entity_hp_msg = 21;

    enum ChatworldMsgType {
        STR_MSG = 1;
        ENTER_CHATWORLD = 2;
        MOVE_IN_CHATWORLD = 3;
        LEAVE_CHATWORLD = 4;
        INT_MSG = 5;
        CLIENT_MSG = 6;
        NORMAL_MSG = 7;
        USE_ITEM = 8;
        CHANGE_AVATAR = 9;
        INTERACT_MSG = 10;
        ACTION_MSG = 11;
        SEND_RED_ENVELOPE = 12;
        RED_ENVELOPE_TAKEN_OVER = 13;
        TREASURE_MSG = 14;
        SKILL_ATTACK_MSG = 15;
        SKILL_DAMAGE_MSG = 16;
        PLAYER_REBORN_MSG = 17;
        BUFF_MSG = 18;
        SKILL_CANCEL_MSG = 20;
        PLAYER_BATTLE_MSG = 21;
        ENTITY_MSG = 23;
        ENTITY_HP_MSG = 24;
    }
}


message ChatworldMsgMove {
    optional ChatworldPosition target_position = 1;
}

message ChatworldMsgUseItem {
    optional uint32 material_id = 1;
    optional uint32 num = 2;
    repeated uint32 target_uid_list = 3;
    optional string msg = 4;
    optional bytes extra_data = 5;
}






message ChatworldPlayerInfo {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 avatar_id = 3;
    optional uint32 chat_dress_id = 4;
    optional ChatworldPosition position = 5;
    optional uint32 chat_avatar_id = 6;
    optional uint32 chat_frame_id = 7;
    repeated uint32 holding_list = 8;
    optional uint32 level = 9;
    optional string armada_name = 10;
    optional uint32 mp_level = 11;
    optional uint32 on_medal_id = 12;
    optional uint32 action_id = 13;
    repeated CommonChatworldRedEnvelope chatworld_red_envelope_list = 14;
    optional bool is_all_info = 15;
    optional uint32 left_hp = 16;
    optional uint32 next_reborn_time = 17;
    repeated ChatworldBuff buff_list = 18;
    optional uint32 runtime_tag = 20;
    optional uint32 custom_head_id = 22;
    optional Medal on_medal = 23;
    optional ChatworldBattle battle_info = 32;
}

message ChatworldPlayerScene {
    optional uint32 left_hp = 1;
    optional uint32 score = 2;
    optional uint32 last_login_time = 3;
}

message ChatworldPosition {
    optional float x = 1;
    optional float y = 2;
    optional float z = 3;
    optional float rotation = 4;
    optional float speed = 5;
    optional uint64 time_ms_u64 = 6;
    optional float aim_rotation = 7;
}


message ChatworldPosResetNotify {
    optional ChatworldPosition reset_pos = 1;

    enum CmdId {
        CMD_ID = 2424;
    }
}

message ChatworldPrayReq {
    optional uint32 scene_id = 1;

    enum CmdId {
        CMD_ID = 2453;
    }
}


message ChatworldPrayRsp {
    optional Retcode retcode = 1;
    optional uint32 pray_id = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 2454;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_CHATWORLD = 2;
        PRAYED = 3;
        NOT_OPEN = 4;
    }
}


message ChatworldQuestion {
    optional uint32 activity_id = 1;
    optional uint32 question_id = 2;
    optional ChatworldQuestionStatus status = 3;
    optional uint32 end_time = 4;
    optional uint32 right_answer_id = 5;
}

enum ChatworldQuestionStatus {
    CHATWORLD_QUESTION_NONE = 0;
    CHATWORLD_QUESTION_PREPARE = 1;
    CHATWORLD_QUESTION_ANSWER = 2;
    CHATWORLD_QUESTION_RESULT = 3;
    CHATWORLD_QUESTION_CD = 4;
}


message ChatworldSkillAttackMsg {
    repeated uint32 skill_unique_id_list = 1;
    optional uint32 skill_id = 2;
    optional ChatworldPosition attack_pos = 3;
}

message ChatworldSkillCancelMsg {
    optional uint32 skill_unique_id = 1;
}


message ChatworldSkillDamageJudgeReq {
    optional uint32 skill_unique_id = 1;
    repeated uint32 hit_unique_id_list = 2;
    optional ChatworldPosition damage_pos = 3;

    enum CmdId {
        CMD_ID = 2420;
    }
}


message ChatworldSkillDamageJudgeRsp {
    optional Retcode retcode = 1;
    optional ChatworldSkillDamageMsg damage_msg = 2;
    optional uint32 score = 3;

    enum CmdId {
        CMD_ID = 2421;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_CHATWORLD = 2;
        HIT_NOT_IN_CHATWORLD = 3;
        NO_ATTACK = 4;
        EXCEED_RANGE = 5;
        CAN_NOT_HIT = 6;
        INVALID_PATH = 7;
        DAMAGE_FREE = 8;
        NOT_ENEMY = 9;
        IS_DEAD = 10;
    }
}



message ChatworldSkillDamageMsg {
    optional uint32 skill_unique_id = 1;
    optional uint32 skill_id = 2;
    optional ChatworldPosition damage_pos = 3;
    repeated ChatworldEntityHp entity_hp_list = 4;
}


message ChatworldStance {
    optional uint32 stance_id = 1;
    optional ChatworldPosition position = 2;
    optional uint32 holding_stance_camp_tag = 3;
    optional uint32 camp_1_stance_progress = 4;
    optional uint32 camp_2_stance_progress = 5;
}


message ChatworldStanceMsg {
    repeated ChatworldStance stance_list = 1;
}


message ChatworldTakeDishRewardReq {
    optional DishRewardType reward_type = 1;
    optional uint32 reward_id = 2;

    enum CmdId {
        CMD_ID = 2458;
    }
}



message ChatworldTakeDishRewardRsp {
    optional Retcode retcode = 1;
    optional DishRewardType reward_type = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 2459;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAVE_TAKEN = 2;
        NOT_OPEN = 3;
        NO_REWARD = 4;
        IN_CD_TIME = 5;
    }
}


message ChatworldTreasure {
    optional uint32 chatworld_id = 1;
    optional uint32 treasure_id = 2;
    optional ChatworldPosition position = 3;
    optional bool is_reward_taken = 4;
    repeated uint32 open_uid_list = 5;
}


message ChatworldTreasureMsg {
    optional uint32 cur_treasure_schedule_id = 1;
    repeated ChatworldTreasure new_treasure_list = 2;
    repeated ChatworldTreasure update_treasure_list = 3;
    repeated ChatworldTreasure delete_treasure_list = 4;
}


message ChatworldTreasureRewardNotify {
    optional uint32 chatworld_id = 1;
    optional uint32 treasure_id = 2;
    repeated DropItem drop_item_list = 3;

    enum CmdId {
        CMD_ID = 2419;
    }
}

enum ChatworldType {
    CHATWORLD_TYPE_NONE = 0;
    CHATWORLD_TYPE_PLAIN = 1;
    CHATWORLD_TYPE_KINGDOM_WAR = 2;
    CHATWORLD_TYPE_BRAWL = 3;
    CHATWORLD_TYPE_STANCE = 4;
}


message ChatworldUseItemReq {
    optional ChatworldMsgUseItem use_item_msg = 1;

    enum CmdId {
        CMD_ID = 2407;
    }
}

message ChatworldUseItemRsp {
    optional Retcode retcode = 1;
    optional uint32 material_id = 2;
    optional uint32 num = 3;
    repeated uint32 target_uid_list = 4;

    enum CmdId {
        CMD_ID = 2408;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ITEM_LACK = 2;
        SENSITIVE_WORD = 3;
        NOT_IN_CHATWORLD = 4;
    }
}

enum CheckConditionEnum {
    CHECK_CONDITION_WEAPON = 13;
    CHECK_CONDITION_STIGMATA_SLOT_1 = 14;
    CHECK_CONDITION_STIGMATA_SLOT_2 = 15;
    CHECK_CONDITION_STIGMATA_SLOT_3 = 16;
}

message CheckDormLikesDropReq {

    enum CmdId {
        CMD_ID = 1010;
    }
}

message CheckDormLikesDropRsp {
    optional Retcode retcode = 1;
    optional bool has_likes_drop = 2;
    optional uint32 yesterday_be_liked_num = 3;

    enum CmdId {
        CMD_ID = 1011;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LIMIT = 2;
    }
}

message CheckExtraStoryLockedAvatarBindEquipReq {

    enum CmdId {
        CMD_ID = 1000;
    }
}

message CheckExtraStoryLockedAvatarBindEquipRsp {
    optional Retcode retcode = 1;
    optional bool need_switch = 2;

    enum CmdId {
        CMD_ID = 1001;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message CheckRpgTaleStageTriggerReq {
    repeated uint32 trigger_list = 1;
    optional uint32 tale_id = 2;

    enum CmdId {
        CMD_ID = 2315;
    }
}

message CheckRpgTaleStageTriggerRsp {
    optional Retcode retcode = 1;
    repeated uint32 show_trigger_list = 2;
    optional uint32 tale_id = 3;

    enum CmdId {
        CMD_ID = 2316;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ChooseAvatarMissionAvatarReq {
    optional uint32 sample_id = 1;

    enum CmdId {
        CMD_ID = 3002;
    }
}

message ChooseAvatarMissionAvatarRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 sample_id = 3;

    enum CmdId {
        CMD_ID = 3003;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HAVE_CHOOSEN = 3;
    }
}

message ChooseBossRushBuffReq {
    optional uint32 activity_id = 1;
    optional uint32 pool_id = 2;
    optional uint32 buff_id = 3;

    enum CmdId {
        CMD_ID = 498;
    }
}

message ChooseBossRushBuffRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 pool_id = 3;
    optional uint32 buff_id = 4;

    enum CmdId {
        CMD_ID = 499;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        ACTIVITY_ERROR = 3;
        POOL_ID_ERROR = 4;
        BUFF_ID_ERROR = 5;
        TIME_LIMIT = 6;
    }
}


message ChooseConsignedOrderReq {
    optional uint32 index = 1;
    optional ConsignedOrder choosen_order = 2;

    enum CmdId {
        CMD_ID = 2641;
    }
}


message ChooseConsignedOrderRsp {
    optional Retcode retcode = 1;
    optional ConsignedOrder choosen_order = 2;

    enum CmdId {
        CMD_ID = 2642;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        STATUS_ERROR = 3;
        INDEX_ERROR = 4;
        TIMES_LIMIT = 5;
    }
}

message ChooseConsignedRewardReq {
    repeated uint32 optional_reward_list = 1;

    enum CmdId {
        CMD_ID = 521;
    }
}

message ChooseConsignedRewardRsp {
    optional Retcode retcode = 1;
    repeated uint32 optional_reward_list = 2;

    enum CmdId {
        CMD_ID = 522;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        ITEM_NOT_EXIST = 3;
    }
}

message ChooseReclaimGachaReq {
    optional uint32 item_id = 1;

    enum CmdId {
        CMD_ID = 1179;
    }
}

message ChooseReclaimGachaRsp {
    optional Retcode retcode = 1;
    optional uint32 item_id = 2;

    enum CmdId {
        CMD_ID = 1180;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_CANDIDATE = 2;
        ITEM_ERROR = 3;
    }
}

message ChooseStageBuffReq {
    optional uint32 activity_buff_id = 1;
    repeated uint32 buff_id_list = 2;

    enum CmdId {
        CMD_ID = 1530;
    }
}

message ChooseStageBuffRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_buff_id = 2;

    enum CmdId {
        CMD_ID = 1531;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ChooseVirtualDefaultAvatarNotify {
    optional uint32 group_id = 1;
    repeated uint32 candidate_avatar_list = 2;

    enum CmdId {
        CMD_ID = 3516;
    }
}

message ChooseVirtualTrainGachaItemReq {
    optional uint32 group_id = 1;
    optional uint32 item_id = 2;

    enum CmdId {
        CMD_ID = 3514;
    }
}

message ChooseVirtualTrainGachaItemRsp {
    optional Retcode retcode = 1;
    optional uint32 group_id = 2;
    optional uint32 item_id = 3;

    enum CmdId {
        CMD_ID = 3515;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_CANDIDATE = 2;
        ITEM_ERROR = 3;
    }
}

message CityActivityAffinityDropInfo {
    optional uint32 max_daily_affinity_drop_in_stage = 1;
    optional uint32 today_affinity_drop_in_stage = 2;
}

enum CityActivityDataType {
    CITY_ACTIVITY_DATA_ALL = 0;
    CITY_ACTIVITY_DATA_EVENT = 1;
    CITY_ACTIVITY_DATA_PHONE_EVENT = 2;
    CITY_ACTIVITY_DATA_PHOTO = 3;
}

message CityActivityEvent {
    optional uint32 site_id = 1;
    repeated uint32 event_id_list = 2;
}


message CityActivityPhoneEvent {
    optional uint32 role_id = 1;
    optional uint32 phone_event_id = 2;
    optional PhoneEventStatus status = 3;
}

message CityActivityRole {
    optional uint32 role_id = 1;
    optional uint32 affinity = 2;
    optional uint32 affinity_level = 3;
    optional bool is_like_type_gift_received = 4;
    optional bool is_favourite_gift_received = 5;
}

message CityActivitySite {
    optional uint32 site_id = 1;
    optional uint32 site_begin_time = 2;
    optional uint32 site_end_time = 3;
    optional uint32 activity_schedule_id = 4;
    optional uint32 activity_begin_time = 5;
    optional uint32 activity_end_time = 6;
}

message ClaimScoinReq {

    enum CmdId {
        CMD_ID = 3910;
    }
}

message ClaimScoinRsp {
    optional Retcode retcode = 1;
    optional uint32 add_scoin = 2;
    optional bool is_extra = 3;

    enum CmdId {
        CMD_ID = 3911;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SCOIN_FULL = 2;
    }
}

message ClaimStaminaReq {
    optional uint32 stamina = 1;

    enum CmdId {
        CMD_ID = 649;
    }
}

message ClaimStaminaRsp {
    optional Retcode retcode = 1;
    optional uint32 stamina = 2;

    enum CmdId {
        CMD_ID = 650;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FACILITY_LOCK = 2;
        STORE_LACK = 3;
        POWER_LACK = 4;
        STAMINA_EXCEED = 5;
    }
}

message ClearStageActivity {
    optional uint32 begin_time = 1;
    optional uint32 end_time = 2;
    optional uint32 stage_id = 3;
    optional uint32 reward_id = 4;
}

message ClientCheckNetworkEnvReq {
    optional string token_str = 1;

    enum CmdId {
        CMD_ID = 1626;
    }
}

message ClientCheckNetworkEnvRsp {
    optional Retcode retcode = 1;
    optional string token_str = 2;

    enum CmdId {
        CMD_ID = 1627;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message ClientData {
    optional ClientDataType type = 1;
    optional uint32 id = 2;
    optional bytes data = 3;
}

enum ClientDataType {
    CLIENT_DATA_NONE = 0;
    CLIENT_DATA_ALL = 1;
    CLIENT_DATA_RPG_TALE = 2;
    CLIENT_DATA_WORLDMAP = 3;
    CLIENT_DATA_KINGDOM_WAR = 4;
    CLIENT_DATA_AUGMENT_PERFORMANCE = 5;
    CLIENT_DATA_AVATAR = 6;
    CLIENT_DATA_OPENWORLD_CHAPTER = 7;
    CLIENT_DATA_OPENWORLD = 8;
    CLIENT_DATA_NINJA = 9;
    CLIENT_DATA_AVATAR_TUTORIAL = 10;
    CLIENT_DATA_PHONE_NOTICE = 11;
    CLIENT_DATA_NEWBIE_ACTIVITY = 12;
}



message ClientMail {
    optional ClientMailKey key = 1;
    optional string title = 2;
    optional string content = 3;
    optional string sender = 4;
    optional uint32 time = 5;
    optional MailAttachment attachment = 6;
    optional bool is_attachment_got = 7;
    optional uint32 expire_time = 8;
    repeated string content_param_list = 9;
    optional uint32 template_id = 10;
    optional bool is_read = 11;
    optional uint32 mail_style = 12;
    optional string img_path = 13;
}


message ClientMailAttachmentItem {
    optional ClientMailKey key = 1;
    optional uint32 item_id = 2;
}

enum ClientMailFilterType {
    CLIENT_MAIL_FILTER_TYPE_ALL = 0;
    CLIENT_MAIL_FILTER_TYPE_IMPORTANT = 1;
}


message ClientMailInfo {
    optional uint32 total_num = 1;
    optional uint32 can_fast_delete_num = 2;
    repeated ClientMailStyleInfo mail_style_info_list = 3;
}


message ClientMailKey {
    optional ClientMailType type = 1;
    optional uint32 id = 2;
}

message ClientMailStyleInfo {
    optional uint32 mail_style = 1;
    optional uint32 untaken_num = 2;
}

enum ClientMailType {
    CLIENT_MAIL_NONE = 0;
    CLIENT_MAIL_MAIL = 1;
    CLIENT_MAIL_NOTICE = 2;
}


message ClientReportBinReq {
    optional ClientReportBinType report_type = 1;
    repeated bytes report_bin_list = 2;

    enum CmdId {
        CMD_ID = 5012;
    }
}

message ClientReportBinRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5013;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

enum ClientReportBinType {
    CLIENT_REPORT_BIN_INVALID = 0;
    CLIENT_REPORT_BIN_AVATAR_DETAIL = 1;
    CLIENT_REPORT_BIN_ATTACK_SNAPSHOT = 2;
}

message ClientReportReq {
    optional string report_type = 1;
    optional string report_value = 2;

    enum CmdId {
        CMD_ID = 5008;
    }
}

message ClientReportRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5009;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

enum ClientSettingType {
    CLIENT_SETTING_NONE = 0;
    CLIENT_SETTING_ALL = 1;
    CLIENT_SETTING_WEEKLY_GUIDE_SWITCH = 2;
    CLIENT_SETTING_SNS_SHOW = 3;
    CLIENT_SETTING_AVATAR_ARTIFACT = 4;
    CLIENT_SETTING_MASTER_PUPIL_TAG_SWITCH = 5;
}

enum CmdTypeActivity {
    CMD_GET_SCRATCH_TICKET_REQ = 4150;
    CMD_GET_SCRATCH_TICKET_RSP = 4151;
    CMD_SCRATCH_REQ = 4152;
    CMD_SCRATCH_RSP = 4153;
    CMD_RESET_SCRATCH_TICKET_PLATE_REQ = 4154;
    CMD_RESET_SCRATCH_TICKET_PLATE_RSP = 4155;
    CMD_ADD_ON_ACTIVITY_REWARD_NOTIFY = 4156;
    CMD_GET_BINGO_ACTIVITY_DATA_REQ = 4157;
    CMD_GET_BINGO_ACTIVITY_DATA_RSP = 4158;
    CMD_BINGO_ACTIVITY_FLOP_CARD_REQ = 4159;
    CMD_BINGO_ACTIVITY_FLOP_CARD_RSP = 4160;
    CMD_BINGO_ACTIVITY_RESET_BINGO_REQ = 4161;
    CMD_BINGO_ACTIVITY_RESET_BINGO_RSP = 4162;
    CMD_GET_BULLETIN_SCORE_ACTIVITY_REQ = 4163;
    CMD_GET_BULLETIN_SCORE_ACTIVITY_RSP = 4164;
    CMD_TAKE_BULLETIN_SCORE_ACTIVITY_REWARD_REQ = 4165;
    CMD_TAKE_BULLETIN_SCORE_ACTIVITY_REWARD_RSP = 4166;
    CMD_GET_CONTINUOUS_RECHARGE_ACTIVITY_REQ = 4167;
    CMD_GET_CONTINUOUS_RECHARGE_ACTIVITY_RSP = 4168;
    CMD_TAKE_CONTINUOUS_RECHARGE_REWARD_REQ = 4169;
    CMD_TAKE_CONTINUOUS_RECHARGE_REWARD_RSP = 4170;
    CMD_TAKE_FLOP_ACTIVITY_REWARD_REQ = 4171;
    CMD_TAKE_FLOP_ACTIVITY_REWARD_RSP = 4172;
    CMD_GET_FLOP_ACTIVITY_DATA_REQ = 4173;
    CMD_GET_FLOP_ACTIVITY_DATA_RSP = 4174;
    CMD_FLOP_ACTIVITY_FLOP_CARD_REQ = 4175;
    CMD_FLOP_ACTIVITY_FLOP_CARD_RSP = 4176;
    CMD_GET_LOTTERY_ACTIVITY_REQ = 4177;
    CMD_GET_LOTTERY_ACTIVITY_RSP = 4178;
    CMD_LOTTERY_USE_BOX_REQ = 4179;
    CMD_LOTTERY_USE_BOX_RSP = 4180;
    CMD_LOTTERY_DRAW_NUMBER_REQ = 4181;
    CMD_LOTTERY_DRAW_NUMBER_RSP = 4182;
    CMD_LOTTERY_TAKE_REWARD_REQ = 4183;
    CMD_LOTTERY_TAKE_REWARD_RSP = 4184;
    CMD_GET_TOWER_RAID_ACTIVITY_REQ = 4185;
    CMD_GET_TOWER_RAID_ACTIVITY_RSP = 4186;
    CMD_TAKE_TOWER_RAID_REWARD_REQ = 4187;
    CMD_TAKE_TOWER_RAID_REWARD_RSP = 4188;
    CMD_UPDATE_TOWER_RAID_BOSS_REQ = 4189;
    CMD_UPDATE_TOWER_RAID_BOSS_RSP = 4190;
    CMD_TOWER_RAID_LOCK_AVATAR_NOTIFY = 4191;
    CMD_GET_LOGIN_ACTIVITY_REQ = 4192;
    CMD_GET_LOGIN_ACTIVITY_RSP = 4193;
    CMD_TAKE_LOGIN_ACTIVITY_REWARD_REQ = 4194;
    CMD_TAKE_LOGIN_ACTIVITY_REWARD_RSP = 4195;
    CMD_GET_ONLINE_REWARD_ACTIVITY_REQ = 4196;
    CMD_GET_ONLINE_REWARD_ACTIVITY_RSP = 4197;
    CMD_TAKE_ONLINE_REWARD_REQ = 4198;
    CMD_TAKE_ONLINE_REWARD_RSP = 4199;
    CMD_GET_CHAPTER_ACTIVITY_DATA_REQ = 4200;
    CMD_GET_CHAPTER_ACTIVITY_DATA_RSP = 4201;
    CMD_TAKE_CHAPTER_ACTIVITY_LEVEL_REWARD_REQ = 4202;
    CMD_TAKE_CHAPTER_ACTIVITY_LEVEL_REWARD_RSP = 4203;
    CMD_SYNC_CHAPTER_ACTIVITY_DATA_NOTIFY = 4204;
    CMD_GET_MISSION_THEME_DATA_REQ = 4205;
    CMD_GET_MISSION_THEME_DATA_RSP = 4206;
    CMD_UPGRADE_MISSION_THEME_REQ = 4207;
    CMD_UPGRADE_MISSION_THEME_RSP = 4208;
    CMD_TAKE_MISSION_THEME_REWARD_REQ = 4209;
    CMD_TAKE_MISSION_THEME_REWARD_RSP = 4210;
    CMD_GET_OFFLINE_RESOURCE_DATA_REQ = 4211;
    CMD_GET_OFFLINE_RESOURCE_DATA_RSP = 4212;
    CMD_TAKE_OFFLINE_RESOURCE_BOX_REQ = 4213;
    CMD_TAKE_OFFLINE_RESOURCE_BOX_RSP = 4214;
    CMD_GET_OVERLAP_ACTIVITY_DATA_REQ = 4215;
    CMD_GET_OVERLAP_ACTIVITY_DATA_RSP = 4216;
    CMD_TAKE_OVERLAP_ACTIVITY_REWARD_REQ = 4217;
    CMD_TAKE_OVERLAP_ACTIVITY_REWARD_RSP = 4218;
    CMD_OVERLAP_ACTIVITY_SUMMON_REQ = 4219;
    CMD_OVERLAP_ACTIVITY_SUMMON_RSP = 4220;
    CMD_OVERLAP_ACTIVITY_MOVE_REQ = 4221;
    CMD_OVERLAP_ACTIVITY_MOVE_RSP = 4222;
    CMD_GET_VERSION_ACTIVITY_REQ = 4223;
    CMD_GET_VERSION_ACTIVITY_RSP = 4224;
    CMD_TAKE_VERSION_ACTIVITY_REWARD_REQ = 4225;
    CMD_TAKE_VERSION_ACTIVITY_REWARD_RSP = 4226;
    CMD_TAKE_VERSION_ACTIVITY_MISSION_REWARD_REQ = 4227;
    CMD_TAKE_VERSION_ACTIVITY_MISSION_REWARD_RSP = 4228;
    CMD_GET_WEEKLY_ROUTINE_ACTIVITY_REQ = 4229;
    CMD_GET_WEEKLY_ROUTINE_ACTIVITY_RSP = 4230;
    CMD_TAKE_WEEKLY_ROUTINE_REWARD_REQ = 4231;
    CMD_TAKE_WEEKLY_ROUTINE_REWARD_RSP = 4232;
    CMD_GET_RANK_SCHEDULE_DATA_REQ = 4233;
    CMD_GET_RANK_SCHEDULE_DATA_RSP = 4234;
    CMD_GET_RANK_SCHEDULE_RANK_REQ = 4235;
    CMD_GET_RANK_SCHEDULE_RANK_RSP = 4236;
    CMD_TAKE_SHARE_REWARD_REQ = 4237;
    CMD_TAKE_SHARE_REWARD_RSP = 4238;
    CMD_GET_HAVE_TAKEN_SHARE_REWARD_REQ = 4239;
    CMD_GET_HAVE_TAKEN_SHARE_REWARD_RSP = 4240;
    CMD_GET_SURVEY_DATA_REQ = 4241;
    CMD_GET_SURVEY_DATA_RSP = 4242;
    CMD_FINISH_SURVEY_NOTIFY = 4243;
    CMD_GET_THEME_DATA_REQ = 4244;
    CMD_GET_THEME_DATA_RSP = 4245;
    CMD_SYNC_THEME_DATA_NOTIFY = 4246;
    CMD_GRANT_OUTER_REWARD_NOTIFY = 4247;
    CMD_GET_NEWBIE_ACTIVITY_REQ = 4248;
    CMD_GET_NEWBIE_ACTIVITY_RSP = 4249;
    CMD_GET_BBQ_ACTIVITY_DATA_REQ = 4250;
    CMD_GET_BBQ_ACTIVITY_DATA_RSP = 4251;
    CMD_BBQ_ACTIVITY_COOK_REQ = 4252;
    CMD_BBQ_ACTIVITY_COOK_RSP = 4253;
    CMD_BBQ_ACTIVITY_TAKE_LEVEL_UP_REWARD_REQ = 4254;
    CMD_BBQ_ACTIVITY_TAKE_LEVEL_UP_REWARD_RSP = 4255;
    CMD_TAKE_NEWBIE_ACTIVITY_LEVEL_REWARD_REQ = 4256;
    CMD_TAKE_NEWBIE_ACTIVITY_LEVEL_REWARD_RSP = 4257;
    CMD_GET_QUESTION_ACTIVITY_REQ = 4258;
    CMD_GET_QUESTION_ACTIVITY_RSP = 4259;
    CMD_ANSWER_QUESTION_REQ = 4260;
    CMD_ANSWER_QUESTION_RSP = 4261;
    CMD_GET_TRADING_CARD_ACTIVITY_REQ = 4262;
    CMD_GET_TRADING_CARD_ACTIVITY_RSP = 4263;
    CMD_TAKE_TRADING_CARD_REWARD_REQ = 4264;
    CMD_TAKE_TRADING_CARD_REWARD_RSP = 4265;
    CMD_GET_PICTURE_ACTIVITY_REQ = 4266;
    CMD_GET_PICTURE_ACTIVITY_RSP = 4267;
    CMD_PICTURE_ACTIVITY_CHOOSE_REQ = 4268;
    CMD_PICTURE_ACTIVITY_CHOOSE_RSP = 4269;
    CMD_PICTURE_ACTIVITY_SHARE_REQ = 4270;
    CMD_PICTURE_ACTIVITY_SHARE_RSP = 4271;
    CMD_SYNC_PICTURE_ACTIVITY_SCORE_NOTIFY = 4272;
    CMD_GET_JIGSAW_ACTIVITY_REQ = 4273;
    CMD_GET_JIGSAW_ACTIVITY_RSP = 4274;
    CMD_JIGSAW_EXCHANGE_PIECE_REQ = 4275;
    CMD_JIGSAW_EXCHANGE_PIECE_RSP = 4276;
    CMD_JIGSAW_MOVE_WAITING_PIECE_REQ = 4277;
    CMD_JIGSAW_MOVE_WAITING_PIECE_RSP = 4278;
    CMD_JIGSAW_MOVE_PIECE_IN_JIGSAW_AREA_REQ = 4279;
    CMD_JIGSAW_MOVE_PIECE_IN_JIGSAW_AREA_RSP = 4280;
    CMD_JIGSAW_TAKE_GROUP_REWARD_REQ = 4281;
    CMD_JIGSAW_TAKE_GROUP_REWARD_RSP = 4282;
    CMD_JIGSAW_TAKE_FINISH_REWARD_REQ = 4283;
    CMD_JIGSAW_TAKE_FINISH_REWARD_RSP = 4284;
    CMD_TAKE_NEWBIE_CHALLENGE_REWARD_REQ = 4285;
    CMD_TAKE_NEWBIE_CHALLENGE_REWARD_RSP = 4286;
    CMD_GET_GARDEN_ACTIVITY_REQ = 4287;
    CMD_GET_GARDEN_ACTIVITY_RSP = 4288;
    CMD_GARDEN_HARVEST_REQ = 4289;
    CMD_GARDEN_HARVEST_RSP = 4290;
    CMD_GARDEN_SPEED_UP_WITH_MATERIAL_REQ = 4291;
    CMD_GARDEN_SPEED_UP_WITH_MATERIAL_RSP = 4292;
    CMD_GARDEN_REFRESH_SITE_REQ = 4293;
    CMD_GARDEN_REFRESH_SITE_RSP = 4294;
    CMD_GET_GARDEN_SCHEDULE_REQ = 4295;
    CMD_GET_GARDEN_SCHEDULE_RSP = 4296;
    CMD_GET_DROP_LIMIT_ACTIVITY_REQ = 4297;
    CMD_GET_DROP_LIMIT_ACTIVITY_RSP = 4298;
    CMD_GET_LOGIN_MISSION_ACTIVITY_REQ = 4299;
    CMD_GET_LOGIN_MISSION_ACTIVITY_RSP = 4300;
    CMD_TAKE_LOGIN_MISSION_REWARD_REQ = 4301;
    CMD_TAKE_LOGIN_MISSION_REWARD_RSP = 4302;
    CMD_SANCTUARY_GET_MAIN_INFO_REQ = 4305;
    CMD_SANCTUARY_GET_MAIN_INFO_RSP = 4306;
    CMD_SANCTUARY_TAKE_LEVEL_REWARD_REQ = 4307;
    CMD_SANCTUARY_TAKE_LEVEL_REWARD_RSP = 4308;
    CMD_SANCTUARY_TAKE_PRODUCT_REQ = 4309;
    CMD_SANCTUARY_TAKE_PRODUCT_RSP = 4310;
    CMD_SANCTUARY_START_NOTIFY = 4311;
    CMD_GET_ACTIVITY_REWARD_STATISTIC_DATA_REQ = 4312;
    CMD_GET_ACTIVITY_REWARD_STATISTIC_DATA_RSP = 4313;
    CMD_SANCTUARY_STAGE_END_NOTIFY = 4314;
    CMD_GET_SLOT_MACHINE_MAIN_INFO_REQ = 4315;
    CMD_GET_SLOT_MACHINE_MAIN_INFO_RSP = 4316;
    CMD_START_SLOT_MACHINE_REQ = 4317;
    CMD_START_SLOT_MACHINE_RSP = 4318;
    CMD_TAKE_SLOT_MACHINE_PROGRESS_REWARD_REQ = 4319;
    CMD_TAKE_SLOT_MACHINE_PROGRESS_REWARD_RSP = 4320;
    CMD_GET_BULLETIN_ACTIVITY_MISSION_REQ = 4321;
    CMD_GET_BULLETIN_ACTIVITY_MISSION_RSP = 4322;
    CMD_GET_EXAMINATION_ACTIVITY_REQ = 4323;
    CMD_GET_EXAMINATION_ACTIVITY_RSP = 4324;
    CMD_FINISH_EXAMINATION_REQ = 4325;
    CMD_FINISH_EXAMINATION_RSP = 4326;
    CMD_START_NEXT_ROUND_EXAMINATION_REQ = 4327;
    CMD_START_NEXT_ROUND_EXAMINATION_RSP = 4328;
    CMD_EVALUATE_EXAMINATION_REQ = 4329;
    CMD_EVALUATE_EXAMINATION_RSP = 4330;
    CMD_CHAPTER_ACTIVITY_DAILY_REWARD_NOTIFY = 4331;
    CMD_GET_SUPPORT_ACTIVITY_REQ = 4332;
    CMD_GET_SUPPORT_ACTIVITY_RSP = 4333;
    CMD_SUPPORT_ACTIVITY_SUPPORT_REQ = 4334;
    CMD_SUPPORT_ACTIVITY_SUPPORT_RSP = 4335;
    CMD_SUPPORT_ACTIVITY_TAKE_SHARE_REWARD_REQ = 4336;
    CMD_SUPPORT_ACTIVITY_TAKE_SHARE_REWARD_RSP = 4337;
    CMD_SUPPORT_ACTIVITY_TAKE_GLOBAL_REWARD_REQ = 4338;
    CMD_SUPPORT_ACTIVITY_TAKE_GLOBAL_REWARD_RSP = 4339;
    CMD_GET_MOSAIC_ACTIVITY_REQ = 4340;
    CMD_GET_MOSAIC_ACTIVITY_RSP = 4341;
    CMD_TAKE_MOSAIC_ACTIVITY_REWARD_REQ = 4342;
    CMD_TAKE_MOSAIC_ACTIVITY_REWARD_RSP = 4343;
    CMD_GET_BLOCK_ZONE_ACTIVITY_REQ = 4344;
    CMD_GET_BLOCK_ZONE_ACTIVITY_RSP = 4345;
    CMD_GET_MISSION_GROUP_MAIN_INFO_REQ = 4346;
    CMD_GET_MISSION_GROUP_MAIN_INFO_RSP = 4347;
    CMD_TAKE_MISSION_GROUP_REWARD_REQ = 4348;
    CMD_TAKE_MISSION_GROUP_REWARD_RSP = 4349;
    CMD_CHAPTER_ACTIVITY_TAKE_DAILY_REWARD_REQ = 4350;
    CMD_CHAPTER_ACTIVITY_TAKE_DAILY_REWARD_RSP = 4351;
    CMD_GET_BURDEN_ALLEVIATION_REQ = 4352;
    CMD_GET_BURDEN_ALLEVIATION_RSP = 4353;
    CMD_TRIGGER_BURDEN_ALLEVIATION_REQ = 4354;
    CMD_TRIGGER_BURDEN_ALLEVIATION_RSP = 4355;
    CMD_ROGUE_TOWER_GET_ACTIVITY_REQ = 4360;
    CMD_ROGUE_TOWER_GET_ACTIVITY_RSP = 4361;
    CMD_ROGUE_TOWER_GET_CANDIDATE_BUFF_REQ = 4362;
    CMD_ROGUE_TOWER_GET_CANDIDATE_BUFF_RSP = 4363;
    CMD_ROGUE_TOWER_SELECT_BUFF_REQ = 4364;
    CMD_ROGUE_TOWER_SELECT_BUFF_RSP = 4365;
    CMD_ROGUE_TOWER_SELECT_CHALLENGE_AVATAR_REQ = 4366;
    CMD_ROGUE_TOWER_SELECT_CHALLENGE_AVATAR_RSP = 4367;
    CMD_ROGUE_TOWER_REFRESH_BUFF_REQ = 4368;
    CMD_ROGUE_TOWER_REFRESH_BUFF_RSP = 4369;
    CMD_ROGUE_TOWER_LEVELUP_BUFF_REQ = 4370;
    CMD_ROGUE_TOWER_LEVELUP_BUFF_RSP = 4371;
    CMD_ROGUE_TOWER_SAVE_REQ = 4372;
    CMD_ROGUE_TOWER_SAVE_RSP = 4373;
    CMD_ROGUE_TOWER_LEVELUP_SUPPORT_AVATAR_REQ = 4374;
    CMD_ROGUE_TOWER_LEVELUP_SUPPORT_AVATAR_RSP = 4375;
    CMD_ROGUE_TOWER_GET_RANK_REQ = 4376;
    CMD_ROGUE_TOWER_GET_RANK_RSP = 4377;
    CMD_REUNION_COOK_GET_ACTIVITY_REQ = 4380;
    CMD_REUNION_COOK_GET_ACTIVITY_RSP = 4381;
    CMD_REUNION_COOK_MAKE_DINNER_REQ = 4382;
    CMD_REUNION_COOK_MAKE_DINNER_RSP = 4383;
    CMD_REUNION_COOK_TAKE_SCORE_REWARD_REQ = 4384;
    CMD_REUNION_COOK_TAKE_SCORE_REWARD_RSP = 4385;
    CMD_RESET_CHAPTER_ACTIVITY_EXCLUSIVE_STAGE_REQ = 4386;
    CMD_RESET_CHAPTER_ACTIVITY_EXCLUSIVE_STAGE_RSP = 4387;
    CMD_RESET_CHAPTER_ACTIVITY_TALENT_REQ = 4388;
    CMD_RESET_CHAPTER_ACTIVITY_TALENT_RSP = 4389;
    CMD_REPORT_CHAPTER_ACTIVITY_STAGE_REQ = 4390;
    CMD_REPORT_CHAPTER_ACTIVITY_STAGE_RSP = 4391;
}

enum CmdTypeActivity2 {
    CMD_DREAM_GET_ACTIVITY_REQ = 5750;
    CMD_DREAM_GET_ACTIVITY_RSP = 5751;
    CMD_DREAM_OPEN_DREAM_REQ = 5752;
    CMD_DREAM_OPEN_DREAM_RSP = 5753;
    CMD_DREAM_GIVE_UP_DREAM_REQ = 5754;
    CMD_DREAM_GIVE_UP_DREAM_RSP = 5755;
    CMD_DREAM_EXCHANGE_SCORE_REQ = 5756;
    CMD_DREAM_EXCHANGE_SCORE_RSP = 5757;
    CMD_DREAM_TAKE_REWARD_REQ = 5758;
    CMD_DREAM_TAKE_REWARD_RSP = 5759;
    CMD_GET_THEME_WANTED_REQ = 5790;
    CMD_GET_THEME_WANTED_RSP = 5791;
    CMD_THEME_WANTED_BUY_EXTRA_DROP_REQ = 5792;
    CMD_THEME_WANTED_BUY_EXTRA_DROP_RSP = 5793;
    CMD_THEME_WANTED_REFRESH_TICKET_REQ = 5794;
    CMD_THEME_WANTED_REFRESH_TICKET_RSP = 5795;
    CMD_GLOBAL_POLLING_GET_DATA_REQ = 5811;
    CMD_GLOBAL_POLLING_GET_DATA_RSP = 5812;
    CMD_GLOBAL_POLLING_SUPPORT_REQ = 5813;
    CMD_GLOBAL_POLLING_SUPPORT_RSP = 5814;
    CMD_GLOBAL_POLLING_VOTE_REQ = 5815;
    CMD_GLOBAL_POLLING_VOTE_RSP = 5816;
    CMD_GET_COLLABORATION_SCHEDULE_REQ = 5831;
    CMD_GET_COLLABORATION_SCHEDULE_RSP = 5832;
    CMD_RANCH_GET_ACTIVITY_REQ = 5833;
    CMD_RANCH_GET_ACTIVITY_RSP = 5834;
    CMD_RANCH_SYNTHESIS_MONSTER_REQ = 5835;
    CMD_RANCH_SYNTHESIS_MONSTER_RSP = 5836;
    CMD_RANCH_FREE_MONSTER_REQ = 5837;
    CMD_RANCH_FREE_MONSTER_RSP = 5838;
    CMD_RANCH_ASSIGN_MONSTER_REQ = 5839;
    CMD_RANCH_ASSIGN_MONSTER_RSP = 5840;
    CMD_RANCH_FIRE_MONSTER_REQ = 5841;
    CMD_RANCH_FIRE_MONSTER_RSP = 5842;
    CMD_RANCH_TAKE_PRODUCT_REQ = 5843;
    CMD_RANCH_TAKE_PRODUCT_RSP = 5844;
    CMD_RANCH_GET_MONSTER_WIKI_REQ = 5845;
    CMD_RANCH_GET_MONSTER_WIKI_RSP = 5846;
    CMD_RANCH_SYNC_MONSTER_NOTIFY = 5847;
    CMD_RANCH_DEL_MONSTER_NOTIFY = 5848;
    CMD_RANCH_LOCK_MONSTER_SKILL_REQ = 5849;
    CMD_RANCH_LOCK_MONSTER_SKILL_RSP = 5850;
    CMD_RANCH_SET_BATTLE_MONSTER_REQ = 5851;
    CMD_RANCH_SET_BATTLE_MONSTER_RSP = 5852;
    CMD_GET_RESTAURANT_ACTIVITY_REQ = 5860;
    CMD_GET_RESTAURANT_ACTIVITY_RSP = 5861;
    CMD_LEVELUP_RESTAURANT_FACILITY_REQ = 5862;
    CMD_LEVELUP_RESTAURANT_FACILITY_RSP = 5863;
    CMD_ASSIGN_RESTAURANT_WORK_REQ = 5864;
    CMD_ASSIGN_RESTAURANT_WORK_RSP = 5865;
    CMD_CANCEL_RESTAURANT_WORK_REQ = 5866;
    CMD_CANCEL_RESTAURANT_WORK_RSP = 5867;
    CMD_TAKE_RESTAURANT_ORDER_REQ = 5868;
    CMD_TAKE_RESTAURANT_ORDER_RSP = 5869;
    CMD_DELIVER_RESTAURANT_QUEST_REQ = 5870;
    CMD_DELIVER_RESTAURANT_QUEST_RSP = 5871;
    CMD_ACCELERATE_RESTAURANT_WORK_REQ = 5872;
    CMD_ACCELERATE_RESTAURANT_WORK_RSP = 5873;
    CMD_NEWBIE_LEVEL_RUSH_PURCHASE_REQ = 5881;
    CMD_NEWBIE_LEVEL_RUSH_PURCHASE_RSP = 5882;
    CMD_NEWBIE_LEVEL_RUSH_TAKE_REWARD_REQ = 5883;
    CMD_NEWBIE_LEVEL_RUSH_TAKE_REWARD_RSP = 5884;
    CMD_GET_REWARD_LINE_ACTIVITY_REQ = 5890;
    CMD_GET_REWARD_LINE_ACTIVITY_RSP = 5891;
    CMD_TAKE_REWARD_LINE_ACTIVITY_REWARD_REQ = 5892;
    CMD_TAKE_REWARD_LINE_ACTIVITY_REWARD_RSP = 5893;
    CMD_MONSTER_CARD_GET_ACTIVITY_REQ = 5920;
    CMD_MONSTER_CARD_GET_ACTIVITY_RSP = 5921;
    CMD_MONSTER_CARD_LEVEL_UP_REQ = 5922;
    CMD_MONSTER_CARD_LEVEL_UP_RSP = 5923;
    CMD_MONSTER_CARD_STAR_UP_REQ = 5924;
    CMD_MONSTER_CARD_STAR_UP_RSP = 5925;
    CMD_MONSTER_CARD_LEARN_RANDOM_TALENT_REQ = 5926;
    CMD_MONSTER_CARD_LEARN_RANDOM_TALENT_RSP = 5927;
    CMD_MONSTER_CARD_SYNC_CARD_NOTIFY = 5928;
    CMD_MONSTER_CARD_GET_TOWER_RANK_REQ = 5929;
    CMD_MONSTER_CARD_GET_TOWER_RANK_RSP = 5930;
    CMD_MONSTER_CARD_GET_BOSS_RANK_REQ = 5931;
    CMD_MONSTER_CARD_GET_BOSS_RANK_RSP = 5932;
    CMD_MONSTER_CARD_CONFIRM_RANDOM_TALENT_REQ = 5933;
    CMD_MONSTER_CARD_CONFIRM_RANDOM_TALENT_RSP = 5934;
    CMD_MONSTER_CARD_FRAGMENT_OVERFLOW_NOTIFY = 5935;
    CMD_BUFF_ASSIST_GET_ACTIVITY_REQ = 5941;
    CMD_BUFF_ASSIST_GET_ACTIVITY_RSP = 5942;
    CMD_BUFF_ASSIST_REFRESH_WAIT_SELECT_BUFF_POOL_REQ = 5943;
    CMD_BUFF_ASSIST_REFRESH_WAIT_SELECT_BUFF_POOL_RSP = 5944;
    CMD_BUFF_ASSIST_SELECT_BUFF_REQ = 5945;
    CMD_BUFF_ASSIST_SELECT_BUFF_RSP = 5946;
    CMD_BUFF_ASSIST_PUBLISH_BUFF_POOL_REQ = 5947;
    CMD_BUFF_ASSIST_PUBLISH_BUFF_POOL_RSP = 5948;
    CMD_BUFF_ASSIST_STAGE_END_NOTIFY = 5949;
    CMD_BUFF_ASSIST_RECV_STAGE_ASSIST_INFO_NOTIFY = 5950;
}

enum CmdTypeAdventure {
    GET_ADVENTURE_GROUP_REQ = 3900;
    GET_ADVENTURE_GROUP_RSP = 3901;
    SELECT_ADVENTURE_QUEST_REQ = 3902;
    SELECT_ADVENTURE_QUEST_RSP = 3903;
    TAKE_ADVENTURE_QUEST_REWARD_REQ = 3904;
    TAKE_ADVENTURE_QUEST_REWARD_RSP = 3905;
    TAKE_ADVENTURE_LEVEL_REWARD_REQ = 3908;
    TAKE_ADVENTURE_LEVEL_REWARD_RSP = 3909;
    CMD_CLAIM_SCOIN_REQ = 3910;
    CMD_CLAIM_SCOIN_RSP = 3911;
    CMD_ADVENTURE_STORY_SWEEP_REQ = 3912;
    CMD_ADVENTURE_STORY_SWEEP_RSP = 3913;
    CMD_GET_ADVENTURE_STORY_SWEEP_INFO_REQ = 3914;
    CMD_GET_ADVENTURE_STORY_SWEEP_INFO_RSP = 3915;
    CMD_TAKE_ADVENTURE_STORY_SWEEP_REWARD_REQ = 3916;
    CMD_TAKE_ADVENTURE_STORY_SWEEP_REWARD_RSP = 3917;
    CMD_TAKE_ADVENTURE_COMPENSATION_REQ = 3918;
    CMD_TAKE_ADVENTURE_COMPENSATION_RSP = 3919;
    CMD_EDIT_ADVENTURE_ROOM_REQ = 3920;
    CMD_EDIT_ADVENTURE_ROOM_RSP = 3921;
    CANCEL_ADVENTURE_QUEST_REQ = 3922;
    CANCEL_ADVENTURE_QUEST_RSP = 3923;
    RESET_ADVENTURE_QUEST_REQ = 3924;
    RESET_ADVENTURE_QUEST_RSP = 3925;
}

enum CmdTypeArmada {
    CMD_GET_ARMADA_DATA_REQ = 2601;
    CMD_GET_ARMADA_DATA_RSP = 2602;
    CMD_CREATE_ARMADA_REQ = 2603;
    CMD_CREATE_ARMADA_RSP = 2604;
    CMD_SEARCH_ARMADA_REQ = 2605;
    CMD_SEARCH_ARMADA_RSP = 2606;
    CMD_APPLY_JOIN_ARMADA_REQ = 2607;
    CMD_APPLY_JOIN_ARMADA_RSP = 2608;
    CMD_DEAL_ARMADA_APPLY_REQ = 2609;
    CMD_DEAL_ARMADA_APPLY_RSP = 2610;
    CMD_GET_ARMADA_MANAGE_DATA_REQ = 2611;
    CMD_GET_ARMADA_MANAGE_DATA_RSP = 2612;
    CMD_SET_ARMADA_APPLY_REQ = 2613;
    CMD_SET_ARMADA_APPLY_RSP = 2614;
    CMD_SET_ARMADA_BULLETIN_REQ = 2615;
    CMD_SET_ARMADA_BULLETIN_RSP = 2616;
    CMD_GET_RECOMMEND_ARMADA_REQ = 2617;
    CMD_GET_RECOMMEND_ARMADA_RSP = 2618;
    CMD_TRANSFER_ARMADA_LEADER_REQ = 2619;
    CMD_TRANSFER_ARMADA_LEADER_RSP = 2620;
    CMD_SET_ARMADA_POSITION_REQ = 2621;
    CMD_SET_ARMADA_POSITION_RSP = 2622;
    CMD_KICK_ARMADA_MEMBER_REQ = 2623;
    CMD_KICK_ARMADA_MEMBER_RSP = 2624;
    CMD_DISSOLVE_ARMADA_REQ = 2625;
    CMD_DISSOLVE_ARMADA_RSP = 2626;
    CMD_QUIT_ARMADA_REQ = 2627;
    CMD_QUIT_ARMADA_RSP = 2628;
    CMD_CANCEL_APPLY_ARMADA_REQ = 2629;
    CMD_CANCEL_APPLY_ARMADA_RSP = 2630;
    CMD_LEVEL_UP_ARMADA_CABIN_REQ = 2631;
    CMD_LEVEL_UP_ARMADA_CABIN_RSP = 2632;
    CMD_CANCEL_LEVEL_UP_ARMADA_CABIN_REQ = 2633;
    CMD_CANCEL_LEVEL_UP_ARMADA_CABIN_RSP = 2634;
    CMD_MOVE_ARMADA_CABIN_REQ = 2635;
    CMD_MOVE_ARMADA_CABIN_RSP = 2636;
    CMD_GET_CONSIGNED_ORDER_DATA_REQ = 2639;
    CMD_GET_CONSIGNED_ORDER_DATA_RSP = 2640;
    CMD_CHOOSE_CONSIGNED_ORDER_REQ = 2641;
    CMD_CHOOSE_CONSIGNED_ORDER_RSP = 2642;
    CMD_FINISH_CONSIGNED_ORDER_REQ = 2643;
    CMD_FINISH_CONSIGNED_ORDER_RSP = 2644;
    CMD_RESET_CONSIGNED_ORDER_REQ = 2645;
    CMD_RESET_CONSIGNED_ORDER_RSP = 2646;
    CMD_GET_WAREHOUSE_DATA_REQ = 2647;
    CMD_GET_WAREHOUSE_DATA_RSP = 2648;
    CMD_POST_WAREHOUSE_DEMAND_REQ = 2649;
    CMD_POST_WAREHOUSE_DEMAND_RSP = 2650;
    CMD_CANCEL_WAREHOUSE_DEMAND_REQ = 2651;
    CMD_CANCEL_WAREHOUSE_DEMAND_RSP = 2652;
    CMD_DONATE_WAREHOUSE_ITEM_REQ = 2653;
    CMD_DONATE_WAREHOUSE_ITEM_RSP = 2654;
    CMD_GET_WAREHOUSE_ITEM_REQ = 2655;
    CMD_GET_WAREHOUSE_ITEM_RSP = 2656;
    CMD_ENTER_ARMADA_CHATROOM_REQ = 2657;
    CMD_ENTER_ARMADA_CHATROOM_RSP = 2658;
    CMD_SEND_ARMADA_SYSTEM_CHAT_MSG_NOTIFY = 2661;
    CMD_RECV_ARMADA_SYSTEM_CHAT_MSG_NOTIFY = 2662;
    CMD_GET_ARMADA_DISCOVERY_REQ = 2663;
    CMD_GET_ARMADA_DISCOVERY_RSP = 2664;
    CMD_GET_ARMADA_MEMBER_DISCOVERY_LIST_REQ = 2665;
    CMD_GET_ARMADA_MEMBER_DISCOVERY_LIST_RSP = 2666;
    CMD_GET_ARMADA_STAGE_REQ = 2667;
    CMD_GET_ARMADA_STAGE_RSP = 2668;
    CMD_ARMADA_STAGE_BEGIN_REQ = 2669;
    CMD_ARMADA_STAGE_BEGIN_RSP = 2670;
    CMD_ARMADA_STAGE_END_REQ = 2671;
    CMD_ARMADA_STAGE_END_RSP = 2672;
    CMD_GET_ARMADA_STAGE_REWARD_REQ = 2673;
    CMD_GET_ARMADA_STAGE_REWARD_RSP = 2674;
    CMD_TAKE_ARMADA_STAGE_REWARD_REQ = 2675;
    CMD_TAKE_ARMADA_STAGE_REWARD_RSP = 2676;
    CMD_DONATE_WAREHOSUE_NOTIFY = 2677;
    CMD_ARMADA_BUILD_NOTIFY = 2678;
    CMD_ARMADA_BULLETIN_NOTIFY = 2679;
    CMD_ARMADA_MANAGE_NOTIFY = 2680;
    CMD_ARMADA_PLAYER_NOTIFY = 2681;
    CMD_ARMADA_APPLY_NOTIFY = 2682;
    CMD_CANCEL_DISSOLVE_ARMADA_REQ = 2683;
    CMD_CANCEL_DISSOLVE_ARMADA_RSP = 2684;
    CMD_GET_ARMADA_BUILD_OWNERSHIP_REQ = 2685;
    CMD_GET_ARMADA_BUILD_OWNERSHIP_RSP = 2686;
    CMD_RELEASE_ARMADA_BUILD_OWNERSHIP_REQ = 2687;
    CMD_RELEASE_ARMADA_BUILD_OWNERSHIP_RSP = 2688;
    CMD_ARMADA_SEND_MAIL_REQ = 2689;
    CMD_ARMADA_SEND_MAIL_RSP = 2690;
    CMD_CHANGE_ARMADA_NAME_REQ = 2691;
    CMD_CHANGE_ARMADA_NAME_RSP = 2692;
    CMD_JOIN_ARMADA_ELECTION_REQ = 2693;
    CMD_JOIN_ARMADA_ELECTION_RSP = 2694;
    CMD_ARMADA_LOGOUT_NOTIFY = 2731;
    CMD_QUICK_APPLY_JOIN_ARMADA_REQ = 2732;
    CMD_QUICK_APPLY_JOIN_ARMADA_RSP = 2733;
    CMD_ARMADA_MATRIX_GET_SCHEDULE_REQ = 2734;
    CMD_ARMADA_MATRIX_GET_SCHEDULE_RSP = 2735;
    CMD_ARMADA_MATRIX_GET_MAIN_INFO_REQ = 2736;
    CMD_ARMADA_MATRIX_GET_MAIN_INFO_RSP = 2737;
    CMD_ARMADA_MATRIX_ADVANCE_REQ = 2738;
    CMD_ARMADA_MATRIX_ADVANCE_RSP = 2739;
    CMD_ARMADA_MATRIX_STAGE_BEGIN_REQ = 2740;
    CMD_ARMADA_MATRIX_STAGE_BEGIN_RSP = 2741;
    CMD_ARMADA_MATRIX_STAGE_END_REQ = 2742;
    CMD_ARMADA_MATRIX_STAGE_END_RSP = 2743;
    CMD_ARMADA_MATRIX_SYNC_NOTIFY = 2744;
    CMD_ARMADA_MATRIX_STAGE_BATTLE_NOTIFY = 2745;
    CMD_ARMADA_MATRIX_SET_AVATAR_TEAM_REQ = 2746;
    CMD_ARMADA_MATRIX_SET_AVATAR_TEAM_RSP = 2747;
    CMD_ARMADA_MATRIX_GET_AVATAR_TEAM_REQ = 2748;
    CMD_ARMADA_MATRIX_GET_AVATAR_TEAM_RSP = 2749;
    CMD_ARMADA_MATRIX_PLAYER_AVATAR_SYNC_NOTIFY = 2750;
    CMD_ARMADA_MATRIX_SET_CUR_AVATAR_TEAM_REQ = 2751;
    CMD_ARMADA_MATRIX_SET_CUR_AVATAR_TEAM_RSP = 2752;
    CMD_ARMADA_MATRIX_ACTIVATE_BUFF_REQ = 2753;
    CMD_ARMADA_MATRIX_ACTIVATE_BUFF_RSP = 2754;
    CMD_ARMADA_MATRIX_GET_GENERIC_ITEM_REQ = 2755;
    CMD_ARMADA_MATRIX_GET_GENERIC_ITEM_RSP = 2756;
    CMD_ARMADA_MATRIX_PLAYER_MAIN_INFO_SYNC_NOTIFY = 2757;
    CMD_ARMADA_MATRIX_EXCHANGE_EXPLORE_POWER_REQ = 2758;
    CMD_ARMADA_MATRIX_EXCHANGE_EXPLORE_POWER_RSP = 2759;
    CMD_ARMADA_MATRIX_GET_EXCHANGE_EXPLORE_POWER_INFO_REQ = 2760;
    CMD_ARMADA_MATRIX_GET_EXCHANGE_EXPLORE_POWER_INFO_RSP = 2761;
    CMD_ARMADA_MATRIX_USE_ITEM_REQ = 2762;
    CMD_ARMADA_MATRIX_USE_ITEM_RSP = 2763;
    CMD_ARMADA_MATRIX_USE_ITEM_NOTIFY = 2764;
    CMD_ARMADA_MATRIX_LEAVE_MSG_SYNC_NOTIFY = 2765;
    CMD_ARMADA_MATRIX_TEMPORARY_BUFF_SYNC_NOTIFY = 2766;
    CMD_ARMADA_MATRIX_SHOP_SYNC_NOTIFY = 2767;
    CMD_ARMADA_MATRIX_SHOP_BUY_REQ = 2768;
    CMD_ARMADA_MATRIX_SHOP_BUY_RSP = 2769;
    CMD_ARMADA_MATRIX_RANDOM_EVENT_NOTIFY = 2770;
    CMD_ARMADA_MATRIX_TREASURE_NOTIFY = 2771;
    CMD_ARMADA_MATRIX_CHANGE_LEVEL_REQ = 2772;
    CMD_ARMADA_MATRIX_CHANGE_LEVEL_RSP = 2773;
    CMD_ARMADA_MATRIX_GET_LEVEL_BRIEF_DATA_REQ = 2774;
    CMD_ARMADA_MATRIX_GET_LEVEL_BRIEF_DATA_RSP = 2775;
    CMD_ARMADA_MATRIX_LEVEL_BRIEF_DATA_NOTIFY = 2776;
    CMD_ARMADA_MATRIX_GRANT_SCORE_REWARD_NOTIFY = 2777;
    CMD_ARMADA_MATRIX_GET_SCORE_REWARD_INFO_REQ = 2778;
    CMD_ARMADA_MATRIX_GET_SCORE_REWARD_INFO_RSP = 2779;
    CMD_ARMADA_MATRIX_GET_RANK_LIST_REQ = 2780;
    CMD_ARMADA_MATRIX_GET_RANK_LIST_RSP = 2781;
    CMD_ARMADA_MATRIX_GET_OVERVIEW_REQ = 2782;
    CMD_ARMADA_MATRIX_GET_OVERVIEW_RSP = 2783;
    CMD_ARMADA_MATRIX_GET_LOCKED_GRID_INFO_REQ = 2784;
    CMD_ARMADA_MATRIX_GET_LOCKED_GRID_INFO_RSP = 2785;
    CMD_ARMADA_MATRIX_GET_TEMPORARY_DEPOSIT_REQ = 2786;
    CMD_ARMADA_MATRIX_GET_TEMPORARY_DEPOSIT_RSP = 2787;
    CMD_ARMADA_MATRIX_CHOOSE_TEMPORARY_DEPOSIT_REQ = 2788;
    CMD_ARMADA_MATRIX_CHOOSE_TEMPORARY_DEPOSIT_RSP = 2789;
    CMD_ARMADA_MATRIX_EXIT_CONDITION_SYNC_NOTIFY = 2790;
    CMD_ARMADA_MATRIX_USE_TEMP_BUFF_REQ = 2791;
    CMD_ARMADA_MATRIX_USE_TEMP_BUFF_RSP = 2792;
    CMD_ARMADA_MATRIX_TAKE_FATIGUE_REWARD_REQ = 2793;
    CMD_ARMADA_MATRIX_TAKE_FATIGUE_REWARD_RSP = 2794;
    CMD_ARMADA_MATRIX_DIALOG_EVENT_NOTIFY = 2795;
    CMD_ARMADA_MATRIX_TRANSPORT_NOTIFY = 2796;
    CMD_ARMADA_MATRIX_DIALOG_CHOOSE_EVENT_REQ = 2797;
    CMD_ARMADA_MATRIX_DIALOG_CHOOSE_EVENT_RSP = 2798;
    CMD_OPEN_ARMADA_STAGE_REQ = 2799;
    CMD_OPEN_ARMADA_STAGE_RSP = 2800;
    CMD_TAKE_ARMADA_ACHIEVEMENT_REQ = 2801;
    CMD_TAKE_ARMADA_ACHIEVEMENT_RSP = 2802;
    CMD_GET_RECOMMEND_ARMADA_MEMBER_LIST_REQ = 2803;
    CMD_GET_RECOMMEND_ARMADA_MEMBER_LIST_RSP = 2804;
    CMD_JOIN_QUIT_ARMADA_NOTIFY = 2805;
    CMD_ARMADA_PLAYER_CONTRIBUTION_SYNC_NOTIFY = 2806;
    CMD_ARMADA_MATRIX_ACTIVE_REQ = 2808;
    CMD_ARMADA_MATRIX_ACTIVE_RSP = 2809;
    CMD_ARMADA_MATRIX_ASK_SUPPLY_REQ = 2810;
    CMD_ARMADA_MATRIX_ASK_SUPPLY_RSP = 2811;
    CMD_ARMADA_MATRIX_SYNC_MEMBER_NOTIFY = 2812;
    CMD_ARMADA_MATRIX_INTERACT_NOTIFY = 2813;
    CMD_ARMADA_MATRIX_FIRE_BOSS_ITEM_REQ = 2814;
    CMD_ARMADA_MATRIX_FIRE_BOSS_ITEM_RSP = 2815;
    CMD_ARMADA_MATRIX_SYNC_ARMADA_INFO_NOTIFY = 2816;
    CMD_ARMADA_MATRIX_GET_RANDOM_INFO_REQ = 2817;
    CMD_ARMADA_MATRIX_GET_RANDOM_INFO_RSP = 2818;
    CMD_ARMADA_MATRIX_GET_LOCATION_REQ = 2819;
    CMD_ARMADA_MATRIX_GET_LOCATION_RSP = 2820;
    CMD_GET_ARMADA_STAGE_SCORE_ACTIVITY_REQ = 2821;
    CMD_GET_ARMADA_STAGE_SCORE_ACTIVITY_RSP = 2822;
    CMD_TAKE_ARMADA_STAGE_SCORE_ACTIVITY_REWARD_REQ = 2823;
    CMD_TAKE_ARMADA_STAGE_SCORE_ACTIVITY_REWARD_RSP = 2824;
    CMD_GET_ARMADA_ACTIVITY_LIST_REQ = 2825;
    CMD_GET_ARMADA_ACTIVITY_LIST_RSP = 2826;
    CMD_ARMADA_MATRIX_CHOOSE_PATH_REQ = 2827;
    CMD_ARMADA_MATRIX_CHOOSE_PATH_RSP = 2828;
    CMD_ARMADA_MATRIX_CONFIRM_POS_REQ = 2829;
    CMD_ARMADA_MATRIX_CONFIRM_POS_RSP = 2830;
    CMD_ARMADA_MATRIX_QUESTION_NOTIFY = 2831;
    CMD_ARMADA_MATRIX_ANSWER_QUESTION_REQ = 2832;
    CMD_ARMADA_MATRIX_ANSWER_QUESTION_RSP = 2833;
    CMD_GET_ARMADA_REUNION_ACTIVITY_REQ = 2834;
    CMD_GET_ARMADA_REUNION_ACTIVITY_RSP = 2835;
    CMD_ARMADA_REUNION_REWARD_NOTIFY = 2836;
    CMD_TAKE_ARMADA_REUNION_REWARD_REQ = 2837;
    CMD_TAKE_ARMADA_REUNION_REWARD_RSP = 2838;
    CMD_SET_ARMADA_LABEL_REQ = 2840;
    CMD_SET_ARMADA_LABEL_RSP = 2841;
    CMD_GET_ARMADA_STAGE_SCORE_RANK_REQ = 2842;
    CMD_GET_ARMADA_STAGE_SCORE_RANK_RSP = 2843;
}

enum CmdTypeAvatarmission {
    CMD_GET_AVATAR_MISSION_ACTIVITY_REQ = 3000;
    CMD_GET_AVATAR_MISSION_ACTIVITY_RSP = 3001;
    CMD_CHOOSE_AVATAR_MISSION_AVATAR_REQ = 3002;
    CMD_CHOOSE_AVATAR_MISSION_AVATAR_RSP = 3003;
    CMD_TAKE_AVATAR_MISSION_DAILY_REWARD_REQ = 3004;
    CMD_TAKE_AVATAR_MISSION_DAILY_REWARD_RSP = 3005;
    CMD_TAKE_AVATAR_MISSION_PHASE_REWARD_REQ = 3006;
    CMD_TAKE_AVATAR_MISSION_PHASE_REWARD_RSP = 3007;
    CMD_RESET_AVATAR_MISSION_AVATAR_REQ = 3008;
    CMD_RESET_AVATAR_MISSION_AVATAR_RSP = 3009;
}

enum CmdTypeBattlepass {
    CMD_GET_BATTLE_PASS_REQ = 3750;
    CMD_GET_BATTLE_PASS_RSP = 3751;
    CMD_BUY_BATTLE_PASS_TICKET_REQ = 3752;
    CMD_BUY_BATTLE_PASS_TICKET_RSP = 3753;
    CMD_TAKE_BATTLE_PASS_LEVEL_REWARD_REQ = 3754;
    CMD_TAKE_BATTLE_PASS_LEVEL_REWARD_RSP = 3755;
    CMD_BUY_BATTLE_PASS_LEVEL_REQ = 3756;
    CMD_BUY_BATTLE_PASS_LEVEL_RSP = 3757;
    CMD_TAKE_BATTLE_PASS_PHASE_EXP_REQ = 3758;
    CMD_TAKE_BATTLE_PASS_PHASE_EXP_RSP = 3759;
    CMD_GET_BATTLE_PASS_THEME_REQ = 3760;
    CMD_GET_BATTLE_PASS_THEME_RSP = 3761;
    CMD_TAKE_BATTLE_PASS_THEME_LEVEL_REWARD_REQ = 3762;
    CMD_TAKE_BATTLE_PASS_THEME_LEVEL_REWARD_RSP = 3763;
    CMD_BUY_BATTLE_PASS_THEME_LEVEL_REQ = 3764;
    CMD_BUY_BATTLE_PASS_THEME_LEVEL_RSP = 3765;
    CMD_BATTLE_PASS_THEME_EXP_TRANSFORM_NOTIFY = 3766;
}

enum CmdTypeChat {
    CMD_CREATE_CHATGROUP_REQ = 2200;
    CMD_CREATE_CHATGROUP_RSP = 2201;
    CMD_INVITE_CHATGROUP_REQ = 2202;
    CMD_INVITE_CHATGROUP_RSP = 2203;
    CMD_GET_CHATGROUP_LIST_REQ = 2204;
    CMD_GET_CHATGROUP_LIST_RSP = 2205;
    CMD_SET_CHATGROUP_REQ = 2206;
    CMD_SET_CHATGROUP_RSP = 2207;
    CMD_LEAVE_CHATGROUP_REQ = 2208;
    CMD_LEAVE_CHATGROUP_RSP = 2209;
    CMD_CHATGROUP_SYSTEM_NOTIFY = 2211;
    CMD_KICK_CHATGROUP_MEMBER_REQ = 2212;
    CMD_KICK_CHATGROUP_MEMBER_RSP = 2213;
    CMD_DEAL_CHATGROUP_INVITE_REQ = 2214;
    CMD_DEAL_CHATGROUP_INVITE_RSP = 2215;
    CMD_INVITE_TO_MULTI_CHATGROUP_REQ = 2216;
    CMD_INVITE_TO_MULTI_CHATGROUP_RSP = 2217;
    CMD_GET_CHATGROUP_HISTORY_CHAT_MSG_REQ = 2218;
    CMD_GET_CHATGROUP_HISTORY_CHAT_MSG_RSP = 2219;
    CMD_ENTER_WORLD_CHATROOM_REQ = 2231;
    CMD_ENTER_WORLD_CHATROOM_RSP = 2232;
    CMD_LEAVE_CHATROOM_NOTIFY = 2233;
    CMD_SEND_CHAT_MSG_NOTIFY = 2234;
    CMD_RECV_CHAT_MSG_NOTIFY = 2235;
    CMD_RECV_OFFLINE_PRIVATE_CHAT_MSG_NOTIFY = 2236;
    CMD_GET_HISTORY_PRIVATE_CHAT_MSG_REQ = 2237;
    CMD_GET_HISTORY_PRIVATE_CHAT_MSG_RSP = 2238;
    CMD_CHAT_CLOSED_NOTIFY = 2239;
}

enum CmdTypeChatworld {
    CMD_ENTER_COMMON_CHATWORLD_REQ = 2400;
    CMD_ENTER_COMMON_CHATWORLD_RSP = 2401;
    CMD_LEAVE_COMMON_CHATWORLD_REQ = 2402;
    CMD_LEAVE_COMMON_CHATWORLD_RSP = 2403;
    CMD_SEND_COMMON_CHATWORLD_MSG_NOTIFY = 2404;
    CMD_RECV_COMMON_CHATWORLD_MSG_NOTIFY = 2405;
    CMD_CHATWORLD_USE_ITEM_REQ = 2407;
    CMD_CHATWORLD_USE_ITEM_RSP = 2408;
    CMD_CHATWORLD_CHANGE_AVATAR_REQ = 2409;
    CMD_CHATWORLD_CHANGE_AVATAR_RSP = 2410;
    CMD_GET_CHATWORLD_LIST_REQ = 2411;
    CMD_GET_CHATWORLD_LIST_RSP = 2412;
    CMD_CHATWORLD_INTERACT_REQ = 2413;
    CMD_CHATWORLD_INTERACT_RSP = 2414;
    CMD_GET_CHATWORLD_TREASURE_DATA_REQ = 2415;
    CMD_GET_CHATWORLD_TREASURE_DATA_RSP = 2416;
    CMD_OPEN_CHATWORLD_TREASURE_REQ = 2417;
    CMD_OPEN_CHATWORLD_TREASURE_RSP = 2418;
    CMD_CHATWORLD_TREASURE_REWARD_NOTIFY = 2419;
    CMD_CHATWORLD_SKILL_DAMAGE_JUDGE_REQ = 2420;
    CMD_CHATWORLD_SKILL_DAMAGE_JUDGE_RSP = 2421;
    CMD_CHATWORLD_BATTLE_USE_ITEM_REQ = 2422;
    CMD_CHATWORLD_BATTLE_USE_ITEM_RSP = 2423;
    CMD_CHATWORLD_POS_RESET_NOTIFY = 2424;
    CMD_CHATWORLD_BATTLE_COLLECT_ITEM_REQ = 2425;
    CMD_CHATWORLD_BATTLE_COLLECT_ITEM_RSP = 2426;
    CMD_CHATWORLD_GET_ACTIVITY_SCHEDULE_REQ = 2427;
    CMD_CHATWORLD_GET_ACTIVITY_SCHEDULE_RSP = 2428;
    CMD_CHATWORLD_FISH_JOIN_SPOT_REQ = 2429;
    CMD_CHATWORLD_FISH_JOIN_SPOT_RSP = 2430;
    CMD_CHATWORLD_FISH_LEAVE_SPOT_REQ = 2431;
    CMD_CHATWORLD_FISH_LEAVE_SPOT_RSP = 2432;
    CMD_CHATWORLD_FISH_START_REQ = 2433;
    CMD_CHATWORLD_FISH_START_RSP = 2434;
    CMD_CHATWORLD_FISH_END_REQ = 2435;
    CMD_CHATWORLD_FISH_END_RSP = 2436;
    CMD_CHATWORLD_FISH_ASSIST_REQ = 2437;
    CMD_CHATWORLD_FISH_ASSIST_RSP = 2438;
    CMD_CHATWORLD_FISH_LIKE_REQ = 2439;
    CMD_CHATWORLD_FISH_LIKE_RSP = 2440;
    CMD_CHATWORLD_FISH_REWARD_NOTIFY = 2441;
    CMD_CHATWORLD_FISH_CANCEL_WAIT_ASSIST_REQ = 2442;
    CMD_CHATWORLD_FISH_CANCEL_WAIT_ASSIST_RSP = 2443;
    CMD_CHATWORLD_FISH_KICK_PLAYER_NOTIFY = 2444;
    CMD_CHATWORLD_FISH_GET_ACTIVITY_INFO_REQ = 2445;
    CMD_CHATWORLD_FISH_GET_ACTIVITY_INFO_RSP = 2446;
    CMD_CHATWORLD_GET_PRAY_INFO_REQ = 2451;
    CMD_CHATWORLD_GET_PRAY_INFO_RSP = 2452;
    CMD_CHATWORLD_PRAY_REQ = 2453;
    CMD_CHATWORLD_PRAY_RSP = 2454;
    CMD_CHATWORLD_GRANT_REWARD_NOTIFY = 2455;
    CMD_CHATWORLD_GET_DISH_INFO_REQ = 2456;
    CMD_CHATWORLD_GET_DISH_INFO_RSP = 2457;
    CMD_CHATWORLD_TAKE_DISH_REWARD_REQ = 2458;
    CMD_CHATWORLD_TAKE_DISH_REWARD_RSP = 2459;
    CMD_CHATWORLD_BEAST_ADD_RESULT_NOTIFY = 2460;
    CMD_CHATWORLD_BEAST_CHALLENGE_REQ = 2461;
    CMD_CHATWORLD_BEAST_CHALLENGE_RSP = 2462;
    CMD_CHATWORLD_BEAST_SYNC_REQ = 2463;
    CMD_CHATWORLD_BEAST_SYNC_RSP = 2464;
    CMD_CHATWORLD_BEAST_GET_ACTIVITY_REQ = 2465;
    CMD_CHATWORLD_BEAST_GET_ACTIVITY_RSP = 2466;
    CMD_CHATWORLD_BOX_GET_DATA_REQ = 2467;
    CMD_CHATWORLD_BOX_GET_DATA_RSP = 2468;
    CMD_CHATWORLD_BOX_TAKE_REWARD_REQ = 2469;
    CMD_CHATWORLD_BOX_TAKE_REWARD_RSP = 2470;
    CMD_CHATWORLD_BEAST_TAKE_TREASURE_REQ = 2471;
    CMD_CHATWORLD_BEAST_TAKE_TREASURE_RSP = 2472;
    CMD_CHATWORLD_BEAST_ABANDON_CHALLENGE_REQ = 2473;
    CMD_CHATWORLD_BEAST_ABANDON_CHALLENGE_RSP = 2474;
    CMD_CHATWORLD_DUMMY = 2599;
}

enum CmdTypeCredit {
    CMD_CREDIT_REPORT_DATA_REQ = 6000;
    CMD_CREDIT_REPORT_DATA_RSP = 6001;
    CMD_CREDIT_ACCOUNT_GET_REQ = 6002;
    CMD_CREDIT_ACCOUNT_GET_RSP = 6003;
}

enum CmdTypeDiceydungeon {
    CMD_DICEY_DUNGEON_ACTIVITY_GET_DATA_REQ = 6500;
    CMD_DICEY_DUNGEON_ACTIVITY_GET_DATA_RSP = 6501;
    CMD_DICEY_DUNGEON_ACTIVITY_ROLE_LEVEL_UP_REQ = 6502;
    CMD_DICEY_DUNGEON_ACTIVITY_ROLE_LEVEL_UP_RSP = 6503;
    CMD_DICEY_DUNGEON_ACTIVITY_DUNGEON_BEGIN_REQ = 6504;
    CMD_DICEY_DUNGEON_ACTIVITY_DUNGEON_BEGIN_RSP = 6505;
    CMD_DICEY_DUNGEON_ACTIVITY_DUNGEON_END_REQ = 6506;
    CMD_DICEY_DUNGEON_ACTIVITY_DUNGEON_END_RSP = 6507;
    CMD_DICEY_DUNGEON_ACTIVITY_ROOM_BEGIN_REQ = 6508;
    CMD_DICEY_DUNGEON_ACTIVITY_ROOM_BEGIN_RSP = 6509;
    CMD_DICEY_DUNGEON_ACTIVITY_ROOM_END_REQ = 6510;
    CMD_DICEY_DUNGEON_ACTIVITY_ROOM_END_RSP = 6511;
    CMD_DICEY_DUNGEON_ACTIVITY_GET_WEAPON_GACHA_DISPLAY_REQ = 6512;
    CMD_DICEY_DUNGEON_ACTIVITY_GET_WEAPON_GACHA_DISPLAY_RSP = 6513;
    CMD_DICEY_DUNGEON_ACTIVITY_WEAPON_GACHA_REQ = 6514;
    CMD_DICEY_DUNGEON_ACTIVITY_WEAPON_GACHA_RSP = 6515;
    CMD_DICEY_DUNGEON_ACTIVITY_SELECT_ORNAMENT_REQ = 6516;
    CMD_DICEY_DUNGEON_ACTIVITY_SELECT_ORNAMENT_RSP = 6517;
    CMD_DICEY_DUNGEON_ACTIVITY_REFRESH_ORNAMENT_REQ = 6518;
    CMD_DICEY_DUNGEON_ACTIVITY_REFRESH_ORNAMENT_RSP = 6519;
    CMD_DICEY_DUNGEON_ACTIVITY_GET_DAILY_SCORE_RANK_REQ = 6520;
    CMD_DICEY_DUNGEON_ACTIVITY_GET_DAILY_SCORE_RANK_RSP = 6521;
}

enum CmdTypeDlc {
    CMD_GET_DLC_REQ = 3550;
    CMD_GET_DLC_RSP = 3551;
    CMD_LEVEL_UP_DLC_AVATAR_TALENT_REQ = 3552;
    CMD_LEVEL_UP_DLC_AVATAR_TALENT_RSP = 3553;
    CMD_EQUIP_DLC_AVATAR_TALENT_REQ = 3554;
    CMD_EQUIP_DLC_AVATAR_TALENT_RSP = 3555;
    CMD_SYNC_DLC_AVATAR_NOTIFY = 3556;
    CMD_MODIFY_DLC_NAME_REQ = 3557;
    CMD_MODIFY_DLC_NAME_RSP = 3558;
    CMD_GET_DLC_AVATAR_REQ = 3559;
    CMD_GET_DLC_AVATAR_RSP = 3560;
    CMD_TAKE_DLC_LEVEL_REWARD_REQ = 3561;
    CMD_TAKE_DLC_LEVEL_REWARD_RSP = 3562;
    CMD_DLC_TOWER_STAGE_BEGIN_REQ = 3563;
    CMD_DLC_TOWER_STAGE_BEGIN_RSP = 3564;
    CMD_DLC_TOWER_STAGE_END_REQ = 3565;
    CMD_DLC_TOWER_STAGE_END_RSP = 3566;
    CMD_DLC_AVATAR_REVIVE_REQ = 3569;
    CMD_DLC_AVATAR_REVIVE_RSP = 3570;
    CMD_GET_DLC_TOWER_RANK_REQ = 3571;
    CMD_GET_DLC_TOWER_RANK_RSP = 3572;
    CMD_TAKE_DLC_RANK_REWARD_NOTIFY = 3573;
    CMD_GET_DLC_TOWER_REQ = 3574;
    CMD_GET_DLC_TOWER_RSP = 3575;
    CMD_RESET_DLC_TOWER_PROGRESS_REQ = 3576;
    CMD_RESET_DLC_TOWER_PROGRESS_RSP = 3577;
    CMD_FINISH_DLC_DIALOG_REQ = 3578;
    CMD_FINISH_DLC_DIALOG_RSP = 3579;
    CMD_REFRESH_DLC_TALENT_AFFIX_REQ = 3580;
    CMD_REFRESH_DLC_TALENT_AFFIX_RSP = 3581;
    CMD_SELECT_DLC_TALENT_AFFIX_REQ = 3584;
    CMD_SELECT_DLC_TALENT_AFFIX_RSP = 3585;
    CMD_UNLOCK_DLC_PHOTO_REQ = 3586;
    CMD_UNLOCK_DLC_PHOTO_RSP = 3587;
    CMD_SWITCH_DLC_AVATAR_TALENT_REQ = 3588;
    CMD_SWITCH_DLC_AVATAR_TALENT_RSP = 3589;
    CMD_REPORT_DLC_DROP_ITEM_REQ = 3590;
    CMD_REPORT_DLC_DROP_ITEM_RSP = 3591;
}

enum CmdTypeElf {
    CMD_GET_ELF_DATA_REQ = 2100;
    CMD_GET_ELF_DATA_RSP = 2101;
    CMD_SYNC_ELF_DATA_NOTIFY = 2102;
    CMD_SYNC_ELF_FRAGMENT_NOTIFY = 2103;
    CMD_SYNC_ELF_TALENT_NOTIFY = 2104;
    CMD_ELF_STAR_UP_REQ = 2105;
    CMD_ELF_STAR_UP_RSP = 2106;
    CMD_ADD_ELF_EXP_BY_MATERIAL_REQ = 2107;
    CMD_ADD_ELF_EXP_BY_MATERIAL_RSP = 2108;
    CMD_ELF_UPGRADE_LEVEL_PERIOD_REQ = 2109;
    CMD_ELF_UPGRADE_LEVEL_PERIOD_RSP = 2110;
    CMD_ELF_FRAGMENT_TRANSFORM_REQ = 2121;
    CMD_ELF_FRAGMENT_TRANSFORM_RSP = 2122;
    CMD_ELF_SKILL_LEVEL_UP_REQ = 2123;
    CMD_ELF_SKILL_LEVEL_UP_RSP = 2124;
    CMD_ELF_TAKE_COMPENSATION_REQ = 2125;
    CMD_ELF_TAKE_COMPENSATION_RSP = 2126;
}

enum CmdTypeEndless {
    CMD_GET_LAST_ENDLESS_REWARD_DATA_REQ = 3406;
    CMD_GET_LAST_ENDLESS_REWARD_DATA_RSP = 3407;
    CMD_TAKE_ENDLESS_BASE_REWARD_REQ = 3417;
    CMD_TAKE_ENDLESS_BASE_REWARD_RSP = 3418;
    CMD_GET_OPENWORLD_ENDLESS_DATA_REQ = 3419;
    CMD_GET_OPENWORLD_ENDLESS_DATA_RSP = 3420;
    CMD_OPENWORLD_ENDLESS_ITEM_UPDATE_NOTIFY = 3421;
    CMD_USE_OPENWORLD_ENDLESS_ITEM_REQ = 3422;
    CMD_USE_OPENWORLD_ENDLESS_ITEM_RSP = 3423;
    CMD_FINISH_OPENWORLD_ENDLESS_MONSTER_GROUP_REQ = 3424;
    CMD_FINISH_OPENWORLD_ENDLESS_MONSTER_GROUP_RSP = 3425;
    CMD_GET_OPENWORLD_ENDLESS_STAGE_INNER_DATA_REQ = 3426;
    CMD_GET_OPENWORLD_ENDLESS_STAGE_INNER_DATA_RSP = 3427;
    CMD_TRIGGER_OPENWORLD_ENDLESS_TRAP_REQ = 3428;
    CMD_TRIGGER_OPENWORLD_ENDLESS_TRAP_RSP = 3429;
    CMD_FINISH_OPENWORLD_ENDLESS_INVASION_MONSTER_REQ = 3430;
    CMD_FINISH_OPENWORLD_ENDLESS_INVASION_MONSTER_RSP = 3431;
    CMD_GET_ENDLESS_STATUS_REQ = 3432;
    CMD_GET_ENDLESS_STATUS_RSP = 3433;
    CMD_REPORT_OPENWORLD_ENDLESS_DATA_REQ = 3434;
    CMD_REPORT_OPENWORLD_ENDLESS_DATA_RSP = 3435;
    CMD_OPENWORLD_ENDLESS_BATTLE_BEGIN_REQ = 3438;
    CMD_OPENWORLD_ENDLESS_BATTLE_BEGIN_RSP = 3439;
    CMD_OPENWORLD_ENDLESS_BATTLE_END_REQ = 3440;
    CMD_OPENWORLD_ENDLESS_BATTLE_END_RSP = 3441;
    CMD_OPENWORLD_ENDLESS_WAR_INFO_NOTIFY = 3442;
    CMD_GET_OPENWORLD_ENDLESS_PLAYER_WAR_INFO_REQ = 3443;
    CMD_GET_OPENWORLD_ENDLESS_PLAYER_WAR_INFO_RSP = 3444;
    CMD_OPENWORLD_ENDLESS_PLAYER_UPDATE_NOTIFY = 3445;
    CMD_GET_OPENWORLD_ENDLESS_TOP_GROUP_REQ = 3446;
    CMD_GET_OPENWORLD_ENDLESS_TOP_GROUP_RSP = 3447;
    CMD_SET_OPENWORLD_ENDLESS_MONSTER_GROUP_PROGRESS_REQ = 3448;
    CMD_SET_OPENWORLD_ENDLESS_MONSTER_GROUP_PROGRESS_RSP = 3449;
    CMD_OPENWORLD_ENDLESS_CHANGE_AVATAR_REQ = 3450;
    CMD_OPENWORLD_ENDLESS_CHANGE_AVATAR_RSP = 3451;
    CMD_ENDLESS_IN_SETTLE_NOTIFY = 3452;
    CMD_GREEDY_ENDLESS_ENROLL_REQ = 3453;
    CMD_GREEDY_ENDLESS_ENROLL_RSP = 3454;
    CMD_GREEDY_ENDLESS_REPORT_FLOOR_END_REQ = 3455;
    CMD_GREEDY_ENDLESS_REPORT_FLOOR_END_RSP = 3456;
    CMD_GREEDY_ENDLESS_FLOOR_REWARD_NOTIFY = 3457;
    CMD_GREEDY_ENDLESS_GET_RANK_REQ = 3458;
    CMD_GREEDY_ENDLESS_GET_RANK_RSP = 3459;
    CMD_GREEDY_ENDLESS_TAKE_RANK_REWARD_REQ = 3460;
    CMD_GREEDY_ENDLESS_TAKE_RANK_REWARD_RSP = 3461;
    CMD_ENDLESS_SELECT_TYPE_REQ = 3462;
    CMD_ENDLESS_SELECT_TYPE_RSP = 3463;
    CMD_GREEDY_ENDLESS_REPORT_FLOOR_BEGIN_REQ = 3464;
    CMD_GREEDY_ENDLESS_REPORT_FLOOR_BEGIN_RSP = 3465;
}

enum CmdTypeEquipforge {
    CMD_GET_EQUIPMENT_FORGE_DATA_REQ = 3650;
    CMD_GET_EQUIPMENT_FORGE_DATA_RSP = 3651;
    CMD_FORGE_EQUIPMENT_REQ = 3652;
    CMD_FORGE_EQUIPMENT_RSP = 3653;
    CMD_EXTRACT_EQUIPMENT_REQ = 3654;
    CMD_EXTRACT_EQUIPMENT_RSP = 3655;
    CMD_REFORGE_EQUIPMENT_REQ = 3657;
    CMD_REFORGE_EQUIPMENT_RSP = 3658;
    CMD_GET_EXTRACT_REFORGE_ACTIVITY_REQ = 3659;
    CMD_GET_EXTRACT_REFORGE_ACTIVITY_RSP = 3660;
    CMD_GET_EQUIPMENT_BACK_REQ = 3661;
    CMD_GET_EQUIPMENT_BACK_RSP = 3662;
    CMD_BACK_EQUIPMENT_REQ = 3663;
    CMD_BACK_EQUIPMENT_RSP = 3664;
}

enum CmdTypeGeneralactivity {
    CMD_GENERAL_ACTIVITY_SCORE_REWARD_NOTIFY = 4000;
    CMD_GENERAL_ACTIVITY_GET_SCORE_REWARD_INFO_REQ = 4001;
    CMD_GENERAL_ACTIVITY_GET_SCORE_REWARD_INFO_RSP = 4002;
    CMD_GENERAL_ACTIVITY_GET_SCHEDULE_REQ = 4003;
    CMD_GENERAL_ACTIVITY_GET_SCHEDULE_RSP = 4004;
    CMD_GENERAL_ACTIVITY_GET_MAIN_INFO_REQ = 4005;
    CMD_GENERAL_ACTIVITY_GET_MAIN_INFO_RSP = 4006;
    CMD_GENERAL_ACTIVITY_GET_RANK_REQ = 4007;
    CMD_GENERAL_ACTIVITY_GET_RANK_RSP = 4008;
    CMD_PUSH_TOWER_ACTIVTIY_TAKE_STAGE_REWARD_REQ = 4009;
    CMD_PUSH_TOWER_ACTIVTIY_TAKE_STAGE_REWARD_RSP = 4010;
    CMD_PUSH_TOWER_ACTIVTIY_TAKE_CLEAR_REWARD_REQ = 4011;
    CMD_PUSH_TOWER_ACTIVTIY_TAKE_CLEAR_REWARD_RSP = 4012;
    CMD_TEAM_ASSAULT_ACTIVITY_BEGIN_REQ = 4020;
    CMD_TEAM_ASSAULT_ACTIVITY_BEGIN_RSP = 4021;
    CMD_TEAM_ASSAULT_ACTIVITY_END_REQ = 4022;
    CMD_TEAM_ASSAULT_ACTIVITY_END_RSP = 4023;
    CMD_TEAM_ASSAULT_ACTIVITY_BOSS_BEGIN_REQ = 4024;
    CMD_TEAM_ASSAULT_ACTIVITY_BOSS_BEGIN_RSP = 4025;
    CMD_TEAM_ASSAULT_ACTIVITY_BOSS_END_REQ = 4026;
    CMD_TEAM_ASSAULT_ACTIVITY_BOSS_END_RSP = 4027;
    CMD_TEAM_ASSAULT_ACTIVITY_RESET_REQ = 4028;
    CMD_TEAM_ASSAULT_ACTIVITY_RESET_RSP = 4029;
    CMD_GENERAL_ACTIVITY_STAGE_EXCHANGE_ENTER_TIMES_REQ = 4030;
    CMD_GENERAL_ACTIVITY_STAGE_EXCHANGE_ENTER_TIMES_RSP = 4031;
    CMD_GENERAL_ACTIVITY_STAGE_TAKE_STAGE_REWARD_REQ = 4032;
    CMD_GENERAL_ACTIVITY_STAGE_TAKE_STAGE_REWARD_RSP = 4033;
    CMD_TAKE_GENERAL_ACTIVITY_SCORE_REWARD_REQ = 4034;
    CMD_TAKE_GENERAL_ACTIVITY_SCORE_REWARD_RSP = 4035;
    CMD_GENERAL_ACTIVITY_STAGE_TAKE_STAGE_GROUP_REWARD_REQ = 4036;
    CMD_GENERAL_ACTIVITY_STAGE_TAKE_STAGE_GROUP_REWARD_RSP = 4037;
    CMD_ENDLESS_SINGLE_MODE_ACTIVITY_FINISH_FLOOR_REQ = 4038;
    CMD_ENDLESS_SINGLE_MODE_ACTIVITY_FINISH_FLOOR_RSP = 4039;
    CMD_ENDLESS_SINGLE_MODE_ACTIVITY_RESET_REQ = 4040;
    CMD_ENDLESS_SINGLE_MODE_ACTIVITY_RESET_RSP = 4041;
    CMD_ENDLESS_SINGLE_MODE_ACTIVITY_BATTLE_BEGIN_REQ = 4042;
    CMD_ENDLESS_SINGLE_MODE_ACTIVITY_BATTLE_BEGIN_RSP = 4043;
    CMD_ENDLESS_SINGLE_MODE_ACTIVITY_BATTLE_END_REQ = 4044;
    CMD_ENDLESS_SINGLE_MODE_ACTIVITY_BATTLE_END_RSP = 4045;
    CMD_ENDLESS_SINGLE_MODE_ACTIVITY_TAKE_ITEM_REQ = 4046;
    CMD_ENDLESS_SINGLE_MODE_ACTIVITY_TAKE_ITEM_RSP = 4047;
    CMD_ENDLESS_SINGLE_MODE_ACTIVITY_USE_ITEM_REQ = 4048;
    CMD_ENDLESS_SINGLE_MODE_ACTIVITY_USE_ITEM_RSP = 4049;
    CMD_OPTIONAL_BUFF_ACTIVITY_CHOOSE_BUFF_REQ = 4050;
    CMD_OPTIONAL_BUFF_ACTIVITY_CHOOSE_BUFF_RSP = 4051;
    CMD_GENERAL_ACTIVITY_GET_STAGE_RANK_REQ = 4052;
    CMD_GENERAL_ACTIVITY_GET_STAGE_RANK_RSP = 4053;
    CMD_CHALLENGE_WAR_UPDATE_TEAM_REQ = 4054;
    CMD_CHALLENGE_WAR_UPDATE_TEAM_RSP = 4055;
    CMD_CRISIS_MODE_ACTIVITY_TAKE_STAGE_REWARD_REQ = 4056;
    CMD_CRISIS_MODE_ACTIVITY_TAKE_STAGE_REWARD_RSP = 4057;
    CMD_CHALLENGE_WAR_ACTIVITY_FINISH_FLOOR_REQ = 4058;
    CMD_CHALLENGE_WAR_ACTIVITY_FINISH_FLOOR_RSP = 4059;
    CMD_GENERAL_ACTIVITY_TAKE_TICKET_REQ = 4060;
    CMD_GENERAL_ACTIVITY_TAKE_TICKET_RSP = 4061;
    CMD_BOSS_CHALLENGE_ACTIVITY_GET_STAGE_RANK_REQ = 4062;
    CMD_BOSS_CHALLENGE_ACTIVITY_GET_STAGE_RANK_RSP = 4063;
    CMD_FRONT_ENDLESS_ACTIVITY_BATTLE_BEGIN_REQ = 4064;
    CMD_FRONT_ENDLESS_ACTIVITY_BATTLE_BEGIN_RSP = 4065;
    CMD_FRONT_ENDLESS_ACTIVITY_BATTLE_END_REQ = 4066;
    CMD_FRONT_ENDLESS_ACTIVITY_BATTLE_END_RSP = 4067;
    CMD_GENERAL_ACTIVITY_DUMMY = 4099;
}

enum CmdTypeGlobalwar {
    CMD_GET_GLOBAL_WAR_ACTIVITY_REQ = 3950;
    CMD_GET_GLOBAL_WAR_ACTIVITY_RSP = 3951;
    CMD_GLOBAL_WAR_TAKE_POINT_REWARD_REQ = 3952;
    CMD_GLOBAL_WAR_TAKE_POINT_REWARD_RSP = 3953;
    CMD_GLOBAL_WAR_ADD_CURRENCY_NOTIFY = 3954;
    CMD_GLOBAL_WAR_EXCHANGE_CURRENCY_REQ = 3955;
    CMD_GLOBAL_WAR_EXCHANGE_CURRENCY_RSP = 3956;
    CMD_GLOBAL_WAR_GET_RANK_REQ = 3957;
    CMD_GLOBAL_WAR_GET_RANK_RSP = 3958;
    CMD_GLOBAL_WAR_TAKE_SWEEP_REWARD_REQ = 3959;
    CMD_GLOBAL_WAR_TAKE_SWEEP_REWARD_RSP = 3960;
    CMD_GLOBAL_WAR_DUMMY = 3999;
}

enum CmdTypeGratuity {
    CMD_GET_GRATUITY_ACTIVITY_REQ = 4100;
    CMD_GET_GRATUITY_ACTIVITY_RSP = 4101;
    CMD_ACCEPT_GRATUITY_STAGE_REQ = 4102;
    CMD_ACCEPT_GRATUITY_STAGE_RSP = 4103;
    CMD_ASSIST_GRATUITY_STAGE_REQ = 4104;
    CMD_ASSIST_GRATUITY_STAGE_RSP = 4105;
    CMD_CANCEL_GRATUITY_STAGE_REQ = 4106;
    CMD_CANCEL_GRATUITY_STAGE_RSP = 4107;
    CMD_GET_GRATUITY_BATTLE_HISTORY_REQ = 4108;
    CMD_GET_GRATUITY_BATTLE_HISTORY_RSP = 4109;
    CMD_SYNC_GRATUITY_STAGE_REQ = 4112;
    CMD_SYNC_GRATUITY_STAGE_RSP = 4113;
    CMD_PUBLISH_GRATUITY_STAGE_REQ = 4114;
    CMD_PUBLISH_GRATUITY_STAGE_RSP = 4115;
    CMD_GET_GRATUITY_STAGE_LIST_REQ = 4116;
    CMD_GET_GRATUITY_STAGE_LIST_RSP = 4117;
    CMD_REJECT_GRATUITY_STAGE_REQ = 4118;
    CMD_REJECT_GRATUITY_STAGE_RSP = 4119;
    CMD_GRATUITY_STAGE_INVITE_NOTIFY = 4120;
    CMD_GRATUITY_STAGE_FINISH_NOTIFY = 4121;
}

enum CmdTypeKingdom {
    CMD_GET_KINGDOM_WAR_REQ = 3050;
    CMD_GET_KINGDOM_WAR_RSP = 3051;
    CMD_KINGDOM_WAR_MOVE_REQ = 3052;
    CMD_KINGDOM_WAR_MOVE_RSP = 3053;
    CMD_KINGDOM_WAR_VOTE_REQ = 3054;
    CMD_KINGDOM_WAR_VOTE_RSP = 3055;
    CMD_KINGDOM_WAR_GET_RANK_REQ = 3058;
    CMD_KINGDOM_WAR_GET_RANK_RSP = 3059;
    CMD_KINGDOM_WAR_TAKE_DAILY_REWARD_REQ = 3060;
    CMD_KINGDOM_WAR_TAKE_DAILY_REWARD_RSP = 3061;
    CMD_KINGDOM_WAR_EXCHANGE_CURRENCY_REQ = 3062;
    CMD_KIGNDOM_WAR_EXCHANGE_CURRENCY_RSP = 3063;
    CMD_KINGDOM_WAR_GET_POINT_RANK_REQ = 3064;
    CMD_KINGDOM_WAR_GET_POINT_RANK_RSP = 3065;
}

enum CmdTypeMail {
    CMD_GET_CLIENT_MAIL_DATA_REQ = 3800;
    CMD_GET_CLIENT_MAIL_DATA_RSP = 3801;
    CMD_TAKE_CLIENT_MAIL_ATTACHMENT_REQ = 3802;
    CMD_TAKE_CLIENT_MAIL_ATTACHMENT_RSP = 3803;
    CMD_MARK_CLIENT_MAIL_READ_REQ = 3804;
    CMD_MARK_CLIENT_MAIL_READ_RSP = 3805;
    CMD_DEL_CLIENT_MAIL_REQ = 3806;
    CMD_DEL_CLIENT_MAIL_RSP = 3807;
    CMD_NEW_CLIENT_MAIL_NOTIFY = 3808;
}

enum CmdTypeMassivewar {
    CMD_MASSIVE_WAR_GET_ACTIVITY_REQ = 4800;
    CMD_MASSIVE_WAR_GET_ACTIVITY_RSP = 4801;
    CMD_MASSIVE_WAR_GET_BATTLE_INFO_REQ = 4802;
    CMD_MASSIVE_WAR_GET_BATTLE_INFO_RSP = 4803;
    CMD_MASSIVE_WAR_GET_RANK_REQ = 4804;
    CMD_MASSIVE_WAR_GET_RANK_RSP = 4805;
    CMD_MASSIVE_WAR_BATTLE_BEGIN_NOTIFY = 4806;
    CMD_MASSIVE_WAR_REPORT_BATTLE_MESSAGE_NOTIFY = 4807;
    CMD_MASSIVE_WAR_EXIT_BATTLE_REQ = 4808;
    CMD_MASSIVE_WAR_EXIT_BATTLE_RSP = 4809;
    CMD_MASSIVE_WAR_BATTLE_END_NOTIFY = 4810;
    CMD_MASSIVE_WAR_LINEUP_INFO_NOTIFY = 4811;
    CMD_MASSIVE_WAR_TAKE_SCORE_REWARD_REQ = 4812;
    CMD_MASSIVE_WAR_TAKE_SCORE_REWARD_RSP = 4813;
    CMD_MASSIVE_WAR_DUMMY = 4899;
}

enum CmdTypeMonopoly {
    CMD_GET_MONOPOLY_ACTIVITY_REQ = 3850;
    CMD_GET_MONOPOLY_ACTIVITY_RSP = 3851;
    CMD_MONOPOLY_THROW_DICE_REQ = 3852;
    CMD_MONOPOLY_THROW_DICE_RSP = 3853;
    CMD_MONOPOLY_BUILDING_CONSTRUCT_REQ = 3854;
    CMD_MONOPOLY_BUILDING_CONSTRUCT_RSP = 3855;
    CMD_MONOPOLY_END_ROUND_REQ = 3856;
    CMD_MONOPOLY_END_ROUND_RSP = 3857;
    CMD_MONOPOLY_USE_ITEM_REQ = 3858;
    CMD_MONOPOLY_USE_ITEM_RSP = 3859;
    CMD_MONOPOLY_REWARD_NOTIFY = 3860;
    CMD_MONOPOLY_BUY_GOODS_REQ = 3861;
    CMD_MONOPOLY_BUY_GOODS_RSP = 3862;
    CMD_MONOPOLY_SKIP_BATTLE_REQ = 3863;
    CMD_MONOPOLY_SKIP_BATTLE_RSP = 3864;
    CMD_MONOPOLY_RESET_FLOOR_REQ = 3865;
    CMD_MONOPOLY_RESET_FLOOR_RSP = 3866;
    CMD_MONOPOLY_ADD_MONSTER_REQ = 3867;
    CMD_MONOPOLY_ADD_MONSTER_RSP = 3868;
    CMD_EXCHANGE_RAFFLE_MATERIAL_REQ = 3890;
    CMD_EXCHANGE_RAFFLE_MATERIAL_RSP = 3891;
    CMD_TAKE_RAFFLE_REWARD_REQ = 3894;
    CMD_TAKE_RAFFLE_REWARD_RSP = 3895;
    CMD_DRAW_RAFFLE_TICKET_REQ = 3896;
    CMD_DRAW_RAFFLE_TICKET_RSP = 3897;
    CMD_GET_RAFFLE_ACTIVITY_REQ = 3898;
    CMD_GET_RAFFLE_ACTIVITY_RSP = 3899;
}

enum CmdTypeNinja {
    CMD_GET_NINJA_ACTIVITY_REQ = 4400;
    CMD_GET_NINJA_ACTIVITY_RSP = 4401;
    CMD_NINJA_SLOT_STRENGTHEN_REQ = 4402;
    CMD_NINJA_SLOT_STRENGTHEN_RSP = 4403;
    CMD_NINJA_ACTIVITY_NOTIFY = 4404;
    CMD_NINJA_SLOT_CHOOSE_EFFECT_REQ = 4405;
    CMD_NINJA_SLOT_CHOOSE_EFFECT_RSP = 4406;
    CMD_NINJA_DUMMY = 4449;
}

enum CmdTypeOne {
    CMD_KEEP_ALIVE_NOTIFY = 1;
    CMD_GET_GAMESERVER_REQ = 2;
    CMD_GET_GAMESERVER_RSP = 3;
    CMD_GET_PLAYER_TOKEN_REQ = 4;
    CMD_GET_PLAYER_TOKEN_RSP = 5;
    CMD_PLAYER_LOGIN_REQ = 6;
    CMD_PLAYER_LOGIN_RSP = 7;
    CMD_PLAYER_LOGOUT_REQ = 8;
    CMD_PLAYER_LOGOUT_RSP = 9;
    CMD_GET_MAIN_DATA_REQ = 10;
    CMD_GET_MAIN_DATA_RSP = 11;
    CMD_GET_SCOIN_EXCHANGE_INFO_REQ = 12;
    CMD_GET_SCOIN_EXCHANGE_INFO_RSP = 13;
    CMD_SCOIN_EXCHANGE_REQ = 14;
    CMD_SCOIN_EXCHANGE_RSP = 15;
    CMD_GET_STAMINA_EXCHANGE_INFO_REQ = 16;
    CMD_GET_STAMINA_EXCHANGE_INFO_RSP = 17;
    CMD_STAMINA_EXCHANGE_REQ = 18;
    CMD_STAMINA_EXCHANGE_RSP = 19;
    CMD_NICKNAME_MODIFY_REQ = 20;
    CMD_NICKNAME_MODIFY_RSP = 21;
    CMD_GM_TALK_REQ = 22;
    CMD_GM_TALK_RSP = 23;
    CMD_GET_AVATAR_DATA_REQ = 24;
    CMD_GET_AVATAR_DATA_RSP = 25;
    CMD_GET_EQUIPMENT_DATA_REQ = 26;
    CMD_GET_EQUIPMENT_DATA_RSP = 27;
    CMD_DEL_EQUIPMENT_NOTIFY = 28;
    CMD_AVATAR_STAR_UP_REQ = 29;
    CMD_AVATAR_STAR_UP_RSP = 30;
    CMD_EQUIPMENT_POWER_UP_REQ = 31;
    CMD_EQUIPMENT_POWER_UP_RSP = 32;
    CMD_EQUIPMENT_SELL_REQ = 33;
    CMD_EQUIPMENT_SELL_RSP = 34;
    CMD_ADD_AVATAR_EXP_BY_MATERIAL_REQ = 35;
    CMD_ADD_AVATAR_EXP_BY_MATERIAL_RSP = 36;
    CMD_EQUIPMENT_EVO_REQ = 37;
    CMD_EQUIPMENT_EVO_RSP = 38;
    CMD_DRESS_EQUIPMENT_REQ = 39;
    CMD_DRESS_EQUIPMENT_RSP = 40;
    CMD_GET_STAGE_DATA_REQ = 41;
    CMD_GET_STAGE_DATA_RSP = 42;
    CMD_STAGE_BEGIN_REQ = 43;
    CMD_STAGE_BEGIN_RSP = 44;
    CMD_STAGE_END_REQ = 45;
    CMD_STAGE_END_RSP = 46;
    CMD_GET_AVATAR_TEAM_DATA_REQ = 47;
    CMD_GET_AVATAR_TEAM_DATA_RSP = 48;
    CMD_UPDATE_AVATAR_TEAM_NOTIFY = 49;
    CMD_AVATAR_SUB_SKILL_LEVEL_UP_REQ = 50;
    CMD_AVATAR_SUB_SKILL_LEVEL_UP_RSP = 51;
    CMD_MATERIAL_EVO_REQ = 56;
    CMD_MATERIAL_EVO_RSP = 57;
    CMD_GET_STAGE_DROP_DISPLAY_REQ = 60;
    CMD_GET_STAGE_DROP_DISPLAY_RSP = 61;
    CMD_GET_FRIEND_LIST_REQ = 64;
    CMD_GET_FRIEND_LIST_RSP = 65;
    CMD_ADD_FRIEND_REQ = 66;
    CMD_ADD_FRIEND_RSP = 67;
    CMD_DEL_FRIEND_REQ = 68;
    CMD_DEL_FRIEND_RSP = 69;
    CMD_GET_ASK_ADD_FRIEND_LIST_REQ = 70;
    CMD_GET_ASK_ADD_FRIEND_LIST_RSP = 71;
    CMD_GET_PLAYER_DETAIL_DATA_REQ = 72;
    CMD_GET_PLAYER_DETAIL_DATA_RSP = 73;
    CMD_UPDATE_EQUIPMENT_PROTECTED_STATUS_REQ = 74;
    CMD_UPDATE_EQUIPMENT_PROTECTED_STATUS_RSP = 75;
    CMD_GET_RECOMMEND_FRIEND_LIST_REQ = 76;
    CMD_GET_RECOMMEND_FRIEND_LIST_RSP = 77;
    CMD_SET_SELF_DESC_REQ = 78;
    CMD_SET_SELF_DESC_RSP = 79;
    CMD_DEL_FRIEND_NOTIFY = 80;
    CMD_GET_OFFLINE_FRIENDS_POINT_NOTIFY = 81;
    CMD_VERIFY_ITUNES_ORDER_NOTIFY = 82;
    CMD_RECHARGE_FINISH_NOTIFY = 83;
    CMD_GET_MAIL_DATA_REQ = 84;
    CMD_GET_MAIL_DATA_RSP = 85;
    CMD_GET_MAIL_ATTACHMENT_REQ = 86;
    CMD_GET_MAIL_ATTACHMENT_RSP = 87;
    CMD_UNLOCK_AVATAR_SKILL_REQ = 88;
    CMD_UNLOCK_AVATAR_SKILL_RSP = 89;
    CMD_GET_PRODUCT_LIST_REQ = 98;
    CMD_GET_PRODUCT_LIST_RSP = 99;
    CMD_GET_ASSISTANT_FROZEN_LIST_REQ = 100;
    CMD_GET_ASSISTANT_FROZEN_LIST_RSP = 101;
    CMD_SELL_AVATAR_FRAGMENT_REQ = 102;
    CMD_SELL_AVATAR_FRAGMENT_RSP = 103;
    CMD_GET_HAS_GOT_ITEM_ID_LIST_REQ = 104;
    CMD_GET_HAS_GOT_ITEM_ID_LIST_RSP = 105;
    CMD_AVATAR_REVIVE_REQ = 106;
    CMD_AVATAR_REVIVE_RSP = 107;
    CMD_RESET_STAGE_ENTER_TIMES_REQ = 108;
    CMD_RESET_STAGE_ENTER_TIMES_RSP = 109;
    CMD_GET_CONFIG_REQ = 110;
    CMD_GET_CONFIG_RSP = 111;
    CMD_GET_MISSION_DATA_REQ = 112;
    CMD_GET_MISSION_DATA_RSP = 113;
    CMD_GET_MISSION_REWARD_REQ = 114;
    CMD_GET_MISSION_REWARD_RSP = 115;
    CMD_DEL_MISSION_NOTIFY = 116;
    CMD_UPDATE_MISSION_PROGRESS_REQ = 117;
    CMD_UPDATE_MISSION_PROGRESS_RSP = 118;
    CMD_BIND_ACCOUNT_REQ = 119;
    CMD_BIND_ACCOUNT_RSP = 120;
    CMD_GET_SIGN_IN_REWARD_STATUS_REQ = 121;
    CMD_GET_SIGN_IN_REWARD_STATUS_RSP = 122;
    CMD_GET_SIGN_IN_REWARD_REQ = 123;
    CMD_GET_SIGN_IN_REWARD_RSP = 124;
    CMD_GET_WEEK_DAY_ACTIVITY_DATA_REQ = 125;
    CMD_GET_WEEK_DAY_ACTIVITY_DATA_RSP = 126;
    CMD_GET_FINISH_GUIDE_DATA_REQ = 127;
    CMD_GET_FINISH_GUIDE_DATA_RSP = 128;
    CMD_FINISH_GUIDE_REPORT_REQ = 129;
    CMD_FINISH_GUIDE_REPORT_RSP = 130;
    CMD_STAGE_INNER_DATA_REPORT_REQ = 131;
    CMD_STAGE_INNER_DATA_REPORT_RSP = 132;
    CMD_GET_DISPATCH_REQ = 133;
    CMD_GET_DISPATCH_RSP = 134;
    CMD_EXCHANGE_AVATAR_WEAPON_REQ = 135;
    CMD_EXCHANGE_AVATAR_WEAPON_RSP = 136;
    CMD_GET_BULLETIN_REQ = 137;
    CMD_GET_BULLETIN_RSP = 138;
    CMD_ADD_GOODFEEL_REQ = 154;
    CMD_ADD_GOODFEEL_RSP = 155;
    CMD_ISLAND_DISJOIN_EQUIPMENT_REQ = 179;
    CMD_ISLAND_DISJOIN_EQUIPMENT_RSP = 180;
    CMD_GET_GUIDE_REWARD_REQ = 185;
    CMD_GET_GUIDE_REWARD_RSP = 186;
    CMD_URGENCY_MSG_NOTIFY = 187;
    CMD_REFINE_STIGMATA_RUNE_REQ = 193;
    CMD_REFINE_STIGMATA_RUNE_RSP = 194;
    CMD_SELECT_NEW_STIGMATA_RUNE_REQ = 195;
    CMD_SELECT_NEW_STIGMATA_RUNE_RSP = 196;
    CMD_GET_VIP_REWARD_DATA_REQ = 197;
    CMD_GET_VIP_REWARD_DATA_RSP = 198;
    CMD_GET_VIP_REWARD_REQ = 199;
    CMD_GET_VIP_REWARD_RSP = 200;
    CMD_GET_SHOP_LIST_REQ = 201;
    CMD_GET_SHOP_LIST_RSP = 202;
    CMD_BUY_GOODS_REQ = 203;
    CMD_BUY_GOODS_RSP = 204;
    CMD_MANUAL_REFRESH_SHOP_REQ = 205;
    CMD_MANUAL_REFRESH_SHOP_RSP = 206;
    CMD_CREATE_WEIXIN_ORDER_REQ = 207;
    CMD_CREATE_WEIXIN_ORDER_RSP = 208;
    CMD_GET_REDEEM_CODE_INFO_REQ = 211;
    CMD_GET_REDEEM_CODE_INFO_RSP = 212;
    CMD_EXCHANGE_REDEEM_CODE_REQ = 213;
    CMD_EXCHANGE_REDEEM_CODE_RSP = 214;
    CMD_ANTI_CHEAT_REPORT_REQ = 217;
    CMD_ANTI_CHEAT_REPORT_RSP = 218;
    CMD_GET_INVITE_FRIEND_REQ = 223;
    CMD_GET_INVITE_FRIEND_RSP = 224;
    CMD_GET_INVITEE_FRIEND_REQ = 225;
    CMD_GET_INVITEE_FRIEND_RSP = 226;
    CMD_ACCEPT_FRIEND_INVITE_REQ = 227;
    CMD_ACCEPT_FRIEND_INVITE_RSP = 228;
    CMD_COMMENT_REPORT_REQ = 229;
    CMD_COMMENT_REPORT_RSP = 230;
    CMD_GET_EXTRA_STORY_DATA_REQ = 231;
    CMD_GET_EXTRA_STORY_DATA_RSP = 232;
    CMD_GET_EXTRA_STORY_ACTIVITY_ACT_REQ = 233;
    CMD_GET_EXTRA_STORY_ACTIVITY_ACT_RSP = 234;
    CMD_GET_EXTRA_STORY_ACHIEVE_DATA_REQ = 235;
    CMD_GET_EXTRA_STORY_ACHIEVE_DATA_RSP = 236;
    CMD_GET_EXTRA_STORY_ACHIEVE_REWARD_REQ = 237;
    CMD_GET_EXTRA_STORY_ACHIEVE_REWARD_RSP = 238;
    CMD_SWITCH_DYNAMIC_HARD_LV_REQ = 239;
    CMD_SWITCH_DYNAMIC_HARD_LV_RSP = 240;
    CMD_GET_ISLAND_EVENT_REQ = 241;
    CMD_GET_ISLAND_EVENT_RSP = 242;
    CMD_FINISH_ISLAND_EVENT_REQ = 243;
    CMD_FINISH_ISLAND_EVENT_RSP = 244;
    CMD_SET_TRANSFER_PWD_REQ = 245;
    CMD_SET_TRANSFER_PWD_RSP = 246;
    CMD_VERIFY_GOOGLE_ORDER_NOTIFY = 247;
    CMD_SET_DRESS_REQ = 248;
    CMD_SET_DRESS_RSP = 249;
    CMD_DRESS_TO_RETURN_MATERIAL_NOTIFY = 250;
    CMD_USE_MATERIAL_REQ = 251;
    CMD_USE_MATERIAL_RSP = 252;
    CMD_SWITCH_AVATAR_SUB_SKILL_REQ = 253;
    CMD_SWITCH_AVATAR_SUB_SKILL_RSP = 254;
    CMD_GET_TIME_LIMIT_ADD_UP_DATA_REQ = 255;
    CMD_GET_TIME_LIMIT_ADD_UP_DATA_RSP = 256;
    CMD_TIME_LIMIT_ADD_UP_REWARD_GRANT_NOTIFY = 257;
    CMD_TIME_LIMIT_ADD_UP_UPDATE_NOTIFY = 258;
    CMD_EXCHANGE_WEEK_DAY_ACTIVITY_TIMES_REQ = 259;
    CMD_EXCHANGE_WEEK_DAY_ACTIVITY_TIMES_RSP = 260;
    CMD_UPDATE_CUSTOM_AVATAR_TEAM_REQ = 269;
    CMD_UPDATE_CUSTOM_AVATAR_TEAM_RSP = 270;
    CMD_UPDATE_ASSISTANT_AVATAR_ID_REQ = 271;
    CMD_UPDATE_ASSISTANT_AVATAR_ID_RSP = 272;
    CMD_GET_ROGUE_STAGE_DATA_REQ = 275;
    CMD_GET_ROGUE_STAGE_DATA_RSP = 276;
    CMD_INIT_ROGUE_STAGE_REQ = 277;
    CMD_INIT_ROGUE_STAGE_RSP = 278;
    CMD_RESET_ROGUE_STAGE_REQ = 279;
    CMD_RESET_ROGUE_STAGE_RSP = 280;
    CMD_ROGUE_STAGE_BEGIN_REQ = 281;
    CMD_ROGUE_STAGE_BEGIN_RSP = 282;
    CMD_ROGUE_STAGE_END_REQ = 283;
    CMD_ROGUE_STAGE_END_RSP = 284;
    CMD_UPDATE_ROGUE_STAGE_AVATAR_POSITION_REQ = 286;
    CMD_UPDATE_ROGUE_STAGE_AVATAR_POSITION_RSP = 287;
    CMD_TAKE_DUTY_REWARD_REQ = 288;
    CMD_TAKE_DUTY_REWARD_RSP = 289;
    CMD_REPORT_BIRTHDAY_REQ = 299;
    CMD_REPORT_BIRTHDAY_RSP = 300;
    CMD_CREATE_LOBBY_REQ = 301;
    CMD_CREATE_LOBBY_RSP = 302;
    CMD_ENTER_LOBBY_REQ = 303;
    CMD_ENTER_LOBBY_RSP = 304;
    CMD_LEAVE_TEAM_REQ = 305;
    CMD_LEAVE_TEAM_RSP = 306;
    CMD_UPDATE_LOBBY_LINEUP_REQ = 307;
    CMD_UPDATE_LOBBY_LINEUP_RSP = 308;
    CMD_SWITCH_MEMBER_STATUS_REQ = 309;
    CMD_SWITCH_MEMBER_STATUS_RSP = 310;
    CMD_LOBBY_STAGE_BEGIN_REQ = 311;
    CMD_LOBBY_STAGE_BEGIN_RSP = 312;
    CMD_LOBBY_STAGE_END_REQ = 313;
    CMD_LOBBY_STAGE_END_RSP = 314;
    CMD_KICK_LOBBY_MEMBER_REQ = 317;
    CMD_KICK_LOBBY_MEMBER_RSP = 318;
    CMD_SET_LOBBY_FAST_ENTRANCE_REQ = 319;
    CMD_SET_LOBBY_FAST_ENTRANCE_RSP = 320;
    CMD_LOBBY_ENTER_FIGHT_ERROR_NOTIFY = 321;
    CMD_LEVEL_UP_STIGMATA_TITLE_REQ = 324;
    CMD_LEVEL_UP_STIGMATA_TITLE_RSP = 325;
    CMD_EVO_STIGMATA_TITLE_REQ = 326;
    CMD_EVO_STIGMATA_TITLE_RSP = 327;
    CMD_INHERIT_STIGMATA_TITLE_REQ = 328;
    CMD_INHERIT_STIGMATA_TITLE_RSP = 329;
    CMD_RESET_STIGMATA_TITLE_REQ = 330;
    CMD_RESET_STIGMATA_TITLE_RSP = 331;
    CMD_PROMOTE_STIGMATA_RUNE_REQ = 332;
    CMD_PROMOTE_STIGMATA_RUNE_RSP = 333;
    CMD_GET_MP_DATA_REQ = 340;
    CMD_GET_MP_DATA_RSP = 341;
    CMD_MP_UPGRADE_SKILL_REQ = 342;
    CMD_MP_UPGRADE_SKILL_RSP = 343;
    CMD_MP_RESET_SKILL_POINT_REQ = 344;
    CMD_MP_RESET_SKILL_POINT_RSP = 345;
    CMD_MP_GET_TEAM_REQ = 346;
    CMD_MP_GET_TEAM_RSP = 347;
    CMD_MP_CREATE_TEAM_REQ = 348;
    CMD_MP_CREATE_TEAM_RSP = 349;
    CMD_MP_ENTER_TEAM_REQ = 350;
    CMD_MP_ENTER_TEAM_RSP = 351;
    CMD_GET_TEAM_BRIEF_INFO_REQ = 352;
    CMD_GET_TEAM_BRIEF_INFO_RSP = 353;
    CMD_MP_KICK_FROM_TEAM_REQ = 354;
    CMD_MP_KICK_FROM_TEAM_RSP = 355;
    CMD_MP_TEAM_ENTER_LOBBY_REQ = 356;
    CMD_MP_TEAM_ENTER_LOBBY_RSP = 357;
    CMD_MP_RAID_RESET_CYCLE_REQ = 360;
    CMD_MP_RAID_RESET_CYCLE_RSP = 361;
    CMD_MP_TEAM_CHANGE_LEADER_REQ = 362;
    CMD_MP_TEAM_CHANGE_LEADER_RSP = 363;
    CMD_GET_GOBACK_REQ = 364;
    CMD_GET_GOBACK_RSP = 365;
    CMD_TAKE_GOBACK_LOGIN_REWARD_REQ = 366;
    CMD_TAKE_GOBACK_LOGIN_REWARD_RSP = 367;
    CMD_GET_MYCARD_AUTH_CODE_REQ = 368;
    CMD_GET_MYCARD_AUTH_CODE_RSP = 369;
    CMD_VERIFY_MYCARD_ORDER_NOTIFY = 370;
    CMD_TEAM_LEADER_CHANGE_NOTIFY = 371;
    CMD_MP_TEAM_LEAVE_LOBBY_REQ = 373;
    CMD_MP_TEAM_LEAVE_LOBBY_RSP = 374;
    CMD_MP_MEMBER_SET_CLIENT_STATUS_REQ = 375;
    CMD_MP_MEMBER_SET_CLIENT_STATUS_RSP = 376;
    CMD_MP_STAGE_END_REQ = 379;
    CMD_MP_STAGE_END_RSP = 380;
    CMD_MP_REPORT_PLAYER_REQ = 381;
    CMD_MP_REPORT_PLAYER_RSP = 382;
    CMD_MP_STAGE_SETTLE_NOTIFY = 391;
    CMD_MP_LIKE_PLAYER_REQ = 392;
    CMD_MP_LIKE_PLAYER_RSP = 393;
    CMD_FRIEND_BOND_NOTIFY = 394;
    CMD_MP_TEAM_SYNC_NOTIFY = 395;
    CMD_MP_TEAM_MEMBER_SET_VOICE_ID_REQ = 396;
    CMD_MP_TEAM_MEMBER_SET_VOICE_ID_RSP = 397;
    CMD_REPORT_CLIENT_DATA_VERSION_REQ = 398;
    CMD_REPORT_CLIENT_DATA_VERSION_RSP = 399;
}

enum CmdTypePvz {
    CMD_PVZ_GET_ACTIVITY_REQ = 6550;
    CMD_PVZ_GET_ACTIVITY_RSP = 6551;
    CMD_PVZ_BATTLE_BEGIN_REQ = 6552;
    CMD_PVZ_BATTLE_BEGIN_RSP = 6553;
    CMD_PVZ_BATTLE_END_REQ = 6554;
    CMD_PVZ_BATTLE_END_RSP = 6555;
    CMD_PVZ_QAVATAR_LEVEL_UP_REQ = 6556;
    CMD_PVZ_QAVATAR_LEVEL_UP_RSP = 6557;
}

enum CmdTypeQavatarbattle {
    CMD_QAVATAR_BATTLE_BEGIN_NOTIFY = 5550;
    CMD_QAVATAR_BATTLE_SETTLE_NOTIFY = 5551;
    CMD_QAVATAR_BATTLE_GET_LOBBY_INFO_REQ = 5552;
    CMD_QAVATAR_BATTLE_GET_LOBBY_INFO_RSP = 5553;
    CMD_QAVATAR_BATTLE_DATA_NOTIFY = 5600;
    CMD_QAVATAR_BATTLE_ENTER_BATTLE_REQ = 5601;
    CMD_QAVATAR_BATTLE_ENTER_BATTLE_RSP = 5602;
    CMD_QAVATAR_BATTLE_MOVE_NOTIFY = 5603;
    CMD_QAVATAR_BATTLE_START_SKILL_REQ = 5604;
    CMD_QAVATAR_BATTLE_START_SKILL_RSP = 5605;
    CMD_QAVATAR_BATTLE_START_SKILL_NOTIFY = 5606;
    CMD_QAVATAR_BATTLE_END_SKILL_REQ = 5607;
    CMD_QAVATAR_BATTLE_END_SKILL_RSP = 5608;
    CMD_QAVATAR_BATTLE_END_SKILL_NOTIFY = 5609;
    CMD_QAVATAR_BATTLE_SKILL_TRIGGER_NOTIFY = 5610;
    CMD_QAVATAR_BATTLE_COMPONENT_OP_NOTIFY = 5611;
    CMD_QAVATAR_BATTLE_DISCARD_STIGMATA_REQ = 5612;
    CMD_QAVATAR_BATTLE_DISCARD_STIGMATA_RSP = 5613;
    CMD_QAVATAR_BATTLE_GET_DATA_NOTIFY = 5614;
    CMD_QAVATAR_BATTLE_KILL_NOTIFY = 5621;
    CMD_QAVATAR_BATTLE_REFRESH_GADGET_FORECAST_NOTIFY = 5622;
    CMD_QAVATAR_BATTLE_REFRESH_GADGET_GENERATE_NOTIFY = 5623;
    CMD_QAVATAR_BATTLE_END_BATTLE_NOTIFY = 5630;
    CMD_QAVATAR_BATTLE_DUMMY = 5649;
}

enum CmdTypeQcandybattle {
    CMD_QCANDY_BATTLE_ENTER_BATTLE_REQ = 6570;
    CMD_QCANDY_BATTLE_ENTER_BATTLE_RSP = 6571;
    CMD_QCANDY_BATTLE_DATA_NOTIFY = 6572;
    CMD_QCANDY_BATTLE_END_NOTIFY = 6573;
    CMD_QCANDY_BATTLE_MOVE_NOTIFY = 6574;
    CMD_QCANDY_BATTLE_CREATE_ENTITY_REQ = 6576;
    CMD_QCANDY_BATTLE_CREATE_ENTITY_RSP = 6577;
    CMD_QCANDY_BATTLE_DELETE_ENTITY_REQ = 6578;
    CMD_QCANDY_BATTLE_DELETE_ENTITY_RSP = 6579;
    CMD_QCANDY_BATTLE_TRIGGER_ENTITY_REQ = 6580;
    CMD_QCANDY_BATTLE_TRIGGER_ENTITY_RSP = 6581;
    CMD_QCANDY_BATTLE_LIFE_TIMES_CHANGE_NOTIFY = 6582;
    CMD_QCANDY_BATTLE_ARRIVE_REQ = 6583;
    CMD_QCANDY_BATTLE_ARRIVE_RSP = 6584;
    CMD_QCANDY_BATTLE_USE_SKILL_REQ = 6585;
    CMD_QCANDY_BATTLE_USE_SKILL_RSP = 6586;
    CMD_QCANDY_BATTLE_PLAYER_USE_SKILL_NOTIFY = 6587;
    CMD_QCANDY_BATTLE_AVATAR_STATE_CLIENT_NOTIFY = 6588;
    CMD_QCANDY_BATTLE_AVATAR_STATE_SERVER_NOTIFY = 6589;
    CMD_QCANDY_BATTLE_SKILL_EFFECT_NOTIFY = 6590;
    CMD_QCANDY_BATTLE_FINISH_BATTLE_NOTIFY = 6591;
    CMD_QCANDY_BATTLE_LEAVE_BATTLE_REQ = 6592;
    CMD_QCANDY_BATTLE_LEAVE_BATTLE_RSP = 6593;
    CMD_QCANDY_BATTLE_LEAVE_BATTLE_NOTIFY = 6594;
    CMD_QCANDY_BATTLE_GET_ACTIVITY_REQ = 6601;
    CMD_QCANDY_BATTLE_GET_ACTIVITY_RSP = 6602;
    CMD_QCANDY_BATTLE_BEGIN_NOTIFY = 6603;
    CMD_QCANDY_BATTLE_CHOOSE_AVATAR_REQ = 6604;
    CMD_QCANDY_BATTLE_CHOOSE_AVATAR_RSP = 6605;
    CMD_QCANDY_BATTLE_UNLOCK_AVATAR_REQ = 6606;
    CMD_QCANDY_BATTLE_UNLOCK_AVATAR_RSP = 6607;
    CMD_QCANDY_BATTLE_SETTLE_BATTLE_NOTIFY = 6608;
    CMD_QCANDY_BATTLE_DUMMY = 6649;
}

enum CmdTypeReplay {
    CMD_REPLAY_BEGIN_REQ = 5400;
    CMD_REPLAY_BEGIN_RSP = 5401;
    CMD_REPLAY_END_REQ = 5402;
    CMD_REPLAY_END_RSP = 5403;
    CMD_REPORT_REPLAY_FRAME_REQ = 5404;
    CMD_REPORT_REPLAY_FRAME_RSP = 5405;
    CMD_WATCH_REPLAY_REQ = 5406;
    CMD_WATCH_REPLAY_RSP = 5407;
    CMD_REPLAY_FRAME_NOTIFY = 5408;
    CMD_REPLAY_FRAME_END_NOTIFY = 5409;
    CMD_REPLAY_GET_FILE_TOKEN_REQ = 5410;
    CMD_REPLAY_GET_FILE_TOKEN_RSP = 5411;
    CMD_REPLAY_REPORT_FILE_RESULT_REQ = 5412;
    CMD_REPLAY_REPORT_FILE_RESULT_RSP = 5413;
    CMD_REPLAY_GET_UPLOAD_LIST_REQ = 5414;
    CMD_REPLAY_GET_UPLOAD_LIST_RSP = 5415;
    CMD_REPLAY_GET_RECOMMEND_LIST_REQ = 5416;
    CMD_REPLAY_GET_RECOMMEND_LIST_RSP = 5417;
    CMD_REPLAY_GET_RECOMMEND_BRIEF_REQ = 5418;
    CMD_REPLAY_GET_RECOMMEND_BRIEF_RSP = 5419;
}

enum CmdTypeReport {
    CMD_DUMMY = 0;
}

enum CmdTypeRoom {
    CMD_GET_ROOM_DATA_REQ = 3150;
    CMD_GET_ROOM_DATA_RSP = 3151;
    CMD_SYNC_ROOM_DATA_NOTIFY = 3152;
    CMD_CREATE_ROOM_REQ = 3153;
    CMD_CREATE_ROOM_RSP = 3154;
    CMD_ENTER_ROOM_REQ = 3155;
    CMD_ENTER_ROOM_RSP = 3156;
    CMD_EXIT_ROOM_REQ = 3157;
    CMD_EXIT_ROOM_RSP = 3158;
    CMD_EXIT_ROOM_NOTIFY = 3159;
    CMD_INVITE_ROOM_REQ = 3160;
    CMD_INVITE_ROOM_RSP = 3161;
    CMD_ROOM_INVITATION_NOTIFY = 3162;
    CMD_SEND_ROOM_CHAT_MSG_NOTIFY = 3163;
    CMD_RECV_ROOM_CHAT_MSG_NOTIFY = 3164;
    CMD_START_ROOM_MATCH_REQ = 3165;
    CMD_START_ROOM_MATCH_RSP = 3166;
    CMD_CANCEL_ROOM_MATCH_REQ = 3167;
    CMD_CANCEL_ROOM_MATCH_RSP = 3168;
    CMD_SYNC_ROOM_MATCH_DATA_NOTIFY = 3169;
    CMD_ROOM_MATCH_TIMEOUT_NOTIFY = 3170;
    CMD_UPDATE_ROOM_INFO_REQ = 3171;
    CMD_UPDATE_ROOM_INFO_RSP = 3172;
    CMD_ROOM_SWITCH_MEMBER_STATUS_REQ = 3173;
    CMD_ROOM_SWITCH_MEMBER_STATUS_RSP = 3174;
    CMD_ROOM_KICK_MEMBER_REQ = 3175;
    CMD_ROOM_KICK_MEMBER_RSP = 3176;
    CMD_ROOM_TRANSFER_LEADER_REQ = 3177;
    CMD_ROOM_TRANSFER_LEADER_RSP = 3178;
    CMD_ROOM_MEMBER_SET_VOICE_ID_REQ = 3179;
    CMD_ROOM_MEMBER_SET_VOICE_ID_RSP = 3180;
    CMD_ROOM_GET_STATUS_REQ = 3181;
    CMD_ROOM_GET_STATUS_RSP = 3182;
}

enum CmdTypeRpgdungeon {
    CMD_RPG_DUNGEON_GET_ACTIVITY_REQ = 5500;
    CMD_RPG_DUNGEON_GET_ACTIVITY_RSP = 5501;
    CMD_RPG_DUNGEON_SELECT_QUEST_REQ = 5502;
    CMD_RPG_DUNGEON_SELECT_QUEST_RSP = 5503;
    CMD_RPG_DUNGEON_GET_CANDIDATE_BUFF_REQ = 5504;
    CMD_RPG_DUNGEON_GET_CANDIDATE_BUFF_RSP = 5505;
    CMD_RPG_DUNGEON_SELECT_BUFF_REQ = 5506;
    CMD_RPG_DUNGEON_SELECT_BUFF_RSP = 5507;
}

enum CmdTypeRpgtale {
    CMD_GET_RPG_TALE_REQ = 2300;
    CMD_GET_RPG_TALE_RSP = 2301;
    CMD_SYNC_RPG_TALE_SITE_NOTIFY = 2302;
    CMD_ENTER_RPG_TALE_SITE_REQ = 2303;
    CMD_ENTER_RPG_TALE_SITE_RSP = 2304;
    CMD_FINISH_RPG_TALE_PLOT_REQ = 2305;
    CMD_FINISH_RPG_TALE_PLOT_RSP = 2306;
    CMD_UNLOCK_RPG_TALE_SITE_REQ = 2307;
    CMD_UNLOCK_RPG_TALE_SITE_RSP = 2308;
    CMD_TAKE_RPG_TALE_COLLECTION_REWARD_REQ = 2309;
    CMD_TAKE_RPG_TALE_COLLECTION_REWARD_RSP = 2310;
    CMD_RPG_TALE_EVENT_NOTIFY = 2312;
    CMD_TRIGGER_RPG_TALE_EVENT_REQ = 2313;
    CMD_TRIGGER_RPG_TALE_EVENT_RSP = 2314;
    CMD_CHECK_RPG_TALE_STAGE_TRIGGER_REQ = 2315;
    CMD_CHECK_RPG_TALE_STAGE_TRIGGER_RSP = 2316;
    CMD_TRIGGER_RPG_TALE_STAGE_EVENT_REQ = 2317;
    CMD_TRIGGER_RPG_TALE_STAGE_EVENT_RSP = 2318;
    CMD_GET_MATRIX_REQ = 2320;
    CMD_GET_MATRIX_RSP = 2321;
    CMD_GET_MATRIX_FLOOR_REQ = 2322;
    CMD_GET_MATRIX_FLOOR_RSP = 2323;
    CMD_MATRIX_ENTER_REQ = 2324;
    CMD_MATRIX_ENTER_RSP = 2325;
    CMD_MATRIX_ADVANCE_REQ = 2326;
    CMD_MATRIX_ADVANCE_RSP = 2327;
    CMD_SYNC_MATRIX_FLOOR_NOTIFY = 2328;
    CMD_SYNC_MATRIX_NOTIFY = 2329;
    CMD_MATRIX_TRIGGER_EVENT_REQ = 2330;
    CMD_MATRIX_TRIGGER_EVENT_RSP = 2331;
    CMD_MATRIX_CANCEL_EVENT_REQ = 2332;
    CMD_MATRIX_CANCEL_EVENT_RSP = 2333;
    CMD_SYNC_MATRIX_CUR_EVENT_NOTIFY = 2334;
    CMD_MATRIX_EVENT_FINISH_NOTIFY = 2335;
    CMD_FINISH_MATRIX_EVENT_PLOT_REQ = 2336;
    CMD_FINISH_MATRIX_EVENT_PLOT_RSP = 2337;
    CMD_MATRIX_TELEPORT_NOTIFY = 2338;
    CMD_MATRIX_MOVE_OBJECT_REQ = 2339;
    CMD_MATRIX_MOVE_OBJECT_RSP = 2340;
    CMD_MATRIX_RESET_FLOOR_REQ = 2341;
    CMD_MATRIX_RESET_FLOOR_RSP = 2342;
    CMD_MATRIX_SETTLE_FLOOR_EVENT_REQ = 2343;
    CMD_MATRIX_SETTLE_FLOOR_EVENT_RSP = 2344;
    CMD_MATRIX_THROW_DICE_REQ = 2345;
    CMD_MATRIX_THROW_DICE_RSP = 2346;
    CMD_MATRIX_SET_DICE_DESTINATION_REQ = 2347;
    CMD_MATRIX_SET_DICE_DESTINATION_RSP = 2348;
    CMD_MATRIX_GUESS_FINGER_REQ = 2349;
    CMD_MATRIX_GUESS_FINGER_RSP = 2350;
    CMD_MATRIX_SET_LOTTERY_NUM_REQ = 2351;
    CMD_MATRIX_SET_LOTTERY_NUM_RSP = 2352;
    CMD_MATRIX_LOTTERY_DRAW_NOTIFY = 2353;
    CMD_FINISH_RPG_TALE_STAGE_PLOT_REQ = 2370;
    CMD_FINISH_RPG_TALE_STAGE_PLOT_RSP = 2371;
    CMD_REPORT_RPG_TALE_STAGE_REQ = 2374;
    CMD_REPORT_RPG_TALE_STAGE_RSP = 2375;
    CMD_RPG_TALE_SWEEP_REQ = 2376;
    CMD_RPG_TALE_SWEEP_RSP = 2377;
    CMD_GET_RPG_TALE_FILE_REQ = 2378;
    CMD_GET_RPG_TALE_FILE_RSP = 2379;
    CMD_RPG_TALE_REFRESH_TICKET_REQ = 2380;
    CMD_RPG_TALE_REFRESH_TICKET_RSP = 2381;
    CMD_RPG_TALE_LEVEL_UP_ABILITY_REQ = 2382;
    CMD_RPG_TALE_LEVEL_UP_ABILITY_RSP = 2383;
    CMD_RPG_TALE_RESET_TOWER_REQ = 2384;
    CMD_RPG_TALE_RESET_TOWER_RSP = 2385;
    CMD_RPG_TALE_SET_OVERALL_REQ = 2386;
    CMD_RPG_TALE_SET_OVERALL_RSP = 2387;
    CMD_RPG_TALE_REFRESH_SITE_REQ = 2388;
    CMD_RPG_TALE_REFRESH_SITE_RSP = 2389;
    CMD_RPG_TALE_SET_PVP_VIRTUAL_AVATAR_REQ = 2390;
    CMD_RPG_TALE_SET_PVP_VIRTUAL_AVATAR_RSP = 2391;
    CMD_RPG_TALE_GET_PVP_DIVISION_REWARD_REQ = 2392;
    CMD_RPG_TALE_GET_PVP_DIVISION_REWARD_RSP = 2393;
}

enum CmdTypeScdlc {
    CMD_GET_SC_DLC_REQ = 6300;
    CMD_GET_SC_DLC_RSP = 6301;
    CMD_UPDATE_SC_DLC_FEVER_SUITE_REQ = 6304;
    CMD_UPDATE_SC_DLC_FEVER_SUITE_RSP = 6305;
    CMD_ACTIVE_SC_DLC_FEVER_SUITE_REQ = 6306;
    CMD_ACTIVE_SC_DLC_FEVER_SUITE_RSP = 6307;
    CMD_ADD_SC_DLC_SUUPORT_NPC_EXP_REQ = 6308;
    CMD_ADD_SC_DLC_SUUPORT_NPC_EXP_RSP = 6309;
    CMD_LEVEL_UP_SC_DLC_AVATAR_REQ = 6310;
    CMD_LEVEL_UP_SC_DLC_AVATAR_RSP = 6311;
    CMD_LEVEL_UP_SC_DLC_TALENT_REQ = 6312;
    CMD_LEVEL_UP_SC_DLC_TALENT_RSP = 6313;
    CMD_EQUIP_SC_DLC_AVATAR_TALENT_REQ = 6314;
    CMD_EQUIP_SC_DLC_AVATAR_TALENT_RSP = 6315;
    CMD_GET_SC_DLC_SELECT_DAILY_QUEST_REQ = 6316;
    CMD_GET_SC_DLC_SELECT_DAILY_QUEST_RSP = 6317;
    CMD_REFRESH_SC_DLC_DAILY_QUEST_REQ = 6318;
    CMD_REFRESH_SC_DLC_DAILY_QUEST_RSP = 6319;
    CMD_ACCEPT_SC_DLC_DAILY_QUEST_REQ = 6320;
    CMD_ACCEPT_SC_DLC_DAILY_QUEST_RSP = 6321;
    CMD_FINISH_SC_DLC_DAILY_QUEST_REQ = 6322;
    CMD_FINISH_SC_DLC_DAILY_QUEST_RSP = 6323;
    CMD_TAKE_SC_DLC_DAILY_QUEST_REWARD_REQ = 6324;
    CMD_TAKE_SC_DLC_DAILY_QUEST_REWARD_RSP = 6325;
    CMD_MODIFY_SC_DLC_NAME_REQ = 6326;
    CMD_MODIFY_SC_DLC_NAME_RSP = 6327;
    CMD_TAKE_SC_DLC_CHALLENGE_REWARD_REQ = 6328;
    CMD_TAKE_SC_DLC_CHALLENGE_REWARD_RSP = 6329;
    CMD_FINISH_SC_DLC_PLOT_REQ = 6330;
    CMD_FINISH_SC_DLC_PLOT_RSP = 6331;
    CMD_GET_SC_DLC_TOWER_REQ = 6332;
    CMD_GET_SC_DLC_TOWER_RSP = 6333;
    CMD_SC_DLC_TOWER_STAGE_BEGIN_REQ = 6334;
    CMD_SC_DLC_TOWER_STAGE_BEGIN_RSP = 6335;
    CMD_SC_DLC_TOWER_STAGE_END_REQ = 6336;
    CMD_SC_DLC_TOWER_STAGE_END_RSP = 6337;
    CMD_GET_SC_DLC_TOWER_RANK_REQ = 6338;
    CMD_GET_SC_DLC_TOWER_RANK_RSP = 6339;
    CMD_SC_DLC_TOWER_SCHEDULE_REWARD_NOTIFY = 6340;
    CMD_SC_DLC_REVIVE_AVATAR_REQ = 6341;
    CMD_SC_DLC_REVIVE_AVATAR_RSP = 6342;
    CMD_SC_DLC_TOWER_REVIVE_AVATAR_REQ = 6343;
    CMD_SC_DLC_TOWER_REVIVE_AVATAR_RSP = 6344;
    CMD_SC_DLC_ACTIVE_FEVER_ABILITY_REQ = 6345;
    CMD_SC_DLC_ACTIVE_FEVER_ABILITY_RSP = 6346;
    CMD_SC_DLC_SWEEP_TOWER_REQ = 6347;
    CMD_SC_DLC_SWEEP_TOWER_RSP = 6348;
    CMD_SCDLC_DUMMY = 6449;
}

enum CmdTypeSecurity {
    CMD_UPDATE_CLIENT_SETTING_NOTIFY = 5002;
    CMD_COMMON_CD_CHECK_NOTIFY = 5003;
    CMD_ANTI_ADDICT_NOTIFY = 5004;
    CMD_SENSITIVE_WORD_CHECK_REQ = 5005;
    CMD_SENSITIVE_WORD_CHECK_RSP = 5006;
    CMD_KICK_OUT_PLAYER_NOTIFY = 5007;
    CMD_CLIENT_REPORT_REQ = 5008;
    CMD_CLIENT_REPORT_RSP = 5009;
    CMD_GET_AUTHKEY_REQ = 5010;
    CMD_GET_AUTHKEY_RSP = 5011;
    CMD_CLIENT_REPORT_BIN_REQ = 5012;
    CMD_CLIENT_REPORT_BIN_RSP = 5013;
    CMD_GET_SECURITY_PASSWORD_REQ = 5021;
    CMD_GET_SECURITY_PASSWORD_RSP = 5022;
    CMD_SET_SECURITY_PASSWORD_REQ = 5023;
    CMD_SET_SECURITY_PASSWORD_RSP = 5024;
    CMD_CHANGE_SECURITY_PASSWORD_REQ = 5025;
    CMD_CHANGE_SECURITY_PASSWORD_RSP = 5026;
    CMD_UNLOCK_DEVICE_SECURITY_PASSWORD_REQ = 5027;
    CMD_UNLOCK_DEVICE_SECURITY_PASSWORD_RSP = 5028;
    CMD_SECURITY_PASSWORD_OP_REQ = 5029;
    CMD_SECURITY_PASSWORD_OP_RSP = 5030;
    CMD_RESET_SECURITY_PASSWORD_REQ = 5031;
    CMD_RESET_SECURITY_PASSWORD_RSP = 5032;
    CMD_SECURITY_PASSWORD_REJECTION_NOTIFY = 5033;
}

enum CmdTypeSlg {
    CMD_SLG_GET_DATA_REQ = 6050;
    CMD_SLG_GET_DATA_RSP = 6051;
    CMD_SLG_POINT_SWEEP_REQ = 6052;
    CMD_SLG_POINT_SWEEP_RSP = 6053;
    CMD_SLG_BATTLE_MATCH_RSP = 6054;
    CMD_SLG_ENROLL_REQ = 6055;
    CMD_SLG_ENROLL_RSP = 6056;
    CMD_SLG_GET_ACTIVITY_STAMINA_REQ = 6057;
    CMD_SLG_GET_ACTIVITY_STAMINA_RSP = 6058;
    CMD_SLG_TAKE_SCORE_REWARD_REQ = 6059;
    CMD_SLG_TAKE_SCORE_REWARD_RSP = 6060;
    CMD_SLG_BATTLE_ADD_SCORE_FAIL_NOTIFY = 6061;
    CMD_SLG_GET_BATTLE_RANK_REQ = 6062;
    CMD_SLG_GET_BATTLE_RANK_RSP = 6063;
    CMD_SLG_GET_POINT_RANK_REQ = 6064;
    CMD_SLG_GET_POINT_RANK_RSP = 6065;
    CMD_SLG_BATTLE_SETTLE_NOTIFY = 6066;
    CMD_SLG_BROADCAST_NOTIFY = 6068;
    CMD_SLG_MAIN_PAGE_REQ = 6069;
    CMD_SLG_BATTLE_IN_SETTLE_NOTIFY = 6070;
    CMD_SLG_GET_BRIEF_RANK_REQ = 6071;
    CMD_SLG_GET_BRIEF_RANK_RSP = 6072;
    CMD_SLG_DUMMY = 6149;
}

enum CmdTypeSwitch {
    CMD_SWITCH_DATA_NOTIFY = 3700;
    CMD_SWITCH_CHANGE_DATA_NOTIFY = 3701;
}

enum CmdTypeThree {
    CMD_CHECK_EXTRA_STORY_LOCKED_AVATAR_BIND_EQUIP_REQ = 1000;
    CMD_CHECK_EXTRA_STORY_LOCKED_AVATAR_BIND_EQUIP_RSP = 1001;
    CMD_SWITCH_EXTRA_STORY_LOCKED_AVATAR_BIND_EQUIP_REQ = 1002;
    CMD_SWITCH_EXTRA_STORY_LOCKED_AVATAR_BIND_EQUIP_RSP = 1003;
    CMD_TAKE_DORM_LIKES_DROP_REQ = 1008;
    CMD_TAKE_DORM_LIKES_DROP_RSP = 1009;
    CMD_CHECK_DORM_LIKES_DROP_REQ = 1010;
    CMD_CHECK_DORM_LIKES_DROP_RSP = 1011;
    CMD_GET_WORLD_MAP_DATA_REQ = 1012;
    CMD_GET_WORLD_MAP_DATA_RSP = 1013;
    CMD_GET_MP_STAGE_RECORD_REQ = 1018;
    CMD_GET_MP_STAGE_RECORD_RSP = 1019;
    CMD_LOBBY_SET_CLIENT_STATUS_REQ = 1026;
    CMD_LOBBY_SET_CLIENT_STATUS_RSP = 1027;
    CMD_LOBBY_PREPARE_COUNT_DOWN_NOTIFY = 1028;
    CMD_MP_STAGE_VOTE_COUNT_DOWN_NOTIFY = 1029;
    CMD_MP_STAGE_VOTE_REQ = 1030;
    CMD_MP_STAGE_VOTE_RSP = 1031;
    CMD_MP_STAGE_VOTE_RESULT_NOTIFY = 1032;
    CMD_LOBBY_TIMEOUT_NO_LEADER_NOTIFY = 1033;
    CMD_TAKE_WEEK_DAY_ACTIVITY_RETURN_COIN_REQ = 1034;
    CMD_TAKE_WEEK_DAY_ACTIVITY_RETURN_COIN_RSP = 1035;
    CMD_MP_STAGE_GET_VOTE_INFO_REQ = 1036;
    CMD_MP_STAGE_GET_VOTE_INFO_RSP = 1037;
    CMD_MP_STAGE_MEMBER_VOTE_NOTIFY = 1038;
    CMD_SWITCH_EXTRA_STORY_LINE_ENHANCE_REQ = 1039;
    CMD_SWITCH_EXTRA_STORY_LINE_ENHANCE_RSP = 1040;
    CMD_GET_CHALLENGE_STEP_BONUS_REQ = 1043;
    CMD_GET_CHALLENGE_STEP_BONUS_RSP = 1044;
    CMD_LEAVE_TEAM_NOTIFY = 1101;
    CMD_GET_LOBBY_STAT_REQ = 1102;
    CMD_GET_LOBBY_STAT_RSP = 1103;
    CMD_DISJOIN_FURNITURE_REQ = 1134;
    CMD_DISJOIN_FURNITURE_RSP = 1135;
    CMD_GET_DORM_VOTE_DATA_REQ = 1138;
    CMD_GET_DORM_VOTE_DATA_RSP = 1139;
    CMD_GET_CARD_PRODUCT_INFO_REQ = 1142;
    CMD_GET_CARD_PRODUCT_INFO_RSP = 1143;
    CMD_TAKE_CARD_PRODUCT_DAILY_REWARD_REQ = 1144;
    CMD_TAKE_CARD_PRODUCT_DAILY_REWARD_RSP = 1145;
    CMD_TAKE_CARD_PRODUCT_BONUS_REWARD_REQ = 1146;
    CMD_TAKE_CARD_PRODUCT_BONUS_REWARD_RSP = 1147;
    CMD_CHAT_REPORT_REQ = 1150;
    CMD_CHAT_REPORT_RSP = 1151;
    CMD_CHAT_REPORT_NOTIFY = 1152;
    CMD_CHAT_UNFORBID_NOTIFY = 1153;
    CMD_CHAT_FORBID_NOTIFY = 1154;
    CMD_GET_SHOPPING_MALL_LIST_REQ = 1157;
    CMD_GET_SHOPPING_MALL_LIST_RSP = 1158;
    CMD_GET_CHAT_REPORT_INFO_REQ = 1159;
    CMD_GET_CHAT_REPORT_INFO_RSP = 1160;
    CMD_CHAT_FORBID_SNS_NOTIFY = 1161;
    CMD_RECOVER_CHAT_CREDIT_NOTIFY = 1162;
    CMD_SEND_CHAT_RED_ENVELOPE_REQ = 1163;
    CMD_SEND_CHAT_RED_ENVELOPE_RSP = 1164;
    CMD_TAKE_CHAT_RED_ENVELOPE_REQ = 1165;
    CMD_TAKE_CHAT_RED_ENVELOPE_RSP = 1166;
    CMD_GET_RECLAIM_ACTIVITY_DATA_REQ = 1167;
    CMD_GET_RECLAIM_ACTIVITY_DATA_RSP = 1168;
    CMD_TAKE_RECLAIM_LEVEL_REWARD_REQ = 1169;
    CMD_TAKE_RECLAIM_LEVEL_REWARD_RSP = 1170;
    CMD_SET_RECLAIM_AVATAR_TEAM_REQ = 1171;
    CMD_SET_RECLAIM_AVATAR_TEAM_RSP = 1172;
    CMD_DRESS_RECLAIM_EQUIPMENT_REQ = 1173;
    CMD_DRESS_RECLAIM_EQUIPMENT_RSP = 1174;
    CMD_GET_RECLAIM_RANK_REQ = 1175;
    CMD_GET_RECLAIM_RANK_RSP = 1176;
    CMD_RECLAIM_GACHA_REQ = 1177;
    CMD_RECLAIM_GACHA_RSP = 1178;
    CMD_CHOOSE_RECLAIM_GACHA_REQ = 1179;
    CMD_CHOOSE_RECLAIM_GACHA_RSP = 1180;
    CMD_USE_RECLAIM_ITEM_REQ = 1181;
    CMD_USE_RECLAIM_ITEM_RSP = 1182;
    CMD_GET_PHOTO_DATA_REQ = 1191;
    CMD_GET_PHOTO_DATA_RSP = 1192;
    CMD_GET_WIKI_DATA_REQ = 1193;
    CMD_GET_WIKI_DATA_RSP = 1194;
    CMD_TAKE_WIKI_RATING_REWARD_REQ = 1195;
    CMD_TAKE_WIKI_RATING_REWARD_RSP = 1196;
    CMD_GET_PHONE_PENDANT_DATA_REQ = 1197;
    CMD_GET_PHONE_PENDANT_DATA_RSP = 1198;
    CMD_PHONE_PENDANT_OP_REQ = 1199;
    CMD_PHONE_PENDANT_OP_RSP = 1200;
    CMD_GET_TEAM_LIST_REQ = 1215;
    CMD_GET_TEAM_LIST_RSP = 1216;
    CMD_GET_EMOJI_DATA_REQ = 1245;
    CMD_GET_EMOJI_DATA_RSP = 1246;
    CMD_MP_FAST_MATCH_REQ = 1247;
    CMD_MP_FAST_MATCH_RSP = 1248;
    CMD_GET_SNS_SHOW_DATA_REQ = 1266;
    CMD_GET_SNS_SHOW_DATA_RSP = 1267;
    CMD_GET_CLIENT_SETTING_REQ = 1270;
    CMD_UPDATE_CLIENT_SETTING_REQ = 1271;
    CMD_GET_CLIENT_SETTING_RSP = 1272;
    CMD_GET_OTHER_PLAYER_CLIENT_SETTING_REQ = 1273;
    CMD_GET_OTHER_PLAYER_CLIENT_SETTING_RSP = 1274;
    CMD_GET_RECOMMEND_GOODS_REQ = 1275;
    CMD_GET_RECOMMEND_GOODS_RSP = 1276;
    CMD_GET_SPECIFIC_RECOMMEND_GOODS_REQ = 1277;
    CMD_GET_SPECIFIC_RECOMMEND_GOODS_RSP = 1278;
    CMD_UPDATE_LOBBY_SETTING_REQ = 1365;
    CMD_UPDATE_LOBBY_SETTING_RSP = 1366;
    CMD_EXCHANGE_PURPLE_JADE_REQ = 1367;
    CMD_EXCHANGE_PURPLE_JADE_RSP = 1368;
    CMD_COUPLE_TOWER_ACTIVITY_FINISH_FLOOR_REQ = 1371;
    CMD_COUPLE_TOWER_ACTIVITY_FINISH_FLOOR_RSP = 1372;
    CMD_RELATION_ACTIVITY_DATA_NOTIFY = 1373;
    CMD_GET_BRIEF_DATA_LIST_REQ = 1374;
    CMD_GET_BRIEF_DATA_LIST_RSP = 1375;
    CMD_FINISH_PLOT_REQ = 1378;
    CMD_FINISH_PLOT_RSP = 1379;
    CMD_GET_REGION_UID_RANGE_REQ = 1380;
    CMD_GET_REGION_UID_RANGE_RSP = 1381;
    CMD_GET_PLOT_LIST_REQ = 1382;
    CMD_GET_PLOT_LIST_RSP = 1383;
    CMD_GET_FARM_ACTIVITY_DATA_REQ = 1385;
    CMD_GET_FARM_ACTIVITY_DATA_RSP = 1386;
    CMD_UNLOCK_FARM_SLOT_REQ = 1387;
    CMD_UNLOCK_FARM_SLOT_RSP = 1388;
    CMD_START_FARM_PRODUCE_REQ = 1389;
    CMD_START_FARM_PRODUCE_RSP = 1390;
    CMD_FINISH_FARM_PRODUCE_REQ = 1391;
    CMD_FINISH_FARM_PRODUCE_RSP = 1392;
    CMD_SPEED_UP_FARM_PRODUCE_REQ = 1393;
    CMD_SPEED_UP_FARM_PRODUCE_RSP = 1394;
    CMD_SYNC_FARM_ACTIVITY_DATA_NOTIFY = 1395;
    CMD_AVATAR_ARTIFACT_UNLOCK_REQ = 1444;
    CMD_AVATAR_ARTIFACT_UNLOCK_RSP = 1445;
    CMD_AVATAR_ARTIFACT_LEVEL_UP_REQ = 1446;
    CMD_AVATAR_ARTIFACT_LEVEL_UP_RSP = 1447;
    CMD_TAKE_GOBACK_SCORE_REWARD_REQ = 1448;
    CMD_TAKE_GOBACK_SCORE_REWARD_RSP = 1449;
    CMD_GET_AVATAR_EQUIP_SUITE_REQ = 1454;
    CMD_GET_AVATAR_EQUIP_SUITE_RSP = 1455;
    CMD_SET_AVATAR_EQUIP_SUITE_REQ = 1456;
    CMD_SET_AVATAR_EQUIP_SUITE_RSP = 1457;
    CMD_SELECT_AVATAR_EQUIP_SUITE_REQ = 1458;
    CMD_SELECT_AVATAR_EQUIP_SUITE_RSP = 1459;
    CMD_REFRESH_AND_SYNC_MISSION_NOTIFY = 1473;
    CMD_GET_PRODUCT_RECOMMEND_LIST_REQ = 1478;
    CMD_GET_PRODUCT_RECOMMEND_LIST_RSP = 1479;
    CMD_GET_CURRENCY_EXCHANGE_INFO_REQ = 1480;
    CMD_GET_CURRENCY_EXCHANGE_INFO_RSP = 1481;
    CMD_SET_LEVEL_LOCK_REQ = 1488;
    CMD_SET_LEVEL_LOCK_RSP = 1489;
    CMD_FINISH_FAST_PASS_REQ = 1490;
    CMD_FINISH_FAST_PASS_RSP = 1491;
    CMD_SET_WARSHIP_AVATAR_REQ = 1492;
    CMD_SET_WARSHIP_AVATAR_RSP = 1493;
    CMD_CREATE_ALIPAY_ORDER_REQ = 1494;
    CMD_CREATE_ALIPAY_ORDER_RSP = 1495;
    CMD_SUBSCRIPTION_STATUS_NOTIFY = 1496;
    CMD_GET_CHAT_RED_ENVELOPE_INFO_REQ = 1502;
    CMD_GET_CHAT_RED_ENVELOPE_INFO_RSP = 1503;
    CMD_WANTED_MIRROR_RECOVERY_REQ = 1517;
    CMD_WANTED_MIRROR_RECOVERY_RSP = 1518;
    CMD_GET_RECOMMEND_MISSION_PANEL_LIST_REQ = 1519;
    CMD_GET_RECOMMEND_MISSION_PANEL_LIST_RSP = 1520;
    CMD_GET_CUSTOM_HEAD_DATA_REQ = 1523;
    CMD_GET_CUSTOM_HEAD_DATA_RSP = 1524;
    CMD_SET_CUSTOM_HEAD_REQ = 1525;
    CMD_SET_CUSTOM_HEAD_RSP = 1526;
    CMD_GET_STAGE_BUFF_REQ = 1528;
    CMD_GET_STAGE_BUFF_RSP = 1529;
    CMD_CHOOSE_STAGE_BUFF_REQ = 1530;
    CMD_CHOOSE_STAGE_BUFF_RSP = 1531;
    CMD_TRIGGER_RECOMMEND_GOODS_NOTIFY = 1538;
    CMD_CONFIRM_RECOMMEND_GOODS_REQ = 1539;
    CMD_CONFIRM_RECOMMEND_GOODS_RSP = 1540;
    CMD_GET_STAGE_RECOMMEND_AVATAR_REQ = 1541;
    CMD_GET_STAGE_RECOMMEND_AVATAR_RSP = 1542;
    CMD_SEND_DANMAKU_REQ = 1543;
    CMD_SEND_DANMAKU_RSP = 1544;
    CMD_GET_DANMAKU_LIST_REQ = 1545;
    CMD_GET_DANMAKU_LIST_RSP = 1546;
    CMD_GET_DANMAKU_BRIEF_INFO_REQ = 1547;
    CMD_GET_DANMAKU_BRIEF_INFO_RSP = 1548;
    CMD_IMPEACH_DANMAKU_REQ = 1549;
    CMD_IMPEACH_DANMAKU_RSP = 1550;
    CMD_DANMAKU_BLACKLIST_NOTIFY = 1551;
    CMD_GET_TEAM_STATUS_REQ = 1553;
    CMD_GET_TEAM_STATUS_RSP = 1554;
    CMD_GET_FAST_PASS_DATA_REQ = 1555;
    CMD_GET_FAST_PASS_DATA_RSP = 1556;
    CMD_GET_PLAYER_ONLINE_STATUS_REQ = 1576;
    CMD_GET_PLAYER_ONLINE_STATUS_RSP = 1577;
    CMD_MP_SYNC_ACTION_FROM_PLAYER_NOTIFY = 1579;
    CMD_MP_SYNC_ACTION_FROM_SERVER_NOTIFY = 1580;
    CMD_VERIFY_SAMSUNG_ORDER_NOTIFY = 1581;
    CMD_GLOBAL_SHOP_GOODS_INFO_NOTIFY = 1583;
    CMD_GET_CLIENT_DATA_REQ = 1586;
    CMD_GET_CLIENT_DATA_RSP = 1587;
    CMD_SET_CLIENT_DATA_REQ = 1588;
    CMD_SET_CLIENT_DATA_RSP = 1589;
    CMD_JIGUANG_UPDATE_TAG_REQ = 1590;
    CMD_JIGUANG_UPDATE_TAG_RSP = 1591;
    CMD_WIKI_TAKE_ACTIVITY_SUIT_REWARD_REQ = 1592;
    CMD_WIKI_TAKE_ACTIVITY_SUIT_REWARD_RSP = 1593;
    CMD_GET_BLACK_LIST_REQ = 1594;
    CMD_GET_BLACK_LIST_RSP = 1595;
    CMD_ADD_TO_BLACK_LIST_REQ = 1596;
    CMD_ADD_TO_BLACK_LIST_RSP = 1597;
    CMD_DEL_FROM_BLACK_LIST_REQ = 1598;
    CMD_DEL_FROM_BLACK_LIST_RSP = 1599;
    CMD_DEBUG_HOT_PATCH_FILE_NOTIFY = 1600;
    CMD_GET_WEB_ACTIVITY_INFO_REQ = 1601;
    CMD_GET_WEB_ACTIVITY_INFO_RSP = 1602;
    CMD_GET_MINI_RANK_REQ = 1603;
    CMD_GET_MINI_RANK_RSP = 1604;
    CMD_CHARGE_ACTIVITY_BUFF_REQ = 1605;
    CMD_CHARGE_ACTIVITY_BUFF_RSP = 1606;
    CMD_LOGIN_WISH_GET_MAIN_DATA_REQ = 1607;
    CMD_LOGIN_WISH_GET_MAIN_DATA_RSP = 1608;
    CMD_LOGIN_WISH_TAKE_LOGIN_REWARD_REQ = 1609;
    CMD_LOGIN_WISH_TAKE_LOGIN_REWARD_RSP = 1610;
    CMD_LOGIN_WISH_TAKE_SPECIAL_REWARD_REQ = 1611;
    CMD_LOGIN_WISH_TAKE_SPECIAL_REWARD_RSP = 1612;
    CMD_LOGIN_WISH_MAKE_WISH_REQ = 1613;
    CMD_LOGIN_WISH_MAKE_WISH_RSP = 1614;
    CMD_LOGIN_WISH_TAKE_WISH_REWARD_REQ = 1615;
    CMD_LOGIN_WISH_TAKE_WISH_REWARD_RSP = 1616;
    CMD_GET_SINGLE_SHOP_WITHOUT_REFRESH_REQ = 1617;
    CMD_GET_SINGLE_SHOP_WITHOUT_REFRESH_RSP = 1618;
    CMD_DEV_LEVEL_CHANGE_NOTIFY = 1619;
    CMD_DEL_AVATAR_EQUIP_SUITE_REQ = 1620;
    CMD_DEL_AVATAR_EQUIP_SUITE_RSP = 1621;
    CMD_GET_RAID_ACTIVE_INFO_REQ = 1622;
    CMD_GET_RAID_ACTIVE_INFO_RSP = 1623;
    CMD_ACTIVE_RAID_REQ = 1624;
    CMD_ACTIVE_RAID_RSP = 1625;
    CMD_CLIENT_CHECK_NETWORK_ENV_REQ = 1626;
    CMD_CLIENT_CHECK_NETWORK_ENV_RSP = 1627;
    CMD_GET_STAGE_RECOMMEND_AVATAR_COURSE_INFO_REQ = 1630;
    CMD_GET_STAGE_RECOMMEND_AVATAR_COURSE_INFO_RSP = 1631;
    CMD_GET_MISSION_STEP_COMPENSATION_INFO_REQ = 1632;
    CMD_GET_MISSION_STEP_COMPENSATION_INFO_RSP = 1633;
    CMD_TAKE_MISSION_STEP_COMPENSATION_REQ = 1634;
    CMD_TAKE_MISSION_STEP_COMPENSATION_RSP = 1635;
    CMD_GET_ELITE_CHAPTER_COMPENSATION_INFO_REQ = 1636;
    CMD_GET_ELITE_CHAPTER_COMPENSATION_INFO_RSP = 1637;
    CMD_TAKE_ELITE_CHAPTER_COMPENSATION_REQ = 1638;
    CMD_TAKE_ELITE_CHAPTER_COMPENSATION_RSP = 1639;
    CMD_TAKE_NEWBIE_PRIVILEGE_REWARD_REQ = 1640;
    CMD_TAKE_NEWBIE_PRIVILEGE_REWARD_RSP = 1641;
    CMD_UNLOCK_PRIVILEGE_REQ = 1642;
    CMD_UNLOCK_PRIVILEGE_RSP = 1643;
    CMD_MP_SET_EXTRA_SKILL_REQ = 1644;
    CMD_MP_SET_EXTRA_SKILL_RSP = 1645;
    CMD_GET_PRIVILEGE_INFO_REQ = 1646;
    CMD_GET_PRIVILEGE_INFO_RSP = 1647;
    CMD_CREATE_STEAM_ORDER_REQ = 1648;
    CMD_CREATE_STEAM_ORDER_RSP = 1649;
    CMD_VERIFY_STEAM_ORDER_NOTIFY = 1650;
    CMD_UNLOCK_GOBACK_FUND_REQ = 1651;
    CMD_UNLOCK_GOBACK_FUND_RSP = 1652;
    CMD_TAKE_GOBACK_FUND_REWARD_REQ = 1653;
    CMD_TAKE_GOBACK_FUND_REWARD_RSP = 1654;
    CMD_EX_BOSS_SWEEP_REQ = 1655;
    CMD_EX_BOSS_SWEEP_RSP = 1656;
    CMD_EX_BOSS_TAKE_BOSS_SCORE_REWARD_NOTIFY = 1657;
    CMD_BIND_HOYOLAB_ACCOUNT_REQ = 1658;
    CMD_BIND_HOYOLAB_ACCOUNT_RSP = 1659;
    CMD_CHAPTER_GROUP_GET_DATA_REQ = 1660;
    CMD_CHAPTER_GROUP_GET_DATA_RSP = 1661;
    CMD_WEEK_DAY_ACTIVITY_SWEEP_REQ = 1664;
    CMD_WEEK_DAY_ACTIVITY_SWEEP_RSP = 1665;
    CMD_GET_WEEK_DAY_ACTIVITY_COMPENSATION_INFO_REQ = 1666;
    CMD_GET_WEEK_DAY_ACTIVITY_COMPENSATION_INFO_RSP = 1667;
    CMD_TAKE_WEEK_DAY_ACTIVITY_COMPENSATION_REQ = 1668;
    CMD_TAKE_WEEK_DAY_ACTIVITY_COMPENSATION_RSP = 1669;
    CMD_REQUEST_LOGOFF_REQ = 1670;
    CMD_REQUEST_LOGOFF_RSP = 1671;
    CMD_GET_CHAPTER_COMPENSATION_INFO_REQ = 1672;
    CMD_GET_CHAPTER_COMPENSATION_INFO_RSP = 1673;
    CMD_TAKE_CHAPTER_COMPENSATION_REQ = 1674;
    CMD_TAKE_CHAPTER_COMPENSATION_RSP = 1675;
    CMD_GET_CHALLENGE_STEP_COMPENSATION_INFO_REQ = 1676;
    CMD_GET_CHALLENGE_STEP_COMPENSATION_INFO_RSP = 1677;
    CMD_TAKE_CHALLENGE_STEP_COMPENSATION_REQ = 1678;
    CMD_TAKE_CHALLENGE_STEP_COMPENSATION_RSP = 1679;
    CMD_GET_SPECIFIC_RANK_REQ = 1684;
    CMD_GET_SPECIFIC_RANK_RSP = 1685;
    CMD_GET_INVITE_ACTIVITY_INVITER_DATA_REQ = 1690;
    CMD_GET_INVITE_ACTIVITY_INVITER_DATA_RSP = 1691;
    CMD_TAKE_INVITE_ACTIVITY_INVITER_PROGRESS_REWARD_REQ = 1692;
    CMD_TAKE_INVITE_ACTIVITY_INVITER_PROGRESS_REWARD_RSP = 1693;
    CMD_GET_INVITE_ACTIVITY_INVITEE_DATA_REQ = 1694;
    CMD_GET_INVITE_ACTIVITY_INVITEE_DATA_RSP = 1695;
    CMD_INVITE_ACTIVITY_ACCEPT_INVITE_REQ = 1696;
    CMD_INVITE_ACTIVITY_ACCEPT_INVITE_RSP = 1697;
    CMD_THREE_DEAD_LINE = 1999;
}

enum CmdTypeTile {
    CMD_GET_TILE_MAP_REQ = 4900;
    CMD_GET_TILE_MAP_RSP = 4901;
    CMD_TILE_UPDATE_MAP_REQ = 4902;
    CMD_TILE_UPDATE_MAP_RSP = 4903;
    CMD_TILE_GET_TOWER_REQ = 4904;
    CMD_TILE_GET_TOWER_RSP = 4905;
    CMD_TILE_ENTER_REQ = 4906;
    CMD_TILE_ENTER_RSP = 4907;
    CMD_TILE_SAVE_PROGRESS_REQ = 4908;
    CMD_TILE_SAVE_PROGRESS_RSP = 4909;
    CMD_TILE_SETTLE_EVENT_REQ = 4910;
    CMD_TILE_SETTLE_EVENT_RSP = 4911;
    CMD_TILE_RESET_FLOOR_REQ = 4912;
    CMD_TILE_RESET_FLOOR_RSP = 4913;
    CMD_TILE_ENTITY_OP_NOTIFY = 4914;
    CMD_TILE_SELECT_PATH_REQ = 4915;
    CMD_TILE_SELECT_PATH_RSP = 4916;
    CMD_TILE_RESET_REGION_REQ = 4917;
    CMD_TILE_RESET_REGION_RSP = 4918;
    CMD_TILE_REPORT_SAVED_POSITION_REQ = 4919;
    CMD_TILE_REPORT_SAVED_POSITION_RSP = 4920;
    CMD_TILE_LOAD_SAVED_POSITION_REQ = 4921;
    CMD_TILE_LOAD_SAVED_POSITION_RSP = 4922;
    CMD_TILE_MAP_UPDATE_NOTIFY = 4923;
}

enum CmdTypeTown {
    CMD_TOWN_ACTIVITY_GET_DATA_REQ = 6450;
    CMD_TOWN_ACTIVITY_GET_DATA_RSP = 6451;
    CMD_TOWN_ACTIVITY_SAVE_REQ = 6452;
    CMD_TOWN_ACTIVITY_SAVE_RSP = 6453;
    CMD_TOWN_ACTIVITY_BUILD_REQ = 6454;
    CMD_TOWN_ACTIVITY_BUILD_RSP = 6455;
    CMD_TOWN_ACTIVITY_BATTLE_REQ = 6456;
    CMD_TOWN_ACTIVITY_BATTLE_RSP = 6457;
    CMD_TOWN_ACTIVITY_SELL_BUILDING_REQ = 6458;
    CMD_TOWN_ACTIVITY_SELL_BUILDING_RSP = 6459;
    CMD_TOWN_ACTIVITY_HEAL_AVATAR_REQ = 6460;
    CMD_TOWN_ACTIVITY_HEAL_AVATAR_RSP = 6461;
    CMD_TOWN_ACTIVITY_SELL_BRICK_REQ = 6462;
    CMD_TOWN_ACTIVITY_SELL_BRICK_RSP = 6463;
    CMD_TOWN_ACTIVITY_END_NOTIFY = 6464;
    CMD_TOWN_ACTIVITY_BOSS_ATTACK_NOTIFY = 6465;
    CMD_TOWN_ACTIVITY_GET_SHOP_REQ = 6466;
    CMD_TOWN_ACTIVITY_GET_SHOP_RSP = 6467;
    CMD_TOWN_ACTIVITY_SHOP_BUY_REQ = 6468;
    CMD_TOWN_ACTIVITY_SHOP_BUY_RSP = 6469;
    CMD_TOWN_ACTIVITY_MATERIAL_USE_REQ = 6470;
    CMD_TOWN_ACTIVITY_MATERIAL_USE_RSP = 6471;
    CMD_TOWN_ACTIVITY_SPEED_UP_HEAL_REQ = 6472;
    CMD_TOWN_ACTIVITY_SPEED_UP_HEAL_RSP = 6473;
    CMD_TOWN_ACTIVITY_CHECK_IN_OPTIONAL_REQ = 6474;
    CMD_TOWN_ACTIVITY_CHECK_IN_OPTIONAL_RSP = 6475;
    CMD_TOWN_ACTIVITY_RESET_REQ = 6476;
    CMD_TOWN_ACTIVITY_RESET_RSP = 6477;
    CMD_TOWN_ACTIVITY_ALTER_PATH_REQ = 6478;
    CMD_TOWN_ACTIVITY_ALTER_PATH_RSP = 6479;
    CMD_TOWN_ACTIVITY_ATTACK_ENEMY_BUFF_NOTIFY = 6480;
    CMD_TOWN_ACTIVITY_REFRESH_BRICK_REQ = 6481;
    CMD_TOWN_ACTIVITY_REFRESH_BRICK_RSP = 6482;
}

enum CmdTypeTvt {
    CMD_GET_TVT_ACTIVITY_REQ = 3300;
    CMD_GET_TVT_ACTIVITY_RSP = 3301;
    CMD_GET_TVT_BATTLE_HISTORY_REQ = 3302;
    CMD_GET_TVT_BATTLE_HISTORY_RSP = 3303;
    CMD_SYNC_TVT_MEMBER_IN_ROOM_NOTIFY = 3304;
    CMD_TVT_TAKE_MISSION_GROUP_REWARD_REQ = 3305;
    CMD_TVT_TAKE_MISSION_GROUP_REWARD_RSP = 3306;
    CMD_TVT_GET_STAGE_SCHEDULE_REQ = 3307;
    CMD_TVT_GET_STAGE_SCHEDULE_RSP = 3308;
    CMD_TVT_CARD_GET_DATA_REQ = 3309;
    CMD_TVT_CARD_GET_DATA_RSP = 3310;
    CMD_TVT_CARD_LEVELUP_REQ = 3311;
    CMD_TVT_CARD_LEVELUP_RSP = 3312;
    CMD_TVT_CARD_UPDATE_SUITE_REQ = 3313;
    CMD_TVT_CARD_UPDATE_SUITE_RSP = 3314;
    CMD_TVT_CARD_TAKE_SEASON_RETURN_REQ = 3315;
    CMD_TVT_CARD_TAKE_SEASON_RETURN_RSP = 3316;
    CMD_TVT_CARD_TRANSFORM_MATERIAL_REQ = 3317;
    CMD_TVT_CARD_TRANSFORM_MATERIAL_RSP = 3318;
    CMD_SYNC_TVT_BATTLE_INFO_NOTIFY = 3350;
    CMD_TVT_BATTLE_MEMBER_PREPARE_NOTIFY = 3351;
    CMD_TVT_BATTLE_BEGIN_NOTIFY = 3352;
    CMD_TVT_BATTLE_END_NOTIFY = 3353;
    CMD_TVT_BATTLE_SETTLE_NOTIFY = 3354;
    CMD_REPORT_TVT_BATTLE_STAGE_MESSAGE_NOTIFY = 3355;
    CMD_SYNC_TVT_BATTLE_STAGE_MESSAGE_NOTIFY = 3356;
    CMD_EXIT_TVT_BATTLE_NOTIFY = 3357;
    CMD_TVT_BATTLE_CLIENT_REPORT_NOTIFY = 3358;
    CMD_TVT_ENTER_SHOP_REQ = 3359;
    CMD_TVT_ENTER_SHOP_RSP = 3360;
    CMD_TVT_BATTLE_CONFIRM_NOTIFY = 3361;
    CMD_TVT_UPDATE_LINEUP_INFO_NOTIFY = 3362;
    CMD_TVT_BATTLE_ROBOT_SETTLE_NOTIFY = 3363;
    CMD_TVT_DUMMY = 3399;
}

enum CmdTypeTwo {
    CMD_GET_MEDAL_DATA_REQ = 449;
    CMD_GET_MEDAL_DATA_RSP = 450;
    CMD_MEDAL_OP_REQ = 451;
    CMD_MEDAL_OP_RSP = 452;
    CMD_GET_CLEAR_STAGE_ACTIVITY_REQ = 453;
    CMD_GET_CLEAR_STAGE_ACTIVITY_RSP = 454;
    CMD_FINISH_CLEAR_STAGE_ACTIVITY_NOTIFY = 455;
    CMD_GET_STAGE_ACT_DIFFICULTY_REQ = 456;
    CMD_GET_STAGE_ACT_DIFFICULTY_RSP = 457;
    CMD_TAKE_STAGE_ACT_CHALLENGE_REWARD_REQ = 458;
    CMD_TAKE_STAGE_ACT_CHALLENGE_REWARD_RSP = 459;
    CMD_TAKE_ACTIVITY_CHALLENGE_REWARD_REQ = 460;
    CMD_TAKE_ACTIVITY_CHALLENGE_REWARD_RSP = 461;
    CMD_GET_PEDIA_REQ = 464;
    CMD_GET_PEDIA_RSP = 465;
    CMD_MP_GET_MATCH_INFO_REQ = 466;
    CMD_MP_GET_MATCH_INFO_RSP = 467;
    CMD_MP_CANCEL_MATCH_REQ = 468;
    CMD_MP_CANCEL_MATCH_RSP = 469;
    CMD_MP_GET_LOBBY_RECOMMEND_REQ = 470;
    CMD_MP_GET_LOBBY_RECOMMEND_RSP = 471;
    CMD_GET_BUFF_EFFECT_REQ = 476;
    CMD_GET_BUFF_EFFECT_RSP = 477;
    CMD_EQUIP_SYNTHESIS_REQ = 478;
    CMD_EQUIP_SYNTHESIS_RSP = 479;
    CMD_GET_PLAYER_CARD_REQ = 480;
    CMD_GET_PLAYER_CARD_RSP = 481;
    CMD_CHANGE_PLAYER_CARD_REQ = 482;
    CMD_CHANGE_PLAYER_CARD_RSP = 483;
    CMD_GET_SIMULATE_ACTIVITY_REQ = 484;
    CMD_GET_SIMULATE_ACTIVITY_RSP = 485;
    CMD_SEND_PLAYER_CARD_MSG = 486;
    CMD_RECV_PLAYER_CARD_MSG = 487;
    CMD_DEL_PLAYER_CARD_MSG_REQ = 489;
    CMD_GET_OTHER_PLAYER_CARD_DATA_REQ = 490;
    CMD_GET_OTHER_PLAYER_CARD_DATA_RSP = 491;
    CMD_CHANGE_PLAYER_CARD_DATA_NOTIFY = 492;
    CMD_SEND_PLAYER_CARD_MSG_RSP = 493;
    CMD_GET_BOSS_RUSH_ACTIVITY_REQ = 496;
    CMD_GET_BOSS_RUSH_ACTIVITY_RSP = 497;
    CMD_CHOOSE_BOSS_RUSH_BUFF_REQ = 498;
    CMD_CHOOSE_BOSS_RUSH_BUFF_RSP = 499;
    CMD_GET_DELETE_MATERIAL_REQ = 500;
    CMD_GET_DELETE_MATERIAL_RSP = 501;
    CMD_GET_EXTRA_STORY_CHALLENGE_MODE_DATA_REQ = 502;
    CMD_GET_EXTRA_STORY_CHALLENGE_MODE_DATA_RSP = 503;
    CMD_RESET_EXTRA_STORY_CHALLENGE_MODE_REQ = 504;
    CMD_RESET_EXTRA_STORY_CHALLENGE_MODE_RSP = 505;
    CMD_GET_GRAND_KEY_REQ = 506;
    CMD_GET_GRAND_KEY_RSP = 507;
    CMD_GET_EX_BOSS_SCHEDULE_REQ = 508;
    CMD_GET_EX_BOSS_SCHEDULE_RSP = 509;
    CMD_GET_EX_BOSS_INFO_REQ = 510;
    CMD_GET_EX_BOSS_INFO_RSP = 511;
    CMD_TAKE_EX_BOSS_RANK_REWARD_NOTIFY = 516;
    CMD_GET_NEW_CONSIGNED_ORDER_DATA_REQ = 517;
    CMD_GET_NEW_CONSIGNED_ORDER_DATA_RSP = 518;
    CMD_GET_CONSIGNED_REWARD_REQ = 519;
    CMD_GET_CONSIGNED_REWARD_RSP = 520;
    CMD_CHOOSE_CONSIGNED_REWARD_REQ = 521;
    CMD_CHOOSE_CONSIGNED_REWARD_RSP = 522;
    CMD_TAKE_CONSIGNED_REWARD_REQ = 523;
    CMD_TAKE_CONSIGNED_REWARD_RSP = 524;
    CMD_GET_CONSIGNED_REWARD_LOG_REQ = 525;
    CMD_GET_CONSIGNED_REWARD_LOG_RSP = 526;
    CMD_GET_EX_BOSS_RANK_REQ = 527;
    CMD_GET_EX_BOSS_RANK_RSP = 528;
    CMD_EX_BOSS_STAGE_BEGIN_REQ = 529;
    CMD_EX_BOSS_STAGE_BEGIN_RSP = 530;
    CMD_EX_BOSS_STAGE_END_REQ = 531;
    CMD_EX_BOSS_STAGE_END_RSP = 532;
    CMD_TAKE_EX_BOSS_SCORE_REWARD_NOTIFY = 533;
    CMD_OPEN_WEEK_DAY_ACTIVITY_REQ = 534;
    CMD_OPEN_WEEK_DAY_ACTIVITY_RSP = 535;
    CMD_GET_CHALLENGE_STEP_REWARD_REQ = 536;
    CMD_GET_CHALLENGE_STEP_REWARD_RSP = 537;
    CMD_ADD_TECH_EXP_REQ = 538;
    CMD_ADD_TECH_EXP_RSP = 539;
    CMD_TAKE_TECH_COLLECT_REWARD_REQ = 540;
    CMD_TAKE_TECH_COLLECT_REWARD_RSP = 541;
    CMD_GET_MINUTE_STAGE_REQ = 542;
    CMD_GET_MINUTE_STAGE_RSP = 543;
    CMD_GET_MINUTE_TIMES_REQ = 544;
    CMD_GET_MINUTE_TIMES_RSP = 545;
    CMD_GET_RAID_RANK_REQ = 549;
    CMD_GET_RAID_RANK_RSP = 550;
    CMD_GET_RAID_SPECIAL_REWARD_REQ = 551;
    CMD_GET_RAID_SPECIAL_REWARD_RSP = 552;
    CMD_MATERIAL_DELETE_RETURN_REQ = 553;
    CMD_ARMADA_BOSS_GET_MP_STATUS_REQ = 554;
    CMD_ARMADA_BOSS_GET_MP_STATUS_RSP = 555;
    CMD_TAKE_DAILY_COMPENSATION_REWARD_REQ = 564;
    CMD_TAKE_DAILY_COMPENSATION_REWARD_RSP = 565;
    CMD_AS_MASTER_PUPIL_CARD_REQ = 566;
    CMD_AS_MASTER_PUPIL_CARD_RSP = 567;
    CMD_GET_MASTER_PUPIL_DATA_REQ = 568;
    CMD_GET_MASTER_PUPIL_DATA_RSP = 569;
    CMD_ASK_FOR_MASTER_PUPIL_REQ = 570;
    CMD_ASK_FOR_MASTER_PUPIL_RSP = 571;
    CMD_DEAL_MASTER_PUPIL_REQ = 572;
    CMD_DEAL_MASTER_PUPIL_RSP = 573;
    CMD_MASTER_PUPIL_EVA_REQ = 574;
    CMD_MASTER_PUPIL_EVA_RSP = 575;
    CMD_GET_MASTER_FAME_REWARD_REQ = 576;
    CMD_GET_MASTER_FAME_REWARD_RSP = 577;
    CMD_MASTER_PUPIL_CARD_REPORT_REQ = 578;
    CMD_SELECT_AVATAR_SUITE_REQ = 580;
    CMD_SELECT_AVATAR_SUITE_RSP = 581;
    CMD_AVATAR_SUITE_SELECTION_NOTIFY = 582;
    CMD_ACTIVATE_TRIAL_AVATAR_REQ = 583;
    CMD_ACTIVATE_TRIAL_AVATAR_RSP = 584;
    CMD_GET_TRIAL_AVATAR_REQ = 585;
    CMD_GET_TRIAL_AVATAR_RSP = 586;
    CMD_GET_MASTER_PUPIL_CARD_REQ = 587;
    CMD_GET_MASTER_PUPIL_CARD_RSP = 588;
    CMD_MASTER_PUPIL_NOTIFY = 589;
    CMD_GET_FRAME_DATA_REQ = 590;
    CMD_GET_FRAME_DATA_RSP = 591;
    CMD_SET_USE_FRAME_REQ = 592;
    CMD_SET_USE_FRAME_RSP = 593;
    CMD_GET_SEALED_MODE_SCHEDULE_REQ = 594;
    CMD_GET_SEALED_MODE_SCHEDULE_RSP = 595;
    CMD_GET_SEALED_MODE_INFO_REQ = 596;
    CMD_GET_SEALED_MODE_INFO_RSP = 597;
    CMD_SEALED_MODE_START_SELECTION_REQ = 598;
    CMD_SEALED_MODE_START_SELECTION_RSP = 599;
    CMD_GET_DORM_DATA_REQ = 601;
    CMD_GET_DORM_DATA_RSP = 602;
    CMD_GET_DORM_HOUSE_REQ = 603;
    CMD_GET_DORM_HOUSE_RSP = 604;
    CMD_EDIT_DORM_ROOM_REQ = 605;
    CMD_EDIT_DORM_ROOM_RSP = 606;
    CMD_GET_DEPOT_FURNITURE_REQ = 607;
    CMD_GET_DEPOT_FURNITURE_RSP = 608;
    CMD_UNLOCK_DORM_HOUSE_REQ = 609;
    CMD_UNLOCK_DORM_HOUSE_RSP = 610;
    CMD_SET_DORM_AVATAR_REQ = 611;
    CMD_SET_DORM_AVATAR_RSP = 612;
    CMD_LEVEL_UP_DORM_REQ = 613;
    CMD_LEVEL_UP_DORM_RSP = 614;
    CMD_SET_DORM_NAME_REQ = 615;
    CMD_SET_DORM_NAME_RSP = 616;
    CMD_FINISH_DORM_EVENT_REQ = 617;
    CMD_FINISH_DORM_EVENT_RSP = 618;
    CMD_GET_HAS_GOT_FURNITURE_ID_LIST_REQ = 619;
    CMD_GET_HAS_GOT_FURNITURE_ID_LIST_RSP = 620;
    CMD_BUY_FURNITURE_REQ = 621;
    CMD_BUY_FURNITURE_RSP = 622;
    CMD_GET_OTHER_DORM_DATA_REQ = 633;
    CMD_GET_OTHER_DORM_DATA_RSP = 634;
    CMD_SET_DORM_SNS_INFO_REQ = 635;
    CMD_SET_DORM_SNS_INFO_RSP = 636;
    CMD_GET_DORM_SNS_DATA_REQ = 637;
    CMD_GET_DORM_SNS_DATA_RSP = 638;
    CMD_LIKE_DORM_REQ = 639;
    CMD_LIKE_DORM_RSP = 640;
    CMD_FINISH_DORM_TALK_REQ = 641;
    CMD_FINISH_DORM_TALK_RSP = 642;
    CMD_GET_AVATAR_ROLL_DATA_REQ = 643;
    CMD_GET_AVATAR_ROLL_DATA_RSP = 644;
    CMD_TAKE_ROLL_REWARD_REQ = 645;
    CMD_TAKE_ROLL_REWARD_RSP = 646;
    CMD_CLAIM_STAMINA_REQ = 649;
    CMD_CLAIM_STAMINA_RSP = 650;
    CMD_GET_PUPIL_MISSION_REQ = 651;
    CMD_GET_PUPIL_MISSION_RSP = 652;
    CMD_GET_MASTER_PUPIL_APPLY_REQ = 653;
    CMD_GET_MASTER_PUPIL_APPLY_RSP = 654;
    CMD_GET_RECOMMEND_MASTER_PUPIL_REQ = 655;
    CMD_GET_RECOMMEND_MASTER_PUPIL_RSP = 656;
    CMD_GET_MASTER_PUPIL_MAIN_DATA_REQ = 657;
    CMD_GET_MASTER_PUPIL_MAIN_DATA_RSP = 658;
    CMD_GET_PUPIL_EVAL_DATA_REQ = 659;
    CMD_GET_PUPIL_EVAL_DATA_RSP = 660;
    CMD_REPORT_CLICK_RECHARGE_BUTTON_NOTIFY = 661;
    CMD_GET_MASTER_RANK_REQ = 662;
    CMD_GET_MASTER_RANK_RSP = 663;
    CMD_GET_OTHER_MASTER_PUPIL_REQ = 664;
    CMD_GET_OTHER_MASTER_PUPIL_RSP = 665;
    CMD_UNLOCK_FURNITURE_REQ = 680;
    CMD_UNLOCK_FURNITURE_RSP = 681;
    CMD_SEALED_MODE_START_MATCH_REQ = 701;
    CMD_SEALED_MODE_START_MATCH_RSP = 702;
    CMD_SEALED_MODE_GET_MATCH_INFO_REQ = 703;
    CMD_SEALED_MODE_GET_MATCH_INFO_RSP = 704;
    CMD_SEALED_MODE_CANCEL_MATCH_REQ = 705;
    CMD_SEALED_MODE_CANCEL_MATCH_RSP = 706;
    CMD_SEALED_MODE_EXCHANGE_AVATAR_REQ = 707;
    CMD_SEALED_MODE_EXCHANGE_AVATAR_RSP = 708;
    CMD_SEALED_MODE_UPDATE_SCORE_REQ = 709;
    CMD_SEALED_MODE_UPDATE_SCORE_RSP = 710;
    CMD_SEALED_MODE_PLAYER_SCORE_NOTIFY = 711;
    CMD_SEALED_MODE_RECEIVE_ITEM_NOTIFY = 712;
    CMD_SEALED_MODE_USE_ITEM_REQ = 713;
    CMD_SEALED_MODE_USE_ITEM_RSP = 714;
    CMD_SEALED_MODE_SYNC_LEVEL_INFO_REQ = 715;
    CMD_SEALED_MODE_SYNC_LEVEL_INFO_RSP = 716;
    CMD_SEALED_MODE_SETTLE_NOTIFY = 717;
    CMD_SEALED_MODE_WINNER_NOTIFY = 718;
    CMD_SEALED_MODE_BATTLE_BEGIN_NOTIFY = 719;
    CMD_SEALED_MODE_GET_PLAYER_STATUS_REQ = 720;
    CMD_SEALED_MODE_GET_PLAYER_STATUS_RSP = 721;
    CMD_SEALED_MODE_USE_TICKET_REQ = 722;
    CMD_SEALED_MODE_USE_TICKET_RSP = 723;
    CMD_SEALED_MODE_GET_RANK_INFO_REQ = 724;
    CMD_SEALED_MODE_GET_RANK_INFO_RSP = 725;
    CMD_SEALED_MODE_RANK_LEVEL_REWARD_NOTIFY = 726;
    CMD_SEALED_MODE_START_NEW_SELECTION_REQ = 727;
    CMD_SEALED_MODE_START_NEW_SELECTION_RSP = 728;
    CMD_SEALED_MODE_SELECTION_NOTIFY = 729;
    CMD_SEALED_MODE_SELECT_REQ = 730;
    CMD_SEALED_MODE_SELECT_RSP = 731;
    CMD_SEALED_MODE_EXCHANGE_EQUIP_REQ = 732;
    CMD_SEALED_MODE_EXCHANGE_EQUIP_RSP = 733;
    CMD_SEALED_MODE_UPDATE_CHEAT_DATA_REQ = 734;
    CMD_SEALED_MODE_UPDATE_CHEAT_DATA_RSP = 735;
    CMD_SEALED_MODE_WIN_BATTLE_REQ = 736;
    CMD_SEALED_MODE_WIN_BATTLE_RSP = 737;
    CMD_SEALED_MODE_GET_TOTAL_REWARD_SCORE_INFO_REQ = 738;
    CMD_SEALED_MODE_GET_TOTAL_REWARD_SCORE_INFO_RSP = 739;
    CMD_SEALED_MODE_TAKE_TOTAL_SCORE_REWARD_REQ = 740;
    CMD_SEALED_MODE_TAKE_TOTAL_SCORE_REWARD_RSP = 741;
    CMD_SEALED_MODE_ABANDON_TICKET_REQ = 742;
    CMD_SEALED_MODE_ABANDON_TICKET_RSP = 743;
    CMD_GRAND_KEY_LEVEL_UP_REQ = 753;
    CMD_GRAND_KEY_LEVEL_UP_RSP = 754;
    CMD_GRAND_KEY_RESET_REQ = 755;
    CMD_GRAND_KEY_RESET_RSP = 756;
    CMD_GRAND_KEY_BREACH_REQ = 757;
    CMD_GRAND_KEY_BREACH_RSP = 758;
    CMD_GRAND_KEY_ACTIVATE_SKILL_REQ = 759;
    CMD_GRAND_KEY_ACTIVATE_SKILL_RSP = 760;
    CMD_GRAND_KEY_CONTRAST_REQ = 761;
    CMD_GRAND_KEY_CONTRAST_RSP = 762;
    CMD_GRAND_KEY_SET_SKILL_REQ = 763;
    CMD_GRAND_KEY_SET_SKILL_RSP = 764;
    CMD_GET_STAGE_DROP_LIMIT_ACTIVITY_REQ = 776;
    CMD_GET_STAGE_DROP_LIMIT_ACTIVITY_RSP = 777;
    CMD_PUSH_CLIENT_MSG_NOTIFY = 801;
    CMD_SET_PLAYER_TAG_NOTIFY = 802;
    CMD_SYNC_TIME_REQ = 803;
    CMD_SYNC_TIME_RSP = 804;
    CMD_BUY_PRODUCT_REQ = 805;
    CMD_BUY_PRODUCT_RSP = 806;
    CMD_TAKE_EXTRA_STORY_CHALLENGE_MODE_CHAPTER_REWARD_REQ = 807;
    CMD_TAKE_EXTRA_STORY_CHALLENGE_MODE_CHAPTER_REWARD_RSP = 808;
    CMD_GET_AVATAR_BIND_EQUIP_IN_CHALLENGE_MODE_REQ = 809;
    CMD_GET_AVATAR_BIND_EQUIP_IN_CHALLENGE_MODE_RSP = 810;
    CMD_GET_GALINTERACT_TRIGGER_EVENT_REQ = 813;
    CMD_GET_GALINTERACT_TRIGGER_EVENT_RSP = 814;
    CMD_TAKE_GALINTERACT_TRIGGER_EVENT_REQ = 815;
    CMD_TAKE_GALINTERACT_TRIGGER_EVENT_RSP = 816;
    CMD_AVATAE_FRAGMENT_TRANSFORM_REQ = 827;
    CMD_AVATAE_FRAGMENT_TRANSFORM_RSP = 828;
    CMD_STAGE_BATTLE_SAVE_CLIENT_DATA_REQ = 829;
    CMD_STAGE_BATTLE_SAVE_CLIENT_DATA_RSP = 830;
    CMD_EXCHANGE_HCOIN_BY_MCOIN_REQ = 834;
    CMD_EXCHANGE_HCOIN_BY_MCOIN_RSP = 835;
    CMD_TAKE_EXTRA_STORY_LINE_STORY_FINISH_REWARD_REQ = 836;
    CMD_TAKE_EXTRA_STORY_LINE_STORY_FINISH_REWARD_RSP = 837;
    CMD_UNBIND_ACCOUNT_REQ = 961;
    CMD_UNBIND_ACCOUNT_RSP = 962;
    CMD_TAKE_FOUNDATION_REWARD_REQ = 963;
    CMD_TAKE_FOUNDATION_REWARD_RSP = 964;
    CMD_GET_STAGE_CHAPTER_REQ = 965;
    CMD_GET_STAGE_CHAPTER_RSP = 966;
    CMD_TAKE_CHAPTER_CHALLENGE_REWARD_REQ = 967;
    CMD_TAKE_CHAPTER_CHALLENGE_REWARD_RSP = 968;
    CMD_SYNC_DUTY_NOTIFY = 969;
    CMD_RECALL_MASTER_PUPIL_APPLICATION_REQ = 970;
    CMD_RECALL_MASTER_PUPIL_APPLICATION_RSP = 971;
    CMD_SET_FRIEND_REMARK_REQ = 972;
    CMD_SET_FRIEND_REMARK_RSP = 973;
    CMD_GET_FRIEND_REMARK_LIST_REQ = 974;
    CMD_GET_FRIEND_REMARK_LIST_RSP = 975;
    CMD_PLAYER_LEVEL_UP_NOTIFY = 976;
}

enum CmdTypeUltraendless {
    CMD_ULTRA_ENDLESS_GET_TOP_RANK_REQ = 5200;
    CMD_ULTRA_ENDLESS_GET_TOP_RANK_RSP = 5201;
    CMD_ULTRA_ENDLESS_GET_MAIN_DATA_REQ = 5202;
    CMD_ULTRA_ENDLESS_GET_MAIN_DATA_RSP = 5203;
    CMD_ULTRA_ENDLESS_LAST_SETTLE_REWARD_NOTIFY = 5205;
    CMD_ULTRA_ENDLESS_REPORT_SITE_FLOOR_REQ = 5206;
    CMD_ULTRA_ENDLESS_REPORT_SITE_FLOOR_RSP = 5207;
    CMD_ULTRA_ENDLESS_BRIEF_DATA_NOTIFY = 5210;
    CMD_ULTRA_ENDLESS_ENTER_SITE_REQ = 5211;
    CMD_ULTRA_ENDLESS_ENTER_SITE_RSP = 5212;
    CMD_ULTRA_ENDLESS_GROUP_LEVEL_REWARD_REQ = 5213;
    CMD_ULTRA_ENDLESS_GROUP_LEVEL_REWARD_RSP = 5214;
    CMD_ULTRA_ENDLESS_TOP_RANK_REWARD_REQ = 5215;
    CMD_ULTRA_ENDLESS_TOP_RANK_REWARD_RSP = 5216;
    CMD_ULTRA_ENDLESS_CLIENT_REPORT_NOTIFY = 5219;
    CMD_ULTRA_ENDLESS_FIRST_JOIN_REWARD_NOTIFY = 5220;
    CMD_ULTRA_ENDLESS_COMMON_NOTIFY = 5298;
    CMD_ULTRA_ENDLESS_DUMMY = 5299;
}

enum CmdTypeVirtualtrain {
    CMD_GET_VIRTUAL_AVATAR_GROUP_DETAIL_REQ = 3502;
    CMD_GET_VIRTUAL_AVATAR_GROUP_DETAIL_RSP = 3503;
    CMD_SET_VIRTUAL_AVATAR_TEAM_REQ = 3504;
    CMD_SET_VIRTUAL_AVATAR_TEAM_RSP = 3505;
    CMD_DRESS_VIRTUAL_EQUIPMENT_REQ = 3506;
    CMD_DRESS_VIRTUAL_EQUIPMENT_RSP = 3507;
    CMD_VIRTUAL_GACHA_REQ = 3508;
    CMD_VIRTUAL_GACHA_RSP = 3509;
    CMD_GET_VIRTUAL_GACHA_STATUS_REQ = 3510;
    CMD_GET_VIRTUAL_GACHA_STATUS_RSP = 3511;
    CMD_VIRTUAL_AVATAR_GROUP_CHANGE_NOTIFY = 3512;
    CMD_VIRTUAL_TRAIN_DIRECT_GACHA_NOTIFY = 3513;
    CMD_CHOOSE_VIRTUAL_GACHA_ITEM_REQ = 3514;
    CMD_CHOOSE_VIRTUAL_GACHA_ITEM_RSP = 3515;
    CMD_CHOOSE_VIRTUAL_DEFAULT_AVATAR_NOTIFY = 3516;
    CMD_SYNC_VIRTUAL_GACHA_STATUS_NOTIFY = 3517;
    CMD_VIRTUAL_TRAIN_ROLE_CUSTOM_LEVEL_UP_REQ = 3518;
    CMD_VIRTUAL_TRAIN_ROLE_CUSTOM_LEVEL_UP_RSP = 3519;
    CMD_VIRTUAL_TRAIN_ROLE_CUSTOM_CHOOSE_REQ = 3520;
    CMD_VIRTUAL_TRAIN_ROLE_CUSTOM_CHOOSE_RSP = 3521;
    CMD_VIRTUAL_TRAIN_EVO_REQ = 3522;
    CMD_VIRTUAL_TRAIN_EVO_RSP = 3523;
    CMD_VIRTUAL_TRAIN_ITEM_DROP_NOTIFY = 3524;
    CMD_VIRTUAL_TRAIN_DUMMY = 3549;
}

enum CmdTypeWarship {
    CMD_GET_WARSHIP_ITEM_DATA_REQ = 5450;
    CMD_GET_WARSHIP_ITEM_DATA_RSP = 5451;
    CMD_GET_WARSHIP_TRIAL_DATA_REQ = 5452;
    CMD_GET_WARSHIP_TRIAL_DATA_RSP = 5453;
    CMD_GET_WARSHIP_DATA_REQ = 5454;
    CMD_GET_WARSHIP_DATA_RSP = 5455;
    CMD_SET_WARSHIP_REQ = 5456;
    CMD_SET_WARSHIP_RSP = 5457;
    CMD_SET_WARSHIP_COMPONENT_REQ = 5458;
    CMD_SET_WARSHIP_COMPONENT_RSP = 5459;
    CMD_SET_WARSHIP_SETTING_REQ = 5460;
    CMD_SET_WARSHIP_SETTING_RSP = 5461;
    CMD_WARSHIP_ITEM_RETURN_MATERIAL_NOTIFY = 5462;
}

enum CmdTypeWeeklyreport {
    CMD_GET_WEEKLY_REPORT_REQ = 5100;
    CMD_GET_WEEKLY_REPORT_RSP = 5101;
    CMD_GET_WEEKLY_REPORT_ENDLESS_RECOMMEND_PLAYER_REQ = 5102;
    CMD_GET_WEEKLY_REPORT_ENDLESS_RECOMMEND_PLAYER_RSP = 5103;
    CMD_GET_WEEKLY_REPORT_EX_BOSS_RECOMMEND_PLAYER_REQ = 5104;
    CMD_GET_WEEKLY_REPORT_EX_BOSS_RECOMMEND_PLAYER_RSP = 5105;
    CMD_GET_WEEKLY_REPORT_ULTRA_ENDLESS_RECOMMEND_PLAYER_REQ = 5106;
    CMD_GET_WEEKLY_REPORT_ULTRA_ENDLESS_RECOMMEND_PLAYER_RSP = 5107;
}

message CommandCDSwitchData {
    optional uint32 cmd_id = 1;
}


message CommentReportReq {
    optional CommentType comment = 1;
    optional uint32 times = 2;

    enum CmdId {
        CMD_ID = 229;
    }
}

message CommentReportRsp {
    optional Retcode retcode = 1;
    optional uint32 next_evaluate_time = 2;

    enum CmdId {
        CMD_ID = 230;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

enum CommentType {
    COMMENT_OK = 1;
    COMMENT_CANCEL = 2;
    COMMENT_IGNORE = 3;
}

message CommonCdCheckNotify {
    optional uint32 end_time = 1;

    enum CmdId {
        CMD_ID = 5003;
    }
}

enum CommonChatMsgType {
    COMMON_CHAT_MSG_NONE = 0;
    COMMON_CHAT_MSG_TEAM = 1;
    COMMON_CHAT_MSG_CAMPAIGN = 2;
    COMMON_CHAT_MSG_ROOM = 3;
    COMMON_CHAT_MSG_PRIVATE = 4;
    COMMON_CHAT_MSG_CAHT_GROUP = 5;
    COMMON_CHAT_MSG_WORLD_CHAT = 6;
    COMMON_CHAT_MSG_ARMADA_CHAT = 7;
}

message CommonChatworldRedEnvelope {
    optional uint32 red_envelope_id = 1;
    optional uint32 expire_time = 2;
    optional uint32 sender_uid = 3;
    optional uint32 item_id = 4;
}


message CommonChatworldRedEnvelopeMsg {
    optional uint32 sender_uid = 1;
    optional uint32 channel = 2;
    optional bool is_sender_npc = 3;
    optional CommonChatworldRedEnvelope chatworld_red_envelope = 4;
    optional string msg = 5;
}

enum CompensationType {
    COMPENSATION_NONE = 0;
    COMPENSATION_ISLAND = 1;
    COMPENSATION_DORM = 2;
}

message ConfirmRecommendGoodsReq {
    optional uint32 recommend_id = 1;

    enum CmdId {
        CMD_ID = 1539;
    }
}

message ConfirmRecommendGoodsRsp {
    optional Retcode retcode = 1;
    optional uint32 recommend_id = 2;

    enum CmdId {
        CMD_ID = 1540;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}



message ConsignedOrder {
    optional uint32 id = 1;
    optional uint32 consigner_uid = 2;
    optional uint32 reward_id = 3;
    optional uint32 progress = 4;
    optional uint32 unique_id = 5;
    optional uint32 order_level = 6;
    repeated RewardData reward_list = 7;
    repeated DropItem drop_item_list = 8;
    optional uint32 order_credit = 9;
}


message ConsignedRewardLog {
    optional uint32 uid = 1;
    repeated RewardData reward_list = 2;
    optional uint32 credit = 3;
}

enum ConstantEnum {
    UN_LIMIT_TIMES = 65535;
    FRAME_DEFAULT_ID = 200001;
}


message ControllableBoxGachaItem {
    optional uint32 drop_id = 1;
    optional uint32 item_id = 2;
    optional uint32 item_level = 3;
    optional uint32 item_num = 4;
    optional bool is_shining = 5;
    optional bool is_core = 6;
    optional SettingDict display_setting_dict = 9;
}


message ControllableBoxGachaItemData {
    repeated ControllableBoxGachaItem item_list = 1;
    repeated uint32 has_got_item_list = 2;
}

message ControllableBoxGachaSelectableGroup {
    optional uint32 group_id = 1;
    optional uint32 select_drop_id = 2;
    repeated uint32 drop_id_list = 3;
}


message CoupleTowerActivity {
    optional uint32 max_floor = 1;
    repeated CoupleTowerScore floor_score_list = 2;
    optional bool is_settled = 3;
}


message CoupleTowerActivityFinishFloorReq {
    optional uint32 stage_id = 1;
    optional uint32 floor = 2;
    optional uint32 score = 3;
    repeated StageCheatData cheat_data_list = 4;

    enum CmdId {
        CMD_ID = 1371;
    }
}

message CoupleTowerActivityFinishFloorRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 1372;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        JUMP_FLOOR = 2;
    }
}

message CoupleTowerScore {
    optional uint32 floor = 1;
    optional uint32 score = 2;
}

message CreateAlipayOrderReq {
    optional string product_name = 1;
    optional string total_fee = 2;
    optional string notify_url = 3;
    optional string body = 4;
    optional TradeType trade_type = 5;

    enum CmdId {
        CMD_ID = 1494;
    }
    enum TradeType {
        NONE = 0;
        APP = 1;
        QR_CODE = 2;
        HUA_BEI = 3;
    }
}

message CreateAlipayOrderRsp {
    optional Retcode retcode = 1;
    optional string qr_code_url = 2;
    optional string product_name = 3;
    optional string order_string = 4;

    enum CmdId {
        CMD_ID = 1495;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message CreateArmadaReq {
    optional string name = 1;
    optional ArmadaLabel label = 2;

    enum CmdId {
        CMD_ID = 2603;
    }
}

message CreateArmadaRsp {
    optional Retcode retcode = 1;
    optional uint32 armada_id = 2;
    optional string armada_name = 3;
    optional string audit_armada_name = 4;

    enum CmdId {
        CMD_ID = 2604;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
        SCOIN_LACK = 3;
        HCOIN_LACK = 4;
        IN_ARMADA = 5;
        IN_APPLYING = 6;
        NAME_REPEAT = 7;
        NAME_FORMAT_ERROR = 8;
        NAME_SENSITIVE_WORDS = 9;
        IN_CD_TIME = 10;
        ACCOUNT_NONE = 11;
        IN_LOW_POPL_CD_TIME = 12;
        LABEL_ERROR = 13;
        IN_AUDIT = 14;
    }
}

message CreateChatgroupReq {
    optional string name = 1;
    optional string notice = 2;
    optional uint32 icon_id = 3;
    repeated uint32 label_id_list = 4;

    enum CmdId {
        CMD_ID = 2200;
    }
}


message CreateChatgroupRsp {
    optional Retcode retcode = 1;
    optional Chatgroup chatgroup = 2;
    optional string audit_name = 3;
    optional string audit_notice = 4;

    enum CmdId {
        CMD_ID = 2201;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CREATE_MAX = 2;
        JOIN_MAX = 3;
        SENSITIVE_WORD = 4;
        LEVEL_LACK = 5;
        LABEL_ERROR = 6;
        NAME_FORMAT_ERROR = 7;
        NOTICE_FORMAT_ERROR = 8;
        FEATURE_LIMIT = 9;
        IN_AUDIT = 10;
    }
}




message CreateLobbyReq {
    optional uint32 stage_id = 1;
    optional uint32 min_level = 2;
    optional LobbyEnterType lobby_enter_type = 3;
    optional uint32 max_player_num = 4;
    repeated CabinTechAddAttr cabin_attr = 5;
    optional uint32 client_rtt = 6;
    optional MpTeamMember member = 7;
    repeated uint32 avatar_trial_list = 8;
    optional bool is_allow_cross_region = 10;
    optional string team_name = 11;
    optional string team_description = 12;
    optional bool is_team_name_default = 13;
    optional uint32 max_level = 14;

    enum CmdId {
        CMD_ID = 301;
    }
}


message CreateLobbyRsp {
    optional Retcode retcode = 1;
    optional int32 sub_retcode = 2;
    optional uint32 lobby_id = 3;
    optional uint32 stage_id = 4;
    optional uint32 min_level = 5;
    optional LobbyEnterType lobby_enter_type = 6;
    optional uint32 max_level = 7;

    enum CmdId {
        CMD_ID = 302;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STAGE_ERROR = 2;
        SERVER_BUSY = 3;
        BAD_NETWORK = 4;
        CLIENT_VERSION_ERROR = 5;
        NOT_ALLOWED = 6;
        NO_AVAILABLE_AVATAR = 7;
        TEAM_NAME_ERROR = 8;
        IN_SQUAD = 9;
        IN_SQUAD_MATCH = 10;
        IN_ROOM = 12;
        FEATURE_LIMIT = 13;
        MEMBER_LIMIT = 14;
        DEFAULT_TEAM_NAME_ERROR = 15;
    }
}




message CreateRoomReq {
    optional RoomMode room_mode = 1;
    optional RoomMember member_data = 2;
    optional RoomInfo room_info = 3;

    enum CmdId {
        CMD_ID = 3153;
    }
}

message CreateRoomRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3154;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SERVER_BUSY = 2;
        IS_IN_ROOM = 3;
        NO_SCHEDULE = 4;
        IS_IN_BATTLE = 5;
        TOO_FREQUENT = 6;
        PLAYER_LEVEL_LACK = 7;
        ALREADY_IN_MP = 8;
        EQUIPMENT_FULL = 9;
        EQUIPMENT_MATERIAL_LIMIT = 10;
        EQUIPMENT_FRAGMENT_LIMIT = 11;
        FEATURE_LIMIT = 12;
        TIMES_LACK = 13;
        STAGE_NOT_IN_SCHEDULE = 14;
        PUNISHED = 15;
    }
}

message CreateSteamOrderReq {
    optional string product_name = 1;
    optional string product_desc = 2;
    optional string account_id = 3;
    optional uint64 order_id = 4;

    enum CmdId {
        CMD_ID = 1648;
    }
}

message CreateSteamOrderRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 1649;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message CreateWeiXinOrderReq {
    optional string body = 1;
    optional string attach = 2;
    optional string total_fee = 3;
    optional string notify_url = 4;
    optional TradeType trade_type = 5;

    enum CmdId {
        CMD_ID = 207;
    }
    enum TradeType {
        NONE = 0;
        APP = 1;
        NATIVE = 2;
    }
}

message CreateWeiXinOrderRsp {
    optional Retcode retcode = 1;
    optional string prepay_id = 2;
    optional string partner_id = 3;
    optional string nonce_str = 4;
    optional string timestamp = 5;
    optional string sign = 6;
    optional string qr_code_url = 7;

    enum CmdId {
        CMD_ID = 208;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message CreditAccount {
    optional uint32 id = 1;
    optional uint32 score = 2;
}

message CreditAccountGetReq {
    optional uint32 id = 1;

    enum CmdId {
        CMD_ID = 6002;
    }
}


message CreditAccountGetRsp {
    optional Retcode retcode = 1;
    optional CreditAccount account = 2;

    enum CmdId {
        CMD_ID = 6003;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

enum CreditBehavior {
    CREDIT_UNCONFIRM = 1;
    CREDIT_ON_HOOK = 2;
    CREDIT_TEAM_MATCH = 3;
    CREDIT_WIN = 4;
    CREDIT_LOSE = 5;
    CREDIT_DAILY_REFRESH = 99;
}



message CreditReportDataReq {
    optional CreditType type = 1;
    repeated StageCheatData cheat_data_list = 2;

    enum CmdId {
        CMD_ID = 6000;
    }
}

message CreditReportDataRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 6001;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

enum CreditType {
    CREDIT_NONE = 0;
    CREDIT_TVT = 1;
}


message CrisisModeActivity {
    repeated GeneralActivityStageGroupScheduleInfo stage_group_schedule_list = 1;
    repeated uint32 stage_reward_taken_list = 2;
}

message CrisisModeActivityTakeStageRewardReq {
    optional uint32 activity_id = 1;
    optional uint32 stage_id = 2;

    enum CmdId {
        CMD_ID = 4056;
    }
}


message CrisisModeActivityTakeStageRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 stage_id = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 4057;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKEN = 2;
    }
}

message CurRpgTaleStage {
    optional uint32 stage_id = 1;
    optional uint32 cur_floor = 2;
    repeated uint32 avatar_list = 3;
    optional string client_data = 4;
}

message CustomAvatarTeam {
    optional uint32 team_id = 1;
    optional string name = 2;
    repeated uint32 avatar_id_list = 3;
    repeated uint32 elf_id_list = 4;

    enum Enum {
        MIN_TEAM_ID = 1;
        MAX_TEAM_ID = 10;
        MAX_NAME_LEN = 24;
    }
}





message CustomGachaData {
    optional uint32 ticket_hcoin_cost = 2;
    optional uint32 ticket_material_id = 3;
    optional uint32 cost_material_id = 4;
    optional uint32 cost_material_num = 5;
    optional bool is_enable_baodi = 6;
    optional GachaType gacha_type = 9;
    optional uint32 total_gacha_times = 10;
    optional uint32 gacha_times = 11;
    repeated CustomGachaItemData item_list = 12;
    optional uint32 display_max_times = 13;
    optional uint32 no_protect_gacha_times = 14;
    optional ProtectDisplayType protect_display_type = 15;
    optional uint32 display_key_avatar = 16;
    optional uint32 display_video_avatar = 17;
    repeated uint32 droped_up_item_list = 18;
    optional uint32 shining_type = 19;
    optional uint32 gacha_panel_type = 20;
    repeated uint32 display_key_item_list = 21;
    optional string display_extra_para = 22;
    optional uint32 ex_id = 23;
    optional uint32 ex_energy = 24;
    optional uint32 ex_gacha_num = 25;
    optional GachaExRewardInfo gacha_ex_reward_info = 26;
    optional GachaProtectDisplayInfo protect_display_info = 27;

    enum ProtectDisplayType {
        NO_DISPLAY = 0;
        AVATAR_DISPLAY = 1;
        EQUIP_DISPLAY = 2;
    }
}

message CustomGachaItemData {
    optional uint32 id = 1;
    optional uint32 total_num = 2;
    optional uint32 gacha_num = 3;
}

message CustomHead {
    optional uint32 id = 1;
    optional uint32 end_time = 2;
}

enum CustomHeadTimeType {
    CUSTOM_HEAD_TIME_FOREVER = 1;
    CUSTOM_HEAD_TIME_DURATION = 2;
    CUSTOM_HEAD_TIME_UNTIL = 3;
}

enum CustomHeadType {
    CUSTOM_HEAD_TYPE_NONE = 0;
    CUSTOM_HEAD_TYPE_AVATAR = 1;
    CUSTOM_HEAD_TYPE_DRESS = 2;
    CUSTOM_HEAD_TYPE_NORMAL = 3;
}

enum CycleMissionProgressType {
    CYCLE_MISSION_PROGRESS_ALL = 1;
    CYCLE_MISSION_PROGRESS_ONE_BY_ONE = 2;
}

enum CycleMissionSolveType {
    CYCLE_MISSION_SOLVE_CLOSE = 0;
    CYCLE_MISSION_SOLVE_RESERVE = 1;
}

message DanmakuBlacklistNotify {
    optional uint32 blacklist_expire_time = 1;

    enum CmdId {
        CMD_ID = 1551;
    }
}

enum DanmakuChannelType {
    DANMAKU_CHANNEL_NONE = 0;
    DANMAKU_CHANNEL_NORMAL = 1;
    DANMAKU_CHANNEL_KINGDOM = 2;
}

message DanmakuContent {
    optional string danmaku_id = 1;
    optional uint32 sender_uid = 2;
    optional string nickname = 3;
    optional uint32 send_time = 4;
    optional string content = 5;
    optional uint32 kingdom_id = 6;
}

message DanmakuSlotBriefInfo {
    optional uint32 danmaku_slot = 1;
    optional uint32 danmaku_slot_status = 2;
    optional uint32 danmaku_num = 3;
}

enum DanmakuSlotStatus {
    DANMAKU_SLOT_STATUS_NONE = 0;
    DANMAKU_SLOT_STATUS_CLOSE = 1;
    DANMAKU_SLOT_STATUS_FAKE = 2;
}

message DanmakuSwitchData {
}

message DealArmadaApplyReq {
    optional uint32 target_uid = 1;
    optional bool agree = 2;

    enum CmdId {
        CMD_ID = 2609;
    }
}

message DealArmadaApplyRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;
    optional bool agree = 3;

    enum CmdId {
        CMD_ID = 2610;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        NOT_GRANTED = 3;
        NOT_TARGET = 4;
        ARMADA_FULL = 5;
    }
}

message DealChatgroupInviteReq {
    optional uint32 chatgroup_id = 1;
    optional InviteAction action = 2;

    enum CmdId {
        CMD_ID = 2214;
    }
    enum InviteAction {
        INVITE_NONE = 0;
        INVITE_AGREE = 1;
        INVITE_REJECT = 2;
    }
}

message DealChatgroupInviteRsp {
    optional Retcode retcode = 1;
    optional uint32 chatgroup_id = 2;

    enum CmdId {
        CMD_ID = 2215;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        INVITE_NOT_EXIST = 2;
        ALREADY_IN = 3;
        JOIN_MAX = 4;
        CHATGROUP_FULL = 5;
    }
}



message DealMasterPupilReq {
    optional uint32 uid = 1;
    optional MasterPupilOpType op = 2;
    optional MasterPupilType type = 3;
    optional uint32 time = 4;
    optional string nickname = 5;

    enum CmdId {
        CMD_ID = 572;
    }
}




message DealMasterPupilRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    optional uint32 uid = 2;
    optional MasterPupilOpType op = 3;
    optional MasterPupilType type = 4;

    enum CmdId {
        CMD_ID = 573;
    }
}

message DebugHotPatchFileNotify {
    optional string file_url = 1;

    enum CmdId {
        CMD_ID = 1600;
    }
}

enum DecorationEffectType {
    DECORATION_EFFECT_FURNITURE_LIMIT = 1;
    DECORATION_EFFECT_AVATAR_LIMIT = 2;
    DECORATION_EFFECT_UNLOCK_ROOM = 3;
    DECORATION_EFFECT_POWER_LIMIT = 4;
}

message DelAvatarEquipSuiteReq {
    optional uint32 avatar_id = 1;
    optional uint32 suite_id = 2;

    enum CmdId {
        CMD_ID = 1620;
    }
}

message DelAvatarEquipSuiteRsp {
    optional Retcode retcode = 1;
    optional uint32 avatar_id = 2;
    optional uint32 suite_id = 3;

    enum CmdId {
        CMD_ID = 1621;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_LOCK = 2;
        SUITE_NOT_EXIST = 3;
        SUITE_ID_LIMIT = 4;
    }
}


message DelClientMailReq {
    optional ClientMailKey mail_key = 1;
    optional bool is_one_click_delete = 2;

    enum CmdId {
        CMD_ID = 3806;
    }
}


message DelClientMailRsp {
    optional Retcode retcode = 1;
    optional ClientMailKey mail_key = 2;
    optional bool is_one_click_delete = 3;

    enum CmdId {
        CMD_ID = 3807;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MAIL_NOT_EXIST = 2;
        MAIL_NOT_DELETE = 3;
    }
}

message DelEquipmentNotify {
    repeated uint32 weapon_unique_id_list = 1;
    repeated uint32 stigmata_unique_id_list = 2;
    repeated uint32 mecha_unique_id_list = 3;

    enum CmdId {
        CMD_ID = 28;
    }
}

message DelFriendNotify {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 80;
    }
}

message DelFriendReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 68;
    }
}

message DelFriendRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;

    enum CmdId {
        CMD_ID = 69;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TARGET_NOT_FRIEND = 2;
        REDIS_MULTI_ERROR = 3;
        MASTER_PUPIL = 4;
    }
}

message DelFromBlackListReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 1598;
    }
}

message DelFromBlackListRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;

    enum CmdId {
        CMD_ID = 1599;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_LIST = 2;
    }
}

message DeliverRestaurantQuestReq {
    optional uint32 activity_id = 1;
    optional uint32 quest_id = 2;

    enum CmdId {
        CMD_ID = 5870;
    }
}

message DeliverRestaurantQuestRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 quest_id = 3;

    enum CmdId {
        CMD_ID = 5871;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
    }
}

message DelMissionNotify {
    optional uint32 mission_id = 1;

    enum CmdId {
        CMD_ID = 116;
    }
}

message DelPlayerCardMsgReq {
    optional uint32 target_uid = 1;
    repeated uint32 index_list = 2;

    enum CmdId {
        CMD_ID = 489;
    }
}

message DepotFurniture {
    optional uint32 id = 1;
    optional uint32 num = 2;
}

enum DeviceType {
    DEVICE_TYPE_NONE = 0;
    DEVICE_TYPE_ANDROID = 1;
    DEVICE_TYPE_IOS = 2;
    DEVICE_TYPE_PC = 3;
}

message DevLevelChangeNotify {
    optional string dev_level_msg = 1;

    enum CmdId {
        CMD_ID = 1619;
    }
}

enum DialogType {
    DIALOG_TYPE_NONE = 0;
    DIALOG_TYPE_CONTENT = 1;
    DIALOG_TYPE_SELECT = 2;
    DIALOG_TYPE_HIDE = 3;
}

enum DiceType {
    DICE_TYPE_NONE = 0;
    DICE_TYPE_RANDOM = 1;
    DICE_TYPE_FIXED = 2;
    DICE_TYPE_FORWARD = 3;
}





message DiceyDungeonActivity {
    optional uint32 activity_id = 1;
    repeated DiceyDungeonRole role_list = 2;
    repeated DiceyDungeonWeapon weapon_list = 3;
    optional DiceyDungeonInfo story_dicey_dungeon_info = 4;
    optional DiceyDungeonInfo schedule_dicey_dungeon_info = 5;
    optional DiceyDungeonInfo endless_dicey_dungeon_info = 6;
    repeated uint32 passed_endless_dungeon_room_id_list = 7;
    optional uint32 cur_schedule_id = 8;
    optional uint32 refresh_ornament_random = 9;
    repeated DiceyDungeonHasGotDailyMaterial has_got_daily_material_list = 11;
}



message DiceyDungeonActivityDungeonBeginReq {
    optional uint32 tale_id = 1;
    optional uint32 activity_id = 2;
    optional DiceyDungeonInfo dungeon_info = 3;
    optional DiceyDungeonType dungeon_type = 4;

    enum CmdId {
        CMD_ID = 6504;
    }
}

message DiceyDungeonActivityDungeonBeginRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 dungeon_id = 3;

    enum CmdId {
        CMD_ID = 6505;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
        ROLE_NOT_EXIST = 3;
        WEAPON_NOT_EXIST = 4;
        ROLE_RESTRICT = 5;
        TICKET_LACK = 6;
        DUNGEON_TYPE_ERROR = 7;
        SCHEDULE_ERROR = 8;
        ORNAMENT_NUM_ERROR = 9;
        ORNAMENT_ERROR = 10;
    }
}



message DiceyDungeonActivityDungeonEndReq {
    optional uint32 tale_id = 1;
    optional uint32 activity_id = 2;
    optional DiceyDungeonInfo dungeon_info = 3;
    optional DiceyDungeonType dungeon_type = 4;

    enum CmdId {
        CMD_ID = 6506;
    }
}



message DiceyDungeonActivityDungeonEndRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 dungeon_id = 3;
    optional Status status = 4;
    optional RewardData reward_data = 5;
    optional uint32 total_dicey_battle_score = 7;
    repeated DropItem daily_drop_item_list = 8;

    enum CmdId {
        CMD_ID = 6507;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
        DUNGEON_NOT_BEGIN = 3;
        ROLE_ERROR = 4;
        WEAPON_ERROR = 5;
        DUNGEON_ROOM_ERROR = 6;
    }
    enum Status {
        WIN = 0;
        LOSE = 1;
        ABANDON = 2;
    }
}

message DiceyDungeonActivityGetDailyScoreRankReq {
    optional uint32 tale_id = 1;
    optional uint32 activity_id = 2;
    optional uint32 dungeon_id = 3;

    enum CmdId {
        CMD_ID = 6520;
    }
}


message DiceyDungeonActivityGetDailyScoreRankRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 dungeon_id = 3;
    optional RankShowData rank_data = 4;
    optional uint32 rank_percent = 5;

    enum CmdId {
        CMD_ID = 6521;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
        SCHEDULE_ERROR = 3;
    }
}

message DiceyDungeonActivityGetDataReq {
    optional uint32 tale_id = 1;
    optional uint32 activity_id = 2;

    enum CmdId {
        CMD_ID = 6500;
    }
}


message DiceyDungeonActivityGetDataRsp {
    optional Retcode retcode = 1;
    optional DiceyDungeonActivity dungeon_activity = 2;

    enum CmdId {
        CMD_ID = 6501;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
    }
}

message DiceyDungeonActivityGetWeaponGachaDisplayReq {
    optional uint32 tale_id = 1;
    optional uint32 activity_id = 2;

    enum CmdId {
        CMD_ID = 6512;
    }
}

message DiceyDungeonActivityGetWeaponGachaDisplayRsp {
    optional Retcode retcode = 1;
    repeated uint32 valid_pool_id_list = 2;
    optional uint32 gacha_random = 3;
    optional uint32 activity_id = 4;

    enum CmdId {
        CMD_ID = 6513;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
    }
}



message DiceyDungeonActivityRefreshOrnamentReq {
    optional uint32 tale_id = 1;
    optional uint32 activity_id = 2;
    optional uint32 refresh_ornament_random = 3;
    optional DiceyDungeonInfo dungeon_info = 4;
    optional DiceyDungeonType dungeon_type = 5;

    enum CmdId {
        CMD_ID = 6518;
    }
}

message DiceyDungeonActivityRefreshOrnamentRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;

    enum CmdId {
        CMD_ID = 6519;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
        DUNGEON_NOT_BEGIN = 3;
        SELECT_ROOM_ERROR = 4;
        ROLE_ERROR = 5;
        WEAPON_ERROR = 6;
        DUNGEON_ROOM_ERROR = 7;
        REFRESH_TIMES_LACK = 8;
        CANNOT_REFRESH = 9;
    }
}

message DiceyDungeonActivityRoleLevelUpReq {
    optional uint32 tale_id = 1;
    optional uint32 activity_id = 2;
    optional uint32 role_id = 3;

    enum CmdId {
        CMD_ID = 6502;
    }
}

message DiceyDungeonActivityRoleLevelUpRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;

    enum CmdId {
        CMD_ID = 6503;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
        ROLE_NOT_EXIST = 3;
        MATERIAL_LACK = 4;
        SITE_LOCK = 5;
    }
}



message DiceyDungeonActivityRoomBeginReq {
    optional uint32 tale_id = 1;
    optional uint32 activity_id = 2;
    optional uint32 select_dungeon_room_id = 3;
    optional DiceyDungeonType dungeon_type = 4;
    optional DiceyDungeonInfo dungeon_info = 5;

    enum CmdId {
        CMD_ID = 6508;
    }
}

message DiceyDungeonActivityRoomBeginRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 dungeon_id = 3;
    optional uint32 dungeon_room_id = 4;

    enum CmdId {
        CMD_ID = 6509;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
        DUNGEON_NOT_BEGIN = 3;
        SELECT_ROOM_ERROR = 4;
        ROLE_ERROR = 5;
        WEAPON_ERROR = 6;
        DUNGEON_ROOM_ERROR = 7;
    }
}



message DiceyDungeonActivityRoomEndReq {
    optional uint32 tale_id = 1;
    optional uint32 activity_id = 2;
    optional DiceyDungeonInfo dungeon_info = 3;
    optional Status status = 4;
    optional DiceyDungeonType dungeon_type = 5;
    optional uint32 battle_time = 6;
    optional uint32 battle_round = 7;

    enum Status {
        WIN = 0;
        LOSE = 1;
        SKIP = 2;
    }
    enum CmdId {
        CMD_ID = 6510;
    }
}

message DiceyDungeonActivityRoomEndRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 dungeon_id = 3;
    optional uint32 dungeon_room_id = 4;

    enum CmdId {
        CMD_ID = 6511;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
        DUNGEON_NOT_BEGIN = 3;
        DUNGEON_ROOM_ERROR = 4;
        ROLE_ERROR = 5;
        WEAPON_ERROR = 6;
        CHECK_EVENT_FAIL = 7;
    }
}



message DiceyDungeonActivitySelectOrnamentReq {
    optional uint32 tale_id = 1;
    optional uint32 activity_id = 2;
    optional uint32 select_ornament_id = 3;
    optional uint32 replace_ornament_id = 4;
    optional bool is_abandon = 5;
    optional DiceyDungeonInfo dungeon_info = 6;
    optional DiceyDungeonType dungeon_type = 7;

    enum CmdId {
        CMD_ID = 6516;
    }
}

message DiceyDungeonActivitySelectOrnamentRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional bool is_abandon = 3;

    enum CmdId {
        CMD_ID = 6517;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
        SELECT_ORNAMENT_ERROR = 3;
        REPLACE_ORNAMENT_ERROR = 4;
        DUNGEON_NOT_BEGIN = 5;
        DUNGEON_ROOM_ERROR = 6;
        ROLE_ERROR = 7;
        WEAPON_ERROR = 8;
        NO_REPLACE_ORNAMENT = 9;
    }
}

message DiceyDungeonActivityWeaponGachaReq {
    optional uint32 tale_id = 1;
    optional uint32 activity_id = 2;
    optional uint32 gacha_random = 3;

    enum CmdId {
        CMD_ID = 6514;
    }
}

message DiceyDungeonActivityWeaponGachaRsp {
    optional Retcode retcode = 1;
    optional uint32 weapon_id = 2;
    optional bool is_new = 3;
    optional uint32 gacha_random = 4;
    optional uint32 activity_id = 5;

    enum CmdId {
        CMD_ID = 6515;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
        MATERIAL_LACK = 3;
        ALL_WEAPON_GETTED = 4;
    }
}

enum DiceyDungeonGachaType {
    DICEY_DUNGEON_GACHA_WEAPON = 1;
    DICEY_DUNGEON_GACHA_ORNAMENT_INITIATIVE = 2;
    DICEY_DUNGEON_GACHA_ORNAMENT_PASSIVE = 3;
}

message DiceyDungeonHasGotDailyMaterial {
    optional uint32 material_id = 1;
    optional uint32 num = 2;
}




message DiceyDungeonInfo {
    optional uint32 dungeon_id = 1;
    optional uint32 floor = 2;
    optional uint32 dungeon_room_id = 3;
    optional DiceyDungeonRole role = 4;
    optional uint32 health = 5;
    optional DiceyDungeonWeapon weapon = 6;
    repeated uint32 passed_room_id_list = 7;
    repeated DiceyDungeonOrnament ornament_list = 8;
    repeated uint32 wait_select_ornament_id_list = 9;
    repeated uint32 random_dicey_num_list = 10;
    optional uint32 left_refresh_ornament_times = 11;
    optional uint32 dicey_battle_score = 12;
    optional uint32 total_dicey_battle_score = 13;
}

message DiceyDungeonOrnament {
    optional uint32 ornament_id = 1;
    optional uint32 level = 2;
}

message DiceyDungeonRole {
    optional uint32 role_id = 1;
    optional uint32 level = 2;
}

enum DiceyDungeonRoleAttributeType {
    DICEY_DUNGEON_ROLE_ATTR_STRENGTH = 1;
    DICEY_DUNGEON_ROLE_ATTR_AGILITY = 2;
    DICEY_DUNGEON_ROLE_ATTR_INTELLIGENCE = 3;
}

enum DiceyDungeonRoomType {
    DICEY_DUNGEON_ROOM_DICEY_BATTLE = 1;
    DICEY_DUNGEON_ROOM_AVATAR_BATTLE = 2;
    DICEY_DUNGEON_ROOM_ORNAMENT_REWARD = 3;
    DICEY_DUNGEON_ROOM_HP_RECOVER = 4;
    DICEY_DUNGEON_ROOM_PLOT = 5;
    DICEY_DUNGEON_ROOM_BOSS = 6;
}

enum DiceyDungeonSkillType {
    DICEY_DUNGEON_SKILL_NONE = 0;
    DICEY_DUNGEON_SKILL_INITIATIVE = 1;
    DICEY_DUNGEON_SKILL_PASSIVE = 2;
}

enum DiceyDungeonType {
    DICEY_DUNGEON_NONE = 0;
    DICEY_DUNGEON_STORY = 1;
    DICEY_DUNGEON_SCHEDULE = 2;
    DICEY_DUNGEON_ENDLESS = 3;
}

message DiceyDungeonWeapon {
    optional uint32 weapon_id = 1;
    optional uint32 level = 2;
}

enum DiscountType {
    DISCOUNT_EQUIP_POWER_UP_SCOIN = 1;
    DISCOUNT_AVATAR_SKILL_UP_SCOIN = 2;
    DISCOUNT_EQUIP_POWER_UP_BOOST_RATE = 3;
    DISCOUNT_EQUIP_POWER_UP_BOOST_PROB = 4;
}

enum DishRewardType {
    DISH_REWARD_TYPE_NONE = 0;
    DISH_REWARD_TYPE_PREPARE = 1;
    DISH_REWARD_TYPE_DAILY = 2;
    DISH_REWARD_TYPE_LIMITED = 3;
}


message DisjoinFurnitureReq {
    repeated DepotFurniture furniture_list = 1;

    enum CmdId {
        CMD_ID = 1134;
    }
}


message DisjoinFurnitureRsp {
    optional Retcode retcode = 1;
    repeated Material material_list = 2;

    enum CmdId {
        CMD_ID = 1135;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FURNITURE_LACK = 2;
    }
}

enum DisjoinType {
    DISJOIN_TOTAL = 1;
    DISJOIN_TITLE = 2;
    DISJOIN_EX = 3;
}

enum DisplayCurrencyType {
    DISPLAY_CURRENCY_TYPE_NONE = 0;
    DISPLAY_CURRENCY_TYPE_SCOIN = 1;
    DISPLAY_CURRENCY_TYPE_STAMINA = 2;
    DISPLAY_CURRENCY_TYPE_HCOIN = 3;
    DISPLAY_CURRENCY_TYPE_PURPLE_JADE = 5;
    DISPLAY_CURRENCY_TYPE_MCOIN = 6;
    DISPLAY_CURRENCY_TYPE_PLAIN_DRESS_TICKET = 7;
    DISPLAY_CURRENCY_TYPE_LUXURY_DRESS_TICKET = 8;
    DISPLAY_CURRENCY_TYPE_VITALITY = 12;
    DISPLAY_CURRENCY_TYPE_ETHER_PHLOGISTON = 13;
    DISPLAY_CURRENCY_TYPE_BRILLIANT_PURE_CRYSTAL = 14;
    DISPLAY_CURRENCY_TYPE_HONOR_MEDAL = 15;
}

message DissolveArmadaReq {

    enum CmdId {
        CMD_ID = 2625;
    }
}

message DissolveArmadaRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2626;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_GRANTED = 2;
        NOT_IN_ARMADA = 3;
        IN_DISSOLVE = 4;
        IN_ARMADA_WAR = 5;
    }
}


message DLCAvatar {
    optional uint32 avatar_id = 1;
    repeated DLCAvatarTalent talent_list = 2;
    repeated uint32 equip_talent_list = 3;
}

enum DLCAvatarReviveCostType {
    DLC_AVATAR_REVIVE_COST_TYPE_NONE = 0;
    DLC_AVATAR_REVIVE_COST_TYPE_REVIVE_COIN = 1;
    DLC_AVATAR_REVIVE_COST_TYPE_COIN = 2;
}



message DLCAvatarReviveReq {
    optional DLCAvatarReviveCostType cost_type = 1;
    optional uint32 map_id = 3;
    optional uint32 avatar_id = 4;
    repeated DropItem drop_item_list = 5;

    enum CmdId {
        CMD_ID = 3569;
    }
}


message DLCAvatarReviveRsp {
    optional Retcode retcode = 1;
    optional uint32 revive_times = 2;
    optional DLCAvatarReviveCostType cost_type = 3;

    enum CmdId {
        CMD_ID = 3570;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        TIMES_LACK = 3;
        NOT_IN_STAGE = 4;
        MAP_ERROR = 5;
        AVATAR_ERROR = 6;
    }
}

enum DLCAvatarReviveType {
    DLC_AVATAR_REVIVE_TYPE_NONE = 0;
    DLC_AVATAR_REVIVE_TYPE_DLC_TOWER = 1;
    DLC_AVATAR_REVIVE_TYPE_DLC_STAGE = 2;
    DLC_AVATAR_REVIVE_TYPE_OUTER_STAGE = 3;
    DLC_AVATAR_REVIVE_TYPE_DLC_OW = 4;
}

message DLCAvatarTalent {
    optional uint32 talent_id = 1;
    optional uint32 level = 2;
    optional uint32 affix_set_id = 4;
    optional uint32 wait_select_affix_set_id = 6;
    optional bool is_mask = 7;
}

message DLCSupportNPC {
    optional uint32 npc_id = 1;
    optional uint32 support_point = 2;
    optional uint32 support_level = 3;
}

enum DLCSupportType {
    DLC_SUPPORT_TYPE_COLLECTION = 1;
    DLC_SUPPORT_TYPE_STAGE_BEGIN = 2;
    DLC_SUPPORT_TYPE_STORY = 3;
    DLC_SUPPORT_TYPE_DIALOG = 4;
    DLC_SUPPORT_TYPE_QUEST = 5;
}

enum DLCTalentType {
    DLC_TALENT_TYPE_NONE = 0;
    DLC_TALENT_TYPE_AUTO = 1;
    DLC_TALENT_TYPE_ACTIVE = 2;
    DLC_TALENT_TYPE_PASSIVE = 3;
    DLC_TALENT_TYPE_REFRESHABLE = 4;
}

message DLCTowerAvatarInfo {
    optional uint32 avatar_id = 1;
    optional uint32 hp_percent = 2;
    optional uint32 sp_percent = 3;
}

message DLCTowerFloorMaxScore {
    optional uint32 floor = 1;
    optional uint32 max_score = 2;
}

message DLCTowerStageBeginReq {
    repeated uint32 avatar_id_list = 1;

    enum CmdId {
        CMD_ID = 3563;
    }
}

message DLCTowerStageBeginRsp {
    optional Retcode retcode = 1;
    optional uint32 progress = 2;

    enum CmdId {
        CMD_ID = 3564;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_BEGIN = 2;
        PROGRESS_FULL = 3;
        AVATAR_ERROR = 4;
        AVATAR_DIE = 5;
    }
}




message DLCTowerStageEndReq {
    optional StageEndStatus end_status = 1;
    repeated DLCTowerAvatarInfo avatar_info_list = 2;
    optional uint32 progress = 3;
    optional uint32 stage_pass_time = 4;
    repeated DropItem drop_item_list = 6;

    enum CmdId {
        CMD_ID = 3565;
    }
}


message DLCTowerStageEndRsp {
    optional Retcode retcode = 1;
    optional uint32 progress = 2;
    optional RewardData reward_data = 3;
    optional uint32 end_progress = 4;
    optional uint32 score = 5;
    optional bool is_new_record = 6;

    enum CmdId {
        CMD_ID = 3566;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        NOT_BEGIN = 3;
        PROGRESS_ERROR = 4;
        PRODUCE_NUM_ERROR = 5;
        AVATAR_ERROR = 6;
    }
}


message DonateWareHouseItemReq {
    optional EquipmentItem item = 1;
    optional uint32 target_uid = 2;
    optional uint32 demand_id = 3;

    enum CmdId {
        CMD_ID = 2653;
    }
}



message DonateWareHouseItemRsp {
    optional Retcode retcode = 1;
    optional EquipmentItem item = 2;
    optional uint32 demand_id = 3;
    repeated RewardData reward_list = 4;

    enum CmdId {
        CMD_ID = 2654;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        TARGET_NOT_IN_ARMADA = 3;
        STATUS_ERROR = 4;
        CONSUME_ITEM_NOT_EXIST = 5;
        CONSUME_ITEM_IN_USE = 6;
        CONSUME_ITEM_REPEAT = 7;
        CONSUME_ITEM_PROTECTED = 8;
        COST_GACHA_TICKET = 9;
        COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 10;
        COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 11;
        DONATE_ITEM_LACK = 12;
        DONATE_TIMES_LACK = 13;
        CONSUME_ITEM_IN_FACILITY = 14;
        CONSUME_ITEM_GRAND_KEY = 15;
        CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 16;
    }
}

message DonateWareHouseNotify {

    enum CmdId {
        CMD_ID = 2677;
    }
}

enum DormDataType {
    DORM_DATA_ALL = 0;
    DORM_DATA_DECORATION = 1;
    DORM_DATA_EVENT = 3;
    DORM_DATA_SNS = 4;
}

message DormEvent {
    optional uint32 avatar_id = 1;
    repeated uint32 event_id_list = 2;
}

enum DormEventConditionWay {
    DORM_EVENT_CONDITION_WAY_PASS_STAGE = 1;
    DORM_EVENT_CONDITION_WAY_ISLAND_ADVANTURE = 2;
    DORM_EVENT_CONDITION_WAY_AVATAR_STAR_UP = 3;
    DORM_EVENT_CONDITION_WAY_MP_STAGE = 4;
    DORM_EVENT_CONDITION_WAY_OPEN_WORLD_QUEST = 5;
    DORM_EVENT_CONDITION_WAY_MVP = 6;
    DORM_EVENT_CONDITION_WAY_NO_FIGHT = 7;
    DORM_EVENT_CONDITION_WAY_LEVEL_UP = 8;
    DORM_EVENT_CONDITION_WAY_PASS_STAGE_WITH_ROLE = 9;
    DORM_EVENT_CONDITION_WAY_FINISH_MISSION = 11;
    DORM_EVENT_CONDITION_WAY_ENDLESS_STAGE_PASS = 12;
    DORM_EVENT_CONDITION_WAY_OFFLINE = 13;
    DORM_EVENT_CONDITION_WAY_BIRTHDAY = 14;
    DORM_EVENT_CONDITION_WAY_GACHA = 15;
    DORM_EVENT_CONDITION_WAY_NEW_ROLE = 16;
    DORM_EVENT_CONDITION_WAY_ACTIVE_DEGREE = 17;
}

message DormFacility {
    optional uint32 type = 1;
    optional uint32 level = 2;
    optional uint32 id = 3;
    optional uint32 begin_time = 4;
}



message DormFacilityData {
    repeated DormFacility facility_list = 1;
    optional uint32 level_up_facility_type = 2;
    optional uint32 level_up_end_time = 3;
    optional uint32 store_stamina = 4;
    optional bool is_can_store_stamina = 5;
    optional uint32 power = 10;
    optional uint32 power_recover_left_time = 11;
    optional uint32 power_recover_config_time = 12;
    optional uint32 power_limit = 13;
    optional uint32 base_power_limit = 14;
    repeated DormPowerBonus limit_bonus_list = 15;
    optional uint32 power_recovery = 16;
    optional uint32 base_power_recovery = 17;
    optional uint32 bonus_power_recovery = 18;
}


message DormHouse {
    optional uint32 id = 1;
    optional string name = 2;
    repeated DormRoom room_list = 3;
    optional uint32 level = 4;
}

message DormPowerBonus {
    optional uint32 house_id = 1;
    optional uint32 bonus = 2;
}


message DormRoom {
    optional uint32 id = 1;
    optional string name = 2;
    repeated Furniture furniture_list = 3;
    repeated uint32 avatar_list = 4;
}

message DormRoomAvatar {
    optional uint32 room_id = 1;
    repeated uint32 avatar_list = 2;
}

message DormVisitRecord {
    optional uint32 visit_time = 1;
    optional uint32 visit_uid = 2;
    optional uint32 visit_avatar = 3;
    optional uint32 level = 4;
    optional string name = 5;
}

message DrawRaffleTicketReq {
    optional uint32 raffle_id = 1;

    enum CmdId {
        CMD_ID = 3896;
    }
}

message DrawRaffleTicketRsp {
    optional Retcode retcode = 1;
    optional uint32 raffle_id = 2;
    optional uint32 ticket = 3;
    optional uint32 draw_idx = 4;

    enum CmdId {
        CMD_ID = 3897;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 3;
        CANNOT_DRAW = 4;
        TIMES_LIMIT = 5;
        MATERIAL_NOT_ENOUGH = 6;
        TOO_FREQUENT = 7;
    }
}

message Dream {
    optional uint32 dream_id = 1;
    optional uint32 unlock_id = 2;
    optional bool is_open = 3;
    optional uint32 selected_dream_reward_id = 4;
    optional uint32 score = 5;
    optional bool is_reward_taken = 6;
    optional uint32 exchange_score_times = 7;
}


message DreamActivity {
    optional uint32 activity_id = 1;
    repeated Dream dream_list = 2;
}

message DreamExchangeScoreReq {
    optional uint32 activity_id = 1;
    optional uint32 dream_id = 2;
    optional uint32 num = 3;

    enum CmdId {
        CMD_ID = 5756;
    }
}

message DreamExchangeScoreRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5757;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
        DREAM_NOT_EXIST = 3;
        TIMES_NOT_ENOUGH = 4;
        HCOIN_NOT_ENOUGH = 5;
        SCORE_FULL = 6;
    }
}

message DreamGetActivityReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 5750;
    }
}


message DreamGetActivityRsp {
    optional Retcode retcode = 1;
    optional DreamActivity activity = 2;

    enum CmdId {
        CMD_ID = 5751;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message DreamGiveUpDreamReq {
    optional uint32 activity_id = 1;
    optional uint32 dream_id = 2;

    enum CmdId {
        CMD_ID = 5754;
    }
}

message DreamGiveUpDreamRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5755;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
        DREAM_NOT_EXIST = 3;
    }
}

message DreamOpenDreamReq {
    optional uint32 activity_id = 1;
    optional uint32 dream_id = 2;
    optional uint32 select_dream_reward_id = 3;

    enum CmdId {
        CMD_ID = 5752;
    }
}

message DreamOpenDreamRsp {
    optional Retcode retcode = 1;
    optional uint32 unlock_id = 2;

    enum CmdId {
        CMD_ID = 5753;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
        DREAM_NOT_EXIST = 3;
        REWARD_NOT_EXIST = 4;
        HAS_OPEN_DREAM = 5;
        LOCKED = 6;
        REWARD_TAKEN = 7;
    }
}

message DreamTakeRewardReq {
    optional uint32 activity_id = 1;
    optional uint32 dream_id = 2;

    enum CmdId {
        CMD_ID = 5758;
    }
}


message DreamTakeRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;

    enum CmdId {
        CMD_ID = 5759;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_EXIST = 2;
        DREAM_NOT_EXIST = 3;
        SCORE_NOT_ENOUGH = 4;
        REWARD_TAKEN = 5;
    }
}

enum DreamUnlockType {
    DREAM_UNLOCK_TYPE_NO_NEWBIE_SCHEDULE = 1;
    DREAM_UNLOCK_TYPE_HAS_NOT_FINISHED_DREAM = 2;
    DREAM_UNLOCK_TYPE_GOBACK_LEVEL = 3;
    DREAM_UNLOCK_TYPE_AVATAR_LOCKED = 4;
    DREAM_UNLOCK_TYPE_HAS_NOT_GOT_ITEM = 5;
}


message DressEquipmentReq {
    optional uint32 avatar_id = 1;
    optional EquipmentSlot slot = 2;
    optional uint32 unique_id = 3;

    enum CmdId {
        CMD_ID = 39;
    }
}

message DressEquipmentRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 40;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        EQUIPMENT_NOT_EXIST = 3;
        EQUIPMENT_DRESSED = 4;
        EQUIPMENT_SLOT_ERROR = 5;
        COST_LACK = 6;
        AFFIX_NOT_IDENTIFY = 7;
    }
}


message DressReclaimEquipmentReq {
    optional uint32 reclaim_avatar_id = 1;
    optional EquipmentSlot slot = 2;
    optional uint32 reclaim_equip_id = 3;

    enum CmdId {
        CMD_ID = 1173;
    }
}


message DressReclaimEquipmentRsp {
    optional Retcode retcode = 1;
    optional ReclaimAvatar reclaim_avatar = 2;

    enum CmdId {
        CMD_ID = 1174;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        EQUIP_NOT_EXIST = 3;
        HAVE_DRESSED = 4;
    }
}

message DressToReturnMaterialNotify {
    optional uint32 dress_id = 1;
    optional uint32 num = 2;
    optional uint32 scoin = 3;
    optional uint32 return_material_id = 4;
    optional uint32 return_material_num = 5;

    enum CmdId {
        CMD_ID = 250;
    }
}

enum DressType {
    DRESS_BATTLE = 1;
    DRESS_SUIT = 2;
    DRESS_ARTIFACT = 4;
}

message DressVirtualEquipmentReq {
    optional uint32 group_id = 1;
    optional uint32 virtual_avatar_id = 2;
    optional uint32 equip_type = 3;
    optional uint32 slot = 4;
    optional uint32 virtual_equip_id = 5;

    enum CmdId {
        CMD_ID = 3506;
    }
}


message DressVirtualEquipmentRsp {
    optional Retcode retcode = 1;
    optional uint32 group_id = 2;
    optional VirtualAvatar virtual_avatar = 3;

    enum CmdId {
        CMD_ID = 3507;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        EQUIP_NOT_EXIST = 3;
        HAVE_DRESSED = 4;
    }
}

message DropItem {
    optional uint32 item_id = 1;
    optional uint32 level = 2;
    optional uint32 num = 3;
    optional uint32 rarity = 4;
    optional bool is_baodi = 5;
    optional bool is_rare_drop = 6;
    optional uint32 gift_item_id = 7;
    optional uint32 gift_level = 8;
    optional uint32 gift_num = 9;
    optional bool is_treasure = 10;
    optional bool is_equip_drop = 11;
    optional bool is_stage_clear_drop = 12;
    optional bool is_avatar_drop = 13;
    optional bool is_theme_wanted_double_drop = 14;
}


message DropLimitActivity {
    optional uint32 activity_id = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    repeated DropLimitItem drop_limit_got_num_list = 4;
}

message DropLimitItem {
    optional uint32 limit_id = 1;
    optional uint32 got_num = 2;
}

enum DropLimitRefreshType {
    DROP_LIMIT_REFRESH_WEEK_DAY = 1;
    DROP_LIMIT_REFRESH_MONTH = 2;
}

enum DropLimitType {
    DROP_LIMIT_STAGE = 1;
    DROP_LIMIT_DLC = 2;
    DROP_LIMIT_GOD_WAR = 3;
    DROP_LIMIT_SC_DLC = 4;
    DROP_LIMIT_CHAPTER_OW = 5;
}

enum DutyType {
    DUTY_DAILY = 1;
    DUTY_WEEKLY = 2;
}


message EditAdventureRoomReq {
    optional AdventureDecorationSlot decoration_slot = 1;

    enum CmdId {
        CMD_ID = 3920;
    }
}

message EditAdventureRoomRsp {
    optional Retcode retcode = 1;
    optional uint32 slot_id = 2;

    enum CmdId {
        CMD_ID = 3921;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SLOT_UNLOCK = 2;
        FURNITURE_LACK = 3;
        FURNITURE_TYPE_ERROR = 4;
        COLLECTION_TYPE_ERROR = 5;
    }
}


message EditDormRoomReq {
    optional uint32 house_id = 1;
    optional uint32 room_id = 2;
    repeated Furniture furniture_list = 3;

    enum CmdId {
        CMD_ID = 605;
    }
}

message EditDormRoomRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 606;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ROOM_NOT_EXIST = 2;
        FURNITURE_LACK = 3;
        EFFECT_LACK = 4;
    }
}

message EffectiveGiftGoodsData {
    optional uint32 goods_id = 1;
    optional uint32 expire_time = 2;
}


message Elf {
    optional uint32 elf_id = 1;
    optional uint32 star = 2;
    optional uint32 level = 3;
    optional uint32 exp = 4;
    repeated uint32 equip_talent_id_list = 5;
    repeated ElfSkill skill_list = 6;
    optional uint32 compensate_level = 7;
    optional uint32 total_compensate_exp = 8;
}

message ElfBriefInfo {
    optional uint32 elf_id = 1;
    optional uint32 elf_level = 2;
    optional uint32 elf_star = 3;
    repeated uint32 equip_talent_id_list = 4;
    repeated Skill skill_list = 5;
    message Skill {
        optional uint32 skill_id = 1;
        optional uint32 skill_level = 2;
    }
}



message ElfDetailData {
    optional uint32 elf_id = 1;
    optional uint32 level = 2;
    optional uint32 star = 3;
    repeated ElfTalentDetailData equip_talent_list = 4;
    repeated ElfSkillDetailData skill_list = 5;
}

message ElfFragment {
    optional uint32 elf_id = 1;
    optional uint32 fragment_num = 2;
}

message ElfFragmentSwitchData {
    optional uint32 elf_id = 1;
}

message ElfFragmentTransformReq {
    optional uint32 elf_fragment_id = 1;
    optional uint32 elf_fragment_num = 2;

    enum CmdId {
        CMD_ID = 2121;
    }
}

message ElfFragmentTransformRsp {
    optional Retcode retcode = 1;
    optional uint32 add_material_id = 2;
    optional uint32 add_material_num = 3;

    enum CmdId {
        CMD_ID = 2122;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STAR_LACK = 2;
        FRAGMENT_LACK = 3;
        MATERIAL_FULL = 4;
        FEATURE_CLOSED = 5;
    }
}

message ElfSkill {
    optional uint32 skill_id = 1;
    optional uint32 skill_level = 2;
}

message ElfSkillDetailData {
    optional uint32 elf_skill_id = 1;
    optional uint32 skill_level = 2;
}

message ElfSkillLevelUpReq {
    optional uint32 elf_id = 1;
    optional uint32 elf_skill_id = 2;

    enum CmdId {
        CMD_ID = 2123;
    }
}


message ElfSkillLevelUpRsp {
    optional Retcode retcode = 1;
    optional ElfSkill elf_skill = 2;

    enum CmdId {
        CMD_ID = 2124;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ELF_LOCKED = 2;
        SCOIN_LACK = 3;
        MATERIAL_NOT_ENOUGH = 4;
        LEVEL_FULL = 5;
        ELF_STAR_NOT_ENOUGH = 6;
        PRE_SKILL_LEVEL_NOT_ENOUGH = 7;
        ELF_LEVEL_NOT_ENOUGH = 8;
    }
}

message ElfStarUpReq {
    optional uint32 elf_id = 1;

    enum CmdId {
        CMD_ID = 2105;
    }
}

message ElfStarUpRsp {
    optional Retcode retcode = 1;
    optional uint32 elf_id = 2;
    optional bool is_unlock = 3;

    enum CmdId {
        CMD_ID = 2106;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ELF_NOT_EXIST = 2;
        FRAGMENT_LACK = 3;
        STAR_FULL = 4;
        LEVEL_LACK = 5;
        FEATURE_CLOSED = 6;
    }
}

message ElfTakeCompensationReq {

    enum CmdId {
        CMD_ID = 2125;
    }
}


message ElfTakeCompensationRsp {
    optional Retcode retcode = 1;
    repeated RewardItemData item_list = 2;

    enum CmdId {
        CMD_ID = 2126;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
    }
}

message ElfTalent {
    optional uint32 talent_id = 1;
    optional uint32 talent_level = 2;
    optional uint32 equip_elf_id = 3;
}

message ElfTalentDetailData {
    optional uint32 elf_talent_id = 1;
    optional uint32 talent_level = 2;
}

message ElfUpgradeLevelPeriodReq {
    optional uint32 elf_id = 1;

    enum CmdId {
        CMD_ID = 2109;
    }
}

message ElfUpgradeLevelPeriodRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2110;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ELF_NOT_EXIST = 2;
        MATERIAL_NOT_ENOUGH = 3;
        EXP_NOT_ENOUGH = 4;
        LEVEL_CAN_NOT_UPGRADE_PERIOD = 5;
        PLAYER_LEVEL_NOT_ENOUGH = 6;
    }
}

message EliteChapterActCompensation {
    optional uint32 act_id = 1;
    optional uint32 difficulty = 2;
    repeated uint32 challenge_reward_id_list = 3;
}



message EliteChapterCompensationInfo {
    optional uint32 chapter_id = 1;
    repeated EliteChapterStageCompensation stage_compensation_list = 2;
    repeated EliteChapterActCompensation act_compensation_list = 3;
    optional bool has_taken_compensation = 4;
}

message EliteChapterStageCompensation {
    optional uint32 stage_id = 1;
    optional bool is_first_win = 2;
    repeated uint32 challenge_reward_id_list = 3;
}

enum EmojiUnlockType {
    EMOJI_UNLOCK_TYPE_DEFAULT = 1;
    EMOJI_UNLOCK_TYPE_ITEM_DROP = 2;
}

message EndlessAvatar {
    optional uint32 avatar_id = 1;
    optional uint32 star = 2;
    optional uint32 level = 3;
    optional uint32 weapon_id = 4;
    optional uint32 stigmata_id_1 = 5;
    optional uint32 stigmata_id_2 = 6;
    optional uint32 stigmata_id_3 = 7;
    optional uint32 quantum_weapon_id = 8;
}

message EndlessAvatarGoodfeel {
    optional uint32 avatar_id = 1;
    optional uint32 goodfeel_value = 2;
}

message EndlessAvatarHp {
    optional uint32 avatar_id = 1;
    optional uint32 hp_percent = 2;
    optional uint32 next_recover_time = 3;
    optional bool is_die = 4;
    optional uint32 sp_percent = 5;
}

message EndlessElfStatus {
    optional uint32 elf_id = 1;
    optional uint32 sp_percent = 2;
}

message EndlessInSettleNotify {

    enum CmdId {
        CMD_ID = 3452;
    }
}

message EndlessItem {
    optional uint32 item_id = 1;
    optional uint32 num = 2;
}

message EndlessItemFrozenInfo {
    optional uint32 target_uid = 1;
    optional uint32 frozen_time = 2;
}

enum EndlessItemType {
    ENDLESS_EMPTY = 0;
    ENDLESS_MEDICINE_SELF = 1;
    ENDLESS_MEDICINE_TO_OTHER = 2;
    ENDLESS_TRAP = 3;
    ENDLESS_BOMB = 4;
    ENDLESS_HIDDEN = 5;
}

message EndlessNtrAvatar {
    optional uint32 avatar_id = 1;
    optional uint32 target_uid = 2;
}




message EndlessPlayerData {
    optional uint32 uid = 1;
    optional uint32 progress = 2;
    optional uint32 progress_time = 3;
    repeated EndlessWaitEffectItem wait_effect_item_list = 4;
    optional uint32 hidden_expire_time = 5;
    optional uint32 max_progress = 6;
    repeated EndlessWaitBurstBomb wait_burst_bomb_list = 7;
    optional bool is_just_bomb_burst = 8;
    optional uint32 hidden_item_id = 9;
    optional uint32 reward_progress = 10;
    optional LineupBriefInfo last_lineup_info = 11;
    optional uint32 group_level = 12;
}

enum EndlessRewardType {
    ENDLESS_PROMOTE = 1;
    ENDLESS_NORMAL = 2;
    ENDLESS_DEMOTE = 3;
}


message EndlessSelectTypeReq {
    optional EndlessType endless_type = 1;
    optional uint32 level = 2;

    enum CmdId {
        CMD_ID = 3462;
    }
}


message EndlessSelectTypeRsp {
    optional Retcode retcode = 1;
    optional EndlessType endless_type = 2;

    enum CmdId {
        CMD_ID = 3463;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        IN_ULTRA = 2;
        NOT_IN_NEXT_SCHEDULE = 3;
        LACK_LEVEL = 4;
    }
}




message EndlessSingleModeActivity {
    optional uint32 cur_floor = 1;
    repeated EndlessSingleModeScore floor_score_list = 2;
    optional bool is_settled = 3;
    optional uint32 reset_times = 4;
    optional uint32 monster_random_id = 5;
    optional uint32 activity_type = 6;
    repeated EndlessSingleModeMonsterScore ow_monster_score_list = 7;
    repeated EndlessSingleModeItem ow_item_list = 8;
}

message EndlessSingleModeActivityBattleBeginReq {
    optional uint32 activity_id = 1;
    optional uint32 map_id = 2;
    optional uint32 area_id = 3;
    optional uint32 battle_id = 4;
    optional uint32 group_level = 5;
    optional uint32 monster_group_id = 6;
    optional uint32 layer_number = 7;

    enum CmdId {
        CMD_ID = 4042;
    }
}

message EndlessSingleModeActivityBattleBeginRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4043;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}




message EndlessSingleModeActivityBattleEndReq {
    optional uint32 activity_id = 1;
    optional uint32 map_id = 2;
    optional uint32 area_id = 3;
    optional uint32 battle_id = 4;
    optional uint32 monster_group_id = 5;
    optional uint32 score = 6;
    optional uint32 cost_time = 7;
    optional StageEndStatus end_status = 8;
    repeated StageInnerAvatarData avatar_list = 9;
    optional uint32 environment_id = 10;
    optional uint32 layer_number = 11;
    repeated StageInnerElfData elf_list = 12;

    enum CmdId {
        CMD_ID = 4044;
    }
}

message EndlessSingleModeActivityBattleEndRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 map_id = 3;
    optional uint32 area_id = 4;
    optional uint32 battle_id = 5;
    optional uint32 monster_group_id = 6;

    enum CmdId {
        CMD_ID = 4045;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message EndlessSingleModeActivityFinishFloorReq {
    optional uint32 stage_id = 1;
    optional uint32 floor = 2;
    optional uint32 score = 3;
    optional uint32 cost_time = 4;
    repeated StageCheatData cheat_data_list = 5;

    enum CmdId {
        CMD_ID = 4038;
    }
}

message EndlessSingleModeActivityFinishFloorRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4039;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_CUR_FLOOR = 2;
    }
}

message EndlessSingleModeActivityResetReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4040;
    }
}

message EndlessSingleModeActivityResetRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;

    enum CmdId {
        CMD_ID = 4041;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        STAMINA_LACK = 3;
    }
}

message EndlessSingleModeActivityTakeItemReq {
    optional uint32 activity_id = 1;
    optional uint32 item_id = 2;
    optional uint32 item_num = 3;

    enum CmdId {
        CMD_ID = 4046;
    }
}

message EndlessSingleModeActivityTakeItemRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4047;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ITEM_FULL = 2;
    }
}

enum EndlessSingleModeActivityType {
    ENDLESS_SINGLE_MODE_ACTIVITY_TYPE_NONE = 0;
    ENDLESS_SINGLE_MODE_ACTIVITY_TYPE_NORMAL = 1;
    ENDLESS_SINGLE_MODE_ACTIVITY_TYPE_OW = 2;
}

message EndlessSingleModeActivityUseItemReq {
    optional uint32 activity_id = 1;
    optional uint32 item_id = 2;
    optional uint32 item_num = 3;

    enum CmdId {
        CMD_ID = 4048;
    }
}

message EndlessSingleModeActivityUseItemRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4049;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ITEM_LACK = 2;
    }
}

message EndlessSingleModeItem {
    optional uint32 item_id = 1;
    optional uint32 item_num = 2;
}

message EndlessSingleModeMonsterScore {
    optional uint32 monster_group_id = 1;
    optional uint32 score = 2;
}

message EndlessSingleModeScore {
    optional uint32 floor = 1;
    optional uint32 score = 2;
}

enum EndlessSinType {
    ENDLESS_SIN_NORMAL = 1;
    ENDLESS_SIN_ANGRY = 2;
    ENDLESS_SIN_NTR = 3;
    ENDLESS_SIN_GREED = 4;
    ENDLESS_SIN_SLOTH = 5;
    ENDLESS_SIN_PRIDE = 6;
    ENDLESS_SIN_GLUTTONY = 7;
    ENDLESS_SIN_ENVY = 8;
}



message EndlessStatus {
    optional EndlessType endless_type = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    optional uint32 close_time = 4;
    optional uint32 sin_type = 5;
    optional uint32 progress_or_score = 6;
    optional uint32 group_level = 7;
    optional LineupBriefInfo last_lineup_info = 8;
    optional bool can_join_in = 9;
    optional uint32 pre_general_activity_id = 10;
    repeated uint32 replace_endless_group_list = 11;
    optional LineupBriefInfo max_score_lineup_info = 12;
    optional uint32 greedy_max_finish_floor = 13;
}

message EndlessSwitchData {
    optional uint32 endless_type = 1;
    optional uint32 player_group = 2;
}

enum EndlessType {
    ENDLESS_TYPE_NONE = 0;
    ENDLESS_TYPE_NORMAL = 1;
    ENDLESS_TYPE_OPENWORLD = 2;
    ENDLESS_TYPE_QUANTUM = 3;
    ENDLESS_TYPE_ULTRA = 4;
    ENDLESS_TYPE_GREEDY = 5;
    ENDLESS_TYPE_FRONT = 6;
}

message EndlessWaitBurstBomb {
    optional uint32 item_id = 1;
    optional uint32 burst_time = 2;
}

message EndlessWaitEffectItem {
    optional uint32 item_id = 1;
    optional uint32 effect_times = 2;
    optional uint32 expire_time = 3;
}

message EndlessWarInfo {
    optional uint32 uid = 1;
    optional uint32 target_uid = 2;
    optional uint32 item_id = 3;
    optional Type type = 4;

    enum Type {
        USE_ITEM = 1;
        BOMB_CANCEL = 2;
        BOMB_BURST = 3;
    }
}

message EnterArmadaChatroomReq {

    enum CmdId {
        CMD_ID = 2657;
    }
}



message EnterArmadaChatroomRsp {
    optional Retcode retcode = 1;
    repeated ChatMsg his_chat_msg_list = 2;
    repeated ArmadaSystemChatMsg his_system_chat_msg_list = 3;

    enum CmdId {
        CMD_ID = 2658;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
    }
}



message EnterCommonChatworldReq {
    optional uint32 chatworld_id = 1;
    optional ChatworldPlayerInfo player_info = 2;
    optional uint32 scene_id = 3;
    optional ChatworldPlayerScene scene_data = 4;
    optional uint32 last_chatworld_id = 5;
    optional uint32 camp_tag = 6;
    optional uint32 last_scene_id = 7;

    enum CmdId {
        CMD_ID = 2400;
    }
}



message EnterCommonChatworldRsp {
    optional Retcode retcode = 1;
    optional uint32 chatworld_id = 2;
    repeated ChatworldEntity player_info_list = 3;
    optional ChatworldEntity self_info = 4;
    repeated CommonChatworldRedEnvelope npc_red_envelope_list = 5;
    optional uint32 time = 6;
    optional uint32 scene_id = 7;

    enum CmdId {
        CMD_ID = 2401;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CHATWORLD_ID_ERROR = 2;
        ENTER_ERROR = 3;
        CHATWORLD_FULL = 4;
        LACK_LEVEL = 5;
        NO_QAVATAR = 6;
        NOT_JOIN_ACTIVITY = 7;
        SCENE_NOT_EXIST = 8;
        NOT_OPEN = 9;
        IS_ENTERING = 10;
        NOT_IN_ARMADA = 11;
    }
}


message EnterLobbyReq {
    optional uint32 stage_id = 1;
    optional uint32 lobby_id = 2;
    optional bool is_friend_invitation = 3;
    optional uint32 level = 4;
    optional uint32 client_rtt = 6;
    optional bool has_leader_stamina = 7;
    optional MpTeamMember member = 8;
    optional bool has_leader_enter_times = 9;
    optional uint32 device_score = 10;
    optional uint32 report_num = 11;
    optional bool has_leader_theme_wanted_ticket = 12;

    enum CmdId {
        CMD_ID = 303;
    }
}

message EnterLobbyRsp {
    optional Retcode retcode = 1;
    optional int32 sub_retcode = 2;
    optional uint32 lobby_id = 3;
    optional uint32 stage_id = 4;
    optional uint32 avatar_id = 5;

    enum CmdId {
        CMD_ID = 304;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LOBBY_FULL = 2;
        LEVEL_NOT_SATISFY = 3;
        ALREADY_IN_LOBBY = 4;
        LOBBY_FIGHTING = 5;
        LOBBY_NOT_EXIST = 6;
        NO_LOBBY = 7;
        STAGE_ERROR = 8;
        SERVER_BUSY = 9;
        BAD_NETWORK = 10;
        CLIENT_VERSION_ERROR = 11;
        IN_MATCH_QUEUE = 12;
        MATCH_STAGE_EXCEED_MAX = 13;
        ALREADY_IN_MATCH = 14;
        NO_AVAILABLE_AVATAR = 15;
        NOT_ALLOW_CROSS_REGION = 16;
        IN_SQUAD = 17;
        IN_SQUAD_MATCH = 18;
        IN_ROOM = 19;
        FEATURE_LIMIT = 20;
        NOT_IN_SAME_ARMADA = 21;
        DATA_VERSION_CONFLICT = 22;
        FEATURE_CLOSED = 23;
    }
}




message EnterRoomReq {
    optional RoomMode room_mode = 1;
    optional uint32 room_id = 2;
    optional RoomMember member_data = 3;
    optional RoomInfo room_info = 4;

    enum CmdId {
        CMD_ID = 3155;
    }
}

message EnterRoomRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3156;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SERVER_BUSY = 2;
        IS_IN_ROOM = 3;
        ROOM_NOT_EXIST = 4;
        ROOM_FULL = 5;
        ROOM_IN_MATCHING = 6;
        IS_IN_BATTLE = 7;
        TOO_FREQUENT = 8;
        NO_SCHEDULE = 9;
        PLAYER_LEVEL_LACK = 10;
        ALREADY_IN_MP = 11;
        EQUIPMENT_FULL = 12;
        EQUIPMENT_MATERIAL_LIMIT = 13;
        EQUIPMENT_FRAGMENT_LIMIT = 14;
        FEATURE_LIMIT = 15;
        PUNISHED = 16;
    }
}

message EnterRpgTaleSiteReq {
    optional uint32 site_id = 1;
    optional uint32 tale_id = 2;

    enum CmdId {
        CMD_ID = 2303;
    }
}

message EnterRpgTaleSiteRsp {
    optional Retcode retcode = 1;
    optional uint32 site_id = 2;
    optional uint32 tale_id = 3;

    enum CmdId {
        CMD_ID = 2304;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_PASS_CUR_SITE = 2;
        SITE_LOCKED = 3;
    }
}

enum EnterTimesType {
    ACITIVYT_TIMES_REF = 1;
    STAGE_TIMES_REF = 2;
}


message EnterWorldChatroomReq {
    optional uint32 chatroom_id = 1;
    optional ActivityWorldChatroomType activity_type = 2;
    optional uint32 para = 3;
    optional uint32 player_level = 4;
    optional string player_region = 5;

    enum CmdId {
        CMD_ID = 2231;
    }
}



message EnterWorldChatroomRsp {
    optional Retcode retcode = 1;
    optional uint32 chatroom_id = 2;
    repeated ChatMsg his_chat_msg_list = 3;
    optional ActivityWorldChatroomType activity_type = 4;
    optional uint32 player_num = 5;

    enum CmdId {
        CMD_ID = 2232;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
        CHATROOM_ID_ERROR = 3;
        CHATROOM_FULL = 4;
        NO_KINGDOM = 5;
        TOO_OFTEN = 6;
        FEATURE_CLOSED = 7;
    }
}

message EquipDLCAvatarTalentReq {
    optional uint32 avatar_id = 1;
    repeated uint32 equip_talent_list = 2;

    enum CmdId {
        CMD_ID = 3554;
    }
}

message EquipDLCAvatarTalentRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3555;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        TALENT_NOT_EXIST = 3;
        TALENT_TYPE_ERROR = 4;
        TALENT_TAG_REPEAT = 5;
    }
}

message EquipForgeSwitchData {
    optional uint32 equip_forge_id = 1;
}



message EquipmentEvoReq {
    optional EquipmentItem main_item = 1;
    optional EquipmentItemList consume_item_list = 2;

    enum CmdId {
        CMD_ID = 37;
    }
}


message EquipmentEvoRsp {
    optional Retcode retcode = 1;
    optional EquipmentItem new_item = 2;

    enum CmdId {
        CMD_ID = 38;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MAIN_ITEM_NOT_EXIST = 2;
        MAIN_ITEM_LEVEL_NOT_FULL = 3;
        CONSUME_ITEM_NOT_EXIST = 4;
        CONSUME_ITEM_IN_USE = 5;
        CONSUME_ITEM_REPEAT = 6;
        CONSUME_ITEM_UN_NECESSARY = 7;
        CONSUME_ITEM_LACK = 8;
        MAIN_ITEM_IN_CONSUME_ITEM_LIST = 9;
        SCOIN_LACK = 10;
        CONSUME_ITEM_PROTECTED = 11;
        MAIN_ITEM_AFFIX_NOT_IDENTIFY = 12;
        COST_GACHA_TICKET = 13;
        COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 14;
        COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 15;
        CONSUME_ITEM_GRAND_KEY = 16;
        CONSUME_ITEM_IN_FACILITY = 17;
        MAIN_ITEM_IN_FACILITY = 18;
        CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 19;
    }
}

message EquipmentForge {
    optional uint32 forge_id = 1;
    optional uint32 times = 2;
}


message EquipmentForgeConsume {
    optional uint32 unique_id = 1;
    repeated ConsumeEquip equip_list = 2;
    repeated Material material_list = 3;
    message ConsumeEquip {
        optional uint32 id = 1;
        optional uint32 level = 2;
        optional uint32 exp = 3;
    }
}

enum EquipmentForgeRefreshType {
    EQUIPMENT_FORGE_REFRESH_NONE = 0;
    EQUIPMENT_FORGE_REFRESH_SCHEDULE = 1;
    EQUIPMENT_FORGE_REFRESH_DAILY = 2;
}

enum EquipmentForgeType {
    EQUIPMENT_FORGE_TIMES = 1;
    EQUIPMENT_FORGE_PACKAGE_NUM = 2;
}


message EquipmentItem {
    optional EquipmentType type = 1;
    optional uint32 id_or_unique_id = 2;
    optional uint32 num = 3;
}


message EquipmentItemList {
    repeated EquipmentItem item_list = 1;
}



message EquipmentPowerUpReq {
    optional EquipmentItem main_item = 1;
    optional EquipmentItemList consume_item_list = 2;

    enum CmdId {
        CMD_ID = 31;
    }
}



message EquipmentPowerUpRsp {
    optional Retcode retcode = 1;
    optional EquipmentItem main_item = 2;
    optional uint32 boost_rate = 3;
    repeated Material return_material_list = 4;

    enum CmdId {
        CMD_ID = 32;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MAIN_ITEM_NOT_EXIST = 2;
        MAIN_ITEM_LEVEL_FULL = 3;
        CONSUME_ITEM_NOT_EXIST = 4;
        CONSUME_ITEM_IN_USE = 5;
        CONSUME_ITEM_REPEAT = 6;
        MAIN_ITEM_IN_CONSUME_ITEM_LIST = 7;
        SCOIN_LACK = 8;
        CONSUME_ITEM_PROTECTED = 9;
        MAIN_ITEM_AFFIX_NOT_IDENTIFY = 10;
        COST_GACHA_TICKET = 11;
        COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 12;
        COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 13;
        CONSUME_ITEM_IN_FACILITY = 14;
        CONSUME_ITEM_GRAND_KEY = 15;
        CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 16;
    }
}


message EquipmentSellReq {
    optional EquipmentItemList sell_item_list = 1;

    enum CmdId {
        CMD_ID = 33;
    }
}

message EquipmentSellRsp {
    optional Retcode retcode = 1;
    optional uint32 scoin_add = 2;
    optional uint32 purple_jade_add = 4;
    optional uint32 cost_vitality = 5;

    enum CmdId {
        CMD_ID = 34;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CONSUME_ITEM_NOT_EXIST = 2;
        CONSUME_ITEM_IN_USE = 3;
        CONSUME_ITEM_REPEAT = 4;
        CONSUME_ITEM_PROTECTED = 5;
        COST_GACHA_TICKET = 6;
        COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 7;
        COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 8;
        SELL_PRICE = 9;
        CONSUME_ITEM_GRAND_KEY = 10;
        CONSUME_ITEM_IN_FACILITY = 11;
        LACK_VITALITY = 12;
        CONTAINS_EQUIP_CAN_NOT_SELL = 13;
        GREEN_STONE_QUANTITY_LIMIT = 14;
        PURPLE_JADE_QUANTITY_LIMIT = 15;
        CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 16;
    }
}

enum EquipmentSlot {
    EQUIPMENT_SLOT_WEAPON_1 = 1;
    EQUIPMENT_SLOT_STIGMATA_1 = 2;
    EQUIPMENT_SLOT_STIGMATA_2 = 3;
    EQUIPMENT_SLOT_STIGMATA_3 = 4;
}

enum EquipmentType {
    EQUIPMENT_MATERIAL = 1;
    EQUIPMENT_AVATAR_FRAGMENT = 2;
    EQUIPMENT_WEAPON = 3;
    EQUIPMENT_STIGMATA = 4;
    EQUIPMENT_AVATAR_CARD = 5;
    EQUIPMENT_ENDLESS_ITEM = 6;
    EQUIPMENT_DRESS = 7;
    EQUIPMENT_VIRTUAL = 8;
    EQUIPMENT_MEDAL = 10;
    EQUIPMENT_FURNITURE = 14;
    EQUIPMENT_OPENWORLD_ENDLESS_ITEM = 15;
    EQUIPMENT_CUSTOM_HEAD = 16;
    EQUIPMENT_FRAME = 20;
    EQUIPMENT_SHOPPING_MALL_GIFT = 30;
    EQUIPMENT_MECHA = 34;
    EQUIPMENT_PHONE_PENDANT = 35;
    EQUIPMENT_EMOJI = 36;
    EQUIPMENT_ELF_FRAGMENT = 37;
    EQUIPMENT_ELF_CARD = 38;
    EQUIPMENT_DLC_AVATAR_CARD = 39;
    EQUIPMENT_WARSHIP = 40;
    EQUIPMENT_TRIAL_WARSHIP = 41;
    EQUIPMENT_ERROR = 100;
}

enum EquipmentVirtualType {
    EQUIPMENT_VIRTUAL_ARMADA_FUND = 80001;
    EQUIPMENT_VIRTUAL_MP_EXP = 80002;
    EQUIPMENT_VIRTUAL_SCOIN = 80006;
    EQUIPMENT_MASTER_FAME_EXP = 80007;
    EQUIPMENT_VIRTUAL_SEASON_EXP = 80008;
    EQUIPMENT_VIRTUAL_PLAYER_EXP = 80009;
    EQUIPMENT_VIRTUAL_ARMADA_CONTRIBUTION = 80011;
    EQUIPMENT_VIRTUAL_VITALITY = 80012;
    EQUIPMENT_VIRTUAL_CARD_PRODUCT = 80013;
    EQUIPMENT_VIRTUAL_CONTRACT_POINT = 80014;
    EQUIPMENT_VIRTUAL_DLC_EXP = 80015;
    EQUIPMENT_VIRTUAL_BATTLE_PASS_EXP_ACTIVITY = 80016;
    EQUIPMENT_VIRTUAL_ADVENTURE_BADGE = 80017;
    EQUIPMENT_VIRTUAL_ADVENTURE_GRAIN = 80018;
    EQUIPMENT_VIRTUAL_CHAPTER_ACTIVITY_EXP = 80019;
    EQUIPMENT_VIRTUAL_PICTURE_SCORE = 80020;
    EQUIPMENT_VIRTUAL_OW_FOX_EXP = 80021;
    EQUIPMENT_VIRTUAL_OW_AI_EXP = 80022;
    EQUIPMENT_VIRTUAL_SANCTUARY_EXP = 80023;
    EQUIPMENT_VIRTUAL_CUSTOM_GACHA_ENERGY = 80024;
    EQUIPMENT_VIRTUAL_BATTLE_PASS_THEME_EXP = 80025;
    EQUIPMENT_VIRTUAL_OPTIONAL_GACHA_ENERGY = 80026;
    EQUIPMENT_VIRTUAL_NEWBIE_PRIVILEGE = 80027;
    EQUIPMENT_VIRTUAL_SC_DLC_EXP = 80028;
    EQUIPMENT_VIRTUAL_BATTLE_PASS_EXP_DUTY = 80029;
    EQUIPMENT_VIRTUAL_CUSTOM_GOBACK_GACHA_ENERGY = 80030;
    EQUIPMENT_VIRTUAL_OW_TERMINAL_EXP = 80031;
}

message EquipScDLCAvatarTalentReq {
    optional uint32 avatar_id = 1;
    repeated uint32 equip_talent_list = 2;

    enum CmdId {
        CMD_ID = 6314;
    }
}

message EquipScDLCAvatarTalentRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 6315;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_ERROR = 2;
        TALENT_ERROR = 3;
        TALENT_TAG_REPEAT = 4;
    }
}



message EquipSynthesisReq {
    optional Material material = 1;
    optional EquipmentItem equip_item = 2;

    enum CmdId {
        CMD_ID = 478;
    }
}


message EquipSynthesisRsp {
    optional Retcode retcode = 1;
    optional EquipmentItemList equip_list = 2;

    enum CmdId {
        CMD_ID = 479;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FRAG_ERROR = 2;
        BAG_FULL = 3;
    }
}

message EvaluateExaminationReq {
    optional uint32 examination_id = 1;
    optional bool is_like = 2;

    enum CmdId {
        CMD_ID = 4329;
    }
}

message EvaluateExaminationRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4330;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

enum EventType {
    EVENT_TYPE_ISLAND = 1;
    EVENT_TYPE_CITY_ACTIVITY = 2;
}

message EvoStigmataTitleReq {
    optional uint32 unique_id = 1;

    enum CmdId {
        CMD_ID = 326;
    }
}

message EvoStigmataTitleRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 327;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STIGMATA_NOT_EXIST = 2;
        EXP_LACK = 3;
        MATERIAL_LACK = 4;
        LEVEL_ERROR = 5;
        LEVEL_LACK = 6;
    }
}

message Examination {
    optional uint32 id = 1;
    optional uint32 last_answer = 2;
    optional bool is_finished = 3;
    repeated uint32 answer_list = 4;
    optional bool is_evaluated = 5;
}

enum ExaminationTagType {
    EXAMINATION_TYPE_NONE = 0;
    EXAMINATION_TYPE_AVATAR = 1;
    EXAMINATION_TYPE_ELF = 2;
    EXAMINATION_TYPE_MONSTER = 3;
    EXAMINATION_TYPE_COMMON = 4;
}

message ExBossEnterSwitchData {
    optional uint32 ex_boss_id = 1;
}

message ExBossIdInfo {
    optional uint32 boss_id = 1;
    repeated uint32 avatar_id_list = 3;
    repeated uint32 weapon_id_list = 4;
    repeated uint32 stigmata_id_list = 5;
    optional uint32 score = 6;
    repeated uint32 last_avatar_id_list = 7;
    optional uint32 boss_times_score = 8;
}



message ExBossInfo {
    optional uint32 enter_times = 1;
    optional uint32 schedule_id = 2;
    optional uint32 rank_id = 3;
    repeated ExBossIdInfo boss_id_list = 4;
    optional uint32 now_schedule_id = 5;
    repeated ExBossIdInfo ex_boss_list = 6;
    optional uint32 max_sweep_level = 7;
    repeated ExBossSingleBossScoreReward single_boss_score_reward_list = 8;
}

message ExBossSingleBossScoreReward {
    optional uint32 boss_id = 1;
    optional uint32 max_settle_score = 2;
}

message ExBossStageBeginReq {
    repeated uint32 avatar_id_list = 1;
    optional uint32 boss_id = 2;
    optional bool is_training = 3;
    repeated uint32 elf_id_list = 4;
    optional bool is_turbo = 5;

    enum CmdId {
        CMD_ID = 529;
    }
}

message ExBossStageBeginRsp {
    optional Retcode retcode = 1;
    optional string stage_transaction_str = 2;

    enum CmdId {
        CMD_ID = 530;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_ERROR = 3;
        DUP_AVATAR = 4;
        ENTER_TIMES_LACK = 5;
        EX_BOSS_LACK_SCORE = 6;
        ELF_ERROR = 7;
        ELF_CARRY_LEVEL_LIMIT = 8;
        NEED_FINISH_NORMAL = 9;
        FEATURE_LIMIT = 10;
        FEATURE_CLOSED = 11;
        NOT_OPEN = 12;
        NOT_ALLOW_TURBO = 13;
        NO_AVAILABLE_BOSS = 14;
        LACK_LOCK_SLOT = 15;
        PRE_BOSS_NOT_FINISH = 16;
    }
}



message ExBossStageEndReq {
    optional StageEndStatus end_status = 1;
    optional uint32 cheat_type = 2;
    repeated StageCheatData cheat_data_list = 3;
    optional uint32 boss_id = 4;
    optional uint32 score = 5;

    enum CmdId {
        CMD_ID = 531;
    }
}


message ExBossStageEndRsp {
    optional Retcode retcode = 1;
    optional StageEndStatus end_status = 2;
    optional uint32 boss_id = 3;

    enum CmdId {
        CMD_ID = 532;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_BEGIN = 3;
        NOT_OPEN = 4;
    }
}

message ExBossSweepReq {
    optional uint32 boss_id = 1;

    enum CmdId {
        CMD_ID = 1655;
    }
}

message ExBossSweepRsp {
    optional Retcode retcode = 1;
    optional uint32 boss_id = 2;

    enum CmdId {
        CMD_ID = 1656;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LIMIT = 2;
        ENTER_TIMES_LACK = 3;
        FEATURE_LIMIT = 4;
        FEATURE_CLOSED = 5;
        FINISHED = 6;
        NOT_OPEN = 7;
    }
}

message ExBossSwitchData {
    optional uint32 boss_group_id = 1;
}


message ExBossTakeBossScoreRewardNotify {
    repeated RewardData reward_list = 1;

    enum CmdId {
        CMD_ID = 1657;
    }
}

message ExchangeAvatarWeaponReq {
    optional uint32 avatar_id_1 = 1;
    optional uint32 avatar_id_2 = 2;

    enum CmdId {
        CMD_ID = 135;
    }
}

message ExchangeAvatarWeaponRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 136;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_ERROR = 2;
        WEAPON_TYPE_ERROR = 3;
        COST_LACK = 4;
    }
}

message ExchangeHcoinByMcoinReq {
    optional string product_name = 1;
    optional uint32 mcoin_price = 2;

    enum CmdId {
        CMD_ID = 834;
    }
}

message ExchangeHcoinByMcoinRsp {
    optional Retcode retcode = 1;
    optional string product_name = 2;
    optional uint32 pay_hcoin = 3;
    optional uint32 free_hcoin = 4;

    enum CmdId {
        CMD_ID = 835;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LACK_MCOIN = 2;
        PRODUCT_INVALID = 3;
    }
}

message ExchangePurpleJadeReq {
    optional uint32 hcoin_num = 1;
    optional uint32 mcoin_num = 2;

    enum CmdId {
        CMD_ID = 1367;
    }
}

message ExchangePurpleJadeRsp {
    optional Retcode retcode = 1;
    optional uint32 hcoin_cost = 2;
    optional uint32 purple_jade_added = 3;
    optional uint32 mcoin_cost = 4;

    enum CmdId {
        CMD_ID = 1368;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LACK_HCOIN = 2;
        CAN_NOT_EXCHANGE = 3;
        LIMIT_FOR_EXCHANGE = 4;
        LACK_EXCHANGE_NUM = 5;
        LACK_MCOIN = 6;
    }
}

message ExchangeRaffleMaterialReq {

    enum CmdId {
        CMD_ID = 3890;
    }
}


message ExchangeRaffleMaterialRsp {
    optional Retcode retcode = 1;
    repeated Material get_material_list = 2;

    enum CmdId {
        CMD_ID = 3891;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_NOT_ENOUGH = 2;
        NOT_OPEN = 3;
    }
}

message ExchangeRedeemCodeReq {
    optional string redeem_code = 1;

    enum CmdId {
        CMD_ID = 213;
    }
}


message ExchangeRedeemCodeRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;
    optional string redeem_code = 3;

    enum CmdId {
        CMD_ID = 214;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        REDEEM_CODE_ERROR = 2;
        REDEEM_CODE_NUM_LACK = 3;
        REDEEM_TAKE_NUM_LACK = 4;
        REDEEM_CODE_EXPIRED = 5;
        REDEEM_HAS_TAKEN = 6;
        NOT_PERMITTED = 7;
        EQUIPMENT_FULL = 8;
        REDEEM_FREQ_LIMIT = 9;
    }
}

message ExchangeWeekDayActivityTimesReq {
    optional uint32 activity_id = 1;
    optional uint32 activity_times = 2;

    enum CmdId {
        CMD_ID = 259;
    }
}

message ExchangeWeekDayActivityTimesRsp {
    optional Retcode retcode = 1;
    optional uint32 coin_cost = 2;

    enum CmdId {
        CMD_ID = 260;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        COIN_LACK = 3;
        TIMES_NOT_ZERO = 4;
    }
}


message ExitRoomNotify {
    optional RoomExitReason reason = 1;

    enum CmdId {
        CMD_ID = 3159;
    }
}

message ExitRoomReq {

    enum CmdId {
        CMD_ID = 3157;
    }
}

message ExitRoomRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3158;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ROOM = 2;
        TOO_FREQUENT = 3;
    }
}

message ExitTvtBattleNotify {

    enum CmdId {
        CMD_ID = 3357;
    }
}





message ExtraChatParam {
    optional RoomChatParam room_chat_param = 1;
    optional PrivateChatParam private_chat_param = 2;
    optional GroupChatParam group_chat_param = 3;
    optional BattleChatParam battle_chat_param = 4;
}

message ExtractEquipmentActivity {
    repeated OpenExtractWeapon extract_weapon_list = 4;
    repeated uint32 mainid_black_list = 5;
    optional bool is_reforge = 6;
    repeated uint32 reforge_main_id_list = 7;
    optional uint32 reforge_times = 8;
    optional uint32 powerup_material_ratio = 10;
    optional uint32 reforge_init_level = 11;
    optional uint32 remain_reforge_times = 12;
    message OpenExtractWeapon {
        optional uint32 quality = 1;
        optional uint32 base_type = 2;
    }
}


message ExtractEquipmentReq {
    optional EquipmentType type = 1;
    optional uint32 unique_id = 2;
    optional uint32 capsule_id = 3;

    enum CmdId {
        CMD_ID = 3654;
    }
}


message ExtractEquipmentRsp {
    optional Retcode retcode = 1;
    optional uint32 unique_id = 2;
    repeated Material material_list = 3;

    enum CmdId {
        CMD_ID = 3655;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        JUST_SUPPORT_WEAPON = 2;
        CONSUME_ITEM_NOT_EXIST = 3;
        CONSUME_ITEM_IN_USE = 4;
        CONSUME_ITEM_PROTECTED = 5;
        COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 6;
        COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 7;
        NOT_CULTIVATED = 8;
        ACTIVITY_NOT_OPEN = 9;
        EQUIP_NOT_OPEN = 10;
        MATERIAL_NOT_FITTED = 11;
        MATERIAL_LACK = 12;
        CONSUME_ITEM_IN_FACILITY = 13;
        CONSUME_ITEM_GRAND_KEY = 14;
        CONSUME_ITEM_REPEAT = 15;
        COST_GACHA_TICKET = 16;
        CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 17;
    }
}

message ExtraStoryAchieve {
    optional uint32 achieve_id = 1;
    optional bool is_take = 2;
}

message ExtraStoryAct {
    optional uint32 act_id = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
}

enum ExtraStoryActType {
    EXTRA_STORY_ACT_MAIN = 1;
    EXTRA_STORY_ACT_HIDDEN = 2;
    EXTRA_STORY_ACT_ENTROPY = 3;
    EXTRA_STORY_ACT_ACTIVITY = 4;
    EXTRA_STORY_ACT_FANTASY = 5;
    EXTRA_STORY_ACT_ROGUE = 6;
}


message ExtraStoryArea {
    optional uint32 area_id = 1;
    repeated ExtraStoryAct act_list = 2;
    optional uint32 begin_time = 3;
    optional uint32 end_time = 4;
}


message ExtraStoryChapter {
    optional uint32 chapter_id = 1;
    optional uint32 min_player_level = 2;
    repeated ExtraStoryArea area_list = 3;
    optional uint32 begin_time = 4;
    optional uint32 end_time = 5;
    optional bool is_need_key = 6;
}

enum ExtraStoryChapterType {
    EXTRA_STORY_CHAPTER_INVALID = 0;
    EXTRA_STORY_CHAPTER_NORMAL = 1;
    EXTRA_STORY_CHAPTER_LINE = 2;
}

message FacilityLevel {
    optional uint32 facility_type = 1;
    optional uint32 level = 2;
}

enum FacilityType {
    FACILITY_TYPE_AVATAR_EXP = 1;
    FACILITY_TYPE_AVATAR_SKILL_POINT = 2;
    FACILITY_TYPE_WEAPON_EXP = 3;
    FACILITY_TYPE_STIGMATA_EXP = 4;
    FACILITY_TYPE_BAR = 5;
    FACILITY_TYPE_AUDIO_PLAYER = 6;
    FACILITY_TYPE_ENERGY = 7;
    FACILITY_TYPE_HOMELAND = 8;
    FACILITY_TYPE_REFRIGERATOR = 9;
    FACILITY_TYPE_DOOR = 10;
}



message FarmActivityNotify {
    optional uint32 farm_level = 1;
    optional uint32 farm_exp = 2;
    repeated FarmSlotDetail slot_detail_list = 3;
    repeated FarmProduceMaterialDetail produce_material_list = 4;

    enum CmdId {
        CMD_ID = 1395;
    }
}

message FarmProduceMaterialDetail {
    optional uint32 material_id = 1;
    optional uint32 has_produce_times_total = 2;
}

message FarmSlotDetail {
    optional uint32 slot_id = 1;
    optional uint32 slot_status = 2;
    optional uint32 produce_begin_time = 3;
    optional uint32 produce_end_time = 4;
    optional uint32 produce_material_id = 5;
    optional uint32 has_produce_times_daily = 6;
}

enum FarmSlotStatus {
    FARM_SLOT_NONE = 0;
    FARM_SLOT_LOCKED = 1;
    FARM_SLOT_FREE = 2;
    FARM_SLOT_IN_PRODUCE = 3;
    FARM_SLOT_FINISH_PRODUCE = 4;
}

enum FastPassLimitType {
    FAST_PASS_LIMIT_NONE = 0;
    FAST_PASS_LIMIT_DAILY = 1;
    FAST_PASS_LIMIT_WEEKLY = 2;
}

message FastPassParaOw {
    optional uint32 map_id = 1;
    optional uint32 quest_id = 2;
    repeated uint32 finish_challenge_list = 3;
}

message FastPassParaWeekday {
    optional uint32 stage_id = 1;
}

enum FastPassType {
    FAST_PASS_TYPE_NONE = 0;
    FAST_PASS_TYPE_OW = 1;
    FAST_PASS_TYPE_WEEKDAY = 2;
}

enum FeatureLimitLevel {
    LIMIT_LEVEL_ALL = 0;
    LIMIT_LEVEL_MAIN = 100;
    LIMIT_LEVEL_CHAT = 200;
}

enum FeatureSwitchActivityType {
    FEATURE_SWITCH_ACTIVITY_TYPE_NONE = 0;
    FEATURE_SWITCH_ACTIVITY_TYPE_SLG_GAME = 1;
    FEATURE_SWITCH_ACTIVITY_TYPE_SLG_BATTLE = 2;
    FEATURE_SWITCH_ACTIVITY_TYPE_SLG_MATCH = 3;
    FEATURE_SWITCH_ACTIVITY_TYPE_GLOBAL_POLLING = 4;
    FEATURE_SWITCH_ACTIVITY_TYPE_SLG_CHAT = 5;
    FEATURE_SWITCH_ACTIVITY_TYPE_SLG_BROADCAST = 6;
}

enum FeatureSwitchOpType {
    FEATURE_SWITCH_OP_NONE = 0;
    FEATURE_SWITCH_OP_ADD = 1;
    FEATURE_SWITCH_OP_DEL = 2;
}

enum FeatureSwitchType {
    FEATURE_SWITCH_NONE = 0;
    FEATURE_SWITCH_STAGE = 1;
    FEATURE_SWITCH_SHOP = 2;
    FEATURE_SWITCH_SHOP_GOODS_POOL = 3;
    FEATURE_SWITCH_ACTIVITY_PANEL = 4;
    FEATURE_SWITCH_MISSION_HIDE = 5;
    FEATURE_SWITCH_ITEM_USE = 6;
    FEATURE_SWITCH_MATERIAL_HIDE = 7;
    FEATURE_SWITCH_MISSION_REWARD = 8;
    FEATURE_SWITCH_MAIL_ATTACHMENT_TAKE = 9;
    FEATURE_SWITCH_DANMAKU = 10;
    FEATURE_SWITCH_EX_BOSS = 11;
    FEATURE_SWITCH_SHOP_GOODS_POOL_HIDE = 12;
    FEATURE_SWITCH_CHAT = 13;
    FEATURE_SWITCH_HEXIE = 14;
    FEATURE_SWITCH_MCOIN_BUY = 15;
    FEATURE_SWITCH_SHOP_GOODS = 16;
    FEATURE_SWITCH_CMD_CD = 17;
    FEATURE_SWITCH_ENDLESS = 18;
    FEATURE_SWITCH_EX_BOSS_ENTER = 19;
    FEATURE_SWITCH_GACHA = 20;
    FEATURE_SWITCH_AVATAR_FRAGMENT = 22;
    FEATURE_SWITCH_ELF_FRAGMENT = 23;
    FEATURE_SWITCH_EQUIP_FORGE = 24;
    FEATURE_SWITCH_BATTLE_PASS = 25;
    FEATURE_SWITCH_GACHA_COIN_TRANSFER = 26;
    FEATURE_SWITCH_RPG_TALE_SITE = 27;
    FEATURE_SWITCH_ACTIVITY = 28;
    FEATURE_SWITCH_THEME_WANTED = 29;
    FEATURE_SWITCH_SNS_REQUEST = 30;
    FEATURE_SWITCH_GOD_WAR = 31;
    FEATURE_SWITCH_SERVER_STOP_GACHA_MSG = 32;
    FEATURE_SWITCH_KINGDOM_WAR = 33;
    FEATURE_SWITCH_REFINE_RUNE = 34;
    FEATURE_SWITCH_CHANGE_FRIEND_REMARK = 35;
    FEATURE_SWITCH_GACHA_DAILY_TIMES_LIMIT = 36;
    FEATURE_SWITCH_INVITE_ACTIVITY = 37;
}

message FeverSkillSuite {
    optional uint32 suite_id = 1;
    optional string suite_name = 2;
    repeated uint32 skill_chip_id_list = 3;
}


message FinishClearStageActivityNotify {
    optional uint32 stage_id = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 455;
    }
}



message FinishConsignedOrderReq {
    optional EquipmentItem item = 1;
    optional uint32 unique_id = 2;
    optional uint32 consign_id = 3;
    optional uint32 progress = 4;
    optional uint32 order_level = 5;
    optional ConsignedOrder order = 6;
    optional ConsignedOrder next_order = 7;
    optional uint32 reliable_id = 8;

    enum CmdId {
        CMD_ID = 2643;
    }
}




message FinishConsignedOrderRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;
    repeated DropItem drop_item_list = 3;
    optional EquipmentItem item = 4;
    optional uint32 consign_id = 5;
    optional uint32 reliable_id = 8;
    optional uint32 progress = 9;
    optional uint32 finish_order_times = 10;

    enum CmdId {
        CMD_ID = 2644;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        IN_CD_TIME = 3;
        TIMES_LACK = 4;
        CONSUME_ITEM_NOT_EXIST = 5;
        CONSUME_ITEM_IN_USE = 6;
        CONSUME_ITEM_REPEAT = 7;
        CONSUME_ITEM_PROTECTED = 8;
        COST_GACHA_TICKET = 9;
        COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 10;
        COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 11;
        ITEM_LACK = 12;
        STATUS_ERROR = 13;
        ORDER_FINISHED = 14;
        ORDER_PROGRESS_CHANGE = 15;
        CONSUME_ITEM_IN_FACILITY = 16;
        CONSUME_ITEM_GRAND_KEY = 17;
        CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 18;
    }
}

message FinishDLCDialogReq {
    optional uint32 dialog_id = 1;

    enum CmdId {
        CMD_ID = 3578;
    }
}

message FinishDLCDialogRsp {
    optional Retcode retcode = 1;
    optional uint32 dialog_id = 2;
    optional uint32 add_support_point = 3;

    enum CmdId {
        CMD_ID = 3579;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_SUPPORT_DIALOG = 2;
        ALREADY_TAKEN = 3;
    }
}

message FinishDormEventReq {
    optional uint32 event_id = 1;
    optional uint32 avatar_id = 2;

    enum CmdId {
        CMD_ID = 617;
    }
}



message FinishDormEventRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;
    repeated DropItem drop_item_list = 3;

    enum CmdId {
        CMD_ID = 618;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CONDITION_LIMIT = 2;
    }
}

message FinishDormTalkReq {
    optional uint32 plot_id = 1;
    repeated uint32 avatar_id_list = 2;

    enum CmdId {
        CMD_ID = 641;
    }
}



message FinishDormTalkRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;
    repeated DropItem drop_item_list = 3;

    enum CmdId {
        CMD_ID = 642;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        PLOT_ERROR = 2;
        PLOT_FINISHED = 3;
    }
}



message FinishedExBossInfo {
    optional uint32 boss_id = 1;
    optional uint32 score = 2;
    repeated AvatarBriefInfo avatar_info_list = 3;
    repeated ElfBriefInfo elf_info_list = 4;
}

message FinishExaminationReq {
    optional uint32 examination_id = 1;
    optional uint32 answer_index = 2;

    enum CmdId {
        CMD_ID = 4325;
    }
}


message FinishExaminationRsp {
    optional Retcode retcode = 1;
    optional uint32 examination_id = 2;
    optional bool is_finished = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 4326;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_FINISHED = 2;
        NOT_CUR_EXAMINATION = 3;
    }
}

message FinishFarmProduceReq {
    optional uint32 slot_id = 1;
    optional bool is_finish_all = 2;

    enum CmdId {
        CMD_ID = 1391;
    }
}



message FinishFarmProduceRsp {
    optional Retcode retcode = 1;
    optional uint32 slot_id = 2;
    optional bool is_finish_all = 3;
    optional uint32 reward_farm_exp = 4;
    repeated Material produce_material_list = 5;
    optional RewardData reward_data = 6;

    enum CmdId {
        CMD_ID = 1392;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SLOT_LOCKED = 2;
        NOT_IN_PRODUCE = 3;
        NOT_FINISH = 4;
    }
}



message FinishFastPassReq {
    optional uint32 fast_pass_type = 1;
    optional FastPassParaOw fast_pass_para_ow = 2;
    optional FastPassParaWeekday fast_pass_para_weekday = 3;

    enum CmdId {
        CMD_ID = 1490;
    }
}




message FinishFastPassRsp {
    optional Retcode retcode = 1;
    optional uint32 fast_pass_type = 2;
    repeated DropItem drop_item_list = 4;
    optional FastPassParaOw fast_pass_para_ow = 5;
    optional FastPassParaWeekday fast_pass_para_weekday = 6;
    optional uint32 player_exp_reward = 7;
    optional uint32 scoin_reward = 8;
    optional uint32 exp_convert_scoin = 9;

    enum CmdId {
        CMD_ID = 1491;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
        MATERIAL_LACK = 3;
        QUEST_NOT_EXIST = 4;
        QUEST_NOT_DOING = 5;
        MAP_NOT_FOUND = 6;
        NO_USE_TIMES = 7;
        STAGE_NOT_EXIST = 8;
        STAGE_CANT_FAST_PASS = 9;
        NO_ENTER_TIMES = 10;
        STAMINA_LACK = 11;
        EQUIPMENT_FULL = 12;
        GENERATE_DROP_FAILED = 13;
    }
}

message FinishGuideReportReq {
    repeated uint32 guide_id_list = 1;
    optional bool is_force_finish = 2;

    enum CmdId {
        CMD_ID = 129;
    }
}

message FinishGuideReportRsp {
    optional Retcode retcode = 1;
    repeated uint32 guide_id_list = 2;
    optional bool is_finish = 3;

    enum CmdId {
        CMD_ID = 130;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message FinishIslandEventReq {
    optional uint32 event_id = 1;
    optional uint32 node_num = 2;
    optional bool is_get_reward = 3;

    enum CmdId {
        CMD_ID = 243;
    }
}


message FinishIslandEventRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 244;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message FinishMatrixEventPlotReq {
    optional uint32 plot_id = 1;
    optional uint32 dialog_id = 2;

    enum CmdId {
        CMD_ID = 2336;
    }
}

message FinishMatrixEventPlotRsp {
    optional Retcode retcode = 1;
    optional uint32 plot_id = 2;
    optional uint32 dialog_id = 3;

    enum CmdId {
        CMD_ID = 2337;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message FinishOpenworldEndlessInvasionMonsterReq {
    optional uint32 id = 1;
    optional uint32 battle_id = 2;
    optional string transaction_str = 3;

    enum CmdId {
        CMD_ID = 3430;
    }
}


message FinishOpenworldEndlessInvasionMonsterRsp {
    optional Retcode retcode = 1;
    optional uint32 sub_score = 2;
    optional uint32 id = 3;
    repeated OpenworldEndlessItem clear_item_list = 4;
    optional uint32 score = 5;
    optional uint32 battle_id = 6;
    optional string transaction_str = 7;

    enum CmdId {
        CMD_ID = 3431;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ENDLESS_STATUS_ERROR = 2;
        NOT_JOIN = 3;
        NO_INVASION = 4;
    }
}




message FinishOpenworldEndlessMonsterGroupReq {
    optional uint32 group_id = 1;
    optional LineupBriefInfo lineup_info = 2;
    optional uint32 extra_score = 3;
    optional uint32 battle_id = 4;
    optional uint32 cost_time = 5;
    repeated StageCheatData cheat_data_list = 6;
    optional uint32 stage_id = 7;
    optional string transaction_str = 8;
    optional EndlessType type = 9;
    optional uint32 quantum_monster_progress = 10;
    optional bool is_skip_level = 11;
    optional uint32 final_boss_id = 12;

    enum CmdId {
        CMD_ID = 3424;
    }
}






message FinishOpenworldEndlessMonsterGroupRsp {
    optional Retcode retcode = 1;
    repeated uint32 finish_monster_group_list = 2;
    optional uint32 group_id = 3;
    repeated OpenworldEndlessItem clear_item_list = 4;
    optional uint32 score = 5;
    optional uint32 battle_id = 6;
    optional uint32 old_score = 7;
    optional bool is_boss = 8;
    optional string transaction_str = 9;
    repeated OpenworldEndlessMonsterGroup monster_group_list = 10;
    optional uint32 group_level = 11;
    optional LineupBriefInfo lineup_info = 12;
    optional EndlessType type = 13;
    optional QuantumEndless quantum_endless = 14;
    optional bool is_skip_level = 15;
    optional uint32 final_boss_id = 16;
    optional LineupBriefInfo max_score_lineup_info = 17;

    enum CmdId {
        CMD_ID = 3425;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message FinishPlotReq {
    optional uint32 plot_type = 1;
    optional uint32 plot_id = 3;
    optional uint32 dialog_id = 4;
    repeated uint32 avatar_id_list = 5;
    optional uint32 visual_novel_id = 6;

    enum CmdId {
        CMD_ID = 1378;
    }
}



message FinishPlotRsp {
    optional Retcode retcode = 1;
    optional uint32 plot_type = 2;
    optional uint32 plot_id = 4;
    optional uint32 dialog_id = 5;
    repeated RewardData reward_list = 6;
    repeated DropItem drop_item_list = 7;

    enum CmdId {
        CMD_ID = 1379;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        PLOT_ERROR = 2;
        PLOT_FINISHED = 3;
    }
}

message FinishRpgTalePlotReq {
    optional uint32 plot_id = 1;
    optional uint32 dialog_id = 2;
    optional uint32 tale_id = 3;

    enum CmdId {
        CMD_ID = 2305;
    }
}

message FinishRpgTalePlotRsp {
    optional Retcode retcode = 1;
    optional uint32 plot_id = 2;
    optional uint32 dialog_id = 3;
    optional uint32 tale_id = 4;

    enum CmdId {
        CMD_ID = 2306;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message FinishRpgTaleStagePlotReq {
    optional uint32 plot_id = 1;
    optional uint32 dialog_id = 2;
    optional uint32 tale_id = 3;

    enum CmdId {
        CMD_ID = 2370;
    }
}

message FinishRpgTaleStagePlotRsp {
    optional Retcode retcode = 1;
    optional uint32 plot_id = 2;
    optional uint32 dialog_id = 3;
    optional uint32 tale_id = 4;

    enum CmdId {
        CMD_ID = 2371;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message FinishScDLCDailyQuestReq {
    optional uint32 quest_id = 1;
    optional uint32 cost_time = 2;
    repeated uint32 finish_challenge_list = 3;

    enum CmdId {
        CMD_ID = 6322;
    }
}

message FinishScDLCDailyQuestRsp {
    optional Retcode retcode = 1;
    optional uint32 quest_id = 2;
    optional uint32 cost_time = 3;
    repeated uint32 finish_challenge_list = 4;

    enum CmdId {
        CMD_ID = 6323;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        QUEST_NOT_EXIST = 2;
        QUEST_NOT_DOING = 3;
    }
}

message FinishScDLCPlotReq {
    optional uint32 id = 1;

    enum CmdId {
        CMD_ID = 6330;
    }
}

message FinishScDLCPlotRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 6331;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message FinishSurveyNotify {
    optional uint32 survey_id = 1;

    enum CmdId {
        CMD_ID = 4243;
    }
}

enum FishRewardSrc {
    FISH_REWARD_SRC_NONE = 0;
    FISH_REWARD_SRC_NORMAL = 1;
    FISH_REWARD_SRC_GET_MISSED = 2;
    FISH_REWARD_SRC_ASSIST = 3;
    FISH_REWARD_SRC_LIKE = 4;
}

message FlopActivityCardData {
    optional uint32 id = 1;
    optional uint32 state = 2;
    optional uint32 card_number = 3;
}

enum FlopActivityCardState {
    FLOP_ACTIVITY_CARD_STATE_NOT_FLOP = 0;
    FLOP_ACTIVITY_CARD_STATE_FLOP = 1;
    FLOP_ACTIVITY_CARD_STATE_REWARD_UNLOCK = 2;
}


message FlopActivityData {
    optional uint32 activity_id = 1;
    repeated FlopActivityCardData card_list = 2;
    repeated uint32 has_take_reward_list = 3;
    optional uint32 flop_times = 4;
    optional uint32 cur_front_card = 5;
    optional uint32 show_id = 6;
    optional uint32 total_flop_times = 7;
}

message FlopActivityFlopCardReq {
    optional uint32 activity_id = 1;
    optional uint32 card_id = 2;

    enum CmdId {
        CMD_ID = 4175;
    }
}



message FlopActivityFlopCardRsp {
    optional Retcode retcode = 1;
    optional FlopActivityData activity_data = 2;
    optional uint32 reward_index = 3;
    repeated RewardData reward_list = 4;

    enum CmdId {
        CMD_ID = 4176;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HAS_FLOP = 3;
        HAS_UNLOCK = 4;
        NO_TIMES = 5;
        ITEMS_LACK = 6;
    }
}

message FlopActivityRewardData {
    optional uint32 index = 1;
    optional uint32 state = 2;
}

enum FlopActivityRewardState {
    FLOP_ACTIVITY_REWARD_STATE_LOCK = 0;
    FLOP_ACTIVITY_REWARD_STATE_UNLOCK = 1;
    FLOP_ACTIVITY_REWARD_STATE_HAS_GOT = 2;
}


message ForgeEquipmentReq {
    optional uint32 forge_id = 1;
    optional EquipmentItemList consume_item_list = 2;
    optional uint32 keep_rune_equip_unique_id = 4;
    optional EquipmentItemList keep_rune_cost_item_list = 5;

    enum CmdId {
        CMD_ID = 3652;
    }
}


message ForgeEquipmentRsp {
    optional Retcode retcode = 1;
    optional uint32 forge_id = 2;
    repeated Material return_material_list = 3;

    enum CmdId {
        CMD_ID = 3653;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LIMIT = 2;
        NO_TIMES = 3;
        CONSUME_ITEM_NOT_EXIST = 4;
        CONSUME_ITEM_IN_USE = 5;
        CONSUME_ITEM_REPEAT = 6;
        CONSUME_ITEM_PROTECTED = 7;
        COST_GACHA_TICKET = 8;
        COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 9;
        COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 10;
        CONSUME_ITEM_GRAND_KEY = 11;
        CONSUME_ITEM_IN_FACILITY = 12;
        CURRENCY_LACK = 13;
        CONSUME_ITEM_MATCHING_REDUNDANT = 14;
        CONSUME_ITEM_MATCHING_LACK = 15;
        CONSUME_WEAPON_LOCKED = 16;
        QUANTUM_WEAPON_NUM_LIMIT = 17;
        QUANTUM_FORGE_CLOSED = 18;
        WAIT_SELECTED_RUNE = 19;
        NO_RUNE = 20;
        CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 21;
        FEATURE_CLOSED = 22;
    }
}

message FoundationData {
    optional string product_name = 1;
    repeated uint32 has_take_reward_level_list = 2;
}

message FrameData {
    optional uint32 id = 1;
    optional uint32 expire_time = 2;

    enum EvaluationType {
        Evaluate = 0;
        Playback = 1;
    }
}

enum FrameTimeType {
    FRAME_TIME_FOREVER = 0;
    FRAME_TIME_LIMIT = 1;
}


message FriendAskAddData {
    optional PlayerFriendBriefData brief = 1;
    optional uint32 ask_time = 2;
}

message FriendBondNotify {
    optional uint32 friend_uid = 1;
    optional uint32 bond = 2;

    enum CmdId {
        CMD_ID = 394;
    }
}

message FriendCabin {
    optional uint32 type = 1;
    optional uint32 level = 2;
    optional uint32 extend_grade = 3;
}

message FriendRemark {
    optional uint32 uid = 1;
    optional string remark = 2;
}

message FriendsPointGachaData {
    optional uint32 friends_point_cost = 2;
}

message FrontEndlessActivity {
    optional uint32 cur_floor = 1;
    repeated FloorScore floor_score_list = 2;
    message FloorScore {
        optional uint32 floor = 1;
        optional uint32 score = 2;
    }
}

message FrontEndlessActivityBattleBeginReq {
    optional uint32 activity_id = 1;
    optional uint32 stage_id = 2;
    optional uint32 floor = 3;

    enum CmdId {
        CMD_ID = 4064;
    }
}

message FrontEndlessActivityBattleBeginRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4065;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message FrontEndlessActivityBattleEndReq {
    optional uint32 activity_id = 1;
    optional uint32 stage_id = 2;
    optional uint32 floor = 3;
    optional uint32 score = 4;
    optional StageEndStatus end_status = 5;
    optional uint32 cost_time = 6;

    enum CmdId {
        CMD_ID = 4066;
    }
}


message FrontEndlessActivityBattleEndRsp {
    optional Retcode retcode = 1;
    optional uint32 cur_floor = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 4067;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_CUR_FLOOR = 2;
    }
}

message Furniture {
    optional uint32 id = 1;
    optional uint32 pos_x = 2;
    optional uint32 pos_y = 3;
    optional uint32 direction = 4;
    optional uint32 location = 5;
}

enum FurnitureDirection {
    FURNITURE_DIRECTION_DOWN = 0;
    FURNITURE_DIRECTION_LEFT = 1;
    FURNITURE_DIRECTION_UP = 2;
    FURNITURE_DIRECTION_RIGHT = 3;
}

enum FurnitureLocation {
    FURNITURE_LOCATION_FLOOR = 0;
    FURNITURE_LOCATION_WALL1 = 1;
    FURNITURE_LOCATION_WALL2 = 2;
    FURNITURE_LOCATION_WALL3 = 3;
    FURNITURE_LOCATION_WALL4 = 4;
}

message GachaCoinTransferData {
    optional uint32 gacha_type = 1;
}

message GachaDailyTimesLimitSwitchData {
}

message GachaDetailProb {
    optional string name = 1;
    optional string star = 2;
    optional string content = 3;
    optional string prob = 4;
    optional bool is_up = 5;
    optional uint32 order_value = 6;
}




message GachaDisplayCommonData {
    optional string title_image = 1;
    optional string supply_image = 2;
    optional string title = 3;
    optional string content = 4;
    repeated uint32 up_avatar_list = 5;
    repeated WeaponDetailData up_weapon_list = 6;
    repeated StigmataDetailData up_stigmata_list = 7;
    optional string rule = 8;
    optional string content_detail = 9;
    repeated uint32 up_item_list = 10;
    optional string content_url = 11;
    optional string btn_image_path = 12;
    repeated GachaSortItem sort_item_list = 13;
    optional bool is_enable_prompt = 14;
    optional uint32 gacha_id = 15;
    optional uint32 data_begin_time = 16;
    optional uint32 data_end_time = 17;
    repeated uint32 up_elf_list = 18;
    optional string display_ext = 19;
    optional uint32 free_gacha_times = 20;
}

message GachaExRewardInfo {
    repeated ExReward ex_reward_list = 15;
    optional uint32 display_ex_reward_item = 16;
    optional uint32 display_ex_reward_type = 17;
    repeated ExRewardDisplayDetail display_ex_reward_detail_list = 18;
    message ExReward {
        optional uint32 need_gacha_times = 1;
        optional uint32 reward_id = 2;
        optional bool is_taken = 3;
    }
    message ExRewardDisplayDetail {
        optional uint32 need_gacha_times = 1;
        optional uint32 item_id = 2;
        optional uint32 item_num = 3;
        optional bool is_taken = 4;
        optional bool is_display_shining = 5;
    }
}


message GachaItem {
    optional uint32 item_id = 1;
    optional uint32 level = 2;
    optional uint32 num = 3;
    optional uint32 split_fragment_num = 4;
    optional bool is_rare_drop = 5;
    optional uint32 gift_item_id = 6;
    optional uint32 gift_level = 7;
    optional uint32 gift_num = 8;
    repeated GenericItemNum transfer_item_list = 9;
    optional bool is_client_display_transfer = 10;
}


message GachaLog {
    optional uint32 time = 1;
    optional GachaItem item = 2;
}

message GachaProtectDisplayInfo {
    optional ProtectDisplayType protect_display_type = 1;
    optional uint32 display_key_avatar = 2;
    repeated uint32 display_key_item_list = 3;
    repeated uint32 droped_up_item_list = 4;
    optional uint32 no_protect_gacha_times = 5;

    enum ProtectDisplayType {
        NO_DISPLAY = 0;
        AVATAR_DISPLAY = 1;
        EQUIP_DISPLAY = 2;
    }
}

message GachaSortItem {
    optional uint32 item_id = 1;
    optional uint32 level = 2;
    optional uint32 num = 3;
}

message GachaSwitchData {
    optional uint32 gacha_id = 1;
    optional uint32 gacha_type = 2;
}

message GachaTotalProb {
    optional string name = 1;
    optional string prob = 2;
    optional uint32 order_value = 3;
}

enum GachaType {
    GACHA_HCOIN = 2;
    GACHA_SPECIAL_HCOIN = 3;
    GACHA_ACTIVITY_1 = 4;
    GACHA_CUSTOM_AVATAR = 5;
    GACHA_ACTIVITY_2 = 6;
    GACHA_CUSTOM_EQUIP = 7;
    GACHA_BOX_1 = 8;
    GACHA_UNIQUE = 9;
    GACHA_EQUIP_HCOIN = 10;
    GACHA_PRAY = 11;
    GACHA_SPECIAL_2 = 12;
    GACHA_CONTROLLABLE_BOX = 14;
    GACHA_ACTIVITY_3 = 15;
    GACHA_BOX_2 = 16;
    GACHA_BOX_3 = 17;
    GACHA_OPTIONAL_AVATAR = 18;
    GACHA_OPTIONAL_EQUIP = 19;
    GACHA_ADVENTURE = 20;
    GACHA_BOX_4 = 21;
    GACHA_BOX_5 = 22;
    GACHA_ADVENTURE_EQUIP = 23;
    GACHA_BOX_6 = 24;
    GACHA_SP_EQUIP = 25;
    GACHA_ELF_1 = 26;
    GACHA_ACTIVITY_4 = 27;
    GACHA_ACTIVITY_5 = 28;
    GACHA_ACTIVITY_6 = 29;
    GACHA_SPECIAL_3 = 30;
    GACHA_ADVENTURE_NEWBIE_1 = 31;
    GACHA_ADVENTURE_NEWBIE_2 = 32;
    GACHA_SPECIAL_NEWBIE_1 = 33;
    GACHA_SPECIAL_NEWBIE_2 = 34;
    GACHA_BOX_7 = 35;
    GACHA_SPECIAL_NEWBIE_3 = 36;
    GACHA_SPECIAL_NEWBIE_4 = 37;
    GACHA_CUSTOM_AVATAR_GOBACK = 38;
    GACHA_EQUIP_GOBACK = 39;
    GACHA_SPECIAL_NEWBIE_5 = 40;
    GACHA_SPECIAL_NEWBIE_6 = 41;
    GACHA_SPECIAL_NEWBIE_7 = 42;
    GACHA_SPECIAL_NEWBIE_8 = 43;
    GACHA_TYPE_ERROR = 100;
}

enum GalInteractBubbleType {
    GALINTERACT_BUBBLE_NO = 0;
    GALINTERACT_BUBBLE_YES = 1;
    GALINTERACT_BUBBLE_PLACEHOLD = 2;
}

enum GalInteractTriggerCondition {
    GALINTERACT_CONDITION_DRESS = 1;
    GALINTERACT_CONDITION_SHAKE = 2;
    GALINTERACT_CONDITION_MAIN_SCREEN = 3;
    GALINTERACT_CONDITION_INTERVAL = 4;
    GALINTERACT_CONDITION_DATETIME_YMD = 5;
    GALINTERACT_CONDITION_DATETIME_MD = 6;
    GALINTERACT_CONDITION_WEEKDAY = 7;
    GALINTERACT_CONDITION_DAILY_DUTY_POINT = 8;
    GALINTERACT_CONDITION_WEEKLY_DUTY_POINT = 9;
    GALINTERACT_CONDITION_WEATHER = 10;
    GALINTERACT_CONDITION_GACHA = 11;
    GALINTERACT_CONDITION_ONLINE_TIME = 12;
    GALINTERACT_CONDITION_LOGIN_ITERVAL = 13;
    GALINTERACT_CONDITION_MONTH_DAY_INTERVAL = 14;
    GALINTERACT_CONDITION_USER_BIRTHDAY = 15;
    GALINTERACT_CONDITION_GOODFEEL_LEVEL = 16;
    GALINTERACT_CONDITION_AFFINITY_GET_GIFT_LEVEL = 17;
}



message GardenActivityData {
    optional uint32 garden_id = 1;
    repeated GardenSite site_list = 2;
    repeated GardenCrop crop_list = 3;
    optional uint32 daily_harvest_num = 4;
    optional uint32 last_grow_time = 5;
}

message GardenCrop {
    optional uint32 crop_id = 1;
    optional uint32 harvest_num = 2;
}

message GardenHarvestReq {
    repeated uint32 site_list = 1;

    enum CmdId {
        CMD_ID = 4289;
    }
}


message GardenHarvestRsp {
    optional Retcode retcode = 1;
    optional GardenActivityData garden = 2;

    enum CmdId {
        CMD_ID = 4290;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        DAILY_HARVEST_LIMIT = 3;
    }
}

message GardenRefreshSiteReq {

    enum CmdId {
        CMD_ID = 4293;
    }
}


message GardenRefreshSiteRsp {
    optional Retcode retcode = 1;
    optional uint32 garden_id = 2;
    repeated GardenSite site_list = 3;
    optional uint32 last_grow_time = 4;

    enum CmdId {
        CMD_ID = 4294;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GardenSite {
    optional uint32 site_id = 1;
    optional uint32 crop_id = 2;
    optional uint32 delay_begin_time = 3;
}

message GardenSpeedUpWithMaterialReq {

    enum CmdId {
        CMD_ID = 4291;
    }
}


message GardenSpeedUpWithMaterialRsp {
    optional Retcode retcode = 1;
    optional GardenActivityData garden = 2;

    enum CmdId {
        CMD_ID = 4292;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        MATERIAL_NOT_ENOUGH = 3;
        SITE_FULL = 4;
    }
}















message GeneralActivity {
    optional GeneralActivityBasicInfo general_basic_info = 1;
    optional GeneralActivitySettleInfo settle_info = 2;
    optional PushTowerActivityInfo push_tower_info = 3;
    optional TeamAssaultActivityInfo team_assault_info = 4;
    optional GeneralActivityStage activity_stage = 5;
    optional CoupleTowerActivity couple_tower = 6;
    optional EndlessSingleModeActivity endless_single = 7;
    optional SingleRaidActivity single_raid = 8;
    optional OptionalBuffActivity optional_buff = 9;
    optional ChallengeWarActivity challenge_war = 10;
    optional CrisisModeActivity crisis_mode = 11;
    optional ScheduledMapSiteActivity scheduled_map_site = 12;
    optional BossChallengeActivity boss_challenge = 13;
    optional FrontEndlessActivity front_endless = 14;
}

message GeneralActivityBasicInfo {
    optional uint32 activity_id = 1;
    optional uint32 cur_score = 2;
    repeated uint32 series_activity_id = 3;
    repeated uint32 score_reward_taken_list = 4;
    optional uint32 schedule_id = 5;
}

message GeneralActivityGetMainInfoReq {
    repeated uint32 activity_id_list = 1;

    enum CmdId {
        CMD_ID = 4005;
    }
}


message GeneralActivityGetMainInfoRsp {
    optional Retcode retcode = 1;
    repeated GeneralActivity activity_list = 2;

    enum CmdId {
        CMD_ID = 4006;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GeneralActivityGetRankReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4007;
    }
}


message GeneralActivityGetRankRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional RankShowData rank_data = 3;

    enum CmdId {
        CMD_ID = 4008;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GeneralActivityGetScheduleReq {

    enum CmdId {
        CMD_ID = 4003;
    }
}


message GeneralActivityGetScheduleRsp {
    optional Retcode retcode = 1;
    repeated GeneralActivityScheduleInfo schedule_list = 2;

    enum CmdId {
        CMD_ID = 4004;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GeneralActivityGetScoreRewardInfoReq {
    repeated uint32 activity_id_list = 1;

    enum CmdId {
        CMD_ID = 4001;
    }
}


message GeneralActivityGetScoreRewardInfoRsp {
    optional Retcode retcode = 1;
    repeated GeneralActivityScoreRewardInfo score_info_list = 2;

    enum CmdId {
        CMD_ID = 4002;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GeneralActivityGetStageRankReq {
    optional uint32 stage_id = 1;
    optional uint32 rank_id = 2;

    enum CmdId {
        CMD_ID = 4052;
    }
}


message GeneralActivityGetStageRankRsp {
    optional Retcode retcode = 1;
    optional uint32 stage_id = 2;
    optional RankShowData rank_data = 3;

    enum CmdId {
        CMD_ID = 4053;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

enum GeneralActivityPreCondType {
    GENERAL_ACTIVITY_PRE_COND_TYPE_NONE = 0;
    GENERAL_ACTIVITY_PRE_COND_TYPE_SCORE = 1;
}

enum GeneralActivityRankSettleType {
    GENERAL_ACTIVITY_RANK_SETTLE_TYPE_DEFAULT = 0;
    GENERAL_ACTIVITY_RANK_SETTLE_TYPE_ACTIVITY = 1;
}

enum GeneralActivityRankType {
    GENERAL_ACTIVITY_RANK_TYPE_NONE = 0;
    GENERAL_ACTIVITY_RANK_TYPE_ABS = 1;
    GENERAL_ACTIVITY_RANK_TYPE_PERCENT = 2;
}

enum GeneralActivityScheduledMapSiteType {
    GENERAL_ACTIVITY_SCHEDULED_MAP_SITE_DAILY_RAID = 1;
    GENERAL_ACTIVITY_SCHEDULED_MAP_SITE_MINI_SKY_FIRE = 2;
    GENERAL_ACTIVITY_SCHEDULED_MAP_SITE_TWO_PLUS_TWO_PVE = 3;
    GENERAL_ACTIVITY_SCHEDULED_MAP_SITE_BOSS_RUSH = 4;
    GENERAL_ACTIVITY_SCHEDULED_MAP_SITE_CHAPTER_OW = 6;
}

message GeneralActivityScheduleInfo {
    optional uint32 activity_id = 1;
    optional uint32 show_time = 2;
    optional uint32 begin_time = 3;
    optional uint32 settle_time = 4;
    optional uint32 end_time = 5;
    optional uint32 begin_day_time = 6;
    optional uint32 end_day_time = 7;
    optional uint32 left_times = 8;
    optional uint32 schedule_id = 9;
}

message GeneralActivityScoreRewardInfo {
    optional uint32 activity_id = 1;
    optional uint32 cur_score = 2;
    repeated uint32 score_reward_taken_list = 3;
}


message GeneralActivityScoreRewardNotify {
    optional uint32 activity_id = 1;
    optional uint32 id = 2;
    repeated RewardData reward_list = 3;

    enum CmdId {
        CMD_ID = 4000;
    }
}

enum GeneralActivityScoreRewardType {
    GENERAL_ACTIVITY_SCORE_REWARD_AUTO = 1;
    GENERAL_ACTIVITY_SCORE_REWARD_MANUAL = 2;
}


message GeneralActivitySettleInfo {
    optional uint32 activity_id = 1;
    optional uint32 rank_type = 2;
    optional uint32 rank = 3;
    repeated RewardData reward_list = 4;
}


message GeneralActivityStage {
    optional uint32 enter_times = 1;
    optional uint32 exchange_times = 2;
    optional uint32 cur_score = 3;
    repeated uint32 stage_reward_taken_list = 4;
    optional uint32 bonus_score_times = 5;
    repeated GeneralActivityStageGroupScheduleInfo stage_group_schedule_list = 6;
    repeated uint32 stage_group_reward_taken_list = 7;
}

enum GeneralActivityStageAvatarBonusType {
    GENERAL_ACTIVITY_STAGE_AVATAR_BONUS_NONE = 0;
    GENERAL_ACTIVITY_STAGE_AVATAR_BONUS_ONCE = 1;
    GENERAL_ACTIVITY_STAGE_AVATAR_BONUS_ALL = 2;
}

message GeneralActivityStageExchangeEnterTimesReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4030;
    }
}

message GeneralActivityStageExchangeEnterTimesRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 enter_times = 3;
    optional uint32 exchange_times = 4;

    enum CmdId {
        CMD_ID = 4031;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        RESET_TIMES_LACK = 3;
    }
}

enum GeneralActivityStageExchangeType {
    GENERAL_ACTIVITY_EXCHANGE_TYPE_NONE = 0;
    GENERAL_ACTIVITY_EXCHANGE_TYPE_TIMES = 1;
    GENERAL_ACTIVITY_EXCHANGE_TYPE_RESET = 2;
}

message GeneralActivityStageGroupScheduleInfo {
    optional uint32 stage_group_id = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
}

message GeneralActivityStageTakeStageGroupRewardReq {
    optional uint32 activity_id = 1;
    optional uint32 activity_stage_group_id = 2;

    enum CmdId {
        CMD_ID = 4036;
    }
}


message GeneralActivityStageTakeStageGroupRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;
    optional uint32 activity_id = 3;
    optional uint32 activity_stage_group_id = 4;

    enum CmdId {
        CMD_ID = 4037;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKEN = 2;
        NOT_REACH = 3;
    }
}

message GeneralActivityStageTakeStageRewardReq {
    optional uint32 activity_id = 1;
    optional uint32 stage_id = 2;

    enum CmdId {
        CMD_ID = 4032;
    }
}


message GeneralActivityStageTakeStageRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 stage_id = 3;
    repeated RewardData reward_data_list = 4;

    enum CmdId {
        CMD_ID = 4033;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GeneralActivityTakeTicketReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4060;
    }
}


message GeneralActivityTakeTicketRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated GeneralActivityTicket ticket_list = 3;

    enum CmdId {
        CMD_ID = 4061;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GeneralActivityTicket {
    optional uint32 material_id = 1;
    optional uint32 add_num = 2;
}

enum GeneralActivityTicketRefreshType {
    GENERAL_ACTIVITY_TICKET_REFRESH_NONE = 0;
    GENERAL_ACTIVITY_TICKET_REFRESH_DAILY = 1;
    GENERAL_ACTIVITY_TICKET_REFRESH_WEEKLY = 2;
}

enum GeneralActivityType {
    GENERAL_ACTIVITY_INVALID = 0;
    GENERAL_ACTIVITY_MAIN_STORY = 1;
    GENERAL_ACTIVITY_EXTRA_STORY = 2;
    GENERAL_ACTIVITY_ENDLESS = 3;
    GENERAL_ACTIVITY_SEALED = 4;
    GENERAL_ACTIVITY_SIN_DEMON_EX = 5;
    GENERAL_ACTIVITY_WORLD_BOSS = 6;
    GENERAL_ACTIVITY_OPENWORLD_NORMAL = 7;
    GENERAL_ACTIVITY_RAID = 8;
    GENERAL_ACTIVITY_NORMAL_ACTIVITY = 9;
    GENERAL_ACTIVITY_MINUTE_CHALLENGE = 11;
    GENERAL_ACTIVITY_SELAED_MODE = 12;
    GENERAL_ACTIVITY_ARMADA_MATRIX = 13;
    GENERAL_ACTIVITY_DUNGEONS = 15;
    GENERAL_ACTIVITY_RECLAIM = 16;
    GENERAL_ACTIVITY_OPENWORLD_ACTIVITY_BOSS = 17;
    GENERAL_ACTIVITY_OPENWORLD_ACTIVITY_ENDLESS = 18;
    GENERAL_ACTIVITY_CAMPAIGN = 19;
    GENERAL_ACTIVITY_RPG_TALE = 20;
    GENERAL_ACTIVITY_MONOPOLY = 21;
    GENERAL_ACTIVITY_GARDEN = 22;
    GENERAL_ACTIVITY_SANCTUARY = 23;
    GENERAL_ACTIVITY_ELITE_STAGE = 24;
    GENERAL_ACTIVITY_OPENWORLD_AVATAR = 26;
    GENERAL_ACTIVITY_GOD_WAR = 27;
    GENERAL_ACTIVITY_OPENWORLD_CHAPTER = 28;
    GENERAL_ACTIVITY_TUTORIAL_ENTRY = 29;
    GENERAL_ACTIVITY_OPENWORLD_HUNT_ACTIVITY = 30;
    GENERAL_ACTIVITY_UNIVERAL = 99;
    GENERAL_ACTIVITY_PUSH_TOWER = 100;
    GENERAL_ACTIVITY_TEAM_ASSAULT = 101;
    GENERAL_ACTIVITY_STAGE = 102;
    GENERAL_ACTIVITY_COUPLE_TOWER = 103;
    GENERAL_ACTIVITY_MASTER_PUPIL = 104;
    GENERAL_ACTIVITY_TOWER_RAID = 105;
    GENERAL_ACTIVITY_TVT = 106;
    GENERAL_ACTIVITY_KINGDOM_WAR = 107;
    GENERAL_ACTIVITY_QUANTUM_ENDLESS = 108;
    GENERAL_ACTIVITY_THEME_WANTED = 109;
    GENERAL_ACTIVITY_ENDLESS_SINGLE = 110;
    GENERAL_ACTIVITY_SINGLE_RAID = 111;
    GENERAL_ACTIVITY_GLOBAL_WAR = 112;
    GENERAL_ACTIVITY_GRATUITY = 113;
    GENERAL_ACTIVITY_NEWBIE = 114;
    GENERAL_ACTIVITY_NINJA = 115;
    GENERAL_ACTIVITY_ARMADA_BOSS = 116;
    GENERAL_ACTIVITY_OPTIONAL_BUFF = 117;
    GENERAL_ACTIVITY_MASSIVE_WAR = 118;
    GENERAL_ACTIVITY_CHALLENGE_WAR = 119;
    GENERAL_ACTIVITY_CRISIS_MODE = 120;
    GENERAL_ACTIVITY_SCHEDULED_MAP_SITE = 121;
    GENERAL_ACTIVITY_SLG = 122;
    GENERAL_ACTIVITY_BOSS_CHALLENGE = 123;
    GENERAL_ACTIVITY_FRONT_ENDLESS = 124;
}

enum GeneralStageActivityScoreType {
    GENERAL_ACTIVITY_SCORE_ACCUM = 1;
    GENERAL_ACTIVITY_SCORE_TOP = 2;
    GENERAL_ACTIVITY_SCORE_SINGLE_TOP = 3;
    GENERAL_ACTIVITY_SCORE_MATERIAL_NUM = 4;
}

message GenericItemNum {
    optional uint32 id = 1;
    optional uint32 num = 2;
    optional uint32 level = 3;
}

message GetActivityRewardStatisticDataReq {
    optional uint32 id = 1;

    enum CmdId {
        CMD_ID = 4312;
    }
}


message GetActivityRewardStatisticDataRsp {
    optional Retcode retcode = 1;
    optional uint32 id = 2;
    optional ActivityRewardStatisticData activity_reward_data = 3;

    enum CmdId {
        CMD_ID = 4313;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetAdventureGroupReq {

    enum CmdId {
        CMD_ID = 3900;
    }
}







message GetAdventureGroupRsp {
    optional Retcode retcode = 1;
    optional uint32 level = 2;
    optional uint32 badge = 3;
    optional uint32 last_examination = 4;
    repeated AdventureGroupAvatar avatar_list = 5;
    repeated AdventureGroupQuest quest_list = 6;
    repeated AdventureGroupAvailableQuest available_quest_list = 7;
    optional uint32 grain = 8;
    optional uint32 has_take_reward_level = 9;
    optional uint32 next_scoin_add_time = 10;
    optional uint32 storage_scoin = 11;
    optional uint32 storage_stamina = 12;
    repeated uint32 has_take_compensation_list = 13;
    repeated CabinLevel cabin_level_list = 14;
    repeated AdventureDecorationSlot decoration_slot_list = 15;
    repeated FacilityLevel facility_level_list = 16;
    optional uint32 today_reset_quest_num = 17;

    enum CmdId {
        CMD_ID = 3901;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetAdventureStorySweepInfoReq {

    enum CmdId {
        CMD_ID = 3914;
    }
}


message GetAdventureStorySweepInfoRsp {
    optional Retcode retcode = 1;
    repeated IslandStorySweepData story_sweep_list = 2;
    optional uint32 used_stamina = 3;

    enum CmdId {
        CMD_ID = 3915;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetArmadaActivityListReq {

    enum CmdId {
        CMD_ID = 2825;
    }
}


message GetArmadaActivityListRsp {
    optional Retcode retcode = 1;
    repeated ArmadaActivity activity_list = 2;

    enum CmdId {
        CMD_ID = 2826;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetArmadaBuildOwnershipReq {

    enum CmdId {
        CMD_ID = 2685;
    }
}

message GetArmadaBuildOwnershipRsp {
    optional Retcode retcode = 1;
    optional uint32 build_owner = 2;
    optional uint32 build_ownership_time = 3;

    enum CmdId {
        CMD_ID = 2686;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_GRANTED = 2;
        NOT_IN_ARMADA = 3;
    }
}

message GetArmadaDataReq {
    optional uint32 level = 1;

    enum CmdId {
        CMD_ID = 2601;
    }
}




message GetArmadaDataRsp {
    optional Retcode retcode = 1;
    optional ArmadaPlayerStatus status = 2;
    optional ArmadaData armada = 3;
    repeated ArmadaBriefData apply_list = 4;
    optional uint32 join_cd_finish_time = 5;
    optional bool is_need_recommend = 6;
    optional uint32 last_mail_time = 7;
    optional ArmadaBriefData recommend_armada = 8;
    optional bool is_new = 9;

    enum CmdId {
        CMD_ID = 2602;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
    }
}

message GetArmadaDiscoveryReq {

    enum CmdId {
        CMD_ID = 2663;
    }
}

message GetArmadaDiscoveryRsp {
    optional Retcode retcode = 1;
    optional uint32 armada_week_discovery = 2;
    optional uint32 self_week_discovery = 3;
    optional uint32 next_refresh_time = 4;
    optional uint32 cur_time = 5;
    optional uint32 join_time = 6;
    optional uint32 join_armada_week_discovery = 7;

    enum CmdId {
        CMD_ID = 2664;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
    }
}

message GetArmadaManageDataReq {

    enum CmdId {
        CMD_ID = 2611;
    }
}



message GetArmadaManageDataRsp {
    optional Retcode retcode = 1;
    repeated ArmadaApply apply_list = 2;
    repeated ArmadaApplyResult apply_result_list = 3;
    optional uint32 apply_level = 4;
    optional bool auto_pass = 5;
    optional uint32 auto_pass_level = 6;
    optional uint32 build_owner = 7;
    optional uint32 build_ownership_time = 8;

    enum CmdId {
        CMD_ID = 2612;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_GRANTED = 2;
        NOT_IN_ARMADA = 3;
    }
}

message GetArmadaMemberDiscoveryListReq {

    enum CmdId {
        CMD_ID = 2665;
    }
}


message GetArmadaMemberDiscoveryListRsp {
    optional Retcode retcode = 1;
    optional uint32 armada_week_discovery = 2;
    repeated ArmadaMemberDiscovery member_discovery_list = 3;

    enum CmdId {
        CMD_ID = 2666;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
    }
}

message GetArmadaReunionActivityReq {

    enum CmdId {
        CMD_ID = 2834;
    }
}




message GetArmadaReunionActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 cur_schedule_id = 2;
    repeated ArmadaReunionMission mission_list = 3;
    repeated ArmadaReunionPlayer player_list = 4;
    repeated ChatworldDishReward reward_list = 5;

    enum CmdId {
        CMD_ID = 2835;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        NOT_IN_ARMADA = 3;
    }
}

message GetArmadaStageReq {

    enum CmdId {
        CMD_ID = 2667;
    }
}

message GetArmadaStageRewardReq {

    enum CmdId {
        CMD_ID = 2673;
    }
}

message GetArmadaStageRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 hp_1_percent = 2;
    optional uint32 hp_2_percent = 3;
    optional uint32 hp_3_percent = 4;
    optional bool is_take = 5;
    optional uint32 kill_reward_material_id = 6;
    optional uint32 kill_reward_material_num = 7;
    optional uint32 last_damage_rate = 8;

    enum CmdId {
        CMD_ID = 2674;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
    }
}


message GetArmadaStageRsp {
    optional Retcode retcode = 1;
    optional uint32 hard_grade = 2;
    optional uint32 hard_level = 3;
    optional uint32 summon_progress = 4;
    optional uint32 boss_id = 5;
    optional uint32 boss_begin_time = 6;
    optional uint32 boss_end_time = 7;
    optional uint32 boss_total_hp = 8;
    optional uint32 boss_left_hp = 9;
    optional uint32 next_fight_time = 10;
    optional uint32 hp_1_percent = 11;
    optional uint32 hp_2_percent = 12;
    optional uint32 hp_3_percent = 13;
    optional bool is_take = 14;
    optional uint32 open_begin_time = 15;
    optional uint32 open_end_time = 16;
    repeated ArmadaStageFightInfo fight_list = 17;
    optional uint32 left_fight_times = 18;
    optional uint32 max_hard_level = 19;
    optional uint32 kill_reward_material_id = 20;
    optional uint32 last_damage_rate = 21;

    enum CmdId {
        CMD_ID = 2668;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
    }
}

message GetArmadaStageScoreActivityReq {

    enum CmdId {
        CMD_ID = 2821;
    }
}



message GetArmadaStageScoreActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 has_take_self_score = 3;
    optional uint32 has_take_armada_score = 4;
    repeated ArmadaStageScore stage_score_list = 5;
    repeated ArmadaStageScorePlayerScore armada_score_list = 6;

    enum CmdId {
        CMD_ID = 2822;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        NOT_OPEN = 3;
    }
}

message GetArmadaStageScoreRankReq {
    optional uint32 stage_id = 1;

    enum CmdId {
        CMD_ID = 2842;
    }
}


message GetArmadaStageScoreRankRsp {
    optional Retcode retcode = 1;
    optional uint32 stage_id = 2;
    optional RankShowData rank_data = 3;

    enum CmdId {
        CMD_ID = 2843;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        STAGE_ERROR = 3;
    }
}

message GetAskAddFriendListReq {

    enum CmdId {
        CMD_ID = 70;
    }
}


message GetAskAddFriendListRsp {
    optional Retcode retcode = 1;
    repeated FriendAskAddData ask_list = 2;

    enum CmdId {
        CMD_ID = 71;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetAssistantFrozenListReq {

    enum CmdId {
        CMD_ID = 100;
    }
}


message GetAssistantFrozenListRsp {
    optional Retcode retcode = 1;
    repeated AssistantFrozen frozen_list = 2;

    enum CmdId {
        CMD_ID = 101;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetAuthkeyReq {
    optional string auth_appid = 1;
    optional uint32 sign_type = 2;
    optional uint32 authkey_ver = 3;

    enum CmdId {
        CMD_ID = 5010;
    }
}

message GetAuthkeyRsp {
    optional Retcode retcode = 1;
    optional string authkey = 2;
    optional string auth_appid = 3;
    optional uint32 sign_type = 4;
    optional uint32 authkey_ver = 5;

    enum CmdId {
        CMD_ID = 5011;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SIGN_TYPE_ERROR = 2;
        AUTHKEY_VER_ERROR = 3;
    }
}

message GetAvatarBindEquipInChallengeModeReq {
    repeated uint32 avatar_id_list = 1;

    enum CmdId {
        CMD_ID = 809;
    }
}


message GetAvatarBindEquipInChallengeModeRsp {
    optional Retcode retcode = 1;
    repeated AvatarBindEquipData avatar_equip_list = 2;

    enum CmdId {
        CMD_ID = 810;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetAvatarDataReq {
    repeated uint32 avatar_id_list = 1;

    enum CmdId {
        CMD_ID = 24;
    }
}


message GetAvatarDataRsp {
    optional Retcode retcode = 1;
    repeated Avatar avatar_list = 2;
    optional bool is_all = 3;

    enum CmdId {
        CMD_ID = 25;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
    }
}

message GetAvatarEquipSuiteReq {
    optional uint32 avatar_id = 1;

    enum CmdId {
        CMD_ID = 1454;
    }
}


message GetAvatarEquipSuiteRsp {
    optional Retcode retcode = 1;
    optional uint32 avatar_id = 2;
    repeated AvatarEquipSuite equip_suite_list = 3;

    enum CmdId {
        CMD_ID = 1455;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetAvatarMissionActivityReq {

    enum CmdId {
        CMD_ID = 3000;
    }
}

message GetAvatarMissionActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 avatar_sample_id = 3;
    optional uint32 choose_avatar_time = 4;
    optional uint32 reset_choose_times = 5;
    optional uint32 last_refresh_time = 6;
    optional uint32 daily_contract_point = 7;
    optional bool is_daily_reward_taken = 8;
    optional uint32 activity_finish_days = 9;
    repeated uint32 taken_reward_days_list = 10;
    optional uint32 daily_reward_num = 11;

    enum CmdId {
        CMD_ID = 3001;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetAvatarRollDataReq {
    repeated uint32 avatar_id_list = 1;

    enum CmdId {
        CMD_ID = 643;
    }
}


message GetAvatarRollDataRsp {
    optional Retcode retcode = 1;
    repeated AvatarRoll roll_list = 2;
    optional bool is_all = 3;

    enum CmdId {
        CMD_ID = 644;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
    }
}

message GetAvatarTeamDataReq {

    enum CmdId {
        CMD_ID = 47;
    }
}



message GetAvatarTeamDataRsp {
    optional Retcode retcode = 1;
    repeated AvatarTeam avatar_team_list = 2;
    repeated CustomAvatarTeam custom_avatar_team_list = 3;

    enum CmdId {
        CMD_ID = 48;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetBattlePassReq {

    enum CmdId {
        CMD_ID = 3750;
    }
}


message GetBattlePassRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 level = 3;
    optional uint32 exp = 4;
    optional uint32 has_take_reward_level = 5;
    repeated uint32 has_got_ticket_list = 6;
    optional uint32 phase_max_exp = 7;
    optional uint32 phase_exp = 8;
    optional bool is_take_phase_free_exp = 9;
    repeated BattlePassMission battle_pass_mission_list = 10;
    optional uint32 phase_end_time = 11;

    enum CmdId {
        CMD_ID = 3751;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetBattlePassThemeReq {

    enum CmdId {
        CMD_ID = 3760;
    }
}

message GetBattlePassThemeRsp {
    optional Retcode retcode = 1;
    optional uint32 id = 2;
    optional uint32 level = 3;
    optional uint32 exp = 4;
    optional uint32 has_take_reward_level = 5;
    optional uint32 begin_time = 6;
    optional uint32 end_time = 7;

    enum CmdId {
        CMD_ID = 3761;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetBbqActivityDataReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4250;
    }
}

message GetBbqActivityDataRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 bbq_level = 3;
    optional uint32 bbq_exp = 4;
    optional uint32 max_reward_taken_level = 5;
    optional uint32 can_use_bbq_count = 6;

    enum CmdId {
        CMD_ID = 4251;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetBingoActivityDataReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4157;
    }
}


message GetBingoActivityDataRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated BingoData bingo_data_list = 3;

    enum CmdId {
        CMD_ID = 4158;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetBlackListReq {
    optional bool is_only_uid = 1;

    enum CmdId {
        CMD_ID = 1594;
    }
}


message GetBlackListRsp {
    optional Retcode retcode = 1;
    repeated PlayerFriendBriefData black_list = 2;
    optional bool is_whole_data = 3;
    optional bool is_only_uid = 4;

    enum CmdId {
        CMD_ID = 1595;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetBlockZoneActivityReq {

    enum CmdId {
        CMD_ID = 4344;
    }
}

message GetBlockZoneActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 season_id = 2;
    optional uint32 tale_id = 3;

    enum CmdId {
        CMD_ID = 4345;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetBossRushActivityReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 496;
    }
}


message GetBossRushActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 phase_id = 3;
    repeated BossRushBuff buff_list = 4;

    enum CmdId {
        CMD_ID = 497;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        ACTIVITY_ERROR = 3;
    }
}

message GetBriefDataListReq {
    repeated uint32 uid_list = 1;

    enum CmdId {
        CMD_ID = 1374;
    }
}


message GetBriefDataListRsp {
    optional Retcode retcode = 1;
    repeated PlayerFriendBriefData uid_brief_data_list = 2;

    enum CmdId {
        CMD_ID = 1375;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        UID_NUM_LIMIT = 2;
        TOO_FREQUENT = 3;
    }
}

message GetBuffEffectReq {
    repeated uint32 effect_id_list = 1;

    enum CmdId {
        CMD_ID = 476;
    }
}


message GetBuffEffectRsp {
    optional Retcode retcode = 1;
    repeated BuffEffect effect_list = 2;
    repeated uint32 aura_effect_list = 3;

    enum CmdId {
        CMD_ID = 477;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ADD_FAIL = 2;
    }
}

message GetBulletinActivityMissionReq {
    repeated uint32 activity_id_list = 1;

    enum CmdId {
        CMD_ID = 4321;
    }
}


message GetBulletinActivityMissionRsp {
    optional Retcode retcode = 1;
    repeated BulletinMissionGroup mission_group_list = 2;

    enum CmdId {
        CMD_ID = 4322;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
    }
}

message GetBulletinReq {
    optional ReqBulletinType type = 1;
    repeated uint32 bulletin_id_list = 2;

    enum CmdId {
        CMD_ID = 137;
    }
    enum ReqBulletinType {
        BULLETIN_ALL = 0;
        BULLETIN_UPDATE_TIME = 1;
        BULLETIN_TITLE = 2;
        BULLETIN_CONTENT = 3;
    }
}


message GetBulletinRsp {
    optional Retcode retcode = 1;
    repeated Bulletin bulletin_list = 2;
    optional bool is_all = 3;

    enum CmdId {
        CMD_ID = 138;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetBulletinScoreActivityReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4163;
    }
}


message GetBulletinScoreActivityRsp {
    optional Retcode retcode = 1;
    repeated BulletinScoreActivity activity_list = 2;

    enum CmdId {
        CMD_ID = 4164;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetBurdenAlleviationReq {

    enum CmdId {
        CMD_ID = 4352;
    }
}


message GetBurdenAlleviationRsp {
    optional Retcode retcode = 1;
    optional BurdenAlleviationActivity activity_data = 2;

    enum CmdId {
        CMD_ID = 4353;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetCardProductInfoReq {

    enum CmdId {
        CMD_ID = 1142;
    }
}


message GetCardProductInfoRsp {
    optional Retcode retcode = 1;
    repeated CardProductInfo card_product_info_list = 2;

    enum CmdId {
        CMD_ID = 1143;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetChallengeStepBonusReq {
    optional uint32 step_id = 1;

    enum CmdId {
        CMD_ID = 1043;
    }
}


message GetChallengeStepBonusRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 1044;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STEP_ID_ERROR = 2;
        BONUS_HAS_TAKEN = 3;
        STEP_NOT_FINISH = 4;
        EQUIPMENT_FULL = 5;
        EQUIPMENT_MATERIAL_LIMIT = 6;
        EQUIPMENT_FRAGMENT_LIMIT = 7;
        EQUIPMENT_ELF_FRAGMENT_LIMIT = 8;
    }
}

message GetChallengeStepCompensationInfoReq {

    enum CmdId {
        CMD_ID = 1676;
    }
}


message GetChallengeStepCompensationInfoRsp {
    optional Retcode retcode = 1;
    repeated ChallengeStepCompensation compensation_list = 2;

    enum CmdId {
        CMD_ID = 1677;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetChallengeStepRewardReq {
    optional uint32 step_id = 1;

    enum CmdId {
        CMD_ID = 536;
    }
}


message GetChallengeStepRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 537;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STEP_ID_ERROR = 2;
        STEP_STATUS_ERROR = 3;
        EQUIPMENT_FULL = 4;
        EQUIPMENT_MATERIAL_LIMIT = 5;
        EQUIPMENT_FRAGMENT_LIMIT = 6;
        EQUIPMENT_ELF_FRAGMENT_LIMIT = 7;
    }
}

message GetChapterActivityDataReq {

    enum CmdId {
        CMD_ID = 4200;
    }
}


message GetChapterActivityDataRsp {
    optional Retcode retcode = 1;
    repeated ChapterActivity chapter_activity_list = 3;

    enum CmdId {
        CMD_ID = 4201;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetChapterCompensationInfoReq {
    optional uint32 chapter_id = 1;

    enum CmdId {
        CMD_ID = 1672;
    }
}


message GetChapterCompensationInfoRsp {
    optional Retcode retcode = 1;
    optional bool is_all = 2;
    repeated ChapterCompensationInfo compensate_list = 3;

    enum CmdId {
        CMD_ID = 1673;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetChatgroupHistoryChatMsgReq {
    optional uint32 chatgroup_id = 1;

    enum CmdId {
        CMD_ID = 2218;
    }
}


message GetChatgroupHistoryChatMsgRsp {
    optional Retcode retcode = 1;
    optional uint32 chatgroup_id = 2;
    repeated ChatMsg chat_msg_list = 3;

    enum CmdId {
        CMD_ID = 2219;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetChatgroupListReq {
    optional bool is_all = 1;
    repeated uint32 chatgroup_id_list = 2;

    enum CmdId {
        CMD_ID = 2204;
    }
}



message GetChatgroupListRsp {
    optional Retcode retcode = 1;
    optional bool is_all = 2;
    repeated Chatgroup chatgroup_list = 3;
    repeated ChatgroupInvite invite_list = 4;

    enum CmdId {
        CMD_ID = 2205;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetChatRedEnvelopeInfoReq {
    optional uint32 sender_uid = 1;
    optional uint32 red_envelope_id = 2;

    enum CmdId {
        CMD_ID = 1502;
    }
}


message GetChatRedEnvelopeInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 sender_uid = 2;
    optional uint32 red_envelope_id = 3;
    optional uint32 taken_num = 4;
    optional uint32 expire_time = 5;
    repeated TakeChatRedEnvelopePlayer take_red_envelope_list = 6;

    enum CmdId {
        CMD_ID = 1503;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetChatReportInfoReq {

    enum CmdId {
        CMD_ID = 1159;
    }
}

message GetChatReportInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 chat_forbid_finish_time = 2;
    optional uint32 chat_forbid_times = 3;
    optional uint32 lost_chat_credit = 4;

    enum CmdId {
        CMD_ID = 1160;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetChatworldListReq {
    optional uint32 start_id = 1;
    optional uint32 end_id = 2;
    optional uint32 scene_id = 3;

    enum CmdId {
        CMD_ID = 2411;
    }
}


message GetChatworldListRsp {
    optional Retcode retcode = 1;
    repeated ChatworldBrief chatworld_list = 2;
    optional uint32 show_max_id = 3;
    optional uint32 scene_id = 4;
    repeated uint32 redis_chatworld_list = 5;

    enum CmdId {
        CMD_ID = 2412;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetChatworldTreasureDataReq {
    optional uint32 chatworld_id = 1;
    optional uint32 cur_treasure_schedule_id = 2;

    enum CmdId {
        CMD_ID = 2415;
    }
}


message GetChatworldTreasureDataRsp {
    optional Retcode retcode = 1;
    optional uint32 chatworld_id = 2;
    repeated ChatworldTreasure chatworld_treasure_list = 3;

    enum CmdId {
        CMD_ID = 2416;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_CHATWORLD = 2;
    }
}

message GetClearStageActivityReq {

    enum CmdId {
        CMD_ID = 453;
    }
}


message GetClearStageActivityRsp {
    optional Retcode retcode = 1;
    optional ClearStageActivity activity = 2;

    enum CmdId {
        CMD_ID = 454;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message GetClientDataReq {
    optional ClientDataType type = 1;
    optional uint32 id = 2;

    enum CmdId {
        CMD_ID = 1586;
    }
}



message GetClientDataRsp {
    optional Retcode retcode = 1;
    optional ClientDataType type = 2;
    optional uint32 id = 3;
    repeated ClientData client_data_list = 4;

    enum CmdId {
        CMD_ID = 1587;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_FOUND = 2;
    }
}


message GetClientMailDataReq {
    optional uint32 start = 1;
    optional uint32 stop = 2;
    optional ClientMailFilterType filter_type = 3;

    enum CmdId {
        CMD_ID = 3800;
    }
}




message GetClientMailDataRsp {
    optional Retcode retcode = 1;
    repeated ClientMail mail_list = 2;
    optional bool is_end = 3;
    optional uint32 start = 5;
    repeated ClientMail notice_mail_list = 6;
    optional ClientMailFilterType filter_type = 7;
    optional ClientMailInfo client_mail_info = 8;

    enum CmdId {
        CMD_ID = 3801;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        POS_INVALID = 2;
        REPEATED_REQ = 3;
    }
}

message GetClientSettingReq {
    optional uint32 client_setting_type = 1;

    enum CmdId {
        CMD_ID = 1270;
    }
}




message GetClientSettingRsp {
    optional Retcode retcode = 1;
    optional uint32 client_setting_type = 2;
    optional bool is_weekly_guide_switch_on = 3;
    repeated SnsShowPriviledge sns_show_priviledge_list = 4;
    repeated AvatarArtifactSwitch avatar_artifact_switch_list = 5;
    repeated MasterPupilTagSwitch master_pupil_tag_switch_list = 6;

    enum CmdId {
        CMD_ID = 1272;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetCollaborationScheduleReq {

    enum CmdId {
        CMD_ID = 5831;
    }
}

message GetCollaborationScheduleRsp {
    optional Retcode retcode = 1;
    repeated Schedule schedule_list = 2;

    enum CmdId {
        CMD_ID = 5832;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
    message Schedule {
        optional uint32 id = 1;
        optional uint32 begin_time = 2;
        optional uint32 end_time = 3;
    }
}

message GetConfigReq {

    enum CmdId {
        CMD_ID = 110;
    }
}




message GetConfigRsp {
    optional Retcode retcode = 1;
    optional uint32 stamina_recover_config_time = 2;
    optional uint32 avatar_revive_hcoin_cost = 4;
    optional uint32 same_type_power_up_rate = 5;
    optional uint32 day_time_offset = 6;
    optional uint32 server_cur_time = 7;
    optional uint32 power_up_scoin_cost_rate = 8;
    optional uint32 max_friend_num = 9;
    optional uint32 endless_min_player_level = 10;
    optional uint32 avatar_max_add_goodfeel = 12;
    repeated AvatarCostPlusConfig avatar_cost_plus_config_list = 13;
    optional uint32 endless_use_item_cd_time = 14;
    optional uint32 disjoin_equipment_back_exp_percent = 15;
    repeated GachaTicket gacha_ticket_list = 31;
    optional string region_name = 32;
    optional uint32 min_invite_level = 33;
    repeated DiscountScheduleConfig discount_schedule_config_list = 35;
    optional uint32 island_event_refresh_interval = 36;
    optional uint32 spaceship_begin_time = 37;
    optional uint32 spaceship_end_time = 38;
    optional uint32 spaceship_id = 39;
    optional bool is_random_box_product_open = 40;
    optional uint32 scoin_limit = 41;
    optional uint32 friends_point_limit = 42;
    optional uint32 product_random_box_begin_time = 43;
    optional uint32 product_random_box_end_time = 44;
    optional uint32 week_day_activity_coin_item_id = 45;
    optional uint32 island_visit_max_help_num = 46;
    optional uint32 cost_senior_equip_after_cancel_protect_min_time_diff = 47;
    optional uint32 rogue_stage_cost_item_id = 48;
    optional uint32 rogue_stage_max_progress = 49;
    repeated BulletinActivityConfig bulletin_activity_list = 50;
    repeated ArmadaDiscoveryRewardConfig armada_discovery_reward_list = 51;
    optional uint32 rogue_stage_open_level = 52;
    optional uint32 armada_begin_time = 53;
    optional uint32 armada_end_time = 54;
    optional string armada_custom_content = 55;
    optional uint32 stigmata_rune_open_level = 56;
    optional uint32 stigmata_title_open_level = 57;
    optional uint32 stigmata_disjoin_title_back_exp_percent = 58;
    optional uint32 stigmata_promote_max_times = 59;
    optional uint32 stigmata_rune_combat_ratio = 60;
    optional uint32 stigmata_disjoin_back_exp_percent = 61;
    optional uint32 stigmata_refine_value_back_percent = 62;
    repeated uint32 stigmata_title_exp_material_list = 63;
    optional uint32 scoin_convert_per_exp = 64;
    optional uint32 mp_reset_skill_hcoin_cost = 65;
    optional uint32 mp_member_max_times_for_all_act = 66;
    optional uint32 mp_member_exhausted_drop_ratio = 67;
    repeated FriendBondLevelConfig friend_bond_level_config_list = 68;
    optional uint32 mp_punish_mp_exp_reduce_rate = 69;
    optional uint32 friend_assistant_add_bond = 70;
    optional uint32 armada_manage_mail_length = 72;
    optional uint32 armada_contact_length = 73;
    optional uint32 armada_manage_mail_cd = 74;
    optional uint32 armada_bulletin_length = 75;
    optional uint32 openworld_judge_para_type1 = 76;
    optional uint32 openworld_judge_para_type2 = 77;
    optional uint32 openworld_judge_para_type3 = 78;
    optional uint32 openworld_judge_para_type4 = 79;
    optional uint32 trial_avatar_player_min_level = 80;
    optional uint32 disjoin_equipment_max_batch_num = 81;
    optional uint32 equip_disjoint_unlock_level = 82;
    repeated uint32 stage_type_limit_avatar_fight_in_venture_list = 83;
    optional uint32 armada_boss_stage_open_level = 84;
    optional AntiCheatStageCheckConfig anti_cheat_stage_check_config = 85;
    optional bool is_can_gal_touch = 87;
    optional bool is_resistance_open = 88;
    optional uint32 next_day_begin_time = 90;

    enum CmdId {
        CMD_ID = 111;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
    message GachaTicket {
        optional uint32 material_id = 1;
        optional uint32 hcoin_cost = 2;
    }
    message DiscountScheduleConfig {
        optional uint32 type = 1;
        optional uint32 discount = 2;
        optional uint32 begin_time = 3;
        optional uint32 end_time = 4;
        repeated uint32 para_int_list = 5;
    }
    message FriendBondLevelConfig {
        optional uint32 level = 1;
        optional uint32 min_bond = 2;
        optional uint32 assist_cd_reduce_rate = 3;
        optional uint32 invite_add_friends_point = 4;
        optional uint32 extra_add_mp_exp_rate = 5;
        optional uint32 extra_mp_add_friends_point = 6;
    }
    message AntiCheatStageCheckConfig {
        repeated uint32 check_stage_id_list = 1;
        repeated uint32 check_stage_type_list = 2;
    }
}

message GetConsignedOrderDataReq {

    enum CmdId {
        CMD_ID = 2639;
    }
}


message GetConsignedOrderDataRsp {
    optional Retcode retcode = 1;
    optional uint32 progress = 2;
    repeated ConsignedOrder order_list = 3;
    optional uint32 cd_finish_time = 4;
    optional uint32 finish_order_times = 5;
    optional uint32 total_order_times = 6;
    optional uint32 armada_finish_times = 7;
    optional uint32 apply_order_times = 8;
    optional uint32 total_apply_times = 9;
    optional uint32 my_credit = 10;
    optional bool is_reward_taken = 11;

    enum CmdId {
        CMD_ID = 2640;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
    }
}

message GetConsignedRewardLogReq {

    enum CmdId {
        CMD_ID = 525;
    }
}


message GetConsignedRewardLogRsp {
    optional Retcode retcode = 1;
    repeated ConsignedRewardLog reward_log_list = 2;

    enum CmdId {
        CMD_ID = 526;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
    }
}

message GetConsignedRewardReq {

    enum CmdId {
        CMD_ID = 519;
    }
}


message GetConsignedRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData required_reward_list = 2;
    repeated RewardData optional_reward_list = 3;
    optional uint32 my_credit = 4;
    optional uint32 total_credit = 5;
    repeated uint32 my_optional_reward_list = 6;

    enum CmdId {
        CMD_ID = 520;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
    }
}

message GetContinuousRechargeActivityReq {

    enum CmdId {
        CMD_ID = 4167;
    }
}

message GetContinuousRechargeActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 progress = 3;
    optional uint32 today_vip_point = 4;
    repeated uint32 has_take_reward_progress_list = 5;
    optional uint32 last_refresh_time = 6;

    enum CmdId {
        CMD_ID = 4168;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetCurrencyExchangeInfoReq {

    enum CmdId {
        CMD_ID = 1480;
    }
}

message GetCurrencyExchangeInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 purple_jade_exchanged_num = 3;

    enum CmdId {
        CMD_ID = 1481;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetCustomHeadDataReq {

    enum CmdId {
        CMD_ID = 1523;
    }
}


message GetCustomHeadDataRsp {
    optional Retcode retcode = 1;
    optional bool is_all = 2;
    repeated CustomHead custom_head_list = 3;

    enum CmdId {
        CMD_ID = 1524;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetDanmakuBriefInfoReq {
    optional uint32 danmaku_slot = 1;

    enum CmdId {
        CMD_ID = 1547;
    }
}


message GetDanmakuBriefInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 danmaku_slot = 2;
    optional DanmakuSlotBriefInfo brief_info = 3;

    enum CmdId {
        CMD_ID = 1548;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        DANMAKU_CLOSED = 2;
    }
}

message GetDanmakuListReq {
    optional uint32 danmaku_slot = 1;
    optional uint32 start_idx = 2;
    optional uint32 end_idx = 3;

    enum CmdId {
        CMD_ID = 1545;
    }
}


message GetDanmakuListRsp {
    optional Retcode retcode = 1;
    optional uint32 danmaku_slot = 2;
    optional uint32 danmaku_slot_status = 3;
    optional uint32 start_idx = 4;
    optional uint32 end_idx = 5;
    repeated DanmakuContent danmaku_list = 6;

    enum CmdId {
        CMD_ID = 1546;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        DANMAKU_CLOSED = 2;
    }
}

message GetDeleteMaterialReq {

    enum CmdId {
        CMD_ID = 500;
    }
}



message GetDeleteMaterialRsp {
    optional Retcode retcode = 1;
    repeated Material materials = 2;
    repeated GenericItemNum return_item_list = 3;

    enum CmdId {
        CMD_ID = 501;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetDepotFurnitureReq {
    repeated uint32 furniture_id_list = 1;

    enum CmdId {
        CMD_ID = 607;
    }
}


message GetDepotFurnitureRsp {
    optional Retcode retcode = 1;
    repeated DepotFurniture depot_furniture_list = 2;

    enum CmdId {
        CMD_ID = 608;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetDispatchReq {

    enum CmdId {
        CMD_ID = 133;
    }
}

message GetDispatchRsp {

    enum CmdId {
        CMD_ID = 134;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CLIENT_VERSION_ERROR = 2;
    }
}

message GetDLCAvatarReq {

    enum CmdId {
        CMD_ID = 3559;
    }
}


message GetDLCAvatarRsp {
    optional Retcode retcode = 1;
    repeated DLCAvatar avatar_list = 2;

    enum CmdId {
        CMD_ID = 3560;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetDLCReq {

    enum CmdId {
        CMD_ID = 3550;
    }
}


message GetDLCRsp {
    optional Retcode retcode = 1;
    optional string name = 2;
    optional uint32 level = 3;
    optional uint32 exp = 4;
    optional uint32 has_take_reward_level = 5;
    repeated DLCSupportNPC support_npc_list = 6;
    repeated uint32 finished_dialog_id_list = 7;

    enum CmdId {
        CMD_ID = 3551;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetDLCTowerRankReq {

    enum CmdId {
        CMD_ID = 3571;
    }
}


message GetDLCTowerRankRsp {
    optional Retcode retcode = 1;
    optional RankShowData rank_data = 2;

    enum CmdId {
        CMD_ID = 3572;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetDLCTowerReq {

    enum CmdId {
        CMD_ID = 3574;
    }
}



message GetDLCTowerRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 progress = 3;
    repeated DLCTowerAvatarInfo avatar_info_list = 4;
    optional uint32 tower_cost_time = 5;
    optional uint32 max_progress = 6;
    optional uint32 avatar_revive_times = 7;
    repeated DLCTowerFloorMaxScore floor_max_score_list = 8;

    enum CmdId {
        CMD_ID = 3575;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}


message GetDormDataReq {
    optional DormDataType data_type = 1;

    enum CmdId {
        CMD_ID = 601;
    }
}






message GetDormDataRsp {
    optional Retcode retcode = 1;
    optional DormDataType data_type = 2;
    repeated DormHouse house_list = 3;
    repeated uint32 finish_talk_plot_id_list = 4;
    repeated DepotFurniture depot_furniture_list = 5;
    optional uint32 level_up_house_id = 6;
    optional uint32 level_up_end_time = 7;
    optional uint32 level_up_end_house_id = 8;
    optional DormFacilityData facility_data = 9;
    repeated DormEvent event_list = 10;
    optional uint32 show_house = 11;
    optional uint32 show_room = 12;
    optional uint32 visit_avatar = 13;
    optional bool is_allow_visit = 14;
    optional uint32 last_take_dorm_daily_stamina_time = 15;
    repeated uint32 unlock_avatar_list = 16;

    enum CmdId {
        CMD_ID = 602;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetDormHouseReq {
    repeated uint32 house_id_list = 1;

    enum CmdId {
        CMD_ID = 603;
    }
}


message GetDormHouseRsp {
    optional Retcode retcode = 1;
    repeated DormHouse house_list = 2;

    enum CmdId {
        CMD_ID = 604;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HOUSE_NOT_EXIST = 2;
    }
}

message GetDormSnsDataReq {

    enum CmdId {
        CMD_ID = 637;
    }
}


message GetDormSnsDataRsp {
    optional Retcode retcode = 1;
    optional uint32 be_liked_num = 2;
    repeated DormVisitRecord record_list = 3;
    optional uint32 be_visit_num = 4;

    enum CmdId {
        CMD_ID = 638;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LIMIT = 2;
    }
}

message GetDormVoteDataReq {

    enum CmdId {
        CMD_ID = 1138;
    }
}

message GetDormVoteDataRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional Status status = 3;
    optional uint32 end_time = 4;
    optional string url = 5;

    enum CmdId {
        CMD_ID = 1139;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
    enum Status {
        NOT_START = 0;
        VOTING = 1;
        REVIEWING = 2;
        DISPLAYING = 3;
    }
}

message GetDropLimitActivityReq {

    enum CmdId {
        CMD_ID = 4297;
    }
}


message GetDropLimitActivityRsp {
    optional Retcode retcode = 1;
    repeated DropLimitActivity drop_limit_activity_list = 2;

    enum CmdId {
        CMD_ID = 4298;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetElfDataReq {

    enum CmdId {
        CMD_ID = 2100;
    }
}




message GetElfDataRsp {
    optional Retcode retcode = 1;
    repeated Elf elf_list = 2;
    repeated ElfFragment elf_fragment_list = 3;
    repeated ElfTalent elf_talent_list = 4;
    optional bool is_take_compensation = 5;

    enum CmdId {
        CMD_ID = 2101;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetEliteChapterCompensationInfoReq {
    optional uint32 chapter_id = 1;

    enum CmdId {
        CMD_ID = 1636;
    }
}


message GetEliteChapterCompensationInfoRsp {
    optional Retcode retcode = 1;
    repeated EliteChapterCompensationInfo chapter_list = 2;

    enum CmdId {
        CMD_ID = 1637;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetEmojiDataReq {

    enum CmdId {
        CMD_ID = 1245;
    }
}

message GetEmojiDataRsp {
    optional Retcode retcode = 1;
    repeated uint32 emoji_id_list = 2;
    optional bool is_all = 3;

    enum CmdId {
        CMD_ID = 1246;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetEndlessDataReq {
    optional uint32 level = 1;

    enum CmdId {
        CMD_ID = 3400;
    }
}






message GetEndlessDataRsp {
    optional Retcode retcode = 1;
    optional uint32 group_id = 2;
    optional uint32 group_level = 3;
    optional uint32 begin_time = 4;
    optional uint32 end_time = 5;
    optional uint32 close_time = 6;
    repeated EndlessPlayerData endless_data_list = 7;
    repeated PlayerFriendBriefData brief_data_list = 8;
    repeated EndlessItem item_list = 9;
    repeated EndlessItemFrozenInfo item_frozen_list = 10;
    repeated EndlessWarInfo war_info_list = 11;
    optional uint32 uid = 12;
    optional uint32 nodeserver_session_id = 13;
    optional uint32 is_just_join = 14;
    repeated uint32 cur_progress_avatar_id_list = 15;
    repeated uint32 cur_progress_item_id_list = 16;
    optional uint32 random_seed = 17;
    optional uint32 cur_top_group_level = 18;
    optional uint32 top_group_player_num = 19;
    optional uint32 top_group_promote_unlock_player_num = 20;
    optional uint32 sin_type = 21;
    optional uint32 burst_bomb_num = 22;
    optional uint32 bombed_num = 23;
    repeated EndlessItem target_item_list = 24;
    optional uint32 avg_player_level = 25;
    optional uint32 hard_level = 26;

    enum CmdId {
        CMD_ID = 3401;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
        NO_ENDLESS = 3;
        URGENCY_STOP = 4;
    }
}

message GetEndlessStatusReq {
    optional uint32 level = 1;
    optional bool is_finish_front = 2;

    enum CmdId {
        CMD_ID = 3432;
    }
}


message GetEndlessStatusRsp {
    optional Retcode retcode = 1;
    optional EndlessStatus cur_status = 2;
    repeated EndlessStatus next_status_list = 3;
    optional uint32 selected_endless_type = 4;

    enum CmdId {
        CMD_ID = 3433;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetEquipmentBackReq {

    enum CmdId {
        CMD_ID = 3661;
    }
}


message GetEquipmentBackRsp {
    optional Retcode retcode = 1;
    repeated EquipmentForgeConsume consume_equip_list = 2;

    enum CmdId {
        CMD_ID = 3662;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetEquipmentDataReq {
    repeated uint32 weapon_unique_id_list = 1;
    repeated uint32 stigmata_unique_id_list = 2;
    repeated uint32 material_id_list = 3;
    repeated uint32 mecha_unique_id_list = 4;

    enum CmdId {
        CMD_ID = 26;
    }
}





message GetEquipmentDataRsp {
    optional Retcode retcode = 1;
    repeated Weapon weapon_list = 2;
    repeated Stigmata stigmata_list = 3;
    repeated Material material_list = 4;
    optional bool is_all = 5;
    repeated Mecha mecha_list = 6;
    optional uint32 vitality_value = 7;

    enum CmdId {
        CMD_ID = 27;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetEquipmentForgeDataReq {

    enum CmdId {
        CMD_ID = 3650;
    }
}


message GetEquipmentForgeDataRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    repeated EquipmentForge has_forge_list = 3;
    repeated uint32 forge_list = 4;

    enum CmdId {
        CMD_ID = 3651;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetExaminationActivityReq {

    enum CmdId {
        CMD_ID = 4323;
    }
}


message GetExaminationActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 cur_examination_idx = 3;
    optional uint32 finished_round = 4;
    repeated Examination examination_list = 5;
    optional uint32 examination_stage_id = 6;

    enum CmdId {
        CMD_ID = 4324;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetExBossInfoReq {

    enum CmdId {
        CMD_ID = 510;
    }
}


message GetExBossInfoRsp {
    optional Retcode retcode = 1;
    optional ExBossInfo boss_info = 2;

    enum CmdId {
        CMD_ID = 511;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        FEATURE_CLOSED = 3;
    }
}

message GetExBossRankReq {
    optional uint32 rank_id = 1;
    optional uint32 boss_id = 2;

    enum CmdId {
        CMD_ID = 527;
    }
}


message GetExBossRankRsp {
    optional Retcode retcode = 1;
    optional RankShowData rank_data = 2;
    optional uint32 rank_id = 3;
    optional bool is_filtered = 4;
    optional uint32 boss_id = 5;

    enum CmdId {
        CMD_ID = 528;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        RANK_ERROR = 3;
        NOT_JOIN = 4;
        SCHEDULE_DISMATCH = 5;
        FEATURE_CLOSED = 6;
    }
}

message GetExBossScheduleReq {

    enum CmdId {
        CMD_ID = 508;
    }
}

message GetExBossScheduleRsp {
    optional Retcode retcode = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    optional uint32 min_level = 4;
    optional string image_path = 5;
    optional uint32 schedule_id = 6;
    optional uint32 rank_id = 7;

    enum CmdId {
        CMD_ID = 509;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FEATURE_CLOSED = 2;
    }
}

message GetExtractReforgeActivityReq {

    enum CmdId {
        CMD_ID = 3659;
    }
}



message GetExtractReforgeActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    optional ExtractEquipmentActivity extract_equipment_activity = 4;
    optional BackEquipmentActivity back_equipment_activity = 5;

    enum CmdId {
        CMD_ID = 3660;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetExtraStoryAchieveDataReq {
    optional uint32 chapter_id = 1;

    enum CmdId {
        CMD_ID = 235;
    }
}


message GetExtraStoryAchieveDataRsp {
    optional Retcode retcode = 1;
    repeated ExtraStoryAchieve achieve_list = 2;

    enum CmdId {
        CMD_ID = 236;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CHAPTER_NOT_EXIST = 2;
    }
}

message GetExtraStoryAchieveRewardReq {
    optional uint32 achieve_id = 1;

    enum CmdId {
        CMD_ID = 237;
    }
}


message GetExtraStoryAchieveRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 achieve_id = 2;
    repeated RewardData reward_list = 3;

    enum CmdId {
        CMD_ID = 238;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACHIEVE_NOT_EXIST = 2;
        ACHIEVE_NOT_FINISH = 3;
        ACHIEVE_HAS_TAKEN = 4;
    }
}

message GetExtraStoryActivityActReq {
    optional uint32 chapter_id = 1;

    enum CmdId {
        CMD_ID = 233;
    }
}


message GetExtraStoryActivityActRsp {
    optional Retcode retcode = 1;
    repeated ExtraStoryAct act_list = 2;

    enum CmdId {
        CMD_ID = 234;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CHAPTER_NOT_EXIST = 2;
    }
}

message GetExtraStoryChallengeModeDataReq {
    optional uint32 chapter_id = 1;

    enum CmdId {
        CMD_ID = 502;
    }
}


message GetExtraStoryChallengeModeDataRsp {
    optional Retcode retcode = 1;
    optional uint32 choose_difficulty = 2;
    optional bool is_can_reset = 3;
    repeated ChallengeModeArea challenge_area_list = 4;
    optional uint32 chapter_id = 5;

    enum CmdId {
        CMD_ID = 503;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        EXTRA_STORY_NOT_OPEN = 3;
    }
}

message GetExtraStoryDataReq {

    enum CmdId {
        CMD_ID = 231;
    }
}


message GetExtraStoryDataRsp {
    optional Retcode retcode = 1;
    repeated ExtraStoryChapter chapter_list = 2;
    optional bool is_dynamic_hard_lv = 3;
    repeated uint32 chapter_key_list = 4;
    repeated uint32 taken_reward_line_id_list = 5;
    optional bool is_open_enhance = 6;
    repeated uint32 taken_enhance_reward_act_id_list = 7;

    enum CmdId {
        CMD_ID = 232;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetFarmActivityDataReq {

    enum CmdId {
        CMD_ID = 1385;
    }
}



message GetFarmActivityDataRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 farm_level = 3;
    optional uint32 farm_exp = 4;
    repeated FarmSlotDetail slot_detail_list = 5;
    repeated FarmProduceMaterialDetail produce_material_list = 6;

    enum CmdId {
        CMD_ID = 1386;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
    }
}

message GetFastPassDataReq {
    optional uint32 fast_pass_type = 1;

    enum CmdId {
        CMD_ID = 1555;
    }
}

message GetFastPassDataRsp {
    optional Retcode retcode = 1;
    optional uint32 fast_pass_type = 2;
    optional uint32 use_times = 3;

    enum CmdId {
        CMD_ID = 1556;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_EXIST = 2;
    }
}

message GetFinishGuideDataReq {

    enum CmdId {
        CMD_ID = 127;
    }
}

message GetFinishGuideDataRsp {
    optional Retcode retcode = 1;
    repeated uint32 guide_id_list = 2;

    enum CmdId {
        CMD_ID = 128;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetFlopActivityDataReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4173;
    }
}


message GetFlopActivityDataRsp {
    optional Retcode retcode = 1;
    optional FlopActivityData activity_data = 2;

    enum CmdId {
        CMD_ID = 4174;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetFrameDataReq {

    enum CmdId {
        CMD_ID = 590;
    }
}


message GetFrameDataRsp {
    optional Retcode retcode = 1;
    repeated FrameData frame_list = 2;
    optional bool is_all = 3;

    enum CmdId {
        CMD_ID = 591;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetFriendListReq {

    enum CmdId {
        CMD_ID = 64;
    }
}


message GetFriendListRsp {
    optional Retcode retcode = 1;
    repeated PlayerFriendBriefData friend_list = 2;
    optional bool is_whole_data = 3;
    optional uint32 assistant_num = 4;

    enum CmdId {
        CMD_ID = 65;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetFriendRemarkListReq {

    enum CmdId {
        CMD_ID = 974;
    }
}


message GetFriendRemarkListRsp {
    optional Retcode retcode = 1;
    repeated FriendRemark friend_remark_list = 2;

    enum CmdId {
        CMD_ID = 975;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetGalInteractTriggerEventReq {
    optional uint32 avatar_id = 1;
    repeated uint32 event_id_list = 2;

    enum CmdId {
        CMD_ID = 813;
    }
}

message GetGalInteractTriggerEventRsp {
    optional Retcode retcode = 1;
    optional uint32 event_id = 2;
    optional uint32 avatar_id = 3;

    enum CmdId {
        CMD_ID = 814;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_SUCH_AVATAR = 2;
    }
}

message GetGameserverReq {

    enum CmdId {
        CMD_ID = 2;
    }
}

message GetGameserverRsp {

    enum CmdId {
        CMD_ID = 3;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SERVER_STOP = 2;
        VERSION_ERROR = 3;
        FORCE_UPDATE = 4;
    }
}

message GetGardenActivityReq {

    enum CmdId {
        CMD_ID = 4287;
    }
}


message GetGardenActivityRsp {
    optional Retcode retcode = 1;
    optional GardenActivityData garden = 2;

    enum CmdId {
        CMD_ID = 4288;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetGardenScheduleReq {

    enum CmdId {
        CMD_ID = 4295;
    }
}

message GetGardenScheduleRsp {
    optional Retcode retcode = 1;
    optional uint32 garden_id = 2;
    optional uint32 begin_time = 3;
    optional uint32 end_time = 4;
    optional bool is_garden_opened = 5;

    enum CmdId {
        CMD_ID = 4296;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetGlobalWarActivityReq {

    enum CmdId {
        CMD_ID = 3950;
    }
}


message GetGlobalWarActivityRsp {
    optional Retcode retcode = 1;
    optional GlobalWarActivity global_war_activity = 2;

    enum CmdId {
        CMD_ID = 3951;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetGobackReq {

    enum CmdId {
        CMD_ID = 364;
    }
}





message GetGobackRsp {
    optional Retcode retcode = 1;
    optional uint32 goback_end_time = 2;
    optional uint32 login_days = 3;
    repeated uint32 has_take_days_reward_list = 4;
    repeated uint32 has_take_days_bonus_reward_list = 5;
    repeated GobackActivity goback_activity_list = 6;
    optional uint32 score = 7;
    repeated uint32 has_take_score_reward_list = 8;
    optional uint32 schedule_id = 9;
    repeated GobackActivityLoginReward login_reward_list = 10;
    optional GobackFund fund = 11;
    optional GobackGrowUpActivity goback_grow_up_activity = 12;

    enum CmdId {
        CMD_ID = 365;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetGodWarReq {
    optional uint32 god_war_id = 1;

    enum CmdId {
        CMD_ID = 6150;
    }
}


message GetGodWarRsp {
    optional Retcode retcode = 1;
    repeated GodWar god_war_list = 2;

    enum CmdId {
        CMD_ID = 6151;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetGrandKeyReq {
    repeated uint32 key_id_list = 1;

    enum CmdId {
        CMD_ID = 506;
    }
}


message GetGrandKeyRsp {
    optional Retcode retcode = 1;
    repeated GrandKey key_list = 2;
    optional bool is_all = 3;

    enum CmdId {
        CMD_ID = 507;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetGratuityActivityReq {
    repeated uint32 stage_unique_id_list = 1;
    repeated uint32 invite_stage_unique_id_list = 2;

    enum CmdId {
        CMD_ID = 4100;
    }
}


message GetGratuityActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 cur_schedule_id = 2;
    repeated GratuityStage stage_list = 3;
    optional uint32 today_left_free_stage_num = 4;
    repeated GratuityStage invite_stage_list = 5;

    enum CmdId {
        CMD_ID = 4101;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetGratuityBattleHistoryReq {
    repeated uint32 stage_unique_id_list = 1;

    enum CmdId {
        CMD_ID = 4108;
    }
}


message GetGratuityBattleHistoryRsp {
    optional Retcode retcode = 1;
    repeated GratuityBattle battle_list = 2;

    enum CmdId {
        CMD_ID = 4109;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetGratuityStageListReq {
    repeated uint32 stage_unique_id_list = 1;
    repeated uint32 stage_group_list = 2;

    enum CmdId {
        CMD_ID = 4116;
    }
}


message GetGratuityStageListRsp {
    optional Retcode retcode = 1;
    repeated GratuityStage stage_list = 2;

    enum CmdId {
        CMD_ID = 4117;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_STAGE = 2;
    }
}

message GetGuideRewardReq {
    optional uint32 guide_id = 1;

    enum CmdId {
        CMD_ID = 185;
    }
}


message GetGuideRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 186;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        GUIDE_ERROR = 2;
        REWARD_EMPTY = 3;
    }
}

message GetHasGotFurnitureIdListReq {

    enum CmdId {
        CMD_ID = 619;
    }
}

message GetHasGotFurnitureIdListRsp {
    optional Retcode retcode = 1;
    repeated uint32 furniture_id_list = 2;
    repeated uint32 has_unlock_furniture_id_list = 3;

    enum CmdId {
        CMD_ID = 620;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetHasGotItemIdListReq {

    enum CmdId {
        CMD_ID = 104;
    }
}

message GetHasGotItemIdListRsp {
    optional Retcode retcode = 1;
    repeated uint32 item_id_list = 2;

    enum CmdId {
        CMD_ID = 105;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetHaveTakenShareRewardReq {

    enum CmdId {
        CMD_ID = 4239;
    }
}


message GetHaveTakenShareRewardRsp {
    optional Retcode retcode = 1;
    repeated ShareRewardRecord share_reward_record_list = 2;

    enum CmdId {
        CMD_ID = 4240;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetInviteActivityInviteeDataReq {

    enum CmdId {
        CMD_ID = 1694;
    }
}


message GetInviteActivityInviteeDataRsp {
    optional Retcode retcode = 1;
    repeated InviteeActivity invitee_activity_info_list = 2;

    enum CmdId {
        CMD_ID = 1695;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FEATURE_CLOSED = 2;
    }
}

message GetInviteActivityInviterDataReq {

    enum CmdId {
        CMD_ID = 1690;
    }
}


message GetInviteActivityInviterDataRsp {
    optional Retcode retcode = 1;
    optional string my_invite_code = 2;
    repeated InviterActivity inviter_activity_info_list = 3;

    enum CmdId {
        CMD_ID = 1691;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
        FEATURE_CLOSED = 3;
    }
}

message GetInviteeFriendReq {

    enum CmdId {
        CMD_ID = 225;
    }
}


message GetInviteeFriendRsp {
    optional Retcode retcode = 1;
    optional string invitee_code = 2;
    repeated InviteeFriendRewardData invitee_reward_list = 3;

    enum CmdId {
        CMD_ID = 226;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
    }
}

message GetInviteFriendReq {

    enum CmdId {
        CMD_ID = 223;
    }
}



message GetInviteFriendRsp {
    optional Retcode retcode = 1;
    optional string my_invite_code = 2;
    optional uint32 has_invite_num = 3;
    repeated InviteFriendRewardData my_invite_reward_list = 4;
    optional InviteActivityData invite_activity = 5;

    enum CmdId {
        CMD_ID = 224;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
    }
}

message GetIslandEventReq {

    enum CmdId {
        CMD_ID = 241;
    }
}


message GetIslandEventRsp {
    optional Retcode retcode = 1;
    repeated IslandAvatarPos avatar_pos_list = 2;

    enum CmdId {
        CMD_ID = 242;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetJigsawActivityReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4273;
    }
}


message GetJigsawActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated JigsawData jigsaw_list = 3;

    enum CmdId {
        CMD_ID = 4274;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}


message GetKingdomWarReq {
    optional KingdomWarJoinData join_data = 1;

    enum CmdId {
        CMD_ID = 3050;
    }
}


message GetKingdomWarRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 display_begin_time = 3;
    optional uint32 display_end_time = 4;
    optional uint32 begin_time = 5;
    optional uint32 end_time = 6;
    optional KingdomWarData kingdom_war = 7;
    optional uint32 kingdom_id = 8;
    optional uint32 activity_stamina = 9;
    optional uint32 last_recover_stamina_time = 10;

    enum CmdId {
        CMD_ID = 3051;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetLastEndlessRewardDataReq {

    enum CmdId {
        CMD_ID = 3406;
    }
}



message GetLastEndlessRewardDataRsp {
    optional Retcode retcode = 1;
    optional uint32 begin_time = 2;
    optional uint32 group_level = 3;
    optional uint32 rank = 4;
    optional uint32 progress_or_score = 5;
    optional EndlessRewardType reward_type = 6;
    optional uint32 reward_id = 7;
    repeated RewardData reward_list = 8;
    optional uint32 cur_group_level = 9;
    optional uint32 type = 10;

    enum CmdId {
        CMD_ID = 3407;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_JOIN = 2;
    }
}

message GetLobbyStatReq {
    repeated uint32 stage_id_list = 1;

    enum CmdId {
        CMD_ID = 1102;
    }
}


message GetLobbyStatRsp {
    optional Retcode retcode = 1;
    repeated LobbyStat lobby_stat_list = 2;
    optional LobbyStat lobby_total_stat = 3;

    enum CmdId {
        CMD_ID = 1103;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetLoginActivityReq {

    enum CmdId {
        CMD_ID = 4192;
    }
}


message GetLoginActivityRsp {
    optional Retcode retcode = 1;
    repeated LoginActivityData login_list = 2;

    enum CmdId {
        CMD_ID = 4193;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_BEGIN = 2;
        LEVEL_LACK = 3;
    }
}

message GetLoginMissionActivityReq {

    enum CmdId {
        CMD_ID = 4299;
    }
}


message GetLoginMissionActivityRsp {
    optional Retcode retcode = 1;
    repeated uint32 has_finished_activity_list = 2;
    repeated LoginMissionActivity activity_list = 3;

    enum CmdId {
        CMD_ID = 4300;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetLotteryActivityReq {

    enum CmdId {
        CMD_ID = 4177;
    }
}


message GetLotteryActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 cur_group_id = 2;
    repeated LotteryData lottery_data_list = 3;

    enum CmdId {
        CMD_ID = 4178;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}


message GetMailAttachmentReq {
    repeated MailKey mail_key_list = 1;
    optional bool is_show_attachment = 2;

    enum CmdId {
        CMD_ID = 86;
    }
}



message GetMailAttachmentRsp {
    optional Retcode retcode = 1;
    repeated MailKey succ_mail_key_list = 2;
    optional bool is_show_attachment = 3;
    optional MailAttachment mail_attachment = 4;

    enum CmdId {
        CMD_ID = 87;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetMailDataReq {

    enum CmdId {
        CMD_ID = 84;
    }
}


message GetMailDataRsp {
    optional Retcode retcode = 1;
    repeated Mail mail_list = 2;
    optional bool is_all = 3;

    enum CmdId {
        CMD_ID = 85;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetMainDataReq {
    repeated DataType type_list = 1;

    enum CmdId {
        CMD_ID = 10;
    }
    enum DataType {
        ALL = 0;
        NICKNAME = 2;
        LEVEL = 3;
        EXP = 4;
        HCOIN = 5;
        SCOIN = 6;
        STAMINA = 7;
        STAMINA_RECOVER_LEFT_TIME = 8;
        STAMINA_RECOVER_CONFIG_TIME = 9;
        EQUIPMENT_SIZE_LIMIT = 14;
        SELF_DESC = 16;
        PAY_HCOIN = 17;
        FREE_HCOIN = 18;
        ASSISTANT_AVATAR_ID = 19;
        IS_ALLOW_COST_SENIOR_EQUIP_ON_CUR_DEVICE = 20;
        BIRTHDAY = 21;
        RECHARGE_PRICE = 22;
        WAIT_DEL_HCOIN = 23;
        ON_MEDAL_ID = 24;
        ANTI_ADDICT = 25;
        USE_FRAME_ID = 26;
        MCOIN = 27;
        PANEL_ACTIVITY = 28;
        VIDEO_POPUP = 29;
        ON_PHONE_PENDANT_ID = 30;
        STORE_EVALUATE = 31;
        CHATWORLD_ACTIVITY = 32;
        LEVEL_LOCK = 33;
        WARSHIP_AVATAR = 35;
        USE_CUSTOM_HEAD = 36;
        TOTAL_LOGIN_DAYS = 37;
        WARSHIP_THEME = 38;
        WAIT_DEL_MATERIAL = 39;
    }
}








message GetMainDataRsp {
    optional Retcode retcode = 1;
    optional string nickname = 2;
    optional uint32 level = 3;
    optional uint32 exp = 4;
    optional uint32 hcoin = 5;
    optional uint32 scoin = 6;
    optional uint32 stamina = 7;
    optional uint32 stamina_recover_left_time = 8;
    optional uint32 stamina_recover_config_time = 9;
    optional uint32 equipment_size_limit = 14;
    optional string self_desc = 16;
    optional uint32 pay_hcoin = 17;
    optional uint32 free_hcoin = 18;
    optional uint32 assistant_avatar_id = 19;
    optional bool is_allow_cost_senior_equip_on_cur_device = 20;
    optional uint32 birthday = 21;
    optional uint32 month_recharge_price = 22;
    optional uint32 wait_del_hcoin = 23;
    optional uint32 on_medal_id = 24;
    optional AntiAddict anti_addict = 25;
    optional uint32 today_recharge_price = 26;
    optional uint32 use_frame_id = 27;
    optional bool is_all = 28;
    optional uint32 mcoin = 29;
    repeated uint32 open_panel_activity_list = 30;
    repeated VideoPopupData video_popup_list = 31;
    optional uint32 on_phone_pendant_id = 32;
    optional uint32 next_evaluate_time = 33;
    optional ChatworldActivityInfo chatworld_activity_info = 34;
    optional uint32 level_lock_id = 35;
    optional WarshipAvatarData warship_avatar = 37;
    optional uint32 custom_head_id = 38;
    optional uint32 total_login_days = 39;
    optional uint32 register_time = 40;
    optional WarshipThemeData warship_theme = 41;
    repeated WaitDelMaterialData wait_del_material_list = 42;
    optional Medal on_medal = 43;

    enum CmdId {
        CMD_ID = 11;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetMasterFameRewardReq {
    optional uint32 level = 1;

    enum CmdId {
        CMD_ID = 576;
    }
}



message GetMasterFameRewardRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    optional uint32 level = 2;
    repeated RewardData reward_list = 3;

    enum CmdId {
        CMD_ID = 577;
    }
}


message GetMasterPupilApplyReq {
    optional MasterPupilType type = 1;
    optional uint32 time = 2;

    enum CmdId {
        CMD_ID = 653;
    }
}




message GetMasterPupilApplyRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    optional MasterPupilType type = 2;
    repeated MasterPupilApplyMsg msg_list = 3;
    repeated MasterPupilApplyMsg send_msg_list = 4;

    enum CmdId {
        CMD_ID = 654;
    }
}

message GetMasterPupilCardReq {

    enum CmdId {
        CMD_ID = 587;
    }
}



message GetMasterPupilCardRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    optional MasterPupilCard card = 2;

    enum CmdId {
        CMD_ID = 588;
    }
}

message GetMasterPupilDataReq {
    optional uint32 type = 1;
    optional uint32 time = 2;

    enum CmdId {
        CMD_ID = 568;
    }
}



message GetMasterPupilDataRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    optional uint32 type = 2;
    repeated MasterPupilData data_list = 3;

    enum CmdId {
        CMD_ID = 569;
    }
}


message GetMasterPupilMainDataReq {
    optional MasterPupilType type = 1;

    enum CmdId {
        CMD_ID = 657;
    }
}





message GetMasterPupilMainDataRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    optional MasterPupilType type = 2;
    optional MasterMainData master = 3;
    optional PupilMainData pupil = 4;

    enum CmdId {
        CMD_ID = 658;
    }
}

message GetMasterRankReq {

    enum CmdId {
        CMD_ID = 662;
    }
}



message GetMasterRankRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    optional RankShowData rank_data = 2;
    optional uint32 refresh_time = 3;

    enum CmdId {
        CMD_ID = 663;
    }
}

message GetMatrixFloorReq {
    optional uint32 floor_id = 1;

    enum CmdId {
        CMD_ID = 2322;
    }
}



message GetMatrixFloorRsp {
    optional Retcode retcode = 1;
    optional MatrixFloorBriefInfo floor_brief_info = 2;
    optional MatrixFloorMapInfo floor_map_info = 3;

    enum CmdId {
        CMD_ID = 2323;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetMatrixReq {

    enum CmdId {
        CMD_ID = 2320;
    }
}


message GetMatrixRsp {
    optional Retcode retcode = 1;
    repeated MatrixFloorBriefInfo floor_brief_info_list = 2;
    optional uint32 cur_floor_id = 3;

    enum CmdId {
        CMD_ID = 2321;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetMedalDataReq {
    repeated uint32 medal_id_list = 1;

    enum CmdId {
        CMD_ID = 449;
    }
}


message GetMedalDataRsp {
    optional Retcode retcode = 1;
    repeated Medal medal_list = 2;
    optional bool is_all = 3;

    enum CmdId {
        CMD_ID = 450;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetMiniRankReq {
    optional uint32 type = 1;
    optional uint32 stage_id = 2;
    optional uint32 activity_id = 3;
    optional uint32 avatar_id = 4;
    optional uint32 rank_id = 5;
    optional uint32 challenge_id = 6;

    enum CmdId {
        CMD_ID = 1603;
    }
}


message GetMiniRankRsp {
    optional Retcode retcode = 1;
    optional uint32 type = 2;
    optional uint32 stage_id = 3;
    optional RankShowData rank_data = 4;
    optional uint32 activity_id = 5;
    optional uint32 avatar_id = 6;
    optional uint32 challenge_id = 7;

    enum CmdId {
        CMD_ID = 1604;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetMinuteStageReq {

    enum CmdId {
        CMD_ID = 542;
    }
}


message GetMinuteStageRsp {
    optional Retcode retcode = 1;
    optional bool is_open = 2;
    repeated MinuteStage stage_list = 3;

    enum CmdId {
        CMD_ID = 543;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetMinuteTimesReq {

    enum CmdId {
        CMD_ID = 544;
    }
}

message GetMinuteTimesRsp {
    optional Retcode retcode = 1;
    optional uint32 left_times = 2;
    optional uint32 recover_time = 3;

    enum CmdId {
        CMD_ID = 545;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetMissionDataReq {

    enum CmdId {
        CMD_ID = 112;
    }
}




message GetMissionDataRsp {
    optional Retcode retcode = 1;
    repeated Mission mission_list = 2;
    optional bool is_all = 7;
    optional bool is_in_activity = 8;
    optional ChallengeMissionData challenge_mission = 9;
    repeated uint32 close_mission_list = 10;
    optional MainlineStepMission mainline_step = 11;

    enum CmdId {
        CMD_ID = 113;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetMissionGroupMainInfoReq {

    enum CmdId {
        CMD_ID = 4346;
    }
}

message GetMissionGroupMainInfoRsp {
    optional Retcode retcode = 1;
    repeated uint32 has_take_reward_mission_group_list = 2;

    enum CmdId {
        CMD_ID = 4347;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetMissionRewardReq {
    repeated uint32 mission_id_list = 1;

    enum CmdId {
        CMD_ID = 114;
    }
}


message GetMissionRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;
    repeated uint32 mission_id_list = 3;
    optional uint32 reward_unlock_time = 4;

    enum CmdId {
        CMD_ID = 115;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MISSION_ID_ERROR = 2;
        MISSION_STATUS_ERROR = 3;
        EQUIPMENT_FULL = 4;
        EQUIPMENT_MATERIAL_LIMIT = 5;
        EQUIPMENT_FRAGMENT_LIMIT = 6;
        FEATURE_CLOSED = 7;
        EQUIPMENT_ELF_FRAGMENT_LIMIT = 8;
        TIME_LIMIT = 9;
    }
}

message GetMissionStepCompensationInfoReq {

    enum CmdId {
        CMD_ID = 1632;
    }
}


message GetMissionStepCompensationInfoRsp {
    optional Retcode retcode = 1;
    repeated MissionStepCompensation challenge_mission_compensation_list = 2;
    optional MissionStepCompensation mainline_misssion_compensation = 3;
    optional bool has_take_reward = 4;

    enum CmdId {
        CMD_ID = 1633;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_REWARD = 2;
    }
}

message GetMissionThemeDataReq {
    optional uint32 theme_id = 1;
    optional bool is_get_all = 2;

    enum CmdId {
        CMD_ID = 4205;
    }
}


message GetMissionThemeDataRsp {
    optional Retcode retcode = 1;
    optional uint32 theme_id = 2;
    optional bool is_get_all = 3;
    repeated MissionThemeData mission_theme_list = 4;

    enum CmdId {
        CMD_ID = 4206;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetMonopolyActivityReq {
    optional uint32 monopoly_id = 1;

    enum CmdId {
        CMD_ID = 3850;
    }
}



message GetMonopolyActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 monopoly_id = 2;
    repeated MonopolyArea area_list = 3;
    repeated MonopolyShopGoods goods_list = 4;

    enum CmdId {
        CMD_ID = 3851;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetMosaicActivityReq {

    enum CmdId {
        CMD_ID = 4340;
    }
}


message GetMosaicActivityRsp {
    optional Retcode retcode = 1;
    repeated MosaicActivity activity_list = 2;

    enum CmdId {
        CMD_ID = 4341;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message GetMpDataReq {
    optional MpDataType data_type = 1;

    enum CmdId {
        CMD_ID = 340;
    }
}




message GetMpDataRsp {
    optional Retcode retcode = 1;
    optional MpDataType data_type = 2;
    optional OpType op_type = 3;
    optional uint32 mp_level = 4;
    optional uint32 mp_exp = 5;
    repeated MpSkillPoint skill_point_list = 6;
    repeated MpSkill skill_list = 7;
    optional uint32 team_avatar_id = 8;
    optional uint32 punish_end_time = 9;

    enum CmdId {
        CMD_ID = 341;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
    enum OpType {
        INIT_DATA = 0;
        ADD_DATA = 1;
        UPDATE_DATA = 2;
    }
}

message GetMpRaidRankReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 549;
    }
}


message GetMpRaidRankRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional RankShowData rank_data = 3;

    enum CmdId {
        CMD_ID = 550;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetMpRaidSpecialRewardReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 551;
    }
}


message GetMpRaidSpecialRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated RewardData reward_list = 3;

    enum CmdId {
        CMD_ID = 552;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        REWARD_REPEAT = 2;
        STAGE_NOT_FINISH = 3;
    }
}

message GetMpStageRecordReq {

    enum CmdId {
        CMD_ID = 1018;
    }
}


message GetMpStageRecordRsp {
    optional Retcode retcode = 1;
    repeated MpStageRecord record_list = 2;

    enum CmdId {
        CMD_ID = 1019;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetMyCardAuthCodeReq {
    optional string fac_trade_seq = 1;
    optional string product_name = 2;
    optional string amount = 3;

    enum CmdId {
        CMD_ID = 368;
    }
}

message GetMyCardAuthCodeRsp {
    optional Retcode retcode = 1;
    optional string auth_code = 2;
    optional string trade_seq = 3;
    optional string product_name = 4;

    enum CmdId {
        CMD_ID = 369;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetNewbieActivityReq {

    enum CmdId {
        CMD_ID = 4248;
    }
}




message GetNewbieActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 end_time = 3;
    repeated uint32 taken_reward_level_list = 4;
    optional NewbieActivityChallenge challenge = 5;
    optional NewbiePrivilegeInfo privilege = 6;
    optional NewbieLevelRush level_rush = 7;

    enum CmdId {
        CMD_ID = 4249;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_NEWBIE = 2;
    }
}

message GetNewConsignedOrderDataReq {

    enum CmdId {
        CMD_ID = 517;
    }
}


message GetNewConsignedOrderDataRsp {
    optional Retcode retcode = 1;
    optional uint32 progress = 2;
    repeated ConsignedOrder order_list = 3;
    optional uint32 cd_finish_time = 4;
    optional uint32 finish_order_times = 5;
    optional uint32 total_order_times = 6;

    enum CmdId {
        CMD_ID = 518;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
    }
}

message GetNinjaActivityReq {

    enum CmdId {
        CMD_ID = 4400;
    }
}


message GetNinjaActivityRsp {
    optional Retcode retcode = 1;
    optional NinjaActivityData ninja_data = 2;

    enum CmdId {
        CMD_ID = 4401;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetOfflineFriendsPointNotify {
    optional uint32 friends_point = 1;

    enum CmdId {
        CMD_ID = 81;
    }
}

message GetOfflineResourceDataReq {

    enum CmdId {
        CMD_ID = 4211;
    }
}


message GetOfflineResourceDataRsp {
    optional Retcode retcode = 1;
    optional uint32 cur_schedule_id = 2;
    repeated OfflineResource offline_resource_list = 3;

    enum CmdId {
        CMD_ID = 4212;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
    }
}

message GetOnlineRewardActivityReq {

    enum CmdId {
        CMD_ID = 4196;
    }
}

message GetOnlineRewardActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    optional uint32 min_level = 4;
    repeated OnlineReward reward_list = 5;

    enum CmdId {
        CMD_ID = 4197;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        LEVEL_NOT_SATISFY = 3;
    }
    message OnlineReward {
        optional uint32 id = 1;
        optional uint32 take_time = 2;
        optional bool is_taken = 3;
    }
}


message GetOpenworldEndlessDataReq {
    optional uint32 level = 1;
    optional EndlessType type = 2;
    optional bool is_finish_front = 3;

    enum CmdId {
        CMD_ID = 3419;
    }
}









message GetOpenworldEndlessDataRsp {
    optional Retcode retcode = 1;
    optional uint32 group_id = 3;
    optional uint32 group_level = 4;
    optional uint32 begin_time = 5;
    optional uint32 end_time = 6;
    optional uint32 close_time = 7;
    repeated OpenworldEndlessPlayer endless_data_list = 8;
    repeated PlayerFriendBriefData brief_data_list = 9;
    optional uint32 random_seed = 10;
    repeated OpenworldEndlessItem item_list = 11;
    repeated uint32 finish_monster_group_list = 12;
    optional uint32 battle_config_id = 13;
    repeated OpenworldEndlessItem effect_item_list = 14;
    repeated OpenworldEndlessItem trap_add_item_list = 15;
    optional uint32 boss_extra_score = 16;
    optional uint32 is_just_join = 17;
    optional uint32 cur_top_group_level = 18;
    optional uint32 top_group_player_num = 19;
    optional uint32 top_group_promote_unlock_player_num = 20;
    optional uint32 invasion_id = 21;
    optional uint32 hard_level = 22;
    repeated OpenworldEndlessWarInfo war_info_list = 23;
    repeated uint32 event_sub_type_id_list = 24;
    repeated uint32 trap_item_show_id_list = 25;
    repeated OpenworldEndlessMonsterGroup monster_group_list = 26;
    optional EndlessType type = 27;
    optional QuantumEndless quantum_endless = 28;
    optional GreedyEndless greedy_endless = 29;

    enum CmdId {
        CMD_ID = 3420;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
        NO_ENDLESS = 3;
        URGENCY_STOP = 4;
        ULTRA_ENDLESS = 5;
        FEATURE_CLOSED = 6;
    }
}

message GetOpenworldEndlessPlayerWarInfoReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 3443;
    }
}


message GetOpenworldEndlessPlayerWarInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;
    repeated OpenworldEndlessWarInfo war_info_list = 3;

    enum CmdId {
        CMD_ID = 3444;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetOpenworldEndlessStageInnerDataReq {
    optional uint32 area_id = 1;

    enum CmdId {
        CMD_ID = 3426;
    }
}



message GetOpenworldEndlessStageInnerDataRsp {
    optional Retcode retcode = 1;
    repeated OpenworldEndlessBattle battle_list = 2;
    repeated OpenworldEndlessItem effect_item_list = 3;

    enum CmdId {
        CMD_ID = 3427;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message GetOpenworldEndlessTopGroupReq {
    optional EndlessType type = 9;

    enum CmdId {
        CMD_ID = 3446;
    }
}





message GetOpenworldEndlessTopGroupRsp {
    optional Retcode retcode = 1;
    repeated OpenworldEndlessPlayer endless_data_list = 2;
    repeated PlayerFriendBriefData brief_data_list = 3;
    repeated OpenworldEndlessWarInfo war_info_list = 4;
    optional uint32 hard_level = 5;
    optional EndlessType type = 6;

    enum CmdId {
        CMD_ID = 3447;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TOP_GROUP_NOT_OPEN = 2;
    }
}

message GetOtherDormDataReq {
    optional uint32 target_uid = 1;
    optional uint32 visit_avatar = 2;
    optional uint32 level = 3;
    optional string name = 4;

    enum CmdId {
        CMD_ID = 633;
    }
}




message GetOtherDormDataRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;
    optional DormHouse house = 3;
    optional uint32 show_room = 4;
    optional uint32 visit_avatar = 5;
    optional uint32 be_liked_num = 6;
    repeated DormVisitRecord record_list = 7;
    optional uint32 be_visit_num = 8;
    optional bool is_receive_like_limit = 9;
    optional bool is_has_liked = 10;
    optional bool is_send_like_limit = 11;
    repeated DormFacility facility_list = 12;
    optional uint32 comfort_value = 13;

    enum CmdId {
        CMD_ID = 634;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LIMIT = 2;
        VISIT_FORBID = 3;
        TARGET_ERROR = 4;
    }
}

message GetOtherMasterPupilReq {
    repeated uint32 uid_list = 1;

    enum CmdId {
        CMD_ID = 664;
    }
}



message GetOtherMasterPupilRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    repeated uint32 uid_list = 2;
    repeated MasterPupilDetailData master_pupil_list = 3;

    enum CmdId {
        CMD_ID = 665;
    }
}

message GetOtherPlayerCardDataReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 490;
    }
}



message GetOtherPlayerCardDataRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;
    optional PlayerCardData card_data = 3;
    optional PlayerDetailData player_data = 4;

    enum CmdId {
        CMD_ID = 491;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_SAME_IDC = 2;
        HAS_LOGOFF = 3;
    }
}

message GetOtherPlayerClientSettingReq {
    optional uint32 target_uid = 1;
    optional uint32 client_setting_type = 2;

    enum CmdId {
        CMD_ID = 1273;
    }
}


message GetOtherPlayerClientSettingRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;
    optional uint32 client_setting_type = 3;
    optional bool is_weekly_guide_switch_on = 4;
    repeated SnsShowPriviledge sns_show_priviledge_list = 5;

    enum CmdId {
        CMD_ID = 1274;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetOverlapActivityDataReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4215;
    }
}


message GetOverlapActivityDataRsp {
    optional Retcode retcode = 1;
    optional OverlapActivityData activity_data = 2;

    enum CmdId {
        CMD_ID = 4216;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetPediaReq {

    enum CmdId {
        CMD_ID = 464;
    }
}

message GetPediaRsp {
    optional Retcode retcode = 1;
    repeated uint32 black_list = 2;

    enum CmdId {
        CMD_ID = 465;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetPhonePendantDataReq {
    repeated uint32 phone_pendant_id_list = 1;

    enum CmdId {
        CMD_ID = 1197;
    }
}


message GetPhonePendantDataRsp {
    optional Retcode retcode = 1;
    optional bool is_all = 2;
    repeated PhonePendant phone_pendant_list = 3;

    enum CmdId {
        CMD_ID = 1198;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetPhotoDataReq {
    optional uint32 type = 1;

    enum CmdId {
        CMD_ID = 1191;
    }
}

message GetPhotoDataRsp {
    optional Retcode retcode = 1;
    optional uint32 type = 2;
    repeated uint32 photo_id_list = 3;

    enum CmdId {
        CMD_ID = 1192;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetPictureActivityReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4266;
    }
}


message GetPictureActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated PictureStep step_list = 3;
    optional bool is_share = 4;
    optional bool is_take_share_reward = 5;
    optional uint32 score = 6;

    enum CmdId {
        CMD_ID = 4267;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}


message GetPlayerCardReq {
    optional PlayerCardType type = 1;

    enum CmdId {
        CMD_ID = 480;
    }
}




message GetPlayerCardRsp {
    optional Retcode retcode = 1;
    optional PlayerCardType type = 2;
    repeated uint32 avatar_id_list = 3;
    repeated uint32 medal_id_list = 4;
    optional uint32 msg_config = 5;
    optional PlayerCardMsgData msg_data = 6;
    optional uint32 last_read_msg_index = 7;
    optional uint32 mp_like_num = 8;
    optional uint32 island_like_num = 9;
    repeated uint32 elf_id_list = 10;
    optional uint32 campaign_like_num = 11;
    repeated Medal medal_list = 12;

    enum CmdId {
        CMD_ID = 481;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetPlayerDetailDataReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 72;
    }
}


message GetPlayerDetailDataRsp {
    optional Retcode retcode = 1;
    optional PlayerDetailData detail = 2;

    enum CmdId {
        CMD_ID = 73;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TARGET_NOT_EXIST = 2;
    }
}

message GetPlayerOnlineStatusReq {
    repeated uint32 uid_list = 1;

    enum CmdId {
        CMD_ID = 1576;
    }
}


message GetPlayerOnlineStatusRsp {
    optional Retcode retcode = 1;
    repeated PlayerOnlineStatusInfo online_status_list = 2;

    enum CmdId {
        CMD_ID = 1577;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message GetPlayerTokenReq {
    optional uint32 account_type = 1;
    optional string account_uid = 2;
    optional string account_token = 3;
    optional string account_ext = 4;
    optional string token = 5;
    optional string version = 6;
    optional string device = 7;
    optional int32 tag = 8;
    optional uint32 uid = 9;
    optional string system_info = 10;
    optional string ipv4_str = 11;
    optional string ipv6_str = 12;
    optional string cps = 13;
    optional string device_uuid = 14;
    optional string transfer_code = 15;
    optional string transfer_pwd = 16;
    optional string ip_info_str = 17;
    optional DeviceType device_type = 20;
    optional bool is_allow_device_register = 21;
    optional uint32 combo_channel_id = 22;
    optional string combo_token = 23;
    optional string user_ip_str = 24;

    enum CmdId {
        CMD_ID = 4;
    }
}

message GetPlayerTokenRsp {
    optional Retcode retcode = 1;
    optional uint32 uid = 2;
    optional string token = 3;
    optional uint32 account_type = 4;
    optional string account_uid = 5;
    optional int32 tag = 6;
    optional string transfer_code = 15;
    optional uint32 transfer_pwd_expire_time = 16;
    optional bool is_bind_access = 17;
    optional uint32 fightserver_ip = 18;
    optional uint32 fightserver_port = 19;
    optional string msg = 20;
    optional uint32 black_list_end_time = 21;
    optional uint32 user_type = 22;
    optional uint32 limit_level = 23;
    optional bytes security_cmd_buffer = 24;
    optional string hoyolab_account_uid = 26;

    enum CmdId {
        CMD_ID = 5;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        REGISTER_CLOSED = 2;
        ACCOUNT_VERIFY_ERROR = 3;
        TOKEN_REPEAT = 4;
        ACCOUNT_TYPE_ERROR = 5;
        SERVER_FULL = 6;
        INVALID_APK = 7;
        TRANSFER_CODE_ERROR = 8;
        IN_BLACK_LIST = 9;
        SERVER_STOP = 10;
        ACCOUNT_LOCKED = 11;
        SERVER_BUSY = 12;
        DEVICE_TYPE_ERROR = 13;
        FORBID_VISITOR = 14;
        FORBID_TAG_SMURF_VISITOR = 15;
        ANTI_ADDICT_LOGIN = 16;
        GAME_NOT_AVAILABLE = 17;
    }
}

message GetPlotListReq {

    enum CmdId {
        CMD_ID = 1382;
    }
}

message GetPlotListRsp {
    optional Retcode retcode = 1;
    repeated uint32 plot_list = 2;

    enum CmdId {
        CMD_ID = 1383;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetPrivateHistoryChatMsgReq {
    repeated uint32 uid_list = 1;

    enum CmdId {
        CMD_ID = 2237;
    }
}


message GetPrivateHistoryChatMsgRsp {
    optional Retcode retcode = 1;
    repeated HistoryPrivateChatMsg chat_list = 2;

    enum CmdId {
        CMD_ID = 2238;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetPrivilegeInfoReq {

    enum CmdId {
        CMD_ID = 1646;
    }
}


message GetPrivilegeInfoRsp {
    optional Retcode retcode = 1;
    repeated PrivilegeInfo privilege_list = 2;

    enum CmdId {
        CMD_ID = 1647;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetProductListReq {

    enum CmdId {
        CMD_ID = 98;
    }
}



message GetProductListRsp {
    optional Retcode retcode = 1;
    repeated Product product_list = 2;
    optional uint32 next_random_box_product_refresh_time = 3;
    optional uint32 next_limit_product_refresh_time = 4;
    repeated FoundationData foundation_list = 5;

    enum CmdId {
        CMD_ID = 99;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        DEVICE_ERROR = 2;
    }
}

message GetProductRecommendListReq {

    enum CmdId {
        CMD_ID = 1478;
    }
}

message GetProductRecommendListRsp {
    optional Retcode retcode = 1;
    repeated uint32 recommend_list = 2;

    enum CmdId {
        CMD_ID = 1479;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetPupilEvalDataReq {

    enum CmdId {
        CMD_ID = 659;
    }
}



message GetPupilEvalDataRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    optional MasterPupilEvalMsg eval_msg = 2;

    enum CmdId {
        CMD_ID = 660;
    }
}

message GetPupilMissionReq {
    optional uint32 uid = 1;

    enum CmdId {
        CMD_ID = 651;
    }
}




message GetPupilMissionRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    optional uint32 uid = 2;
    optional uint32 step_id = 3;
    repeated Mission mission_list = 4;
    optional MasterPoolData pool_reward = 5;
    optional uint32 time = 6;

    enum CmdId {
        CMD_ID = 652;
    }
}

message GetQuestionActivityReq {

    enum CmdId {
        CMD_ID = 4258;
    }
}


message GetQuestionActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 cur_schedule_id = 2;
    repeated Question question_list = 3;

    enum CmdId {
        CMD_ID = 4259;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetRaffleActivityReq {
    repeated uint32 raffle_id_list = 1;

    enum CmdId {
        CMD_ID = 3898;
    }
}


message GetRaffleActivityRsp {
    optional Retcode retcode = 1;
    optional RaffleActivity raffle_activity = 2;

    enum CmdId {
        CMD_ID = 3899;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_RAFFLE = 2;
        NOT_OPEN = 3;
    }
}

message GetRaidActiveInfoReq {

    enum CmdId {
        CMD_ID = 1622;
    }
}


message GetRaidActiveInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional RaidActiveType active_type = 3;
    optional bool has_daily_raid_activity = 4;

    enum CmdId {
        CMD_ID = 1623;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetRankScheduleDataReq {

    enum CmdId {
        CMD_ID = 4233;
    }
}


message GetRankScheduleDataRsp {
    optional Retcode retcode = 1;
    repeated RankScheduleData rank_schedule_list = 2;

    enum CmdId {
        CMD_ID = 4234;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetRankScheduleRankReq {
    optional uint32 schedule_id = 1;

    enum CmdId {
        CMD_ID = 4235;
    }
}


message GetRankScheduleRankRsp {
    optional Retcode retcode = 1;
    optional RankShowData rank_data = 3;

    enum CmdId {
        CMD_ID = 4236;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}


message GetReclaimActivityDataReq {
    optional ReclaimActivityDataType data_type = 1;

    enum CmdId {
        CMD_ID = 1167;
    }
}



message GetReclaimActivityDataRsp {
    optional Retcode retcode = 1;
    optional ReclaimActivityDataType data_type = 2;
    optional uint32 id = 3;
    optional uint32 level = 4;
    repeated uint32 has_take_reward_level_list = 5;
    repeated ReclaimAvatar reclaim_avatar_list = 6;
    repeated uint32 reclaim_weapon_id_list = 7;
    repeated uint32 reclaim_stigmata_id_list = 8;
    repeated uint32 reclaim_avatar_team_list = 9;
    optional uint32 level_exp = 10;
    optional uint32 total_exp = 11;
    repeated uint32 candidate_item_list = 12;
    optional uint32 candidate_gacha_box_id = 13;
    optional uint32 boom_energy = 14;
    optional uint32 enter_boom_stage_times = 15;

    enum CmdId {
        CMD_ID = 1168;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetReclaimRankReq {

    enum CmdId {
        CMD_ID = 1175;
    }
}


message GetReclaimRankRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional RankShowData rank_data = 3;

    enum CmdId {
        CMD_ID = 1176;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetRecommendArmadaMemberListReq {
    repeated uint32 uid_list = 1;

    enum CmdId {
        CMD_ID = 2803;
    }
}


message GetRecommendArmadaMemberListRsp {
    optional Retcode retcode = 1;
    repeated PlayerFriendBriefData recommend_list = 2;

    enum CmdId {
        CMD_ID = 2804;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        TOO_FREQUENT = 3;
        NOT_LEADER = 4;
        ZERO = 5;
    }
}

message GetRecommendArmadaReq {
    optional uint32 level = 1;
    repeated uint32 friend_uid_list = 2;

    enum CmdId {
        CMD_ID = 2617;
    }
}


message GetRecommendArmadaRsp {
    optional Retcode retcode = 1;
    repeated ArmadaBriefData armada_list = 2;

    enum CmdId {
        CMD_ID = 2618;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
    }
}

message GetRecommendFriendListReq {
    optional uint32 level = 1;
    repeated uint32 filter_uid_list = 2;
    repeated uint32 recommend_uid_list = 3;
    repeated uint32 mp_recommend_uid_list = 4;

    enum CmdId {
        CMD_ID = 76;
    }
}


message GetRecommendFriendListRsp {
    optional Retcode retcode = 1;
    repeated PlayerFriendBriefData recommend_list = 2;

    enum CmdId {
        CMD_ID = 77;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TOO_OFTEN = 2;
    }
}

message GetRecommendGoodsReq {

    enum CmdId {
        CMD_ID = 1275;
    }
}


message GetRecommendGoodsRsp {
    optional Retcode retcode = 1;
    repeated RecommendGoods recommend_goods_list = 2;

    enum CmdId {
        CMD_ID = 1276;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}



message GetRecommendMasterPupilReq {
    optional MasterPupilType type = 1;
    optional MasterPupilCard card = 2;

    enum CmdId {
        CMD_ID = 655;
    }
}




message GetRecommendMasterPupilRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    optional MasterPupilType type = 2;
    repeated MasterPupilApplyMsg msg_list = 3;

    enum CmdId {
        CMD_ID = 656;
    }
}

message GetRecommendMissionPanelListReq {

    enum CmdId {
        CMD_ID = 1519;
    }
}


message GetRecommendMissionPanelListRsp {
    optional Retcode retcode = 1;
    repeated RecommendMissionPanel recommend_mission_panel_list = 2;

    enum CmdId {
        CMD_ID = 1520;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetRedeemCodeInfoReq {
    optional string redeem_code = 1;

    enum CmdId {
        CMD_ID = 211;
    }
}


message GetRedeemCodeInfoRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;
    optional string desc = 3;
    optional string redeem_code = 4;

    enum CmdId {
        CMD_ID = 212;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        REDEEM_CODE_ERROR = 2;
    }
}

message GetRegionUidRangeReq {

    enum CmdId {
        CMD_ID = 1380;
    }
}


message GetRegionUidRangeRsp {
    optional Retcode retcode = 1;
    optional string local_region_name = 2;
    repeated RegionUidRange region_uid_range_list = 3;

    enum CmdId {
        CMD_ID = 1381;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetRestaurantActivityReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 5860;
    }
}



message GetRestaurantActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 facility_level = 3;
    repeated RestaurantRoom room_list = 4;
    repeated RestaurantOrder order_list = 5;
    optional uint32 weather_id = 6;

    enum CmdId {
        CMD_ID = 5861;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetRewardLineActivityReq {
    optional uint32 id = 1;

    enum CmdId {
        CMD_ID = 5890;
    }
}


message GetRewardLineActivityRsp {
    optional Retcode retcode = 1;
    repeated RewardLineActivity reward_line_activity_list = 2;

    enum CmdId {
        CMD_ID = 5891;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CLOSED = 2;
        ACTIVITY_NOT_EXIST = 3;
    }
}

message GetRogueStageDataReq {

    enum CmdId {
        CMD_ID = 275;
    }
}


message GetRogueStageDataRsp {
    optional Retcode retcode = 1;
    optional uint32 max_next_hard_level = 2;
    optional uint32 next_able_reset_time = 3;
    optional uint32 hard_level = 4;
    optional uint32 progress = 5;
    optional uint32 random_seed = 6;
    repeated RogueStageAvatar avatar_list = 7;
    optional uint32 cost_ratio = 8;
    optional uint32 drop_ratio = 9;

    enum CmdId {
        CMD_ID = 276;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_JOIN_ARMADA = 2;
        LEVEL_LACK = 3;
        NOT_OPEN = 4;
    }
}

message GetRoomDataReq {

    enum CmdId {
        CMD_ID = 3150;
    }
}

message GetRoomDataRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3151;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetRpgTaleFileReq {
    optional uint32 tale_id = 1;

    enum CmdId {
        CMD_ID = 2378;
    }
}

message GetRpgTaleFileRsp {
    optional Retcode retcode = 1;
    optional uint32 tale_id = 2;
    repeated uint32 file_id_list = 3;

    enum CmdId {
        CMD_ID = 2379;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetRpgTaleReq {
    optional uint32 tale_id = 1;
    optional bool is_all = 2;

    enum CmdId {
        CMD_ID = 2300;
    }
}


message GetRpgTaleRsp {
    optional Retcode retcode = 1;
    optional uint32 tale_id = 2;
    optional bool is_all = 12;
    repeated RpgTaleData rpg_tale_list = 13;

    enum CmdId {
        CMD_ID = 2301;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetScDLCReq {

    enum CmdId {
        CMD_ID = 6300;
    }
}






message GetScDLCRsp {
    optional Retcode retcode = 1;
    optional ScDLCFever fever = 2;
    repeated ScDLCAvatar avatar_list = 3;
    repeated ScDLCSupportNPC npc_list = 4;
    optional ScDLCDailyQuestData daily_quest_data = 5;
    optional string name = 6;
    repeated ScDLCAchievement achievement_list = 7;
    optional uint32 max_challenge_reward_take_progress = 8;
    repeated uint32 active_fever_ability_group_id_list = 9;
    optional uint32 max_active_fever_ability_group_num = 10;

    enum CmdId {
        CMD_ID = 6301;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetScDLCSelectDailyQuestReq {

    enum CmdId {
        CMD_ID = 6316;
    }
}


message GetScDLCSelectDailyQuestRsp {
    optional Retcode retcode = 1;
    repeated OpenworldQuest quest_list = 2;

    enum CmdId {
        CMD_ID = 6317;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetScDLCTowerRankReq {

    enum CmdId {
        CMD_ID = 6338;
    }
}

message GetScDLCTowerRankRsp {
    optional Retcode retcode = 1;
    optional uint32 rank_percent = 2;
    optional uint32 rank = 3;

    enum CmdId {
        CMD_ID = 6339;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetScDLCTowerReq {

    enum CmdId {
        CMD_ID = 6332;
    }
}


message GetScDLCTowerRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 cur_floor = 3;
    optional uint32 max_floor = 4;
    repeated ScDLCTowerAvatarInfo avatar_info_list = 5;
    optional uint32 max_score = 6;
    optional uint32 avatar_revive_times = 7;
    optional uint32 sc_dlc_fever_score = 8;
    optional uint32 sc_dlc_climax_score = 9;
    optional uint32 max_can_sweep_floor = 10;

    enum CmdId {
        CMD_ID = 6333;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetScoinExchangeInfoReq {

    enum CmdId {
        CMD_ID = 12;
    }
}

message GetScoinExchangeInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 usable_times = 2;
    optional uint32 total_times = 3;
    optional uint32 hcoin_cost = 4;
    optional uint32 scoin_get = 5;

    enum CmdId {
        CMD_ID = 13;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetScratchTicketReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4150;
    }
}


message GetScratchTicketRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 plate_id = 3;
    repeated ScratchTicketPoint point_list = 4;
    optional uint32 reset_times = 5;
    optional uint32 round = 6;
    optional uint32 core_plate_end_round = 7;
    optional bool has_got_core_plate = 8;

    enum CmdId {
        CMD_ID = 4151;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
    }
}

message GetSealedModeInfoReq {

    enum CmdId {
        CMD_ID = 596;
    }
}




message GetSealedModeInfoRsp {
    optional Retcode retcode = 1;
    repeated AvatarSuite avatar_suite_list = 2;
    optional AvatarSuiteSelection avatar_suite_selection = 3;
    optional uint32 left_times = 4;
    optional SealedSuiteSelection selection_suite = 5;

    enum CmdId {
        CMD_ID = 597;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetSealedModeScheduleReq {

    enum CmdId {
        CMD_ID = 594;
    }
}

message GetSealedModeScheduleRsp {
    optional Retcode retcode = 1;
    optional uint32 open_time = 2;
    optional uint32 close_time = 3;
    optional uint32 id = 4;

    enum CmdId {
        CMD_ID = 595;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetSecurityPasswordReq {

    enum CmdId {
        CMD_ID = 5021;
    }
}



message GetSecurityPasswordRsp {
    optional Retcode retcode = 1;
    optional SecurityPasswordStatus status = 2;
    optional SecurityPasswordDeviceStatus device_status = 3;
    optional uint32 reset_end_time = 4;
    optional string salt = 5;

    enum CmdId {
        CMD_ID = 5022;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetShopListReq {

    enum CmdId {
        CMD_ID = 201;
    }
}


message GetShopListRsp {
    optional Retcode retcode = 1;
    repeated Shop shop_list = 2;
    optional bool is_all = 3;

    enum CmdId {
        CMD_ID = 202;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetShoppingMallListReq {

    enum CmdId {
        CMD_ID = 1157;
    }
}



message GetShoppingMallListRsp {
    optional Retcode retcode = 1;
    repeated Shop shop_list = 2;
    repeated EffectiveGiftGoodsData effective_gift_goods_list = 3;

    enum CmdId {
        CMD_ID = 1158;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetSignInRewardReq {

    enum CmdId {
        CMD_ID = 123;
    }
}


message GetSignInRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 124;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        REPEAT_SIGN_IN = 2;
    }
}

message GetSignInRewardStatusReq {

    enum CmdId {
        CMD_ID = 121;
    }
}

message GetSignInRewardStatusRsp {
    optional Retcode retcode = 1;
    optional bool is_need_sign_in = 2;
    optional uint32 next_sign_in_day = 3;
    optional uint32 next_sign_in_reward_id = 4;

    enum CmdId {
        CMD_ID = 122;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetSimulateActivityReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 484;
    }
}


message GetSimulateActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 percent = 3;
    repeated SimulatePlayerData player_list = 4;
    repeated uint32 best_avatar_id_list = 5;

    enum CmdId {
        CMD_ID = 485;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        ACTIVITY_ERROR = 3;
    }
}

message GetSingleShopWithoutRefreshReq {
    optional uint32 shop_id = 1;

    enum CmdId {
        CMD_ID = 1617;
    }
}


message GetSingleShopWithoutRefreshRsp {
    optional Retcode retcode = 1;
    optional Shop shop = 2;

    enum CmdId {
        CMD_ID = 1618;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetSlotMachineMainInfoReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4315;
    }
}

message GetSlotMachineMainInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 cur_gacha_id = 3;
    optional uint32 gacha_times = 4;
    optional uint32 has_take_reward_progress = 5;
    optional bool is_next_super_gacha = 6;

    enum CmdId {
        CMD_ID = 4316;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
    }
}

message GetSnsShowDataReq {
    optional uint32 sns_show_type = 1;
    optional uint32 target_uid = 2;
    optional bool is_friend = 3;
    optional uint32 ex_boss_schedule_id = 4;

    enum CmdId {
        CMD_ID = 1266;
    }
}







message GetSnsShowDataRsp {
    optional Retcode retcode = 1;
    optional uint32 sns_show_type = 2;
    optional uint32 target_uid = 3;
    optional SnsShowEndlessData sns_show_endless_data = 4;
    optional SnsShowExBossData sns_show_ex_boss_data = 5;
    repeated WikiDetailData wiki_detail_data_list = 6;
    optional PlayerCardData card_data = 7;
    optional PlayerDetailData player_data = 8;
    optional uint32 target_uid_level = 9;
    optional SnsShowTowerRaidData sns_show_tower_raid_data = 10;

    enum CmdId {
        CMD_ID = 1267;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_PRIVILEDGE = 2;
    }
}


message GetSpecificRankReq {
    optional SpecificRankType type = 1;
    optional uint32 param = 2;

    enum CmdId {
        CMD_ID = 1684;
    }
}



message GetSpecificRankRsp {
    optional Retcode retcode = 1;
    optional SpecificRankType type = 2;
    optional uint32 param = 3;
    optional RankShowData rank_data = 4;

    enum CmdId {
        CMD_ID = 1685;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetSpecificRecommendGoodsReq {
    repeated uint32 goods_id_list = 1;

    enum CmdId {
        CMD_ID = 1277;
    }
}


message GetSpecificRecommendGoodsRsp {
    optional Retcode retcode = 1;
    repeated RecommendGoods recommend_goods_list = 2;

    enum CmdId {
        CMD_ID = 1278;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetStageActDifficultyReq {

    enum CmdId {
        CMD_ID = 456;
    }
}


message GetStageActDifficultyRsp {
    optional Retcode retcode = 1;
    repeated StageActDifficultyInfo act_difficulty_list = 2;

    enum CmdId {
        CMD_ID = 457;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetStageBuffReq {
    repeated uint32 stage_id_list = 1;
    repeated uint32 activity_buff_id_list = 2;

    enum CmdId {
        CMD_ID = 1528;
    }
}



message GetStageBuffRsp {
    optional Retcode retcode = 1;
    repeated StageBuff stage_buff_list = 2;
    repeated ActivityBuff activity_buff_list = 3;

    enum CmdId {
        CMD_ID = 1529;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetStageChapterReq {

    enum CmdId {
        CMD_ID = 965;
    }
}


message GetStageChapterRsp {
    optional Retcode retcode = 1;
    repeated StageChapterInfo chapter_list = 2;

    enum CmdId {
        CMD_ID = 966;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetStageDataReq {
    repeated uint32 stage_id_list = 1;

    enum CmdId {
        CMD_ID = 41;
    }
}



message GetStageDataRsp {
    optional Retcode retcode = 1;
    repeated Stage stage_list = 2;
    repeated uint32 finished_chapter_list = 3;
    repeated StageEventData event_data_list = 4;
    optional bool is_all = 5;

    enum CmdId {
        CMD_ID = 42;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STAGE_NOT_EXIST = 2;
    }
}

message GetStageDropDisplayReq {
    repeated uint32 stage_id_list = 1;

    enum CmdId {
        CMD_ID = 60;
    }
}


message GetStageDropDisplayRsp {
    optional Retcode retcode = 1;
    repeated StageDropDisplayInfo stage_drop_list = 2;

    enum CmdId {
        CMD_ID = 61;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STAGE_NOT_EXIST = 2;
        STAGE_TOO_MUCH = 3;
    }
}


message GetStageRecommendAvatarCourseInfoReq {
    optional string id = 1;
    optional AvatarRecommendType type = 2;
    optional uint32 recommend_style = 3;
    optional uint32 rank = 4;

    enum CmdId {
        CMD_ID = 1630;
    }
}

message GetStageRecommendAvatarCourseInfoRsp {
    optional Retcode retcode = 1;
    optional string course_info = 2;

    enum CmdId {
        CMD_ID = 1631;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message GetStageRecommendAvatarReq {
    repeated string id_list = 1;
    optional AvatarRecommendType type = 2;

    enum CmdId {
        CMD_ID = 1541;
    }
}


message GetStageRecommendAvatarRsp {
    optional Retcode retcode = 1;
    repeated StageRecommendAvatar stage_recommend_avatar_list = 2;

    enum CmdId {
        CMD_ID = 1542;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ID_TOO_MUCH = 2;
    }
}

message GetStaminaExchangeInfoReq {

    enum CmdId {
        CMD_ID = 16;
    }
}

message GetStaminaExchangeInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 usable_times = 2;
    optional uint32 total_times = 3;
    optional uint32 hcoin_cost = 4;
    optional uint32 stamina_get = 5;

    enum CmdId {
        CMD_ID = 17;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetSupportActivityReq {

    enum CmdId {
        CMD_ID = 4332;
    }
}


message GetSupportActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional SupportData support_data = 3;
    optional bool is_take_global_reward = 4;

    enum CmdId {
        CMD_ID = 4333;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetSurveyDataReq {

    enum CmdId {
        CMD_ID = 4241;
    }
}


message GetSurveyDataRsp {
    optional Retcode retcode = 1;
    repeated SurveyData survey_data_list = 2;

    enum CmdId {
        CMD_ID = 4242;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetTeamBriefInfoReq {
    optional uint32 team_id = 1;
    optional bool is_friend_invitation = 2;

    enum CmdId {
        CMD_ID = 352;
    }
}


message GetTeamBriefInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 team_id = 2;
    optional MpTeamStatus status = 3;
    optional uint32 stage_id = 4;
    optional bool is_friend_invitation = 5;

    enum CmdId {
        CMD_ID = 353;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TEAM_NOT_EXIST = 2;
    }
}

message GetTeamListReq {
    repeated uint32 stage_id_list = 1;
    repeated uint32 team_id_list = 2;
    optional bool is_select_in_order = 3;
    optional uint32 level = 4;

    enum CmdId {
        CMD_ID = 1215;
    }
}


message GetTeamListRsp {
    optional Retcode retcode = 1;
    repeated MpTeamData team_data_list = 2;

    enum CmdId {
        CMD_ID = 1216;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_STAGE = 2;
        SERVER_BUSY = 3;
    }
}

message GetTeamStatusReq {
    repeated uint32 team_id_list = 1;

    enum CmdId {
        CMD_ID = 1553;
    }
}


message GetTeamStatusRsp {
    optional Retcode retcode = 1;
    repeated MpTeamData team_data_list = 2;

    enum CmdId {
        CMD_ID = 1554;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SERVER_BUSY = 2;
    }
}

message GetThemeDataReq {

    enum CmdId {
        CMD_ID = 4244;
    }
}


message GetThemeDataRsp {
    optional Retcode retcode = 1;
    repeated ThemeData theme_list = 2;

    enum CmdId {
        CMD_ID = 4245;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetThemeWantedReq {

    enum CmdId {
        CMD_ID = 5790;
    }
}


message GetThemeWantedRsp {
    optional Retcode retcode = 1;
    optional ThemeWantedActivity theme_wanted_activity = 2;

    enum CmdId {
        CMD_ID = 5791;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        FEATURE_CLOSED = 3;
    }
}

message GetTileMapReq {
    optional uint32 tower_id = 1;
    optional uint32 floor_id = 2;

    enum CmdId {
        CMD_ID = 4900;
    }
}


message GetTileMapRsp {
    optional Retcode retcode = 1;
    optional uint32 tower_id = 2;
    optional uint32 floor_id = 3;
    optional TileMap map = 4;

    enum CmdId {
        CMD_ID = 4901;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LOCKED = 2;
    }
}

message GetTimeLimitAddUpDataReq {

    enum CmdId {
        CMD_ID = 255;
    }
}



message GetTimeLimitAddUpDataRsp {
    optional Retcode retcode = 1;
    optional TimeLimitAddUpType type = 2;
    optional uint32 begin_time = 3;
    optional uint32 end_time = 4;
    optional uint32 add_up_value = 5;
    repeated TimeLimitAddUpReward reward_list = 6;

    enum CmdId {
        CMD_ID = 256;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetTowerRaidActivityReq {

    enum CmdId {
        CMD_ID = 4185;
    }
}



message GetTowerRaidActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 activity_id = 3;
    optional uint32 hard_level = 4;
    optional uint32 enter_times = 5;
    optional bool is_settled = 6;
    repeated TowerRaidAvatar avatar_list = 7;
    repeated TowerRaidBossStage boss_stage_list = 8;

    enum CmdId {
        CMD_ID = 4186;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetTradingCardActivityReq {

    enum CmdId {
        CMD_ID = 4262;
    }
}

message GetTradingCardActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 cur_schedule_id = 2;
    optional uint32 trade_num = 3;

    enum CmdId {
        CMD_ID = 4263;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message GetTrialAvatarReq {

    enum CmdId {
        CMD_ID = 585;
    }
}


message GetTrialAvatarRsp {
    optional Retcode retcode = 1;
    repeated TrialAvatar avatar_list = 2;
    optional bool is_all_update = 3;

    enum CmdId {
        CMD_ID = 586;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetTvtActivityReq {

    enum CmdId {
        CMD_ID = 3300;
    }
}


message GetTvtActivityRsp {
    optional Retcode retcode = 1;
    repeated TvtActivity tvt_activity_list = 2;
    optional uint32 cur_season_id = 3;
    optional uint32 season_begin_time = 4;
    optional uint32 season_end_time = 5;
    optional uint32 punish_end_time = 6;

    enum CmdId {
        CMD_ID = 3301;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
        NOT_OPEN = 3;
        PLAYER_LEVEL_LACK = 4;
    }
}

message GetTvtBattleHistoryReq {

    enum CmdId {
        CMD_ID = 3302;
    }
}


message GetTvtBattleHistoryRsp {
    optional Retcode retcode = 1;
    repeated TvtBattleHistory battle_history_list = 2;

    enum CmdId {
        CMD_ID = 3303;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
    }
}

message GetVersionActivityReq {

    enum CmdId {
        CMD_ID = 4223;
    }
}


message GetVersionActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 id = 2;
    optional uint32 begin_time = 3;
    optional uint32 end_time = 4;
    optional uint32 score = 5;
    optional uint32 reward_score = 6;
    repeated VersionActivityData version_activity_list = 7;

    enum CmdId {
        CMD_ID = 4224;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetVipRewardDataReq {

    enum CmdId {
        CMD_ID = 197;
    }
}


message GetVipRewardDataRsp {
    optional Retcode retcode = 1;
    optional uint32 total_pay_hcoin = 2;
    repeated VipReward vip_reward_list = 3;

    enum CmdId {
        CMD_ID = 198;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetVipRewardReq {
    repeated uint32 vip_level_list = 1;

    enum CmdId {
        CMD_ID = 199;
    }
}


message GetVipRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 200;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        PAY_HCOIN_LACK = 2;
        REPEAT_GET = 3;
    }
}

message GetVirtualAvatarGroupDetailReq {
    optional uint32 group_id = 1;

    enum CmdId {
        CMD_ID = 3502;
    }
}


message GetVirtualAvatarGroupDetailRsp {
    optional Retcode retcode = 1;
    optional VirtualAvatarGroup virtual_avatar_group = 2;

    enum CmdId {
        CMD_ID = 3503;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetVirtualGachaStatusReq {
    optional uint32 group_id = 1;

    enum CmdId {
        CMD_ID = 3510;
    }
}


message GetVirtualGachaStatusRsp {
    optional Retcode retcode = 1;
    repeated VirtualGacha gacha_list = 2;
    optional uint32 group_id = 3;
    optional uint32 candidate_gacha_box_id = 4;
    repeated uint32 candidate_item_id_list = 5;
    optional uint32 candidate_gacha_pool_id = 6;

    enum CmdId {
        CMD_ID = 3511;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetWareHouseDataReq {

    enum CmdId {
        CMD_ID = 2647;
    }
}



message GetWareHouseDataRsp {
    optional Retcode retcode = 1;
    repeated WareHouseDemand demand_list = 2;
    optional WareHouseStatus status = 3;
    optional WareHouseDemand my_demand = 4;
    optional uint32 donate_uid = 5;
    optional uint32 cd_finish_time = 6;
    optional uint32 day_donate_times = 7;
    optional uint32 max_donate_times = 8;

    enum CmdId {
        CMD_ID = 2648;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        STATUS_ERROR = 3;
    }
}

message GetWareHouseItemReq {

    enum CmdId {
        CMD_ID = 2655;
    }
}


message GetWareHouseItemRsp {
    optional Retcode retcode = 1;
    optional uint32 demand_id = 2;
    optional WareHouseStatus status = 3;
    optional uint32 cd_finish_time = 4;

    enum CmdId {
        CMD_ID = 2656;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        STATUS_ERROR = 3;
    }
}

message GetWarshipDataReq {
    repeated uint32 warship_id_list = 1;
    optional bool is_all = 2;

    enum CmdId {
        CMD_ID = 5454;
    }
}


message GetWarshipDataRsp {
    optional Retcode retcode = 1;
    repeated WarshipThemeData warship_list = 2;
    optional bool is_all = 3;

    enum CmdId {
        CMD_ID = 5455;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetWarshipItemDataReq {
    repeated uint32 warship_item_id_list = 1;
    optional bool is_all = 2;

    enum CmdId {
        CMD_ID = 5450;
    }
}

message GetWarshipItemDataRsp {
    optional Retcode retcode = 1;
    repeated uint32 warship_item_id_list = 2;
    optional bool is_all = 3;

    enum CmdId {
        CMD_ID = 5451;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetWarshipTrialDataReq {
    repeated uint32 sample_id_list = 1;
    optional bool is_all = 2;

    enum CmdId {
        CMD_ID = 5452;
    }
}


message GetWarshipTrialDataRsp {
    optional Retcode retcode = 1;
    repeated TrialWarship trial_warship_list = 2;
    optional bool is_all = 3;

    enum CmdId {
        CMD_ID = 5453;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetWebActivityInfoReq {

    enum CmdId {
        CMD_ID = 1601;
    }
}


message GetWebActivityInfoRsp {
    optional Retcode retcode = 1;
    repeated WebActivity web_activity_list = 2;

    enum CmdId {
        CMD_ID = 1602;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetWeekDayActivityCompensationInfoReq {

    enum CmdId {
        CMD_ID = 1666;
    }
}


message GetWeekDayActivityCompensationInfoRsp {
    optional Retcode retcode = 1;
    repeated WeekDayActivityStageCompensation stage_compensation_list = 2;
    optional bool has_taken_compensation = 3;

    enum CmdId {
        CMD_ID = 1667;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetWeekDayActivityDataReq {

    enum CmdId {
        CMD_ID = 125;
    }
}



message GetWeekDayActivityDataRsp {
    optional Retcode retcode = 1;
    repeated WeekDayActivity activity_list = 2;
    optional bool is_whole_data = 3;
    repeated ActivitySeries series_list = 5;

    enum CmdId {
        CMD_ID = 126;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetWeeklyReportEndlessRecommendPlayerReq {
    optional uint32 begin_time = 1;
    optional uint32 group_level = 2;

    enum CmdId {
        CMD_ID = 5102;
    }
}



message GetWeeklyReportEndlessRecommendPlayerRsp {
    optional Retcode retcode = 1;
    optional uint32 begin_time = 2;
    optional uint32 group_level = 3;
    optional RankShowData rank_data = 4;
    optional EndlessType endless_type = 5;

    enum CmdId {
        CMD_ID = 5103;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetWeeklyReportExBossRecommendPlayerReq {
    optional uint32 schedule_id = 1;
    optional uint32 rank_reward_id = 2;

    enum CmdId {
        CMD_ID = 5104;
    }
}


message GetWeeklyReportExBossRecommendPlayerRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 rank_reward_id = 3;
    optional RankShowData rank_data = 4;

    enum CmdId {
        CMD_ID = 5105;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetWeeklyReportReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 5100;
    }
}





message GetWeeklyReportRsp {
    optional Retcode retcode = 1;
    repeated WeeklyReportExBoss ex_boss_data_list = 2;
    repeated WeeklyReportEndless endless_data_list = 3;
    repeated WeeklyReportUltraEndless ultra_endless_list = 4;
    optional WeeklyReportBlockZone block_zone = 5;
    optional uint32 target_uid = 6;

    enum CmdId {
        CMD_ID = 5101;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetWeeklyReportUltraEndlessRecommendPlayerReq {
    optional uint32 schedule_id = 1;
    optional uint32 group_id = 2;

    enum CmdId {
        CMD_ID = 5106;
    }
}


message GetWeeklyReportUltraEndlessRecommendPlayerRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 group_id = 3;
    optional RankShowData rank_data = 4;

    enum CmdId {
        CMD_ID = 5107;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetWeeklyRoutineActivityReq {

    enum CmdId {
        CMD_ID = 4229;
    }
}


message GetWeeklyRoutineActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 cur_schedule_id = 2;
    repeated WeeklyRoutineMission weekly_routine_mission_list = 3;
    repeated uint32 has_take_routine_reward_id_list = 4;
    optional uint32 weekly_routine_contribution = 5;

    enum CmdId {
        CMD_ID = 4230;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
    }
}

message GetWikiDataReq {

    enum CmdId {
        CMD_ID = 1193;
    }
}

message GetWikiDataRsp {
    optional Retcode retcode = 1;
    repeated uint32 has_take_rating_reward_list = 2;
    repeated uint32 has_take_activity_suit_reward_list = 3;

    enum CmdId {
        CMD_ID = 1194;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GetWorldMapDataReq {

    enum CmdId {
        CMD_ID = 1012;
    }
}


message GetWorldMapDataRsp {
    optional Retcode retcode = 1;
    repeated WorldMapData world_map_list = 2;

    enum CmdId {
        CMD_ID = 1013;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GlobalPollingGetDataReq {

    enum CmdId {
        CMD_ID = 5811;
    }
}


message GlobalPollingGetDataRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 last_support_time = 3;
    optional uint32 support_target_id = 4;
    optional uint32 vote_begin_time = 5;
    repeated GlobalPollingTargetData target_data_list = 6;

    enum CmdId {
        CMD_ID = 5812;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 3;
        FEATURE_CLOSED = 4;
    }
}

message GlobalPollingSupportReq {
    optional uint32 target_id = 1;

    enum CmdId {
        CMD_ID = 5813;
    }
}

message GlobalPollingSupportRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5814;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        TARGET_ID_INVALID = 3;
        IN_CD = 4;
    }
}

message GlobalPollingTargetData {
    optional uint32 id = 1;
    optional uint64 score_u64 = 2;
    optional uint32 vote_num = 3;
}

message GlobalPollingVoteReq {
    optional uint32 target_id = 1;
    optional uint32 num = 2;

    enum CmdId {
        CMD_ID = 5815;
    }
}

message GlobalPollingVoteRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5816;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 3;
        VOTE_NOT_OPEN = 4;
        TARGET_ID_INVALID = 5;
        TOO_FREQUENT = 6;
        MATERIAL_LACK = 7;
        FEATURE_CLOSED = 8;
    }
}


message GlobalShopGoodsInfoNotify {
    repeated ShopGoodsInfo shop_goods_list = 1;

    enum CmdId {
        CMD_ID = 1583;
    }
}




message GlobalWarActivity {
    optional uint32 cur_schedule_id = 1;
    optional uint32 display_begin_time = 2;
    optional uint32 display_end_time = 3;
    optional uint32 begin_time = 4;
    optional uint32 end_time = 5;
    optional uint32 total_get_currency = 6;
    optional uint32 last_daily_get_currency = 7;
    optional uint32 total_cost_ticket_num = 8;
    repeated uint32 take_point_reward_list = 9;
    repeated GlobalWarPoint global_war_point_list = 10;
    repeated GlobalWarMember member_list = 11;
    optional uint32 buff_level = 13;
    repeated GlobalWarIsolatePoint global_war_isolate_point_list = 14;
}


message GlobalWarAddCurrencyNotify {
    optional uint32 point_id = 1;
    optional GlobalWarMember global_war_member = 2;

    enum CmdId {
        CMD_ID = 3954;
    }
}

message GlobalWarExchangeCurrencyReq {
    optional uint32 point_id = 1;

    enum CmdId {
        CMD_ID = 3955;
    }
}

message GlobalWarExchangeCurrencyRsp {
    optional Retcode retcode = 1;
    optional uint32 add_currency_num = 2;

    enum CmdId {
        CMD_ID = 3956;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        POINT_NOT_ACTIVE = 2;
        MATERIAL_LACK = 3;
        CURRENCY_FULL = 4;
        AREA_NOT_FINISH = 5;
        STAMINA_LACK = 6;
    }
}

message GlobalWarGetRankReq {
    optional uint32 point_id = 1;

    enum CmdId {
        CMD_ID = 3957;
    }
}


message GlobalWarGetRankRsp {
    optional Retcode retcode = 1;
    optional uint32 point_id = 2;
    optional RankShowData rank_data = 3;

    enum CmdId {
        CMD_ID = 3958;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GlobalWarIsolatePoint {
    optional uint32 point_id = 1;
    optional uint32 point_status = 2;
}

enum GlobalWarIsolatePointStatus {
    GLOBAL_WAR_ISOLATE_POINT_STATUS_NONE = 0;
    GLOBAL_WAR_ISOLATE_POINT_STATUS_LOCKED = 1;
    GLOBAL_WAR_ISOLATE_POINT_STATUS_ACTIVE = 2;
    GLOBAL_WAR_ISOLATE_POINT_STATUS_CLOSE = 3;
}

message GlobalWarMember {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 level = 3;
    optional uint32 head_avatar_id = 4;
    optional uint32 frame_id = 5;
    optional uint32 dress_id = 6;
    optional uint32 custom_head_id = 7;
    optional uint32 global_war_point_id = 8;
    optional uint32 global_war_add_currency = 9;
    optional uint32 global_war_add_time = 10;
}

message GlobalWarPoint {
    optional uint32 point_id = 1;
    optional uint32 cur_hp = 2;
    optional uint32 point_status = 3;
    optional uint32 last_refresh_member_num = 4;
    optional uint32 point_finish_time = 5;
    optional uint32 last_take_sweep_reward_time = 6;
}

enum GlobalWarPointRankType {
    GLOBAL_WAR_POINT_RANK_NONE = 0;
    GLOBAL_WAR_POINT_RANK_CURRENCY = 1;
    GLOBAL_WAR_POINT_RANK_SCORE = 2;
}

enum GlobalWarPointStatus {
    GLOBAL_WAR_POINT_STATUS_NONE = 0;
    GLOBAL_WAR_POINT_STATUS_LOCKED = 1;
    GLOBAL_WAR_POINT_STATUS_ACTIVE = 2;
    GLOBAL_WAR_POINT_STATUS_CLOSE = 3;
}

enum GlobalWarPointType {
    GLOBAL_WAR_POINT_TYPE_NONE = 0;
    GLOBAL_WAR_POINT_TYPE_NORMAL = 1;
    GLOBAL_WAR_POINT_TYPE_CRITICAL = 2;
    GLOBAL_WAR_POINT_TYPE_BOSS = 3;
}

enum GlobalWarStageType {
    GLOBAL_WAR_STAGE_FOR_NONE = 0;
    GLOBAL_WAR_STAGE_FOR_POINT = 1;
    GLOBAL_WAR_STAGE_FOR_ISOLATE_POINT = 2;
}

message GlobalWarTakePointRewardReq {
    repeated uint32 point_id_list = 1;

    enum CmdId {
        CMD_ID = 3952;
    }
}


message GlobalWarTakePointRewardRsp {
    optional Retcode retcode = 1;
    repeated uint32 point_id_list = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 3953;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        POINT_NOT_FINISH = 2;
        CURRENCY_LACK = 3;
    }
}

message GlobalWarTakeSweepRewardReq {
    repeated uint32 point_id_list = 1;

    enum CmdId {
        CMD_ID = 3959;
    }
}


message GlobalWarTakeSweepRewardRsp {
    optional Retcode retcode = 1;
    repeated SweepCurrency sweep_currency_list = 2;

    enum CmdId {
        CMD_ID = 3960;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        POINT_NOT_FINISH = 2;
        SWEEP_MATERIAL_CD = 3;
    }
}

message GmTalkReq {
    optional string msg = 1;

    enum CmdId {
        CMD_ID = 22;
    }
}

message GmTalkRsp {
    optional Retcode retcode = 1;
    optional string msg = 2;
    optional string retmsg = 3;

    enum CmdId {
        CMD_ID = 23;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GobackActivity {
    optional uint32 id = 1;
    optional uint32 end_time = 2;
}

message GobackActivityLoginReward {
    optional uint32 take_days = 1;
    repeated uint32 take_reward_list = 2;
    repeated uint32 take_bonus_reward_list = 3;
}

message GobackFund {
    optional uint32 id = 1;
    optional bool is_unlocked = 2;
    repeated uint32 has_take_reward_progress_list = 3;
}

message GobackGrowUpActivity {
    repeated uint32 joined_rank_id_list = 1;
}

enum GobackLoginRewardType {
    GOBACK_LOGIN_REWARD_COMMON = 1;
    GOBACK_LOGIN_REWARD_BONUS = 2;
}

enum GobackNewbieLevelSourceType {
    GOBACK_NEWBIE_LEVEL_SOURCE_GOBACK_NEWBIE_LEVEL = 0;
    GOBACK_NEWBIE_LEVEL_SOURCE_GOBACK_LEVEL = 1;
}





message GodWar {
    optional uint32 god_war_id = 1;
    repeated GodWarTale tale_list = 2;
    optional uint32 begin_time = 3;
    optional uint32 end_time = 4;
    repeated GodWarTalent talent_list = 5;
    optional uint32 max_support_point = 6;
    optional uint32 lobby_id = 9;
    repeated GodWarChapter chapter_list = 14;
    optional uint32 cur_chapter_id = 15;
    optional GodWarRoleInfo role_info = 16;
}

message GodWarAvatarExpUp {
    optional uint32 begin_time = 1;
    optional uint32 end_time = 2;
    repeated uint32 avatar_id_list = 3;
    optional uint32 up_ratio = 4;
    optional uint32 schedule_id = 5;
}


message GodWarBonus {
    optional uint32 bonus_id = 1;
    optional uint32 count_down = 2;
    optional GodWarBuff buff = 3;
}

message GodWarBuff {
    optional uint32 buff_id = 1;
    optional uint32 buff_level = 2;
}




message GodWarChallenge {
    optional bool is_challenge_fail = 1;
    repeated GodWarChallengeAvatar avatar_list = 2;
    repeated uint32 support_avatar_id_list = 3;
    optional uint32 elf_id = 4;
    optional uint32 extra_item_id = 5;
    optional uint32 refresh_teleport_times = 6;
    repeated GodWarPunishBuff punish_buff_list = 7;
    optional uint32 challenge_score = 8;
    optional uint32 random_seed = 9;
    optional uint32 step_level = 10;
    repeated uint32 punish_buff_id_list = 11;
    optional bool is_use_virtual_avatar = 12;
    repeated uint32 boon_buff_id_list = 13;
    optional uint32 gain_coin_num = 14;
    optional uint32 refresh_teleport_times_limit = 15;
    optional uint32 assistant_extra_item_id = 16;
    repeated GodWarBonus bonus_list = 17;
}


message GodWarChallengeAvatar {
    optional uint32 avatar_id = 1;
    optional uint32 hp_percent = 2;
    optional bool is_virtual = 3;
    optional uint32 weapon_id = 4;
    optional uint32 weapon_level = 5;
    optional GodWarChallengeStigmata stigmata_1 = 6;
    optional GodWarChallengeStigmata stigmata_2 = 7;
    optional GodWarChallengeStigmata stigmata_3 = 8;
}

message GodWarChallengeHistory {
    optional uint32 avatar_id = 1;
    optional bool is_challenge_succ = 2;
    optional uint32 max_punish_level = 3;
    repeated uint32 pass_step_level_list = 4;
    optional uint32 max_challenge_score = 5;
}


message GodWarChallengeStigmata {
    optional uint32 id = 1;
    optional uint32 level = 2;
    repeated StigmataRune rune_list = 3;
}

message GodWarChapter {
    optional uint32 chapter_id = 1;
    optional bool is_locked = 2;
}

message GodWarOverall {
    optional uint32 overall_id = 1;
    optional uint32 overall_val = 2;
}

message GodWarPunishBuff {
    optional uint32 buff_id = 1;
    optional uint32 buff_level = 2;
}



message GodWarRoleInfo {
    repeated GodWarRoleRelation role_relation_list = 1;
    optional GodWarAvatarExpUp avatar_exp_up = 2;
    repeated uint32 main_avatar_id_list = 3;
    repeated uint32 support_avatar_id_list = 4;
}

message GodWarRoleRelation {
    optional uint32 role_id = 1;
    optional uint32 level = 2;
    optional uint32 exp = 3;
    optional uint32 reward_has_take_level = 4;
    repeated uint32 reward_has_take_story_list = 5;
}


message GodWarSite {
    optional uint32 site_id = 1;
    optional GodWarSiteStatus site_status = 2;
}

enum GodWarSiteStatus {
    GOD_WAR_SITE_STATUS_INVALID = 0;
    GOD_WAR_SITE_STATUS_HIDE = 1;
    GOD_WAR_SITE_STATUS_SHOW = 2;
    GOD_WAR_SITE_STATUS_UNLOCKED = 3;
    GOD_WAR_SITE_STATUS_CLOSED = 4;
}

message GodWarStatus {
    optional uint32 teleport_id = 1;
    optional bool is_abandon = 3;
}

message GodWarSwitchData {
    optional uint32 god_war_id = 1;
}





//import "GodWarSite.proto";
message GodWarTale {
    optional uint32 tale_id = 1;
    optional uint32 schedule_id = 2;
    //repeated GodWarSite site_list = 3;
    optional uint32 cur_site_id = 4;
    optional uint32 begin_time = 5;
    optional uint32 end_time = 6;
    optional GodWarChallenge challenge = 7;
    repeated GodWarBuff buff_list = 8;
    optional uint32 avatar_schedule_id = 9;
    repeated GodWarChallengeHistory challenge_history_list = 10;
    optional bool is_locked = 11;
    repeated GodWarOverall overall_list = 12;
}

message GodWarTalent {
    optional uint32 talent_id = 1;
    optional uint32 talent_level = 2;
}


message Goods {
    optional uint32 goods_id = 1;
    optional uint32 buy_times = 2;
    optional bool can_be_refresh = 3;
    optional RefreshTimeType refresh_time_type = 4;
    optional bool is_backpack_restrict = 5;
    optional uint32 begin_time = 6;
    optional uint32 end_time = 7;
    optional ShowType show_type = 8;
    optional string unlock_tips = 9;
    optional uint32 prepare_time = 10;
    optional uint32 sort_id = 11;
    optional string product_name = 12;
    optional uint32 product_id = 13;
    optional uint32 product_price = 14;
    optional string show_setting_str = 15;
    optional uint32 show_new_tag = 16;
    repeated uint32 mall_anchor_list = 17;
    optional bool is_ignore = 18;
    optional uint32 unlock_type = 19;
    optional uint32 unlock_para_int = 20;
    optional string unlock_para_str = 21;
    optional uint32 prepare_level = 22;
    optional uint32 min_level = 23;
    optional uint32 max_level = 24;
    optional GoodsDiscount discount = 25;
    optional bool is_popup = 26;
    optional bool is_hide_price = 27;

    enum RefreshTimeType {
        SHOP_TYPE = 0;
        DAY_TYPE = 1;
        WEEK_TYPE = 2;
        MONTH_TYPE = 3;
        VERSION_TYPE = 4;
        DOUBLE_WEEK_TYPE = 5;
    }
    enum ShowType {
        NORMAL_SHOW = 1;
        LOCK_SHOW = 2;
    }
}


message GoodsDiscount {
    optional uint32 begin_time = 1;
    optional uint32 end_time = 2;
    optional uint32 discount = 3;
    optional BuyGoodsCost goods_cost = 4;
}


message GrandKey {
    optional uint32 id = 1;
    optional uint32 end_time = 2;
    optional uint32 unlock_level = 3;
    optional uint32 scoin_num = 4;
    optional uint32 level = 5;
    optional uint32 breach_level = 6;
    optional uint32 activate_level = 7;
    optional GrandKeySkill skill = 8;
}


message GrandKeyActivateSkillReq {
    repeated GrandKeySkill key_list = 1;

    enum CmdId {
        CMD_ID = 759;
    }
}

message GrandKeyActivateSkillRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 760;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LIMIT = 2;
        REPEAT_ACTIVATE = 3;
        SKILL_LOCK = 4;
        NUM_LIMIT = 5;
    }
}

message GrandKeyBreachReq {
    optional uint32 key_id = 1;

    enum CmdId {
        CMD_ID = 757;
    }
}

message GrandKeyBreachRsp {
    optional Retcode retcode = 1;
    optional uint32 key_id = 2;
    optional uint32 breach_level = 3;

    enum CmdId {
        CMD_ID = 758;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        WEAPON_LIMIT = 2;
    }
}

message GrandKeyContrastReq {
    optional uint32 unique_id = 1;

    enum CmdId {
        CMD_ID = 761;
    }
}

message GrandKeyContrastRsp {
    optional Retcode retcode = 1;
    optional uint32 unique_id = 2;
    optional uint32 unique_id_after = 3;

    enum CmdId {
        CMD_ID = 762;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message GrandKeyLevelUpReq {
    optional uint32 key_id = 1;

    enum CmdId {
        CMD_ID = 753;
    }
}

message GrandKeyLevelUpRsp {
    optional Retcode retcode = 1;
    optional uint32 key_id = 2;
    optional uint32 level = 3;

    enum CmdId {
        CMD_ID = 754;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        WEAPON_LEVEL_LIMIT = 2;
        MATERIAL_LIMIT = 3;
        MAX_LEVEL = 4;
        PLAYER_LEVEL_LIMIT = 5;
    }
}

message GrandKeyResetReq {
    repeated uint32 key_id_list = 1;

    enum CmdId {
        CMD_ID = 755;
    }
}

message GrandKeyResetRsp {
    optional Retcode retcode = 1;
    repeated uint32 key_id_list = 2;

    enum CmdId {
        CMD_ID = 756;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message GrandKeySetSkillReq {
    repeated GrandKeySkill key_list = 1;

    enum CmdId {
        CMD_ID = 763;
    }
}

message GrandKeySetSkillRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 764;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_ACTIVE = 2;
        SKILL_LOCKED = 3;
        NUM_LIMIT = 4;
    }
}

message GrandKeySkill {
    optional uint32 key_id = 1;
    optional uint32 skill_id = 2;
    optional uint32 last_time = 3;
}


message GrantOuterRewardNotify {
    optional uint32 event_type = 1;
    optional uint32 event_id = 2;
    optional RewardData reward_data = 3;
    optional string ticket = 4;

    enum CmdId {
        CMD_ID = 4247;
    }
}

enum GratuityAcceptType {
    GRATUITY_ACCEPT_NONE = 0;
    GRATUITY_ACCEPT_FREE = 1;
    GRATUITY_ACCEPT_ACTIVITY = 2;
}


message GratuityBattle {
    optional uint32 stage_unique_id = 1;
    optional GratuityPlayer player_info = 2;
    optional uint32 damage = 3;
    optional uint32 stage_begin_time = 4;
    optional bool is_bonus = 5;
    optional uint32 stage_id = 6;
}

message GratuityMonster {
    optional uint32 monster_id = 1;
    optional uint32 left_hp = 2;
}

message GratuityPlayer {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 cost_hp = 3;
    optional uint32 frame_id = 4;
    optional uint32 custom_head_id = 5;
}

message GratuityPlayerInfo {
    optional string nickname = 1;
    optional uint32 level = 2;
    optional uint32 frame_id = 3;
    optional uint32 custom_head_id = 4;
}



message GratuityStage {
    optional uint32 stage_unique_id = 1;
    optional uint32 expire_time = 2;
    optional uint32 accept_uid = 3;
    optional uint32 stage_id = 4;
    optional uint32 stage_group = 5;
    repeated GratuityMonster monster_list = 6;
    repeated GratuityPlayer player_list = 7;
    optional uint32 publish_time = 8;
}


message GratuityStageFinishNotify {
    optional uint32 schedule_id = 1;
    optional GratuityStage stage = 2;

    enum CmdId {
        CMD_ID = 4121;
    }
}


message GratuityStageInviteNotify {
    optional uint32 schedule_id = 1;
    optional GratuityStage stage = 2;

    enum CmdId {
        CMD_ID = 4120;
    }
}

message GratuityStageMessage {
    optional MessageType message_type = 1;
    optional uint32 from_uid = 2;
    repeated MonsterDamage monster_damage_list = 3;

    enum MessageType {
        MESSAGE_NONE = 0;
        MESSAGE_MONSTER_DAMAGE = 1;
    }
    message MonsterDamage {
        optional uint32 monster_id = 1;
        optional uint32 cost_hp = 2;
    }
}

message GratuityStageMeta {
    optional uint32 stage_id = 1;
    optional uint32 stage_group = 2;
    optional uint32 expire_time = 3;
}

message GreedyEndless {
    optional bool is_need_enroll = 1;
    optional uint32 floor_config_id = 2;
    optional uint32 reward_config_id = 3;
    optional uint32 cur_floor = 4;
    optional uint32 max_finish_floor = 5;
    repeated uint32 finish_challenge_id_list = 6;
}

message GreedyEndlessEnrollReq {

    enum CmdId {
        CMD_ID = 3453;
    }
}

message GreedyEndlessEnrollRsp {
    optional Retcode retcode = 1;
    optional uint32 new_group_id = 2;

    enum CmdId {
        CMD_ID = 3454;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ALREADY_ENROLL = 2;
    }
}


message GreedyEndlessFloorRewardNotify {
    optional RewardData reward_data = 1;
    optional uint32 max_finish_floor = 2;
    repeated uint32 finish_challenge_id_list = 6;

    enum CmdId {
        CMD_ID = 3457;
    }
}

enum GreedyEndlessFloorType {
    GREEDY_ENDLESS_FLOOR_DEMOTE = 1;
    GREEDY_ENDLESS_FLOOR_NORMAL = 2;
    GREEDY_ENDLESS_FLOOR_PROMOTE = 3;
}

message GreedyEndlessGetRankReq {

    enum CmdId {
        CMD_ID = 3458;
    }
}


message GreedyEndlessGetRankRsp {
    optional Retcode retcode = 1;
    optional RankShowData rank_data = 2;

    enum CmdId {
        CMD_ID = 3459;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_RANK = 2;
    }
}

message GreedyEndlessReportFloorBeginReq {
    optional uint32 floor = 1;

    enum CmdId {
        CMD_ID = 3464;
    }
}

message GreedyEndlessReportFloorBeginRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3465;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}




message GreedyEndlessReportFloorEndReq {
    optional uint32 floor = 1;
    repeated uint32 finish_challenge_id_list = 3;
    optional uint32 score = 4;
    optional uint32 extra_score = 5;
    optional LineupBriefInfo lineup_info = 6;
    optional uint32 stage_cost_time = 7;
    optional StageEndStatus end_status = 8;
    repeated StageCheatData cheat_data_list = 9;

    enum CmdId {
        CMD_ID = 3455;
    }
}



message GreedyEndlessReportFloorEndRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;
    optional uint32 next_floor = 3;
    optional uint32 max_finish_floor = 4;
    optional uint32 total_score = 5;
    repeated uint32 finish_challenge_id_list = 6;
    optional LineupBriefInfo max_score_lineup_info = 7;

    enum CmdId {
        CMD_ID = 3456;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FEATURE_CLOSED = 2;
        NOT_CUR_FLOOR = 3;
    }
}

message GreedyEndlessTakeRankRewardReq {

    enum CmdId {
        CMD_ID = 3460;
    }
}


message GreedyEndlessTakeRankRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 group_level = 2;
    optional uint32 rank_percent = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 3461;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
        NO_REWARD = 3;
    }
}

message GroupChatParam {
    optional uint32 chatgroup_id = 1;
}



message HcoinGachaData {
    optional uint32 ticket_hcoin_cost = 2;
    optional uint32 ticket_material_id = 3;
    optional WishWellData wish_well_data = 7;
    optional uint32 shining_type = 8;
    optional uint32 gacha_panel_type = 9;
    optional uint32 protect_type_id = 10;
    optional uint32 protect_left_times = 11;
    optional GachaProtectDisplayInfo protect_display_info = 12;
    optional uint32 display_max_times = 13;
}

message HexieSwitchData {
}


message HistoryPrivateChatMsg {
    optional uint32 uid = 1;
    repeated ChatMsg chat_msg_list = 2;
}

enum HybridSiteType {
    HYBRID_SITE_TYPE_STORE = 0;
    HYBRID_SITE_TYPE_CYCLE = 1;
    HYBRID_SITE_TYPE_EX = 2;
    HYBRID_SITE_TYPE_BOSS = 3;
    HYBRID_SITE_TYPE_COLLECTION = 4;
    HYBRID_SITE_TYPE_MP = 5;
    HYBRID_SITE_TYPE_CHALLENGE = 6;
    HYBRID_SITE_TYPE_ZONE_CYCLE = 7;
    HYBRID_SITE_TYPE_ZONE_CHALLENGE = 8;
    HYBRID_SITE_TYPE_EX_BOSS = 9;
    HYBRID_SITE_TYPE_TOWER = 10;
    HYBRID_SITE_TYPE_CG = 11;
}

message ImpeachDanmakuReq {
    optional uint32 danmaku_slot = 1;
    optional uint32 sender_uid = 2;
    optional string danmaku_id = 3;

    enum CmdId {
        CMD_ID = 1549;
    }
}

message ImpeachDanmakuRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 1550;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TOO_FREQUENT = 2;
        IMPEACH_SELF = 3;
    }
}

message InheritStigmataTitleReq {
    optional uint32 unique_id = 1;
    optional uint32 level = 2;

    enum CmdId {
        CMD_ID = 328;
    }
}

message InheritStigmataTitleRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 329;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STIGMATA_NOT_EXIST = 2;
        MATERIAL_LACK = 3;
        SCOIN_LACK = 4;
        LEVEL_ERROR = 5;
        TARGET_LEVEL_ERROR = 6;
        LEVEL_LACK = 7;
    }
}

message InitRogueStageReq {
    optional uint32 hard_level = 1;
    repeated uint32 avatar_id_list = 2;

    enum CmdId {
        CMD_ID = 277;
    }
}

message InitRogueStageRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 278;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_JOIN_ARMADA = 2;
        NOT_RESET = 3;
        AVATAR_NUM_ERROR = 4;
        AVATAR_NOT_EXIST = 5;
        HARD_LEVEL_ERROR = 6;
        LEVEL_LACK = 7;
        NOT_OPEN = 8;
    }
}





message InLevelActorSnapshot {
    optional InLevelAvatarActorSnapshot avatar_snapshot = 1;
    optional InLevelMonsterActorSnapshot monster_snapshot = 2;
    optional InLevelBaseActorSnapshot base_snapshot = 3;
    repeated InLevelEntityProperty property_list = 4;
}

message InLevelAttackDataSnapshot {
    optional float attacker_ani_damage_Ratio = 1;
    optional uint32 attacker_class = 2;
    optional uint32 attacker_nature = 3;
    optional uint32 attacker_category = 4;
    optional float attacker_crit_chance = 5;
    optional float attacker_crit_damage_ratio = 6;
    optional uint32 attacker_level = 7;
    optional float attacker_shield_damage_ratio = 8;
    optional float attacker_shield_damage_delta = 9;
    optional float attacker_attack_percentage = 10;
    optional float attacker_attack_value = 11;
    optional float added_attack_ratio = 12;
    optional float added_damage_ratio = 13;
    optional float added_damage_ratio2 = 14;
    optional float attacker_added_attack_value = 15;
    optional float attacker_all_damage_reduce_ratio = 16;
    optional float attacker_fire_damage = 17;
    optional float attacker_fire_damage_percentage = 18;
    optional float added_attacker_fire_damage_ratio = 19;
    optional float attacker_thunder_damage = 20;
    optional float attacker_thunder_damage_percentage = 21;
    optional float added_attacker_thunder_damage_ratio = 22;
    optional float attacker_ice_damage = 23;
    optional float attacker_ice_damage_percentage = 24;
    optional float added_attacker_ice_damage_ratio = 25;
    optional float attackee_ani_defence_ratio = 26;
    optional uint32 attackee_nature = 27;
    optional uint32 attackee_class = 28;
    optional float attackee_added_damage_take_ratio = 29;
    optional float attackee_normal_damage_taken_ratio = 30;
    optional float attackee_fire_damage_taken_ratio = 31;
    optional float attackee_ice_damage_taken_ratio = 32;
    optional float attackee_thunder_damage_taken_ratio = 33;
    optional float fire_damage = 34;
    optional float thunder_damage = 35;
    optional float ice_damage = 36;
    optional float ani_damage_ratio = 37;
    optional float retreat_velocity = 38;
    optional uint32 frame_halt = 39;
    optional bool is_anim_event_attack = 40;
    optional bool is_in_combo_count = 41;
    optional uint32 attack_category_tag = 42;
    optional uint32 hit_type = 43;
    optional uint32 hit_flag = 44;
    optional uint32 hit_level = 45;
    optional uint32 hit_effect = 46;
    optional uint32 hit_effect_aux = 47;
    optional float added_attack_ratio2 = 48;
    optional float added_attacker_fire_damage_ratio2 = 49;
    optional float added_attacker_thunder_damage_ratio2 = 50;
    optional float added_attacker_ice_damage_ratio2 = 51;
    optional float added_attacker_burn_damage_ratio = 52;
    optional float added_attacker_burn_damage_ratio2 = 53;
    optional float added_attacker_burn_damage_delta = 54;
    optional float added_attacker_bleed_damage_ratio = 55;
    optional float added_attacker_bleed_damage_ratio2 = 56;
    optional float added_attacker_bleed_damage_delta = 57;
}



message InLevelAttackSnapshot {
    optional uint32 time = 1;
    optional InLevelAttackDataSnapshot attack_data_created = 2;
    optional InLevelAttackDataSnapshot attack_data_resoved = 3;
    repeated InLevelActorSnapshot actor_list = 4;
}



message InLevelAttackSnapshotInfo {
    optional InLevelContext context = 1;
    repeated InLevelAttackSnapshot snapshot_list = 2;
}


message InLevelAvatarActorSnapshot {
    optional uint32 avatar_id = 1;
    repeated InLevelAvatarSkillInfo skill_list = 2;
    optional uint32 weapon_id = 3;
    optional uint32 weapon_level = 4;
    optional uint32 stigmata_1_id = 5;
    optional uint32 stigmata_1_level = 6;
    optional uint32 stigmata_2_id = 7;
    optional uint32 stigmata_2_level = 8;
    optional uint32 stigmata_3_id = 9;
    optional uint32 stigmata_3_level = 10;
}

message InLevelAvatarSkillInfo {
    optional string skill_name = 1;
    optional float cd = 2;
    optional float cost_sp = 3;
    optional float need_sp = 4;
    optional float cd_timer = 5;
    optional uint32 max_charges_count = 6;
    optional uint32 charges_counter = 7;
    optional bool can_hold = 8;
    optional string instant_trigger_anim_event_id = 9;
}

message InLevelBaseActorSnapshot {
    optional float base_max_hp = 1;
    optional float base_max_sp = 2;
    optional float max_hp = 3;
    optional float max_sp = 4;
    optional float hp = 5;
    optional float sp = 6;
    optional uint32 level = 7;
    optional float attack = 8;
    optional float defense = 9;
    optional bool is_alive = 10;
    optional float total_overkill_damage = 11;
}

message InLevelContext {
    optional ContextType type = 1;
    optional string context_string = 2;

    enum ContextType {
        INVALID = 0;
        NORMAL = 1;
        ENDLESS = 2;
        OPENWORLD_ENDLESS = 3;
        EXBOSS = 4;
    }
}

message InLevelEntityProperty {
    optional string name = 1;
    optional float value = 2;
}

message InLevelMonsterActorSnapshot {
    optional string monster_name = 1;
}

message InviteActivityAcceptInviteReq {
    optional string invite_code = 1;

    enum CmdId {
        CMD_ID = 1696;
    }
}



message InviteActivityAcceptInviteRsp {
    optional Retcode retcode = 1;
    optional uint32 invite_uid = 2;
    optional InviteeActivityType invite_type = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 1697;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        INVITE_CODE_ERROR = 2;
        LEVEL_LACK = 3;
        INVITE_FULL = 4;
        INVITE_INVALID_REGION = 5;
        INVITE_CONDITION_ERROR = 6;
        NO_ACTIVITY = 7;
        ALREADY_INVITED = 8;
        INVITE_DAILY_LIMIT = 9;
        FEATURE_CLOSED = 10;
    }
}


message InviteActivityData {
    optional uint32 begin_time = 1;
    optional uint32 end_time = 2;
    optional uint32 has_invite_num = 3;
    repeated InviteFriendRewardData my_invite_reward_list = 4;
}

message InviteActivitySwitchData {
}

message InviteChatgroupReq {
    optional uint32 chatgroup_id = 1;
    repeated uint32 friend_list = 2;
    repeated uint32 master_pupil_list = 3;
    repeated uint32 stranger_uid_list = 4;

    enum CmdId {
        CMD_ID = 2202;
    }
}

message InviteChatgroupRsp {
    optional Retcode retcode = 1;
    repeated uint32 succ_uid_list = 2;
    repeated uint32 succ_stranger_uid_list = 3;

    enum CmdId {
        CMD_ID = 2203;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_CREATER = 2;
        EXCEED_MAX_MEMBER_NUM = 3;
        GROUP_NOT_FOUND = 4;
        NOT_IN_GROUP = 5;
        UID_NOT_EXIST = 6;
        FRIEND_ERROR = 7;
        MASTER_PUPIL_ERROR = 8;
        FEATURE_LIMIT = 9;
        FEATURE_CLOSED = 10;
    }
}


message InviteeActivity {
    optional uint32 schedule_id = 1;
    optional InviteeActivityType activity_type = 2;
    optional uint32 taken_invitee_reward_id = 3;
    optional uint32 end_time = 4;
}

enum InviteeActivityType {
    INVITEE_ACTIVITY_TYPE_NONE = 0;
    INVITEE_ACTIVITY_TYPE_NEWBIE = 1;
    INVITEE_ACTIVITY_TYPE_GOBACK = 2;
}


message InviteeFriendRewardData {
    optional uint32 level = 1;
    repeated RewardData reward_list = 2;
}


message InviteFriendRewardData {
    optional uint32 level = 1;
    optional uint32 cur_num = 2;
    optional uint32 max_num = 3;
    repeated RewardData reward_list = 4;
}

message InviterActivity {
    optional uint32 schedule_id = 1;
    optional uint32 invite_num = 2;
    optional uint32 taken_reward_progress = 3;
    optional uint32 accept_invite_num = 4;
}

enum InviterActivityType {
    INVITER_ACTIVITY_TYPE_NONE = 0;
    INVITER_ACTIVITY_TYPE_NORMAL = 1;
    INVITER_ACTIVITY_TYPE_LIMIT_TIME = 2;
}

message InviteRoomReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 3160;
    }
}

message InviteRoomRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3161;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ROOM = 2;
        ROOM_IN_MATCHING = 3;
        IS_IN_BATTLE = 4;
        TOO_FREQUENT = 5;
        INVITE_SELF = 6;
        NO_SCHEDULE = 7;
    }
}

message InviteToMultiChatgroupReq {
    optional uint32 target_uid = 1;
    repeated uint32 chatgroup_id_list = 2;
    optional bool is_has_relation = 3;

    enum CmdId {
        CMD_ID = 2216;
    }
}

message InviteToMultiChatgroupRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;
    repeated uint32 chatgroup_id_list = 3;
    optional bool is_stranger = 4;

    enum CmdId {
        CMD_ID = 2217;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        JOIN_MAX_NUM = 2;
        FEATURE_CLOSED = 3;
    }
}

message IslandAvatarPos {
    optional uint32 avatar_class = 1;
    optional uint32 pos_type = 2;
    repeated uint32 event_id_list = 3;
}



message IslandDisjoinEquipmentReq {
    optional EquipmentType type = 1;
    repeated uint32 unique_id_list = 2;
    optional DisjoinType disjoin_type = 3;

    enum CmdId {
        CMD_ID = 179;
    }
}

message IslandDisjoinEquipmentRsp {
    optional Retcode retcode = 1;
    repeated uint32 disjoin_unique_id_list = 2;

    enum CmdId {
        CMD_ID = 180;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CABIN_TECH_NOT_ADD = 2;
        CONSUME_ITEM_NOT_EXIST = 3;
        CONSUME_ITEM_IN_USE = 4;
        CONSUME_ITEM_PROTECTED = 5;
        SCOIN_LACK = 6;
        EQUIPMENT_FULL = 7;
        COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 8;
        COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 9;
        TITLE_LEVEL_ERROR = 10;
        BATCH_NUM = 11;
        LEVEL_LACK = 12;
        CONSUME_ITEM_REPEAT = 13;
        COST_GACHA_TICKET = 14;
        CONSUME_ITEM_GRAND_KEY = 15;
        CONSUME_ITEM_IN_FACILITY = 16;
        EX_DISJOIN_CURRENCY_LACK = 17;
        CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 18;
    }
}

enum IslandEventCondType {
    ISLAND_EVENT_COND_ONE_WEATHER = 1;
    ISLAND_EVENT_COND_AVATAR_GOODFEEL = 2;
    ISLAND_EVENT_COND_HAS_AVATAR = 3;
    ISLAND_EVENT_COND_ROLE_AFFINITY = 4;
    ISLAND_EVENT_COND_ALL_AFFINITY = 5;
    ISLAND_EVENT_COND_HAS_ONE_EQUIPMENT = 201;
    ISLAND_EVENT_COND_AVATAR = 202;
    ISLAND_EVENT_COND_FINISH_ONE_EVENT = 203;
    ISLAND_EVENT_COND_POS = 204;
    ISLAND_EVENT_COND_SITE = 205;
}

enum IslandPositionType {
    ISLAND_POSITION_CABIN_POWER = 1;
    ISLAND_POSITION_CABIN_ENHANCE_KIANA = 2;
    ISLAND_POSITION_CABIN_COLLECT = 3;
    ISLAND_POSITION_CABIN_MISC = 4;
    ISLAND_POSITION_CABIN_VENTURE = 5;
    ISLAND_POSITION_CABIN_ENHANCE_MEI = 6;
    ISLAND_POSITION_CABIN_ENHANCE_BRONYA = 7;
    ISLAND_POSITION_CABIN_ENHANCE_HIMEKO = 8;
    ISLAND_POSITION_CABIN_ENHANCE_THERESA = 9;
    ISLAND_POSITION_CABIN_ENHANCE_FUKA = 10;
    ISLAND_POSITION_NULL = 21;
    ISLAND_POSITION_MAIN = 22;
}

message IslandStorySweepData {
    optional uint32 sweep_id = 1;
    optional uint32 over_time = 2;
    optional bool is_finished = 3;
    optional bool is_sieged = 4;
    repeated uint32 avatar_id_list = 5;
}

message IslandVenture {
    optional uint32 id = 1;
    optional uint32 end_time = 2;
    repeated uint32 avatar_id = 3;
}

enum IslandVentureDispatchCond {
    ISLAND_VENTURE_AVATAR_ID = 1;
    ISLAND_VENTURE_AVATAR_EACH_LEVEL = 2;
    ISLAND_VENTURE_AVATAR_ONE_LEVEL = 3;
    ISLAND_VENTURE_AVATAR_TOTAL_LEVEL = 4;
    ISLAND_VENTURE_AVATAR_EACH_STAR = 5;
    ISLAND_VENTURE_AVATAR_ONE_STAR = 6;
    ISLAND_VENTURE_AVATAR_NUM = 7;
    ISLAND_VENTURE_AVATAR_ATTR_NUM = 8;
    ISLAND_VENTURE_AVATAR_CLASS_NUM = 9;
    ISLAND_VENTURE_AVATAR_ATTR_NOT_SAME = 10;
    ISLAND_VENTURE_AVATAR_CLASS_NOT_SAME = 11;
}



message IslandVisitRecord {
    optional IslandVisitRecordType record_type = 1;
    optional uint32 visit_time = 2;
    optional uint32 visit_uid = 3;
    optional uint32 visit_event_id = 4;
    repeated RewardData reward_list = 5;
}

enum IslandVisitRecordType {
    ISLAND_RECORD_HELP_FRIEND = 1;
    ISLAND_RECORD_BE_HELPED = 2;
    ISLAND_RECORD_LIKE = 3;
    ISLAND_RECORD_BE_LIKED = 4;
}

message ItemUseSwitchData {
    optional uint32 use_id = 1;
}

message JigsawBlockData {
    optional uint32 block_id = 1;
    optional uint32 piece_id = 2;
}


message JigsawData {
    optional uint32 jigsaw_id = 1;
    repeated JigsawBlockData block_list = 2;
    repeated uint32 waiting_piece_id_list = 3;
    repeated uint32 taken_reward_group_id_list = 4;
    optional bool is_finish_reward_taken = 5;
    optional bool is_finished = 6;
}

message JigsawExchangePieceReq {
    optional uint32 activity_id = 1;
    optional uint32 jigsaw_id = 2;

    enum CmdId {
        CMD_ID = 4275;
    }
}

message JigsawExchangePieceRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 jigsaw_id = 3;

    enum CmdId {
        CMD_ID = 4276;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        JIGSAW_NOT_BEGIN = 3;
        PRE_JIGSAW_NOT_FINISHED = 4;
        ITEMS_LACK = 5;
        NO_PIECE = 6;
    }
}

message JigsawMovePieceInJigsawAreaReq {
    optional uint32 activity_id = 1;
    optional uint32 jigsaw_id = 2;
    optional uint32 source_x = 3;
    optional uint32 source_y = 4;
    optional uint32 target_x = 5;
    optional uint32 target_y = 6;

    enum CmdId {
        CMD_ID = 4279;
    }
}

message JigsawMovePieceInJigsawAreaRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 jigsaw_id = 3;

    enum CmdId {
        CMD_ID = 4280;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        JIGSAW_NOT_BEGIN = 3;
        PRE_JIGSAW_NOT_FINISHED = 4;
        NO_SOURCE_PIECE = 5;
        OUT_OF_RANGE = 6;
        LOCKED = 7;
    }
}

message JigsawMoveWaitingPieceReq {
    optional uint32 activity_id = 1;
    optional uint32 jigsaw_id = 2;
    optional uint32 target_x = 3;
    optional uint32 target_y = 4;

    enum CmdId {
        CMD_ID = 4277;
    }
}

message JigsawMoveWaitingPieceRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 jigsaw_id = 3;

    enum CmdId {
        CMD_ID = 4278;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        JIGSAW_NOT_BEGIN = 3;
        PRE_JIGSAW_NOT_FINISHED = 4;
        NO_WAITING_PIECE = 5;
        OUT_OF_RANGE = 6;
        BLOCK_LOCKED = 7;
    }
}

message JigsawTakeFinishRewardReq {
    optional uint32 activity_id = 1;
    optional uint32 jigsaw_id = 2;

    enum CmdId {
        CMD_ID = 4283;
    }
}


message JigsawTakeFinishRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 jigsaw_id = 3;
    optional RewardData reward = 4;

    enum CmdId {
        CMD_ID = 4284;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        JIGSAW_NOT_BEGIN = 3;
        PRE_JIGSAW_NOT_FINISHED = 4;
        NOT_FINISHED = 5;
        HAS_TAKEN = 6;
    }
}

message JigsawTakeGroupRewardReq {
    optional uint32 activity_id = 1;
    optional uint32 jigsaw_id = 2;
    optional uint32 group_id = 3;

    enum CmdId {
        CMD_ID = 4281;
    }
}


message JigsawTakeGroupRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 jigsaw_id = 3;
    optional uint32 group_id = 4;
    optional RewardData reward = 5;

    enum CmdId {
        CMD_ID = 4282;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        JIGSAW_NOT_BEGIN = 3;
        PRE_JIGSAW_NOT_FINISHED = 4;
        NOT_FINISHED = 5;
        HAS_TAKEN = 6;
    }
}


message JiguangClientTag {
    optional JiguangTagType tag_type = 1;
    repeated uint32 para_list = 2;
}

enum JiguangTagType {
    TAG_NONE = 0;
    TAG_PLAYER_LEVEL = 1;
    TAG_VIP_LEVEL = 2;
    TAG_BATTLE_PASS = 3;
    TAG_GACHA = 4;
}


message JiguangUpdateTagReq {
    repeated JiguangClientTag add_tag_list = 1;
    repeated JiguangClientTag del_tag_list = 2;

    enum CmdId {
        CMD_ID = 1590;
    }
}

message JiguangUpdateTagRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 1591;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message JoinArmadaElectionReq {

    enum CmdId {
        CMD_ID = 2693;
    }
}


message JoinArmadaElectionRsp {
    optional Retcode retcode = 1;
    optional ArmadaImpeachData impeach_data = 2;

    enum CmdId {
        CMD_ID = 2694;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        IMPEACH_NOT_START = 3;
        IN_OPTIONAL_LIST = 4;
        LEVEL_LACK = 5;
        ACCOUNT_NONE = 6;
    }
}

message JoinQuitArmadaNotify {
    optional uint32 uid = 1;
    optional uint32 armada_id = 2;

    enum CmdId {
        CMD_ID = 2805;
    }
}

message KeepAliveNotify {

    enum CmdId {
        CMD_ID = 1;
    }
}

message KickArmadaMemberReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 2623;
    }
}

message KickArmadaMemberRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2624;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_GRANTED = 2;
        NOT_IN_ARMADA = 3;
        TARGET_NOT_IN_ARMADA = 4;
        IN_PROTECT = 5;
    }
}

message KickChatgroupMemberReq {
    optional uint32 chatgroup_id = 1;
    optional uint32 target_uid = 2;

    enum CmdId {
        CMD_ID = 2212;
    }
}

message KickChatgroupMemberRsp {
    optional Retcode retcode = 1;
    optional uint32 chatgroup_id = 2;
    optional uint32 target_uid = 3;

    enum CmdId {
        CMD_ID = 2213;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_CREATER = 2;
        KICK_SELF = 3;
        NOT_MEMBER = 4;
    }
}

message KickLobbyMemberReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 317;
    }
}

message KickLobbyMemberRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 318;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_LOBBY = 2;
        NOT_LEADER = 3;
        TARGET_NOT_EXIST = 4;
    }
}

message KickOutPlayerNotify {
    optional KickOutReason reason = 1;

    enum CmdId {
        CMD_ID = 5007;
    }
    enum KickOutReason {
        REASON_NONE = 0;
        REASON_MTP_ERROR = 1;
        REASON_PLATFORM_ERROR = 2;
        REASON_SQUEEZE = 3;
        REASON_LOGIN_UNFINISH = 4;
    }
}

enum KingdomWarCombatType {
    KINGDOM_WAR_COMBAT_TYPE_NONE = 0;
    KINGDOM_WAR_COMBAT_TYPE_VIP_POINT = 1;
    KINGDOM_WAR_COMBAT_TYPE_LEVEL = 2;
    KINGDOM_WAR_COMBAT_TYPE_AVATAR_STAR = 3;
}



message KingdomWarData {
    repeated KingdomWarPhase phase_list = 1;
    repeated KingdomWarKingdom kingdom_list = 2;
    optional uint32 cur_phase = 3;
    optional bool is_over = 4;
    optional uint32 has_take_max_score = 5;
    optional uint32 has_get_currency_num = 6;
}

message KingdomWarExchangeCurrencyReq {
    optional uint32 point_id = 1;

    enum CmdId {
        CMD_ID = 3062;
    }
}

message KingdomWarExchangeCurrencyRsp {
    optional Retcode retcode = 1;
    optional uint32 point_id = 2;
    optional uint32 currency_num = 3;

    enum CmdId {
        CMD_ID = 3063;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        POINT_ERROR = 3;
        COST_MATERIAL_LACK = 4;
    }
}

message KingdomWarGetPointRankReq {
    optional uint32 point_id = 1;
    optional uint32 kingdom_id = 2;

    enum CmdId {
        CMD_ID = 3064;
    }
}


message KingdomWarGetPointRankRsp {
    optional Retcode retcode = 1;
    optional uint32 point_id = 2;
    optional uint32 kingdom_id = 3;
    optional RankShowData rank_data_list = 4;

    enum CmdId {
        CMD_ID = 3065;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message KingdomWarGetRankReq {
    optional uint32 kingdom_id = 1;

    enum CmdId {
        CMD_ID = 3058;
    }
}


message KingdomWarGetRankRsp {
    optional Retcode retcode = 1;
    optional RankShowData rank_data = 2;
    optional uint32 kingdom_id = 3;

    enum CmdId {
        CMD_ID = 3059;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        KINGDOM_ERROR = 3;
    }
}

message KingdomWarJoinData {
    optional uint32 combat_power = 1;
    optional uint32 last_kingdom_id = 2;
}

message KingdomWarKingdom {
    optional uint32 kingdom_id = 1;
    optional uint32 player_num = 2;
}

enum KingdomWarKingdomStatus {
    KINGDOM_WAR_KINGDOM_NONE = 0;
    KINGDOM_WAR_KINGDOM_DEFENSE = 1;
    KINGDOM_WAR_KINGDOM_ATTACK = 2;
}

message KingdomWarMoveReq {
    optional uint32 target_point = 1;

    enum CmdId {
        CMD_ID = 3052;
    }
}

message KingdomWarMoveRsp {
    optional Retcode retcode = 1;
    optional uint32 cur_point_id = 2;
    optional uint32 today_step = 3;

    enum CmdId {
        CMD_ID = 3053;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        PHASE_ERROR = 2;
        TIME_ERROR = 3;
        POINT_ERROR = 4;
        NOT_FINISH_CUR_POINT = 5;
        NO_TIMES = 6;
        IN_MP_LOBBY = 7;
        IN_MP_MATCH = 8;
    }
}

message KingdomWarOccupyRecord {
    optional uint32 begin_time = 1;
    repeated uint32 occupy_point_list = 2;
    optional uint32 player_score = 3;
}




message KingdomWarPhase {
    optional uint32 phase_id = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    optional uint32 today_begin_time = 4;
    optional uint32 today_end_time = 5;
    repeated KingdomWarPoint point_list = 6;
    repeated KingdomWarPhaseKingdomData kingdom_list = 7;
    optional KingdomWarPhasePlayerData player_data = 8;
    optional uint32 assist_point = 9;
    optional uint32 last_refresh_time = 10;
}


message KingdomWarPhaseKingdomData {
    optional uint32 kingdom_id = 1;
    optional uint32 fame = 2;
    optional uint64 score_u64 = 3;
    optional uint32 rank = 4;
    optional uint32 status = 5;
    optional uint32 bonus_point = 6;
    optional uint32 last_fame = 7;
    repeated KingdomWarOccupyRecord record_list = 8;
    optional uint32 belief = 9;
    optional uint32 last_belief = 10;
}

message KingdomWarPhasePlayerData {
    optional uint32 cur_point_id = 1;
    optional uint32 today_step = 2;
    optional bool is_take_phase_reward = 3;
    optional uint32 vote_point = 4;
    optional uint32 yesterday_score = 5;
    optional uint32 today_finish_stage_num_ = 6;
    optional uint32 last_point_id = 7;
    optional uint32 today_score = 8;
    optional uint32 change_stage_num = 9;
}

enum KingdomWarPhaseSettleType {
    KINGDOM_WAR_PHASE_SETTLE_TYPE_NONE = 0;
    KINGDOM_WAR_PHASE_SETTLE_TYPE_FAME = 1;
    KINGDOM_WAR_PHASE_SETTLE_TYPE_BELIEF = 2;
}

enum KingdomWarPhaseType {
    KINGDOM_WAR_PHASE_NONE = 0;
    KINGDOM_WAR_PHASE_OCCUPY_POINT = 1;
    KINGDOM_WAR_PHASE_ATTACK_AND_DEFENSE = 2;
    KINGDOM_WAR_PHASE_BATTLE_LINE = 3;
}


message KingdomWarPoint {
    optional uint32 point_id = 1;
    optional uint32 cur_kingdom_id = 2;
    repeated KingdomWarPointKingdomData kingdom_list = 3;
    optional uint32 score = 4;
    optional uint32 last_kingdom_id = 5;
    optional uint32 finished_num = 6;
    optional uint32 stage_id = 7;
    optional uint32 today_score = 8;
    optional bool is_open = 9;
}

message KingdomWarPointKingdomData {
    optional uint32 kingdom_id = 1;
    optional uint64 score_u64 = 2;
    optional uint64 vote_score_u64 = 3;
    optional uint64 last_score_u64 = 4;
    optional uint32 player_num = 5;
    repeated KingdomPlayer recent_player_list = 6;
    optional uint32 last_score_time = 7;
    message KingdomPlayer {
        optional string nick_name = 1;
        optional uint32 score = 2;
    }
}

enum KingdomWarPointType {
    KINGDOM_WAR_POINT_NONE = 0;
    KINGDOM_WAR_POINT_NORMAL = 1;
    KINGDOM_WAR_POINT_CHATWORLD = 2;
    KINGDOM_WAR_POINT_MAIN_CITY = 3;
    KINGDOM_WAR_POINT_BOSS = 4;
}

message KingdomWarSwitchData {
}

message KingdomWarTakeDailyRewardReq {
    optional uint32 kingdom_id = 1;

    enum CmdId {
        CMD_ID = 3060;
    }
}



message KingdomWarTakeDailyRewardRsp {
    optional Retcode retcode = 1;
    repeated KingdomWarOccupyRecord record_list = 2;
    repeated RewardData reward_list = 3;

    enum CmdId {
        CMD_ID = 3061;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
        NOT_OPEN = 3;
    }
}

message KingdomWarVoteReq {
    optional uint32 target_point = 1;

    enum CmdId {
        CMD_ID = 3054;
    }
}

message KingdomWarVoteRsp {
    optional Retcode retcode = 1;
    optional uint32 target_point = 2;

    enum CmdId {
        CMD_ID = 3055;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        PHASE_ERROR = 2;
        TIME_ERROR = 3;
        POINT_ERROR = 4;
        HAS_VOTE = 5;
        SCORE_LACK = 6;
    }
}

message LeaveChatgroupReq {
    optional uint32 chatgroup_id = 1;

    enum CmdId {
        CMD_ID = 2208;
    }
}

message LeaveChatgroupRsp {
    optional Retcode retcode = 1;
    optional uint32 chatgroup_id = 2;

    enum CmdId {
        CMD_ID = 2209;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_MEMBER = 2;
    }
}

message LeaveChatroomNotify {
    optional uint32 new_chatroom_id = 1;

    enum CmdId {
        CMD_ID = 2233;
    }
}

message LeaveCommonChatworldReq {

    enum CmdId {
        CMD_ID = 2402;
    }
}

message LeaveCommonChatworldRsp {
    optional Retcode retcode = 1;
    optional bool is_kicked = 2;

    enum CmdId {
        CMD_ID = 2403;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message LeaveTeamReq {
    optional uint32 team_id = 1;
    optional bool is_logout = 2;
    optional bool is_squeeze = 3;

    enum CmdId {
        CMD_ID = 305;
    }
}

message LeaveTeamRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 306;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_TEAM = 2;
    }
}


message LevelUpArmadaCabinReq {
    optional ArmadaCabinType type = 1;
    optional uint32 cabin_id = 2;
    optional uint32 grid_id = 3;

    enum CmdId {
        CMD_ID = 2631;
    }
}


message LevelUpArmadaCabinRsp {
    optional Retcode retcode = 1;
    optional ArmadaCabinType type = 2;
    optional uint32 cabin_id = 3;
    optional uint32 grid_id = 4;
    optional uint32 level_up_end_time = 5;

    enum CmdId {
        CMD_ID = 2632;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ARMADA_LEVEL_LACK = 2;
        FUND_LACK = 3;
        POPL_LACK = 4;
        BUSY = 5;
        LEVEL_LACK = 6;
        CABIN_NOT_EXIST = 7;
        CABIN_FULL = 8;
        GRID_ERROR = 9;
        NOT_GRANTED = 10;
        NOT_IN_ARMADA = 11;
        NO_OWNERSHIP = 12;
    }
}

message LevelUpDLCAvatarTalentReq {
    optional uint32 talent_id = 1;
    optional uint32 target_level = 2;

    enum CmdId {
        CMD_ID = 3552;
    }
}

message LevelUpDLCAvatarTalentRsp {
    optional Retcode retcode = 1;
    optional uint32 talent_id = 2;

    enum CmdId {
        CMD_ID = 3553;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        TARGET_LEVEL_ERROR = 3;
        PRE_TALENT_LACK = 4;
        MATERIAL_LACK = 5;
        DLC_LEVEL_LACK = 6;
        PRE_AVATAR_LOCK = 7;
        WAIT_SELECT_AFFIX_SET_NOT_EMPTY = 8;
    }
}

message LevelUpDormReq {
    optional uint32 house_id = 1;
    optional uint32 target_level = 2;

    enum CmdId {
        CMD_ID = 613;
    }
}

message LevelUpDormRsp {
    optional Retcode retcode = 1;
    optional uint32 level_up_house_id = 2;
    optional uint32 level_up_end_time = 3;

    enum CmdId {
        CMD_ID = 614;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        BUSY = 2;
        HOUSE_NOT_EXIST = 3;
        LEVEL_ERROR = 4;
        COMFORT_LIMIT = 5;
        MATERIAL_LIMIT = 6;
    }
}

message LevelUpRestaurantFacilityReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 5862;
    }
}

message LevelUpRestaurantFacilityRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;

    enum CmdId {
        CMD_ID = 5863;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        MISSION_UNFINISH = 3;
    }
}

message LevelUpScDLCAvatarReq {
    optional uint32 avatar_id = 1;

    enum CmdId {
        CMD_ID = 6310;
    }
}

message LevelUpScDLCAvatarRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 6311;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        AVATAR_NOT_EXIST = 3;
        FEVER_LEVEL_LACK = 4;
    }
}

message LevelUpScDLCTalentReq {
    optional uint32 avatar_id = 1;
    optional uint32 talent_id = 2;

    enum CmdId {
        CMD_ID = 6312;
    }
}

message LevelUpScDLCTalentRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 6313;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_ERROR = 2;
        TALENT_ERROR = 3;
        TARGET_LEVEL_ERROR = 4;
        FEVER_LEVEL_LACK = 5;
        PRE_TALENT_LACK = 6;
        MATERIAL_LACK = 7;
    }
}


message LevelUpStigmataTitleReq {
    optional uint32 unique_id = 1;
    optional EquipmentItemList consume_item_list = 2;

    enum CmdId {
        CMD_ID = 324;
    }
}

message LevelUpStigmataTitleRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 325;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STIGMATA_NOT_EXIST = 2;
        EXP_FULL = 3;
        MATERIAL_ERROR = 4;
        LEVEL_LACK = 5;
    }
}

message LikeDormReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 639;
    }
}

message LikeDormRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;
    optional uint32 friends_point = 3;

    enum CmdId {
        CMD_ID = 640;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LIMIT = 2;
        HAS_LIKED = 3;
        SEND_LIKE_LIMIT = 4;
        RECEIVE_LIKE_LIMIT = 5;
    }
}

enum LinearMissionSolveType {
    LINEAR_MISSION_SOLVE_CLOSE = 0;
    LINEAR_MISSION_SOLVE_RESERVE = 1;
    LINEAR_MISSION_SOLVE_AUTO = 2;
}



message LineupBriefInfo {
    repeated AvatarBriefInfo avatar_info_list = 1;
    repeated ElfBriefInfo elf_info_list = 2;
}

enum LobbyClientStatus {
    LOBBY_CLIENT_NONE = 0;
    LOBBY_CLIENT_CHOOSING_AVATAR = 1;
    LOBBY_CLIENT_CHOOSING_WEAPON = 2;
    LOBBY_CLIENT_CHOOSING_STIGMATA = 3;
}

message LobbyEnterFightErrorNotify {
    optional uint32 lobby_id = 1;
    optional Retcode retcode = 2;
    repeated uint32 uid_list = 3;
    optional uint32 sub_retcode = 4;

    enum CmdId {
        CMD_ID = 321;
    }
    enum Retcode {
        SUCC = 0;
        CONNECT_TIMEOUT = 1;
        BEGIN_STAGE_FAIL = 2;
    }
}

enum LobbyEnterType {
    LOBBY_ENTER_TYPE_NONE = 0;
    LOBBY_ENTER_TYPE_PRIVATE = 1;
    LOBBY_ENTER_TYPE_ENTER = 2;
    LOBBY_ENTER_TYPE_FAST = 3;
}

enum LobbyMemberStatus {
    LOBBY_MEMBER_UNREADY = 1;
    LOBBY_MEMBER_READY = 2;
    LOBBY_MEMBER_FIGHTING = 3;
}

message LobbyPrepareCountDownNotify {
    optional uint32 count_down_time = 1;

    enum CmdId {
        CMD_ID = 1028;
    }
}


message LobbySetClientStatusReq {
    optional LobbyClientStatus status = 1;

    enum CmdId {
        CMD_ID = 1026;
    }
}

message LobbySetClientStatusRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 1027;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_TEAM = 2;
    }
}

message LobbyStageBeginReq {

    enum CmdId {
        CMD_ID = 311;
    }
}

message LobbyStageBeginRsp {
    optional Retcode retcode = 1;
    optional string fight_server_ip = 2;
    optional uint32 fight_server_port = 3;
    optional uint32 lobby_id = 4;
    repeated uint32 uid_list = 5;
    optional uint32 leader_uid = 6;

    enum CmdId {
        CMD_ID = 312;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_LOBBY = 2;
        LOBBY_FIGHTING = 3;
        NOT_LEADER = 4;
        MEMBER_STATUS_ERROR = 5;
        SYSTEM_ERROR = 6;
        MEMBER_NOT_ENTER_LOBBY = 7;
        MEMBER_NOT_ONLINE = 8;
        MEMBER_DUPLICATE = 9;
        MEMBER_NOT_ENOUGH = 10;
    }
}

message LobbyStageEndReq {
    optional uint32 lobby_id = 1;
    optional uint32 client_data = 2;

    enum CmdId {
        CMD_ID = 313;
    }
}

message LobbyStageEndRsp {
    optional Retcode retcode = 1;
    optional uint32 lobby_id = 2;

    enum CmdId {
        CMD_ID = 314;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_LOBBY = 2;
        LOBBY_NOT_FIGHTING = 3;
        NOT_LEADER = 4;
        SYSTEM_ERROR = 5;
    }
}


message LobbyStat {
    optional uint32 stage_id = 1;
    repeated LobbyTeamPlayerNum in_team_player_num_list = 2;
    optional uint32 wait_player_num = 3;
}

enum LobbyStatus {
    LOBBY_NONE = 0;
    LOBBY_PREPARING = 1;
    LOBBY_CONNECTING = 2;
    LOBBY_FIGHTING = 3;
    LOBBY_FINISHING = 4;
    LOBBY_WAIT_DESTROY = 5;
}


message LobbyTeamPlayerNum {
    optional LobbyStatus status = 1;
    optional uint32 player_num = 2;
}

message LobbyTimeoutNoLeaderNotify {

    enum CmdId {
        CMD_ID = 1033;
    }
}

message LoginActivityData {
    optional uint32 id = 1;
    optional uint32 login_days = 2;
    repeated uint32 has_take_days_reward_list = 3;
    repeated uint32 has_take_days_bonus_reward_list = 4;
    optional uint32 accept_time = 5;
    optional uint32 duration_end_time = 6;
}

enum LoginActivityRewardType {
    LOGIN_ACTIVITY_REWARD_NORMAL = 0;
    LOGIN_ACTIVITY_REWARD_BONUS = 1;
}

message LoginMissionActivity {
    optional uint32 id = 1;
    repeated uint32 has_finished_mission_list = 2;
    optional uint32 unlock_days = 3;
    optional uint32 login_days = 4;
}

enum LoginRewardActivityType {
    LOGIN_REWARD_ACTIVITY_NONE = 0;
    LOGIN_REWARD_ACTIVITY_NORMAL = 1;
    LOGIN_REWARD_ACTIVITY_NEWBIE = 2;
}

enum LoginRewardTriggerType {
    LOGIN_REWARD_TRIGGER_TYPE_NONE = 0;
    LOGIN_REWARD_TRIGGER_TYPE_ONCE = 1;
    LOGIN_REWARD_TRIGGER_TYPE_ALWAYS = 2;
}

message LoginWish {
    optional uint32 login_day = 1;
    optional uint32 wish_id = 2;
    optional uint32 choose_reward_id = 3;
    optional bool is_reward_taken = 4;
}


message LoginWishActivity {
    optional uint32 activity_id = 1;
    optional uint32 show_begin_time = 2;
    optional uint32 show_end_time = 3;
    optional uint32 begin_time = 4;
    optional uint32 end_time = 5;
    optional uint32 login_days = 6;
    repeated uint32 has_take_reward_login_day_list = 7;
    repeated uint32 has_take_reward_special_day_list = 8;
    repeated LoginWish has_made_wish_list = 9;
}

message LoginWishGetMainDataReq {

    enum CmdId {
        CMD_ID = 1607;
    }
}


message LoginWishGetMainDataRsp {
    optional Retcode retcode = 1;
    repeated LoginWishActivity activity_list = 2;

    enum CmdId {
        CMD_ID = 1608;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message LoginWishMakeWishReq {
    optional uint32 activity_id = 1;
    optional uint32 login_day = 2;
    optional uint32 choose_reward_id = 3;

    enum CmdId {
        CMD_ID = 1613;
    }
}

message LoginWishMakeWishRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 login_day = 3;
    optional uint32 choose_reward_id = 4;

    enum CmdId {
        CMD_ID = 1614;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        DAY_LACK = 3;
        REWARD_TAKEN = 4;
    }
}

message LoginWishTakeLoginRewardReq {
    optional uint32 activity_id = 1;
    optional uint32 login_day = 2;

    enum CmdId {
        CMD_ID = 1609;
    }
}


message LoginWishTakeLoginRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 login_day = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 1610;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        DAY_LACK = 2;
        ALREADY_TAKEN = 3;
    }
}

message LoginWishTakeSpecialRewardReq {
    optional uint32 activity_id = 1;
    optional uint32 login_day = 2;

    enum CmdId {
        CMD_ID = 1611;
    }
}


message LoginWishTakeSpecialRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 login_day = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 1612;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        DAY_LACK = 2;
        ALREADY_TAKEN = 3;
    }
}

message LoginWishTakeWishRewardReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 1615;
    }
}


message LoginWishTakeWishRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 1616;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message LotteryData {
    optional uint32 lottery_id = 1;
    repeated uint32 lottery_number = 2;
    repeated uint32 reward_taken_lottery_number = 3;
    optional uint32 draw_number_begin_time = 4;
    optional uint32 draw_number_end_time = 5;
    optional uint32 take_reward_begin_time = 6;
    optional uint32 first_reward_id = 7;
    optional string first_reward_number_str = 8;
    optional uint32 second_reward_id = 9;
    optional string second_reward_number_str = 10;
    optional uint32 third_reward_id = 11;
    optional uint32 max_draw_times = 12;
    optional uint32 special_number = 13;
}

message LotteryDrawNumberReq {
    optional uint32 lottery_id = 1;

    enum CmdId {
        CMD_ID = 4181;
    }
}

message LotteryDrawNumberRsp {
    optional Retcode retcode = 1;
    optional uint32 lottery_id = 2;
    optional uint32 lottery_number = 3;

    enum CmdId {
        CMD_ID = 4182;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_NOT_ENOUGH = 2;
        NOT_OPEN = 3;
        TIMES_LIMIT = 4;
    }
}

message LotteryPlayerInfo {
    optional uint32 uid = 1;
    optional uint32 level = 2;
    optional uint32 vip_point = 3;
    optional uint32 vip_level = 4;
    optional uint32 account_type = 5;
    optional uint32 tag = 6;
    optional uint32 first_reward_num = 7;
    optional bool is_last_schedule_get_rare_reward = 8;
}


message LotteryReward {
    optional uint32 lottery_id = 1;
    optional uint32 lottery_number = 2;
    optional RewardData reward_data = 3;
    optional uint32 reward_type = 4;
}

enum LotteryRewardType {
    LOTTERY_REWARD_TYPE_INVALID = 0;
    LOTTERY_REWARD_TYPE_FIRST_REWARD = 1;
    LOTTERY_REWARD_TYPE_SECOND_REWARD = 2;
    LOTTERY_REWARD_TYPE_THIRD_REWARD = 3;
}

message LotteryTakeRewardReq {
    optional uint32 lottery_id = 1;

    enum CmdId {
        CMD_ID = 4183;
    }
}


message LotteryTakeRewardRsp {
    optional Retcode retcode = 1;
    repeated LotteryReward lottery_reward_list = 2;

    enum CmdId {
        CMD_ID = 4184;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_LOTTERY_NUMBER = 2;
        REWARD_TAKEN = 3;
        NO_REWARD = 4;
        NOT_OPEN = 5;
    }
}

message LotteryUseBoxReq {

    enum CmdId {
        CMD_ID = 4179;
    }
}


message LotteryUseBoxRsp {
    optional Retcode retcode = 1;
    repeated Material get_material_list = 2;

    enum CmdId {
        CMD_ID = 4180;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_NOT_ENOUGH = 2;
        NOT_OPEN = 3;
    }
}



message Mail {
    optional uint32 id = 1;
    optional MailType type = 2;
    optional string title = 3;
    optional string content = 4;
    optional string sender = 5;
    optional uint32 time = 6;
    optional MailAttachment attachment = 7;
    optional bool is_attachment_got = 8;
    optional uint32 expire_time = 9;
    repeated string content_param_list = 10;
}


message MailAttachment {
    repeated MailItem item_list = 1;
    optional uint32 hcoin = 2;
    optional uint32 scoin = 3;
    optional uint32 stamina = 4;
    optional uint32 exp = 5;
    optional uint32 exp_convert_scoin = 6;
    optional uint32 mcoin = 7;
}

message MailAttachmentTakeSwitchData {
}

message MailItem {
    optional uint32 item_id = 1;
    optional uint32 level = 2;
    optional uint32 num = 3;
    optional uint32 split_fragment_num = 4;
}


message MailKey {
    optional uint32 id = 1;
    optional MailType type = 2;
}

enum MailType {
    MAIL_INNER = 1;
    MAIL_OUTER = 2;
    MAIL_NOTICE = 3;
}

message MainlineStepMission {
    optional bool is_update = 1;
    repeated uint32 cur_mainline_step_list = 2;
    repeated uint32 finished_mainline_step_list = 3;
}

message ManualRefreshShopReq {
    optional uint32 shop_id = 1;

    enum CmdId {
        CMD_ID = 205;
    }
}

message ManualRefreshShopRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 206;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SHOP_NOT_EXIST = 2;
        REFRESH_TIMES_LACK = 3;
        HCOIN_LACK = 4;
        SHOP_CLOSE = 5;
        NO_NEED_REFRESH = 6;
        MATERIAL_LACK = 7;
    }
}

message MapQuestSettleData {
    optional uint32 map_id = 1;
    optional uint32 old_level = 2;
    optional uint32 old_star = 3;
    optional uint32 cur_level = 4;
    optional uint32 cur_star = 5;
    optional uint32 sub_star = 6;
}


message MarkReadClientMailReq {
    optional ClientMailKey mail_key = 1;

    enum CmdId {
        CMD_ID = 3804;
    }
}


message MarkReadClientMailRsp {
    optional Retcode retcode = 1;
    optional ClientMailKey mail_key = 2;

    enum CmdId {
        CMD_ID = 3805;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message MassiveWarActivity {
    optional uint32 cur_schedule_id = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional uint32 open_day_time = 4;
    optional uint32 close_day_time = 5;
    optional uint32 battle_times = 6;
    optional uint32 cur_battle_uniq_id = 7;
    repeated MassiveWarStageInfo stage_info_list = 8;
    optional uint32 player_group_id = 9;
    optional uint32 last_settle_reward_score = 10;
}


message MassiveWarBattleBeginNotify {
    optional uint32 stage_id = 1;
    optional uint32 battle_uniq_id = 2;
    optional string transaction_str = 3;
    optional MassiveWarBattleInfo battle_info = 4;

    enum CmdId {
        CMD_ID = 4806;
    }
}

message MassiveWarBattleEndNotify {
    optional uint32 battle_uniq_id = 1;
    optional string transaction_str = 2;
    optional uint32 total_damage = 3;
    optional uint32 damage_level = 4;
    optional uint32 rank = 5;
    optional uint32 total_damage_score = 6;
    optional uint32 rank_score = 7;
    optional uint32 basic_damage_score = 8;
    optional uint32 total_member_num = 9;
    optional uint32 battle_cost_time = 10;

    enum CmdId {
        CMD_ID = 4810;
    }
}





message MassiveWarBattleInfo {
    optional uint32 battle_begin_time = 1;
    optional uint32 stage_id = 2;
    optional uint32 battle_uniq_id = 3;
    optional uint32 auto_lose_hp_time_id = 4;
    optional uint32 battle_status = 5;
    optional uint32 total_member = 6;
    optional uint32 self_rank = 7;
    repeated MassiveWarMonsterDamage self_monster_damage_list = 8;
    repeated MassiveWarBattleMonster monster_list = 9;
    repeated MassiveWarBattleMember top_member_list = 10;
    optional uint32 monster_hard_level = 11;
    optional uint32 self_buff_progress = 12;
    optional MassiveWarFieldProgress field_progress = 13;
}


message MassiveWarBattleMember {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 total_damage = 3;
    optional uint32 rank = 4;
    optional LineupBriefInfo lineup_info = 5;
}


message MassiveWarBattleMessage {
    optional uint32 message_id = 1;
    optional DamageMessage damage_msg = 11;
    optional FieldMessage field_msg = 12;

    enum MassiveWarMessageType {
        MASSIVE_WAR_MESSAGE_NONE = 0;
        MASSIVE_WAR_MESSAGE_BOSS_DAMAGE = 1;
        MASSIVE_WAR_MESSAGE_FIELD = 2;
    }
    message DamageMessage {
        optional uint64 add_damage = 1;
        optional uint64 total_damage = 2;
    }
    message FieldMessage {
        optional MassiveWarFieldActionType action_type = 1;
        optional uint32 buff_progress = 2;
    }
}

message MassiveWarBattleMonster {
    optional uint32 message_id = 1;
    optional uint32 monster_id = 2;
    optional uint32 total_hp = 3;
    optional uint32 left_hp = 4;
}

enum MassiveWarBattleStatus {
    MASSIVE_WAR_BATTLE_STATUS_NONE = 0;
    MASSIVE_WAR_BATTLE_STATUS_PREPARE = 1;
    MASSIVE_WAR_BATTLE_STATUS_FIGHTING = 2;
    MASSIVE_WAR_BATTLE_STATUS_WAIT_SETTLE = 3;
    MASSIVE_WAR_BATTLE_STATUS_CLOSE = 4;
    MASSIVE_WAR_BATTLE_STATUS_DELETE = 5;
}

message MassiveWarExitBattleReq {
    optional uint32 battle_uniq_id = 1;

    enum CmdId {
        CMD_ID = 4808;
    }
}

message MassiveWarExitBattleRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4809;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

enum MassiveWarFieldActionType {
    MASSIVE_WAR_FIELD_ACTION_NONE = 0;
    MASSIVE_WAR_FIELD_ACTION_JOIN = 1;
    MASSIVE_WAR_FIELD_ACTION_LEAVE = 2;
}

message MassiveWarFieldProgress {
    optional uint32 field_progress_ratio = 1;
    optional uint32 in_field_member_num = 2;
}

message MassiveWarGetActivityReq {

    enum CmdId {
        CMD_ID = 4800;
    }
}


message MassiveWarGetActivityRsp {
    optional Retcode retcode = 1;
    optional MassiveWarActivity massive_war_activity = 2;

    enum CmdId {
        CMD_ID = 4801;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message MassiveWarGetBattleInfoReq {
    optional uint32 battle_uniq_id = 1;

    enum CmdId {
        CMD_ID = 4802;
    }
}


message MassiveWarGetBattleInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 battle_uniq_id = 2;
    optional MassiveWarBattleInfo battle_info = 3;

    enum CmdId {
        CMD_ID = 4803;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_EXIST = 2;
    }
}

message MassiveWarGetRankReq {
    optional uint32 battle_uniq_id = 1;

    enum CmdId {
        CMD_ID = 4804;
    }
}


message MassiveWarGetRankRsp {
    optional Retcode retcode = 1;
    optional uint32 battle_uniq_id = 2;
    repeated MassiveWarBattleMember member_list = 3;

    enum CmdId {
        CMD_ID = 4805;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message MassiveWarLineupInfoNotify {
    optional uint32 battle_uniq_id = 1;
    optional LineupBriefInfo lineup_info = 2;

    enum CmdId {
        CMD_ID = 4811;
    }
}

message MassiveWarMonsterDamage {
    optional uint32 message_id = 1;
    optional uint32 total_damage = 2;
}


message MassiveWarReportBattleMessageNotify {
    repeated MassiveWarBattleMessage message_list = 1;
    optional uint32 battle_uniq_id = 2;

    enum CmdId {
        CMD_ID = 4807;
    }
}

message MassiveWarRoomMember {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 score_rank = 3;
    optional uint32 player_group_id = 4;
}

message MassiveWarStageInfo {
    optional uint32 stage_id = 1;
    optional uint32 sub_schedule_id = 2;
    optional uint32 begin_time = 3;
    optional uint32 end_time = 4;
    optional uint32 max_damage_level_score = 5;
    optional uint32 max_rank_score = 6;
    optional uint32 basic_damage_score = 7;
    optional uint32 min_rank_ratio = 8;
    optional uint32 min_damage_level = 9;
    optional uint32 max_total_damage = 10;
}

message MassiveWarTakeScoreRewardReq {

    enum CmdId {
        CMD_ID = 4812;
    }
}


message MassiveWarTakeScoreRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;

    enum CmdId {
        CMD_ID = 4813;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message MasterDetailData {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 level = 3;
    optional MasterPupilCard card = 4;
}

message MasterMainData {
    optional uint32 exp = 1;
    optional uint32 level = 2;
    repeated uint32 reward_level = 3;
    optional uint32 last_dismiss_time = 4;
    optional uint32 score = 5;
    optional uint32 period_master_medal_num = 6;
}


message MasterPoolData {
    repeated Material material_list = 1;
}



message MasterPupilApplyMsg {
    optional uint32 uid = 1;
    optional MasterPupilType type = 2;
    optional MasterPupilCard card = 3;
    optional uint32 level = 4;
    optional string nickname = 5;
    optional uint32 teacher_rank = 6;
    optional uint32 last_online_time = 7;
    optional uint32 avatar_id = 8;
    optional uint32 dress_id = 9;
    optional uint32 score = 10;
    optional uint32 frame_id = 11;
    optional uint32 custom_head_id = 12;
    optional uint32 last_logout_time = 13;
    optional uint32 online_status = 14;
    optional bool is_logoff = 15;
}





message MasterPupilCard {
    optional MasterPupilType type = 1;
    optional PlayerGenderType gender = 2;
    optional PlayerAreaType area = 3;
    optional PlayerInterestType interest = 4;
    optional string declaration = 5;
    optional uint32 uid = 6;
    optional bool is_recommend = 7;
    optional uint32 score = 8;
}


message MasterPupilCardReportReq {
    optional MasterPupilCard card = 1;

    enum CmdId {
        CMD_ID = 578;
    }
}





message MasterPupilData {
    optional uint32 uid = 1;
    optional MasterPupilType type = 2;
    optional MasterPupilCard card = 3;
    optional uint32 level = 4;
    optional string nickname = 5;
    optional uint32 teacher_rank = 6;
    optional uint32 last_online_time = 7;
    optional uint32 avatar_id = 8;
    optional uint32 dress_id = 9;
    optional MasterPupilStatus status = 10;
    optional uint32 relation_time = 11;
    optional PlayerFriendBriefData brief_data = 12;
    optional uint32 score = 13;
    optional bool is_logoff = 14;
}



message MasterPupilDealMsg {
    optional uint32 target_uid = 1;
    optional MasterPupilType type = 2;
    optional MasterPupilOpType op = 3;
    optional string nickname = 4;
}


message MasterPupilDetailData {
    optional MasterPupilData master = 1;
    repeated MasterPupilData pupil_list = 2;
}


message MasterPupilEvalMsg {
    repeated PupilMainData pupil_list = 1;
    optional uint32 score = 2;
}


message MasterPupilEvalReq {
    optional uint32 uid = 1;
    optional uint32 star = 2;
    optional uint32 step_id = 3;
    optional string comment = 4;
    optional uint32 level = 5;
    optional string nickname = 6;
    optional MasterPoolData pool_reward = 7;

    enum CmdId {
        CMD_ID = 574;
    }
}



message MasterPupilEvalRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;
    optional uint32 uid = 2;
    optional uint32 star = 3;
    optional uint32 step_id = 4;
    optional string comment = 5;
    optional MasterPoolData pool_reward = 6;
    optional uint32 master_score = 7;

    enum CmdId {
        CMD_ID = 575;
    }
}





message MasterPupilEventData {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional MasterPupilMission mission = 3;
    optional MasterPupilApplyMsg apply = 4;
    optional MasterPupilDealMsg deal = 5;
    optional MasterPupilEvalMsg eval = 6;
    repeated CompanyMission company_mission_list = 7;
    message CompanyMission {
        optional uint32 mission_id = 1;
        optional uint32 time = 2;
    }
}

enum MasterPupilEventType {
    MASTER_PUPIL_EVENT_GET_PUPIL = 1;
    MASTER_PUPIL_EVENT_GET_MASTER = 2;
    MASTER_PUPIL_EVENT_PUPIL_ONLINE = 3;
    MASTER_PUPIL_EVENT_MASTER_ONLINE = 4;
    MASTER_PUPIL_EVENT_PUPIL_OFFLINE = 5;
    MASTER_PUPIL_EVENT_MASTER_OFFLINE = 6;
    MASTER_PUPIL_EVENT_FINISH_MISSION = 7;
    MASTER_PUPIL_EVENT_STEP_EVAL = 8;
    MASTER_PUPIL_EVENT_PUPIL_GRADUATED = 9;
    MASTER_PUPIL_EVENT_SELF_MISSION = 10;
    MASTER_PUPIL_EVENT_APPLY_PUPIL = 11;
    MASTER_PUPIL_EVENT_APPLY_MASTER = 12;
    MASTER_PUPIL_EVENT_REJECT_MASTER = 13;
    MASTER_PUPIL_EVENT_REJECT_PUPIL = 14;
    MASTER_PUPIL_EVENT_AGREE_MASTER = 15;
    MASTER_PUPIL_EVENT_AGREE_PUPIL = 16;
    MASTER_PUPIL_EVENT_DISMISS_MASTER = 17;
    MASTER_PUPIL_EVENT_DISMISS_PUPIL = 18;
    MASTER_PUPIL_EVENT_COMPANY_MISSION = 19;
    MASTER_PUPIL_EVNET_RECALL_APPLICATION = 20;
}

message MasterPupilMission {
    optional uint32 id = 1;
    optional uint32 status = 2;

    enum MissionStatus {
        DOING = 1;
        FINISH = 2;
    }
}



message MasterPupilMsgNotify {
    optional uint32 target_uid = 1;
    optional MasterPupilEventType event = 2;
    optional MasterPupilEventData data = 3;

    enum CmdId {
        CMD_ID = 589;
    }
}

enum MasterPupilOpType {
    MASTER_PUPIL_OP_NONE = 0;
    MASTER_PUPIL_OP_AGREE = 1;
    MASTER_PUPIL_OP_REJECT = 2;
    MASTER_PUPIL_OP_DISMISS = 3;
}

message MasterPupilRetcode {

    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        PUPIL_LEVEL_LIMIT = 2;
        MASTER_LEVEL_LIMIT = 3;
        APPLY_NUM_LIMIT = 6;
        TARGET_APPLY_NUM_LIMIT = 7;
        INVALID_UID = 8;
        IS_EVALED = 9;
        EXAM_MISSION_UNFINISH = 10;
        FAME_LEVEL_LIMIT = 12;
        FAME_LEVEL_REWARDED = 13;
        CONTENT_STR_INVALID = 14;
        MASTER_PUPIL_TYPE_ERROR = 16;
        APPLY_REPEATE = 17;
        HAS_RELATION = 18;
        NO_RELATION = 19;
        RELATION_CD_LIMIT = 21;
        HAS_STEP_UNFINISH = 22;
        NO_STEP_DOING = 23;
        DAILY_REFRESH_TIMES_LIMIT = 24;
        SAME_DAY_TIME = 25;
        RECOMMEND_CD = 26;
        INVALID_STAR = 27;
        NOT_OPEN = 28;
        NOT_ALLOW_CROSS_REGION_MASTER_PUPIL = 29;
        FEATURE_LIMIT = 30;
        SELF_PUPIL_NUM_LIMIT = 101;
        SELF_HAS_MASTER = 102;
        SELF_STEP_ERROR = 103;
        SELF_DISMISS_TIME_LIMIT = 104;
        SELF_IS_GRADUATED = 105;
        SELF_MONTH_PUPIL_NUM_LIMIT = 106;
        SELF_IS_MASTER = 107;
        TARGET_PUPIL_NUM_LIMIT = 201;
        TARGET_HAS_MASTER = 202;
        TARGET_STEP_ERROR = 203;
        TARGET_DISMISS_TIME_LIMIT = 204;
        TARGET_IS_GRADUATED = 205;
        TARGET_MONTH_PUPIL_NUM_LIMIT = 206;
        TARGET_IS_MASTER = 207;
        DECLARATION_IN_CD = 208;
        DECLARATION_IN_AUDIT = 209;
        FEATURE_CLOSED = 210;
        TARGET_RECALLED = 211;
    }
}

enum MasterPupilStatus {
    MASTER_PUPIL_STATUS_NONE = 0;
    MASTER_PUPIL_STATUS_DURING = 1;
    MASTER_PUPIL_STATUS_FINISH = 2;
    MASTER_PUPIL_STATUS_DISMISS = 3;
}


message MasterPupilTagSwitch {
    optional MasterPupilType type = 1;
    optional bool is_open = 2;
}

enum MasterPupilType {
    MASTER_PUPIL_NONE_TYPE = 0;
    MASTER_PUPIL_MASTER_TYPE = 1;
    MASTER_PUPIL_PUPIL_TYPE = 2;
    MASTER_PUPIL_NEITHER_ALL = 4;
}

message Material {
    optional uint32 id = 1;
    optional uint32 num = 2;
}

message MaterialDeleteReturnReq {

    enum CmdId {
        CMD_ID = 553;
    }
}

message MaterialEvoReq {

    enum CmdId {
        CMD_ID = 56;
    }
}

message MaterialEvoRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 57;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message MaterialHideSwitchData {
    optional uint32 material_id = 1;
}

enum MaterialUseType {
    MATERIAL_USE_GIFT = 1;
    MATERIAL_USE_TREASURE = 2;
    MATERIAL_USE_RAND_GIFT = 3;
    MATERIAL_USE_BUFF = 4;
    MATERIAL_USE_EXTRA_STORY = 5;
    MATERIAL_USE_TRIAL_AVATAR = 6;
    MATERIAL_USE_MATRIX_EXPLORE_POWER = 7;
    MATERIAL_USE_AUTO_GIFT = 10;
    MATERIAL_USE_OPTIONAL_REWARD = 11;
    MATERIAL_USE_RAND_REWARD = 12;
    MATERIAL_USE_RAND_AVATAR = 13;
    MATERIAL_USE_ARMADA_WAR_ENERGE_ITEM = 14;
    MATERIAL_USE_RAND_GIFT_RESTRICT = 15;
    MATERIAL_USE_ARMADA_REUNION = 17;
    MATERIAL_USE_ULTRA_ENDLESS_BUFFER_CUP = 20;
    MATERIAL_USE_BATTLE_PASS_TICKET = 24;
    MATERIAL_USE_AVATAR_FRAGMENT_TRANSFORM = 25;
    MATERIAL_USE_BAODI_TREASURE = 27;
    MATERIAL_USE_PRIVILEGE = 28;
    MATERIAL_USE_OPENWORLD_AVATAR_ACTIVITY_EXP = 29;
    MATERIAL_USE_CONVERT_EQUIPMENT = 30;
    MATERIAL_USE_AUTO_NEW_GIFT = 31;
    MATERIAL_USE_GOD_WAR_AVATAR = 32;
    MATERIAL_USE_GOD_WAR_SUPPORT_AVATAR = 33;
    MATERIAL_USE_RANCH_MONSTER = 34;
    MATERIAL_USE_OPENWORLD_CHAPTER_EQUIP_COST = 36;
    MATERIAL_USE_OPENWORLD_CHAPTER_EQUIP_BUFF = 37;
    MATERIAL_USE_SC_DLC_FEVER_SLOT = 38;
    MATERIAL_USE_SC_DLC_AVATAR = 39;
    MATERIAL_USE_OPENWORLD_CHAPTER_FAME = 40;
    MATERIAL_USE_REWARD_LINE_SCORE = 41;
    MATERIAL_USE_GOD_WAR_GAIN_COIN = 42;
    MATERIAL_USE_OPENWORLD_CHAPTER_HERO = 43;
    MATERIAL_USE_OPENWORLD_CHAPTER_HERO_CARD = 44;
    MATERIAL_USE_MONSTER_CARD = 45;
    MATERIAL_USE_MONSTER_CARD_NO_OVERFLOW = 46;
    MATERIAL_USE_MONSTER_CARD_DROP_NUM_LIMITED = 47;
    MATERIAL_USE_PVZ_ADD_SPECIAL_MATERIAL = 48;
}


message MatrixAdvancePath {
    optional MatrixGridPos path_from = 1;
    optional MatrixGridPos path_to = 2;
}



message MatrixAdvanceReq {
    optional MatrixGridPos from_pos = 1;
    optional MatrixGridPos to_pos = 2;
    repeated MatrixAdvancePath path_list = 3;

    enum CmdId {
        CMD_ID = 2326;
    }
}


message MatrixAdvanceRsp {
    optional Retcode retcode = 1;
    optional MatrixGridPos cur_pos = 2;
    repeated MatrixGridPos pos_list = 3;

    enum CmdId {
        CMD_ID = 2327;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        PATH_NOT_VALID = 2;
        IN_FLOOR_EVENT = 3;
    }
}

message MatrixBuff {
    optional uint32 buff_id = 1;
    optional uint32 buff_type = 2;
    optional uint32 buff_para_int = 3;
}

message MatrixCancelEventReq {

    enum CmdId {
        CMD_ID = 2332;
    }
}

message MatrixCancelEventRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2333;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message MatrixEnterReq {
    optional uint32 floor_id = 1;

    enum CmdId {
        CMD_ID = 2324;
    }
}

message MatrixEnterRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2325;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}




message MatrixEventFinishNotify {
    optional MatrixGridPos pos = 1;
    optional uint32 event_id = 2;
    optional RewardData reward_data = 3;
    optional MatrixEventType display_type = 4;
    optional uint32 display_id = 5;

    enum CmdId {
        CMD_ID = 2335;
    }
}

enum MatrixEventPlotRequirementType {
    MATRIX_EVENT_PLOT_REQUIREMENT_INVALID = 0;
    MATRIX_EVENT_PLOT_REQUIREMENT_MATERIAL = 1;
    MATRIX_EVENT_PLOT_REQUIREMENT_MISSION = 2;
    MATRIX_EVENT_PLOT_REQUIREMENT_DIALOG = 3;
    MATRIX_EVENT_PLOT_REQUIREMENT_FLOOR_EVENT = 4;
}

enum MatrixEventType {
    MATRIX_EVENT_INVALID = 0;
    MATRIX_EVENT_FINISH = 1;
    MATRIX_EVENT_CANCEL = 2;
    MATRIX_EVENT_LINK = 3;
    MATRIX_EVENT_COMPLEX = 4;
    MATRIX_EVENT_MOVE = 5;
    MATRIX_EVENT_LOTTERY = 6;
    MATRIX_EVENT_BUFF = 7;
    MATRIX_EVENT_GUESS = 8;
    MATRIX_EVENT_FORWARD = 9;
    MATRIX_EVENT_RESET_FLOOR = 10;
    MATRIX_EVENT_PLOT = 11;
    MATRIX_EVENT_STAGE = 12;
    MATRIX_EVENT_ITEM_DROP = 13;
    MATRIX_EVENT_ITEM_REWARD = 14;
    MATRIX_EVENT_TIPS = 15;
    MATRIX_EVENT_SUB_RPG_MATERIAL = 16;
    MATRIX_EVENT_RANDOM_PLOT_ONCE = 17;
    MATRIX_EVENT_RANDOM_STAGE_ONCE = 18;
    MATRIX_EVENT_RANDOM_AREA_ONCE = 19;
    MATRIX_EVENT_TRIGGER_EVENT_GROUP = 21;
    MATRIX_EVENT_PASS_RPG_TALE_SITE = 101;
    MATRIX_EVENT_UNLOCK_RPG_TALE_ROLE = 102;
    MATRIX_EVENT_AWAY_RPG_TALE_ROLE = 103;
    MATRIX_EVENT_ADD_RPG_TALE_MISSION = 104;
    MATRIX_EVENT_ADD_RPG_TALE_PHOTO = 105;
    MATRIX_EVENT_ADD_RPG_OVERALL = 106;
    MATRIX_EVENT_DEL_RPG_OVERALL = 107;
    MATRIX_EVENT_SET_RPG_OVERALL = 108;
    MATRIX_EVENT_DISCARD_RPG_TALE_SITE = 109;
    MATRIX_EVENT_NOTIFY = 110;
    MATRIX_EVENT_MATRIX_FLOOR = 111;
    MATRIX_EVENT_MONOPOLY = 112;
    MATRIX_EVENT_RPG_DUNGEON = 113;
    MATRIX_EVENT_RPG_DUNGEON_BUFF = 114;
    MATRIX_EVENT_ROGUE_TOWER_HP_HEAL = 115;
    MATRIX_EVENT_ROGUE_TOWER_HP_HEAL_NO_EXTRA = 116;
    MATRIX_EVENT_ROGUE_TOWER_ADD_COIN = 117;
    MATRIX_EVENT_ROGUE_TOWER_SUB_COIN = 118;
    MATRIX_EVENT_ROGUE_TOWER_GET_RANDOM_BUFF = 119;
    MATRIX_EVENT_ROGUE_TOWER_LEVEL_UP_RANDOM_BUFF = 120;
    MATRIX_EVENT_ROGUE_TOWER_HP_COST = 121;
    MATRIX_EVENT_ROGUE_TOWER_SUPPORT_LEVELUP_TIMES = 122;
    MATRIX_EVENT_RANCH_UNLOCK_AREA = 123;
    MATRIX_EVENT_RANCH_STAGE = 124;
    MATRIX_EVENT_TOWN = 125;
    MATRIX_EVENT_DICEY_DUNGEON = 126;
    MATRIX_EVENT_PVZ_ADD_QAVATAR = 127;
    MATRIX_EVENT_CLIENT = 200;
    MATRIX_EVENT_TILE_MARK = 201;
    MATRIX_EVENT_SET_STAGE_SCORE = 302;
}

enum MatrixFingerType {
    MATRIX_FINGER_NONE = 0;
    MATRIX_FINGER_SCISSORS = 1;
    MATRIX_FINGER_STONE = 2;
    MATRIX_FINGER_CLOTH = 3;
}


message MatrixFloorBriefInfo {
    optional uint32 floor_id = 1;
    optional MatrixFloorStatus floor_status = 2;
}





message MatrixFloorMapInfo {
    optional uint32 floor_id = 1;
    repeated MatrixGrid grid_list = 2;
    optional uint32 width = 3;
    optional uint32 height = 4;
    optional uint32 map_id = 5;
    optional MatrixGridPos current_pos = 6;
    repeated MatrixGrid event_grid_list = 7;
    optional uint32 step_num = 8;
    optional uint32 dice_point = 9;
    repeated MatrixLottery lottery_list = 10;
    repeated MatrixBuff buff_list = 11;
}

enum MatrixFloorStatus {
    MATRIX_FLOOR_STATUS_INVALID = 0;
    MATRIX_FLOOR_STATUS_LOCKED = 1;
    MATRIX_FLOOR_STATUS_UNLOCKED = 2;
    MATRIX_FLOOR_STATUS_FREE = 3;
    MATRIX_FLOOR_STATUS_IN_STAGE = 11;
    MATRIX_FLOOR_STATUS_IN_PLOT = 12;
}

enum MatrixFloorType {
    MATRIX_FLOOR_INVALID = 0;
    MATRIX_FLOOR_NORMAL = 1;
    MATRIX_FLOOR_EXPLORE = 2;
    MATRIX_FLOOR_MONOPOLY = 3;
}



message MatrixGrid {
    optional MatrixGridPos pos = 1;
    optional MatrixGridType type = 2;
    optional uint32 grid_id = 3;
    optional uint32 event_id = 4;
}

message MatrixGridPos {
    optional uint32 x = 1;
    optional uint32 y = 2;
}

enum MatrixGridType {
    MATRIX_GRID_NONE = 0;
    MATRIX_GRID_EMPTY = 1;
    MATRIX_GRID_BARRIER = 2;
    MATRIX_GRID_START = 3;
    MATRIX_GRID_ITEM = 4;
    MATRIX_GRID_MONSTER = 5;
    MATRIX_GRID_RANDOM = 6;
    MATRIX_GRID_TRAP = 7;
    MATRIX_GRID_SHOP = 8;
    MATRIX_GRID_EXIT = 9;
    MATRIX_GRID_DIALOG = 10;
    MATRIX_GRID_TELEPORT = 11;
    MATRIX_GRID_ICE = 12;
    MATRIX_GRID_INVALID = -1;
}


message MatrixGuessFingerReq {
    optional MatrixFingerType finger_type = 1;

    enum CmdId {
        CMD_ID = 2349;
    }
}



message MatrixGuessFingerRsp {
    optional Retcode retcode = 1;
    optional MatrixFingerType player_finger_type = 2;
    optional MatrixFingerType robot_finger_type = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 2350;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_WIN = 2;
    }
}

message MatrixLottery {
    optional uint32 lottery_id = 1;
    optional uint32 lottery_num = 2;
    optional uint32 left_step = 3;
}



message MatrixLotteryDrawNotify {
    optional MatrixLottery lottery = 1;
    optional uint32 win_num = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 2353;
    }
}

enum MatrixMonopolyBuffType {
    MATRIX_MONOPOLY_BUFF_NONE = 0;
    MATRIX_MONOPOLY_BUFF_DICE = 1;
    MATRIX_MONOPOLY_BUFF_STAGE = 2;
    MATRIX_MONOPOLY_BUFF_DROP = 3;
}


message MatrixMoveObjectReq {
    optional MatrixGridPos pos = 1;
    optional uint32 event_id = 2;

    enum CmdId {
        CMD_ID = 2339;
    }
}


message MatrixMoveObjectRsp {
    optional Retcode retcode = 1;
    repeated MatrixGridPos pos_list = 2;
    optional uint32 event_id = 3;

    enum CmdId {
        CMD_ID = 2340;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        POS_INVALID = 2;
        OBJECT_NOT_EXIST = 3;
        BLOCK = 4;
        IN_FLOOR_EVENT = 5;
    }
}

message MatrixResetFloorReq {

    enum CmdId {
        CMD_ID = 2341;
    }
}

message MatrixResetFloorRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2342;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message MatrixSetDiceDestinationReq {
    optional MatrixGridPos target_pos = 1;

    enum CmdId {
        CMD_ID = 2347;
    }
}


message MatrixSetDiceDestinationRsp {
    optional Retcode retcode = 1;
    optional MatrixGridPos target_pos = 2;

    enum CmdId {
        CMD_ID = 2348;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_PATH = 2;
    }
}

message MatrixSetLotteryNumReq {
    optional uint32 lottery_num = 1;

    enum CmdId {
        CMD_ID = 2351;
    }
}

message MatrixSetLotteryNumRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2352;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message MatrixSettleFloorEventReq {

    enum CmdId {
        CMD_ID = 2343;
    }
}

message MatrixSettleFloorEventRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2344;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message MatrixTeleportNotify {
    optional MatrixGridPos from_pos = 1;
    optional MatrixGridPos to_pos = 2;

    enum CmdId {
        CMD_ID = 2338;
    }
}


message MatrixThrowDiceReq {
    optional DiceType dice_type = 1;
    optional uint32 dice_point = 2;

    enum CmdId {
        CMD_ID = 2345;
    }
}


message MatrixThrowDiceRsp {
    optional Retcode retcode = 1;
    optional DiceType dice_type = 2;
    optional uint32 dice_point = 3;
    optional uint32 bonus_dice_point = 4;

    enum CmdId {
        CMD_ID = 2346;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_DICE = 2;
        IN_FLOOR_EVENT = 3;
        WAIT_CHOOSE = 4;
        HAVE_EVENT = 5;
        LACK_DICE = 6;
    }
}


message MatrixTriggerEventReq {
    optional MatrixGridPos pos = 1;
    optional uint32 event_id = 2;

    enum CmdId {
        CMD_ID = 2330;
    }
}

message MatrixTriggerEventRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2331;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        POS_INVALID = 2;
        EVENT_NOT_EXIST = 3;
        IN_FLOOR_EVENT = 4;
    }
}

enum MatrixTriggerType {
    MATRIX_TRIGGER_NONE = 0;
    MATRIX_TRIGGER_STEP_NUM_GE = 1;
    MATRIX_TRIGGER_POSITION = 2;
    MATRIX_TRIGGER_STEP_NUM_LE = 3;
}

message McoinBuySwitchData {
    optional uint32 account_type = 1;
}

message Mecha {
    optional uint32 unique_id = 1;
    optional uint32 id = 2;
}

enum MechaSlot {
    MECHA_SLOT_NONE = 0;
    MECHA_SLOT_LEFT_1 = 1;
    MECHA_SLOT_LEFT_2 = 2;
    MECHA_SLOT_CENTER = 3;
    MECHA_SLOT_RIGHT_2 = 4;
    MECHA_SLOT_RIGHT_1 = 5;
}

message Medal {
    optional uint32 id = 1;
    optional uint32 end_time = 2;
    optional int32 extra_param = 3;
}


message MedalOpReq {
    optional MedalOpType op = 1;
    optional uint32 on_id = 2;
    optional uint32 off_id = 3;

    enum CmdId {
        CMD_ID = 451;
    }
}


message MedalOpRsp {
    optional Retcode retcode = 1;
    optional MedalOpType op = 2;
    optional uint32 on_id = 3;
    optional uint32 off_id = 4;

    enum CmdId {
        CMD_ID = 452;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_OWN = 2;
        EXPIRED = 3;
        OFF_ID_ERROR = 4;
    }
}

enum MedalOpType {
    MEDAL_WEAR = 1;
    MEDAL_OFF = 2;
}

enum MedalTimeType {
    MEDAL_TIME_FOREVER = 1;
    MEDAL_TIME_DURATION = 2;
    MEDAL_TIME_UNTIL = 3;
}

enum MiniRankType {
    MINI_RANK_NONE = 0;
    MINI_RANK_RPG_STAGE = 1;
    MINI_RANK_GENERAL_ACTIVITY_STAGE = 2;
    MINI_RANK_CHAPTER_ACTIVITY_STAGE = 3;
    MINI_RANK_RPG_SCHEDULE = 4;
    MINI_RANK_RANCH_ACTIVITY_STAGE = 5;
    MINI_RANK_OPENWORLD_CHAPTER_CHALLENGE = 6;
}

message MinuteStage {
    optional uint32 minute_id = 1;
    optional StageState state = 2;

    enum StageState {
        LOCKED = 0;
        UNLOCK = 1;
        FINISH = 2;
    }
}


message Mission {
    optional uint32 mission_id = 1;
    optional MissionStatus status = 2;
    optional uint32 progress = 3;
    optional uint32 begin_time = 4;
    optional uint32 end_time = 5;
    optional uint32 priority = 6;
    optional uint32 finished_times = 7;
    optional uint32 finished_times_limit = 8;
    optional uint32 cycle_id = 9;
}

message MissionCompensationReward {
    optional uint32 mission_id = 1;
    optional uint32 mission_compensation_reward_id = 2;
}

enum MissionFinishWay {
    MISSION_FINISH_NONE = 0;
    MISSION_AUTO = 1;
    MISSION_ANY_STORY_STAGE_NORMAL = 2;
    MISSION_ANY_STORY_STAGE_HARD = 3;
    MISSION_ANY_STORY_STAGE_HELL = 4;
    MISSION_SPECIFIC_STAGE_ID = 5;
    MISSION_SPECIFIC_MONSTER_ID = 6;
    MISSION_SPECIFIC_UNIQUE_MONSTER_ID = 7;
    MISSION_KILL_ANY_ENEMY = 8;
    MISSION_KILL_SPECIFIC_MONSTER_CATEGORY = 9;
    MISSION_TRIGGER_ABILITY_ACTION = 10;
    MISSION_KILL_WITH_ANIM_EVENT_ID = 11;
    MISSION_AVATAR_LEVEL_UP_BY_MATERIAL = 12;
    MISSION_AVATAR_SUB_SKILL_LEVEL_UP = 13;
    MISSION_GACHA = 14;
    MISSION_EQUIPMENT_POWER_UP = 15;
    MISSION_STAGE_SUCC_WITH_FRIEND = 16;
    MISSION_COST_STAMINA = 17;
    MISSION_STAGE_NORMAL_WITH_SPECIFIC_AVATAR_CLASS = 18;
    MISSION_STAGE_HARD_WITH_SPECIFIC_AVATAR_CLASS = 19;
    MISSION_ANY_WEEK_DAY_STAGE = 20;
    MISSION_ANY_BEFALL_STAGE = 21;
    MISSION_ANY_NOT_STORY_STAGE = 22;
    MISSION_KILL_BY_ATTACK_CATEGORY_TAG = 23;
    MISSION_AVATAR_STAR = 24;
    MISSION_AVATAR_SUB_SKILL_LEVEL = 25;
    MISSION_AVATAR_LEVEL = 26;
    MISSION_STAGE_HELL_WITH_SPECIFIC_AVATAR_CLASS = 27;
    MISSION_STAGE_NORMAL_WITH_SPECIFIC_AVATAR = 28;
    MISSION_STAGE_HARD_WITH_SPECIFIC_AVATAR = 29;
    MISSION_STAGE_HELL_WITH_SPECIFIC_AVATAR = 30;
    MISSION_STORY_STAGE_FAIL_NUM = 31;
    MISSION_STAGE_MAX_COMBO_NUM = 32;
    MISSION_STORY_STAGE_NORMAL_NUM = 33;
    MISSION_STORY_STAGE_HARD_NUM = 34;
    MISSION_STORY_STAGE_HELL_NUM = 35;
    MISSION_FINISH_NO_ACHIEVEMENT_NUM = 36;
    MISSION_TOTAL_AVATAR_SKILL_POINT_NUM = 37;
    MISSION_AVATAR_STAR_NUM = 38;
    MISSION_AVATAR_GOODFEEL_LEVEL_NUM = 39;
    MISSION_WEAPON_PICTORIAL_NUM = 40;
    MISSION_STIGMATA_PICTORIAL_NUM = 41;
    MISSION_STIGMATA_PICTORIAL_SUIT_NUM = 42;
    MISSION_TEN_HCOIN_GACHA_STAR_NUM = 43;
    MISSION_FRIEND_POINT_NUM = 44;
    MISSION_STAGE_MIN_TIME_TEN_SECOND = 45;
    MISSION_STAGE_ASSISTANT_NUM = 46;
    MISSION_STAGE_SUCC_NUM = 47;
    MISSION_STAGE_WITH_ASSISTANT_SUCC_NUM = 48;
    MISSION_WEAPON_POWER_UP = 49;
    MISSION_STIGMATA_POWER_UP = 50;
    MISSION_STAGE_TAG_NUM = 51;
    MISSION_ISLAND_COLLECT = 52;
    MISSION_ISLAND_GET_VENTURE_REWARD = 53;
    MISSION_AVATAR_TOUCH_NUM = 54;
    MISSION_EQUIPMENT_POWER_UP_TWO_RATE = 55;
    MISSION_SCOIN_EXCHANGE_TEN_RATE = 56;
    MISSION_ISLAND_MAX_COST_POWER = 57;
    MISSION_ISLAND_VENTURE_TOTAL_COST_HOUR = 58;
    MISSION_TOTAL_COST_STAMINA = 59;
    MISSION_STAGE_MAX_SCORE_WITH_STAGE_ID = 60;
    MISSION_STAGE_TOTAL_SCORE_WITH_STAGE_ID = 61;
    MISSION_STAGE_MAX_SCORE_WITH_STAGE_TAG = 62;
    MISSION_STAGE_TOTAL_SCORE_WITH_STAGE_TAG = 63;
    MISSION_AVATAR_ADD_SUB_SKILL = 64;
    MISSION_MULTI_WEAPON_POWER_UP_LEVEL = 65;
    MISSION_MULTI_STIGMATA_POWER_UP_LEVEL = 66;
    MISSION_ISLAND_CABIN_LEVEL_UP = 67;
    MISSION_ISLAND_CABIN_EXTEND_GRADE = 68;
    MISSION_ISLAND_ADD_TECH = 69;
    MISSION_GACHA_WITH_TYPE = 70;
    MISSION_EXTRASTORY_CHALLENGE_NUM = 71;
    MISSION_EXTRASTORY_STAGE_MAX_SCORE = 72;
    MISSION_REAL_NAME = 73;
    MISSION_ENDLESS_GROUP_LEVEL = 75;
    MISSION_SHARE_GAME_IN_SNS = 80;
    MISSION_COLLECT = 81;
    MISSION_ACTIVITY_PROGRESS = 82;
    MISSION_BUY_GOODS_WITH_SCOIN_OR_HCOIN = 83;
    MISSION_SCOIN_EXCHANGE = 84;
    MISSION_STAMINA_EXCHANGE = 85;
    MISSION_CONSIGNED_ORDER = 86;
    MISSION_ROGUE_STAGE = 87;
    MISSION_STAGE_MAX_COMBO_PASS = 88;
    MISSION_OPENWORLD_FINISH_EVENT_TYPE = 90;
    MISSION_OPENWORLD_FIGHT_BOSS = 91;
    MISSION_OPENWORLD_KILL_BOSS = 92;
    MISSION_OPENWORLD_BOSS_DAMAGE = 93;
    MISSION_OPENWORLD_QUEST_LEVEL = 94;
    MISSION_OPENWORLD_FINISH_QUEST_NUM = 95;
    MISSION_OPENWORLD_FINISH_SIDE_QUEST_NUM = 96;
    MISSION_OPENWORLD_PERFECT_REWARD_NUM = 97;
    MISSION_EQUIPMENT_POWER_UP_NO_BACKTRACK = 98;
    MISSION_JOIN_ARMADA = 99;
    MISSION_FIGHT_ARMADA_STAGE = 100;
    MISSION_OPENWORLD_FINISH_QUEST_NO_BACKTRACK = 101;
    MISSION_OPENWORLD_REWARD_NUM = 102;
    MISSION_WAREHOUSE_DONATE = 103;
    MISSION_OPENWORLD_FINISH_STORY = 104;
    MISSION_STORY_STAGE_WITH_AVATAR_NUM = 105;
    MISSION_EQUIPMENT_EVO = 107;
    MISSION_USE_AVATAR_KILL_MONSTER = 108;
    MISSION_AVATAR_MAX_LEVEL = 109;
    MISSION_AVATAR_MAX_SUB_SKILL_LEVEL = 110;
    MISSION_WEAPON_TYPE_MAX_LEVEL = 111;
    MISSION_HELP_FRIEND_ISLAND = 112;
    MISSION_STAGE_MIN_BE_HIT_PASS = 113;
    MISSION_STAGE_COSMOS_BREAK = 114;
    MISSION_STAGE_COSMOS_BREAK_DAMAGE = 115;
    MISSION_STAGE_USE_EX_SKILL = 116;
    MISSION_REFINE_STIGMATA = 117;
    MISSION_DISJOIN_EQUIPMENT = 118;
    MISSION_FINISH_MP_STAGE_WITH_TYPE = 119;
    MISSION_USE_MP_TEAM_SKILL = 120;
    MISSION_USE_MP_QTE_SKILL = 121;
    MISSION_OPENWORLD_FINISH_EVENT_TYPE_NO_BACKTRACK = 122;
    MISSION_MIN_BE_HIT_PASS_WITH_STAGE_ID = 123;
    MISSION_FINISH_MP_STAGE = 124;
    MISSION_BIND_ACCOUNT = 125;
    MISSION_STAGE_DEFEND_TARGET_MIN_HP_PASS = 126;
    MISSION_STAGE_DEFEND_TARGET_MIN_HP_PERCENT_PASS = 127;
    MISSION_EXTRASTORY_HAS_PASS_NUM_WITH_DIFFICULTY = 128;
    MISSION_EXTRASTORY_HAS_PASS_NUM = 129;
    MISSION_CLEAN_STAGE_NUM = 130;
    MISSION_GET_CARD_REWARD_NUM = 131;
    MISSION_TOTAL_COST_SCOIN_NUM = 132;
    MISSION_TOTAL_COST_SCOIN_NUM_BACKTRACK = 133;
    MISSION_TOTAL_COST_HCOIN_NUM = 134;
    MISSION_TOTAL_COST_HCOIN_NUM_BACKTRACK = 135;
    MISSION_MP_MVP_NUM = 136;
    MISSION_MP_MVP_NUM_BACKTRACK = 137;
    MISSION_GET_MP_LIKE_NUM = 138;
    MISSION_GET_MP_LIKE_NUM_BACKTRACK = 139;
    MISSION_FINISH_MP_STAGE_WITH_TYPE_BACKTRACK = 140;
    MISSION_FINISH_MP_STAGE_BACKTRACK = 141;
    MISSION_MP_LEVEL = 143;
    MISSION_STAGE_TOTAL_MAX_SCORE_WITH_STAGE_TAG = 144;
    MISSION_FACEBOOK_LIKE = 145;
    MISSION_STAGE_MIN_TIME_WITH_STAGE_ID = 146;
    MISSION_STAGE_TAG_COMBO_PASS = 147;
    MISSION_STAGE_TAG_WITH_SPECIFIC_AVATAR = 148;
    MISSION_AVATAR_DRESSED_EQUIPMENTS = 149;
    MISSION_DRESSED_ANY_BEFALL_WEAPON = 150;
    MISSION_POWERUP_MULTI_SPECIFIC_EQUIP_LEVEL = 151;
    MISSION_EVO_MULTI_SPECIFIC_EQUIP_STAR = 152;
    MISSION_EVO_ANY_BEFALL_WEAPON_STAR = 153;
    MISSION_FRAGMENTS_EXCHANGE_STIGMATA = 154;
    MISSION_GET_NEWBIE_TRAIN_REWARD = 155;
    MISSION_STAGE_TAG_SUCCESS_EVADE_PASS = 156;
    MISSION_CHALLENGE_SPECIFIC_STAGE_ID = 157;
    MISSION_POWERUP_MULTI_SPECIFIC_EQUIP_BACKTRACK = 158;
    MISSION_EVO_MULTI_SPECIFIC_EQUIP_BACKTRACK = 159;
    MISSION_FINISH_EXBOSS_NUM = 160;
    MISSION_FINISH_EXBOSS_NUM_BACKTRACK = 161;
    MISSION_WIN_LEVEL_EXBOSS = 162;
    MISSION_GET_EXBOSS_RANK = 163;
    MISSION_OPENWORLD_TECH_LEVEL = 164;
    MISSION_BIND_MOBILE = 165;
    MISSION_BIND_EMAIL = 166;
    MISSION_SET_ACCOUNT_USERNAME = 167;
    MISSION_UNLOCK_AVATAR = 168;
    MISSION_FINISH_SPECIFIC_MISSION = 169;
    MISSION_FINISH_SPECIFIED_DIFFICULTY_RAID_WITH_MASTER = 170;
    MISSION_FINISH_PLAYER_LEVEL = 171;
    MISSION_GET_EXBOSS_SCORE_BACKTRACK = 172;
    MISSION_PUPIL_GRADUATED_BACKTRACK = 173;
    MISSION_MASTER_HAS_NUM_GRADUATED_PUPIL_BACKTRACK = 174;
    MISSION_PUBLISH_MASTER_PUPIL_CARD = 175;
    MISSION_FINISH_BE_MASTER_BACKTRACK = 176;
    MISSION_RECRUIT_NUM_PUPIL_BACKTRACK = 177;
    MISSION_FINISH_BE_PUPIL_BACKTRACK = 178;
    MISSION_GET_EXBOSS_RANK_PERCENT = 179;
    MISSION_SPECIFIC_STAGE_ID_BACKTRACK = 180;
    MISSION_MP_LIKE_NUM = 181;
    MISSION_CLICK_LINK = 182;
    MISSION_COLLECT_FURNITURE_SUIT = 183;
    MISSION_BUY_FURNITURE = 184;
    MISSION_COLLECT_SPECIFIC_ITEM = 185;
    MISSION_DORM_COMFORT_LEVEL = 186;
    MISSION_DORM_COMFORT_VALUE = 187;
    MISSION_DORM_FACILITY_LEVEL = 188;
    MISSION_DORM_HOUSE_LEVEL = 189;
    MISSION_OPENWORLD_QUEST_LEVEL_BACKTRACK = 190;
    MISSION_DORM_HOUSE_LEVEL_IN_PARAM = 191;
    MISSION_MATERIAL_RECYCLE = 192;
    MISSION_OPENWORLD_FINISH_EVENT_SUBTYPE_LIST = 193;
    MISSION_OPENWORLD_FINISH_QUEST_SPECIFIC_AVATAR = 194;
    MISSION_EXBOSS_STAGE_SPECIFIC_AVATAR = 195;
    MISSION_RAID_STAGE_SPECIFIC_AVATAR = 197;
    MISSION_ISLAND_VENTURE_SPECIFIC_AVATAR = 198;
    MISSION_DORM_EVENT_SPECIFIC_AVATAR = 199;
    MISSION_ROGUE_STAGE_SPECIFIC_AVATAR = 200;
    MISSION_PASS_STAGE_SPECIFIC_AVATAR = 201;
    MISSION_PASS_SPECIFIC_STAGE_SPECIFIC_AVATAR = 202;
    MISSION_PASS_STAGE_SPECIFIC_REQUIRE = 203;
    MISSION_SEALED_FINISH_NUM_BACKTRACK = 204;
    MISSION_SEALED_RANK_LEVEL = 205;
    MISSION_DORM_USE_FACILITY_NUM = 206;
    MISSION_POWERUP_MULTI_SPECIFIC_EQUIP_MAINID_BACKTRACK = 207;
    MISSION_EVO_MULTI_SPECIFIC_EQUIP_MAINID_BACKTRACK = 208;
    MISSION_SEALED_FINISH_NUM = 209;
    MISSIONG_ROGUE_STAGE_HARD_LEVEL_PROGRESS = 210;
    MISSIONG_ROGUE_STAGE_HARD_LEVEL_PROGRESS_BACKTRACK = 211;
    MISSION_AVATAR_GOODFEEL_LEVEL_SPECIFIC_AVATAR = 212;
    MISSION_COLLECT_SPECIFIC_AMOUNT_ITEMS = 213;
    MISSION_USE_SPECIFIC_AVATARS_KILL_MONSTER = 214;
    MISSION_WORLD_BOSS_PERSONAL_TECH_LEVEL_UP_NUM = 215;
    MISSION_WORLD_BOSS_GLOBAL_TECH_DONATE_NUM = 216;
    MISSION_WORLD_BOSS_USE_PERSONAL_TECH_NUM = 217;
    MISSION_PASS_STAGE_WITH_EQUIPMENT_MAINID = 218;
    MISSION_REACH_DAILY_DUTY_POINT = 219;
    MISSION_REACH_DAILY_DUTY_POINT_BACKTRACK = 220;
    MISSION_REACH_WEEKLY_DUTY_POINT = 221;
    MISSION_REACH_WEEKLY_DUTY_POINT_BACKTRACK = 222;
    MISSION_LEVEL_MULTI_EQUIP_MAINID_BACKTRACK = 223;
    MISSION_STAR_MULTI_EQUIP_MAINID_BACKTRACK = 224;
    MISSION_AVATAR_DRESSED_EQUIPMENTS_MAINID = 225;
    MISSION_AVATAR_SUB_SKILL_LEVELUP_PROGRESS = 226;
    MISSION_STAGE_TOTAL_BATTLE_SCORE_WITH_STAGE_TAG = 227;
    MISSION_STAGE_RANK_WITH_STAGE_TAG = 228;
    MISSION_ARMADA_MATRIX_FINISH_FLOOR = 229;
    MISSION_ARMADA_MATRIX_FOUND_TREASURE = 230;
    MISSION_TEAM_ASSAULT_PROGRESS = 231;
    MISSION_TEAM_ASSAULT_ACTIVITY_TOTAL_SCORE = 232;
    MISSION_GENERAL_ACTIVITY_FINISH_TIMES = 233;
    MISSION_GENERAL_ACTIVITY_SCORE_BACKTRACK = 234;
    MISSION_DORM_CLIENT_CUSTOM = 241;
    MISSION_OPENWORLD_CHOOSE_QUEST = 242;
    MISSION_SHOP_BUY_GOODS = 243;
    MISSION_DORM_TAKE_DAILY_STAMINA = 244;
    MISSION_OPENWORLD_MAKE_MECHA_TIMES = 253;
    MISSION_OPENWORLD_MAKE_MECHA_TIMES_BACKTRACK = 254;
    MISSION_OPENWORLD_TECH_ADD_EXP_TIMES = 255;
    MISSION_OPENWORLD_QUEST_RATE = 256;
    MISSION_OPENWORLD_QUEST_RATE_BACKTRACK = 257;
    MISSION_OPENWORLD_QUEST_FINISHED_CHALLENGE_NUM = 258;
    MISSION_OPENWORLD_QUEST_FINISHED_WITH_MECHA = 259;
    MISSION_OPENWORLD_HACK_ITEM = 260;
    MISSION_OPENWORLD_TD_STAGE_RATE = 261;
    MISSION_OPENWORLD_TD_STAGE_RATE_BACKTRACK = 262;
    MISSION_OPENWORLD_FINISH_EVENT_TYPE_WITH_MAP = 263;
    MISSION_OPENWORLD_QUEST_LEVEL_WITH_MAP = 264;
    MISSION_OPENWORLD_QUEST_LEVEL_BACKTRACK_WITH_MAP = 265;
    MISSION_OPENWORLD_FINISH_QUEST_NUM_WITH_MAP = 266;
    MISSION_OPENWORLD_FINISH_QUEST_NO_BACKTRACK_WITH_MAP = 267;
    MISSION_OPENWORLD_FINISH_QUEST_NO_BACKTRACK_WITH_SUB_TYPE_AND_MAP = 268;
    MISSION_OPENWORLD_FINISH_EVENT_TYPE_NO_BACKTRACK_WITH_MAP = 269;
    MISSION_GOBACK_DUTY_POINT = 270;
    MISSION_ONLINE_TIME = 272;
    MISSION_TAKE_PHOTOS = 273;
    MISSION_WIKI_EQUIPMENT_NUM_BY_RARITY = 274;
    MISSION_WIKI_STIGMATA_SUIT_NUM_BY_RARITY = 275;
    MISSION_WIKI_CG_NUM = 276;
    MISSION_WIKI_ACHIEVEMENT_NUM_BY_TYPE = 277;
    MISSION_RECLAIM_GACHA_BOX = 282;
    MISSION_RECLAIM_LEVEL = 283;
    MISSION_ARMADA_WAR_PLAYER_SEASON_STAGE_NUM = 291;
    MISSION_ARMADA_WAR_PLAYER_SEASON_BATTLE_NUM = 292;
    MISSION_ARMADA_WAR_ARMADA_SEASON_STAGE_NUM = 293;
    MISSION_ARMADA_WAR_ARMADA_SEASON_WIN_STRONGHOLD_NUM = 294;
    MISSION_ARMADA_WAR_ARMADA_SEASON_WIN_NUM = 295;
    MISSION_ARMADA_WAR_ARMADA_GRADE = 296;
    MISSION_BINGO_ACTIVITY_FLOP_CARD = 297;
    MISSION_BINGO_ACTIVITY_BINGO_COMPLETE = 298;
    MISSION_GOBACK_GAIN_EXP = 299;
    MISSION_FINISH_MP_STAGE_WITH_GOBACK_PLAYER = 300;
    MISSION_OPENWORLD_BOSS_GET_RATING_NUM = 301;
    MISSION_OPENWORLD_BOSS_KILLED_NUM_WITHIN_TIME_LIMIT = 302;
    MISSION_OPENWORLD_ACTIVITY_LEVEL = 303;
    MISSION_OPENWORLD_BOSS_HUNT_FIND_CLUE_NUM = 304;
    MISSION_OPENWORLD_BOSS_KILLED_NUM_SPECIFIC_AVATAR = 305;
    MISSION_OPENWORLD_BOSS_MP_STAGE_NUM_AS_MP_LEADER = 306;
    MISSION_OPENWORLD_BOSS_MP_STAGE_NUM_AS_MP_ASSISTANT = 307;
    MISSION_RPG_TALE_ROLE_NUM = 308;
    MISSION_RPG_TALE_PASS_SITE = 309;
    MISSION_RPG_TALE_OVERALL_EQUAL = 310;
    MISSION_RPG_TALE_TOTAL_STAGE_SCORE = 311;
    MISSION_MATRIX_FINISH_EVENT = 315;
    MISSION_MATRIX_COLLECT_ITEM = 316;
    MISSION_VIRTUAL_TRAIN_AVATAR_NUM = 317;
    MISSION_VIRTUAL_TRAIN_AVATAR_STAR_NUM = 318;
    MISSION_VIRTUAL_TRAIN_GACHA_TIMES = 319;
    MISSION_VIRTUAL_TRAIN_GACHA_AVATAR_STAR = 320;
    MISSION_RPG_TALE_TAKE_PRODUCT_TIMES = 321;
    MISSION_RPG_TALE_TAKE_PRODUCT_NUM = 322;
    MISSION_RPG_TALE_TOWER_FLOOR = 323;
    MISSION_RPG_TALE_TOWER_TIMES = 324;
    MISSION_RPG_TALE_ABILITY_LEVEL_BACKTRACK = 325;
    MISSION_FINISH_ANY_RAID_ACTIVITY = 330;
    MISSION_FRIEND_INVITE = 331;
    MISSION_MASTER_PUPIL_INVITE = 332;
    MISSION_ARMADA_APPLY = 333;
    MISSION_AVATAR_LEVEL_NUM = 334;
    MISSION_ISLAND_CABIN_LEVEL = 335;
    MISSION_DORM_ROOM_UNLOCK = 336;
    MISSION_SHOPPING_TIMES = 337;
    MISSION_COUPLE_TOWER_FINISH_FLOOR = 338;
    MISSION_COUPLE_TOWER_ASSISTANT = 339;
    MISSION_COUPLE_TOWER_ENTER_TIMES = 340;
    MISSION_ADD_UP_VIP_POINT = 341;
    MISSION_DORM_USE_FACILITY_NUM_NO_RESULT = 342;
    MISSION_FINISH_SPECIFIC_PLOT_ID = 343;
    MISSION_OPENWORLD_ENDLESS_SCORE = 344;
    MISSION_OPENWORLD_ENDLESS_BOSS = 345;
    MISSION_OPENWORLD_ENDLESS_ADD_GROUP_LEVEL = 346;
    MISSION_OPENWORLD_ENDLESS_GROUP_LEVEL = 347;
    MISSION_OPENWORLD_ENDLESS_FINISH_MONSTER_GROUP = 348;
    MISSION_OPENWORLD_ENDLESS_USE_ITEM = 349;
    MISSION_ENDLESS_FINISH_STAGE_OR_BOSS_WITH_ENDLESS_TYPE = 350;
    MISSION_ENDLESS_FINISH_STAGE_OR_BOSS_SPECIFIC_AVATAR = 351;
    MISSION_QUANTUM_ENDLESS_PASS_MONSTER_GROUP = 352;
    MISSION_FRONT_ENDLESS_FINISH_FLOOR = 353;
    MISSION_EQUIPMENT_POWER_UP_LEVEL_BACKTRACK = 365;
    MISSION_FARM_ACTIVITY_SPEED_UP_PRODUCE_TIMES = 366;
    MISSION_FARM_ACTIVITY_FINISH_PRODUCE_TIMES = 367;
    MISSION_FARM_ACTIVITY_FARM_LEVEL = 368;
    MISSION_FARM_ACTIVITY_UNLOCK_SLOT_NUM = 369;
    MISSION_FARM_ACTIVITY_FINISH_PRODUCE_SPECIFIC_MATERIAL = 370;
    MISSION_TAKE_SPECIFIC_NPC_RED_ENVELOPE_NUM = 372;
    MISSION_GACHA_WITH_MULTI_TYPES = 373;
    MISSION_TOWER_RAID_NUM = 374;
    MISSION_TOWER_RAID_BOSS_NUM = 375;
    MISSION_TOWER_RAID_FINISH_ALL_NUM = 376;
    MISSION_CHATWORLD_ONLINE_TIME = 377;
    MISSION_GOBACK_SCORE = 378;
    MISSION_CHATWORLD_USE_ITEM = 379;
    MISSION_CAMPAIGN_FINISH_PHASE = 380;
    MISSION_CAMPAIGN_FINISH = 381;
    MISSION_CAMPAIGN_FINISH_STAGE = 382;
    MISSION_AVATAR_ARTIFACT_LEVEL = 383;
    MISSION_LEVEL_LOCK_EXP = 384;
    MISSION_SET_LEVEL_LOCK_ID = 385;
    MISSION_ELF_STAR = 386;
    MISSION_ELF_LEVEL = 387;
    MISSION_ELF_STAR_NUM = 388;
    MISSION_ELF_LEVEL_NUM = 389;
    MISSION_STAGE_TAG_NUM_SPECIFIC_ELF = 390;
    MISSION_STAGE_NUM_SPECIFIC_ELF = 391;
    MISSION_ENDLESS_FINISH_STAGE_OR_BOSS_SPECIFIC_ELF = 392;
    MISSION_EXBOSS_STAGE_SPECIFIC_ELF = 393;
    MISSION_FINISH_MP_STAGE_SPECIFIC_ELF = 394;
    MISSION_STORY_STAGE_SPECIFIC_ELF = 395;
    MISSION_ELF_TALENT_LEVEL = 396;
    MISSION_ELF_TALENT_GROUP_LEVEL = 397;
    MISSION_ELF_TALENT_SLOT_UNLOCK_NUM = 398;
    MISSION_ELF_TOTAL_PERIOD_UPGRADE_TIMES = 399;
    MISSION_STAGE_NUM_WITH_ELF = 400;
    MISSION_ELF_TOTAL_SKILL_LEVEL = 401;
    MISSION_CAMPAIGN_SHORT_CHAT = 421;
    MISSION_CAMPAIGN_FINISH_SCORE = 422;
    MISSION_CAMPAIGN_MVP = 423;
    MISSION_CAMPAIGN_TEAM_DRAW_RARITY = 424;
    MISSION_CMAPAIGN_SELF_DRAW = 425;
    MISSION_CAMPAIGN_LIKE_NUM = 426;
    MISSION_CAMPAIGN_TEACH_MODE_FINISH_PHASE = 427;
    MISSION_CAMPAIGN_TEACH_MODE_FINISH = 428;
    MISSION_PASS_STAGE_WITH_ANY_SPECIFIC_AVATAR = 441;
    MISSION_STAGE_TAG_NUM_AS_LEADER_OR_ASSISTANT = 442;
    MISSION_KINGDOM_WAR_MOVE_STEP = 443;
    MISSION_TVT_STAGE_SETTLE_NUM = 444;
    MISSION_TVT_TOTAL_WIN_NUM = 445;
    MISSION_TVT_MAX_WIN_STREAK = 446;
    MISSION_TVT_MVP_NUM = 447;
    MISSION_TVT_DIVISION = 448;
    MISSION_TVT_STAGE_SCOIN = 449;
    MISSION_CHATWORLD_KILL_NUM = 451;
    MISSION_GOBACK_TOTAL_LOGIN_DAYS = 452;
    MISSION_ARMADA_MATRIX_USE_ITEM = 453;
    MISSION_ARMADA_MATRIX_FIRE_BOSS_ITEM = 454;
    MISSION_ARMADA_MATRIX_KILL_MONSTER = 455;
    MISSION_STAGE_ACTIVITY_NUM_AS_LEADER_OR_ASSISTANT = 456;
    MISSION_CHATWORLD_BATTLE_SCORE = 457;
    MISSION_COUPLE_TOWER_KILL_MONSTER = 458;
    MISSION_COUPLE_TOWER_KILL_BOSS = 459;
    MISSION_COUPLE_TOWER_BUFF_NUM = 460;
    MISSION_COUPLE_TOWER_KILL_WAVE = 461;
    MISSION_TOTAL_LOGIN_DAYS = 462;
    MISSION_GACHA_TOTAL_SCORE = 463;
    MISSION_MONOPOLY_THROW_DICE = 464;
    MISSION_MONOPOLY_EXPLORE = 465;
    MISSION_MONOPOLY_PASS_AREA = 466;
    MISSION_MATRIX_FINISH_FLOOR = 467;
    MISSION_MATRIX_TRIGGER_EVENT = 468;
    MISSION_STAGE_TAG_CHALLENGE_NUM = 469;
    MISSION_EQUIPMENT_FORGE_TIMES = 470;
    MISSION_GLOBAL_WAR_TOTAL_CURRENCY = 471;
    MISSION_GLOBAL_WAR_CURRENCY_BY_STAGE = 472;
    MISSION_GLOBAL_WAR_CURRENCY_BY_EXCHANGE = 473;
    MISSION_GLOBAL_WAR_EXCHANGE_TIMES = 474;
    MISSION_GLOBAL_WAR_FINISH_POINT = 475;
    MISSION_GLOBAL_WAR_CURRENCY_BY_SWEEP = 476;
    MISSION_GLOBAL_WAR_FINISH_OR_EXCHANGE_TIMES_WITH_POINT_ID_LIST = 477;
    MISSION_SHOP_COST_MCOIN_NUM = 480;
    MISSION_VIRTUAL_TRAIN_CUSTOM_LEVEL = 481;
    MISSION_VIRTUAL_TRAIN_GROUP_TOTAL_LEVEL_UP_TIMES = 482;
    MISSION_GRATUITY_STAGE_FINISH_NUM = 483;
    MISSION_GRATUITY_STAGE_END_NUM = 484;
    MISSION_GRATUITY_STAGE_ASSIST_NUM = 485;
    MISSION_GRATUITY_PUBLISH = 486;
    MISSION_GRATUITY_INVITE = 487;
    MISSION_GRATUITY_COLLECT = 488;
    MISSION_SEND_RED_ENVELOPE_IN_SPECIFIC_TIME = 489;
    MISSION_ADVENTURE_LEVEL = 490;
    MISSION_ADVENTURE_ADD_BADGE = 491;
    MISSION_ADVENTURE_ADD_BADGE_BACKTRACK = 492;
    MISSION_ADVENTURE_FINISH_ADVENTURE_BY_RARITY = 493;
    MISSION_ADVENTURE_FINISH_ADVENTURE = 494;
    MISSION_ADVENTURE_TAKE_SCOIN = 495;
    MISSION_SCRATCH_TICKET_SCRATCH_NUM = 501;
    MISSION_SCRATCH_TICKET_ROUND_NUM = 502;
    MISSION_BBQ_COOK_NUM = 503;
    MISSION_NINJA_SLOT_LEVEL = 504;
    MISSION_DLC_USE_ACTIVE_SKILL = 505;
    MISSION_DLC_OUTER_AREA_KILL_NUM = 506;
    MISSION_DLC_SHIELD_MONSTER_KILL_NUM = 507;
    MISSION_DLC_IN_CIRCLE_KILL_NUM = 508;
    MISSION_DLC_AIR_KILL_NUM = 509;
    MISSION_DLC_THROW_SKILL_KILL_NUM = 510;
    MISSION_DLC_ACTIVE_SKILL_KILL_NUM = 511;
    MISSION_DLC_BREAK_FREQUENCY_SHIELD_NUM = 512;
    MISSION_DLC_BREAK_HARD_SHIELD_NUM = 513;
    MISSION_DLC_EX_JUMP = 514;
    MISSION_DLC_USE_THROW_SKILL = 515;
    MISSION_DLC_AVATAR_TALENT_TOTAL_LEVEL = 516;
    MISSION_DLC_TOWER_MAX_PROGRESS = 517;
    MISSION_DLC_TOWER_TOTAL_PROGRESS = 518;
    MISSION_DLC_ENTER_STAGE_WITH_SPECIFIC_AVATAR = 519;
    MISSION_DLC_SUPPORT_NPC_LEVEL = 520;
    MISSION_DLC_TALENT_LEVEL = 521;
    MISSION_DLC_LEVEL = 522;
    MISSION_DLC_COLLECTION_TYPE_NUM = 523;
    MISSION_OPENWORLD_KILL_ENEMY_WITH_MAP = 524;
    MISSION_OPENWORLD_FINISH_ONCE_EVENT_BACKTRACK_WITH_MAP = 525;
    MISSION_DLC_TOWER_MAX_PROGRESS_NO_BACKTRACK = 526;
    MISSION_OPENWORLD_CHOOSE_ANY_QUEST = 527;
    MISSION_OPENWORLD_FINISH_SPECIFIC_STORY_NUM_BACKTRACK = 528;
    MISSION_CHATWORLD_MAKE_ACTION_NUM = 545;
    MISSION_CHATWORLD_FISH_SUCC_OR_WAIT_ASSIST_NUM = 546;
    MISSION_CHATWORLD_PRAY_NUM = 547;
    MISSION_STAGE_TAG_FAIL_NUM = 548;
    MISSION_LOGIN_WITH_SPECAIL_DEVICE_TYPE = 549;
    MISSION_UNLOCK_MONTH_CARD_OR_BATTLE_PASS = 550;
    MISSION_GACHA_COST_TICKET_TOTAL_SCORE = 551;
    MISSION_GARDEN_HARVEST_NUM = 552;
    MISSION_GARDEN_HARVEST_KIND = 553;
    MISSION_GARDEN_HARVEST_NUM_BY_KIND = 554;
    MISSION_JIGSAW_EXCHANGE_PIECE = 555;
    MISSION_JIGSAW_FINISH_JIGSAW = 556;
    MISSION_OVERLAP_SUMMON_NUM = 557;
    MISSION_CHATWORLD_QUESTION = 558;
    MISSION_CHATWORLD_DISH_NUM = 559;
    MISSION_ARMADA_REUNION_REWARD = 560;
    MISSION_ARMADA_REUNION_PREPARE = 561;
    MISSION_GARDEN_SPEED_UP_TIMES = 562;
    MISSION_MASSIVE_WAR_BATTLE_SETTLE_TIMES = 563;
    MISSION_MASSIVE_WAR_RANK_RATIO = 564;
    MISSION_MASSIVE_WAR_DAMAGE_LEVEL = 565;
    MISSION_MASSIVE_WAR_TOTAL_DAMAGE = 566;
    MISSION_MASSIVE_WAR_FINISH_STAGE = 567;
    MISSION_KINGDOM_WAR_EXCHANGE = 571;
    MISSION_KINGDOM_WAR_EXCHANGE_CURRENCY = 572;
    MISSION_KINGDOM_WAR_FINISH_STAGE_CURRENCY = 573;
    MISSION_KINGDOM_WAR_CURRENCY = 574;
    MISSION_KINGDOM_WAR_ACTIVITY_STAMINA = 575;
    MISSION_WEB_ACTIVITY_1 = 581;
    MISSION_WEB_ACTIVITY_2 = 582;
    MISSION_WEB_ACTIVITY_3 = 583;
    MISSION_WEB_ACTIVITY_4 = 584;
    MISSION_WEB_ACTIVITY_5 = 585;
    MISSION_WEB_ACTIVITY_6 = 586;
    MISSION_WEB_ACTIVITY_7 = 587;
    MISSION_WEB_ACTIVITY_8 = 588;
    MISSION_WEB_ACTIVITY_9 = 589;
    MISSION_WEB_ACTIVITY_10 = 590;
    MISSION_NORMAL_FINISH_SPECIFIC_STAGE_ID = 591;
    MISSION_SHOP_BUY_GOODS_ID_COST_MCOIN = 592;
    MISSION_SANCTUARY_ACTIVITY_LEVEL = 593;
    MISSION_SANCTUARY_TAKE_PRODUCT_TIMES = 594;
    MISSION_SLOT_MACHINE_START_TIMES = 595;
    MISSION_EXAMINATION_FINISH_NUM = 596;
    MISSION_RAFFLE_DRAW_TICKET_NUM = 597;
    MISSION_FINISH_MOSAIC_NUM_BACKTRACK = 598;
    MISSION_MONOPOLY_BUILDING_NUM = 599;
    MISSION_MONOPOLY_BUILDING_LEVEL = 600;
    MISSION_FINISH_MOSAIC_NUM = 601;
    MISSION_MONOPOLY_USE_ITEM = 602;
    MISSION_ULTRA_ENDLESS_FINISH_SITE = 603;
    MISSION_ULTRA_ENDLESS_FINISH_SITE_WITH_TAG_AVATAR = 604;
    MISSION_ULTRA_ENDLESS_TOTAL_SCORE = 605;
    MISSION_ULTRA_ENDLESS_FINISH_SITE_NUM = 606;
    MISSION_ULTRA_ENDLESS_TOTAL_ADD_SCORE = 607;
    MISSION_ULTRA_ENDLESS_MAX_GROUP_LEVEL = 608;
    MISSION_ULTRA_ENDLESS_SEASON_ADD_CUP_NUM = 609;
    MISSION_ULTRA_ENDLESS_TOP_RANK_TIMES = 610;
    MISSION_BATTLE_PASS_THEME_LEVEL = 611;
    MISSION_BATTLE_PASS_UNLOCK_TICKET = 612;
    MISSION_GET_EXBOSS_SCORE = 613;
    MISSION_OPENWORLD_QUEST_ACTIVITY_TOTAL_SCORE_BACKTRACK = 614;
    MISSION_TOTAL_DUTY_POINT_IN_PERIOD = 615;
    MISSION_FINISH_MISSION_TIMES_WITH_MISSION_ID_LIST = 617;
    MISSION_GACHA_CONSUME_TOTAL_SCORE = 618;
    MISSION_REPLAY_UPLOAD = 619;
    MISSION_REPLAY_PLAY = 620;
    MISSION_REPLAY_RECORD = 621;
    MISSION_FINISH_ELITE_STAGE_NUM = 622;
    MISSION_PASS_STAGE_NUM = 623;
    MISSION_STAGE_TAG_WITH_ALL_SPECIFIC_AVATAR = 624;
    MISSION_SPECIFIC_MATERIAL_ADD_NUM = 625;
    MISSION_SPECIFIC_MATERIAL_COST_NUM = 626;
    MISSION_UNLOCK_AVATAR_IN_SPECIFIC_NEWBIE_ACTIVITY = 627;
    MISSION_QAVATAR_BATTLE_PARTICIPATE_NUM = 630;
    MISSION_QAVATAR_BATTLE_KILL_NUM = 631;
    MISSION_QAVATAR_BATTLE_KILL_NUM_SINGLE_GAME = 632;
    MISSION_QAVATAR_BATTLE_WIN_NUM = 633;
    MISSION_QAVATAR_BATTLE_SCORE = 634;
    MISSION_VIRTUAL_TRAIN_SPECIFIC_STIGMATA_NUM = 635;
    MISSION_VIRTUAL_TRAIN_SPECIFIC_AVATAR_NUM = 636;
    MISSION_ROGUE_TOWER_ENDLESS_MAX_SCORE_WITH_AVATAR_ID_LIST = 637;
    MISSION_ROGUE_TOWER_ENDLESS_TOTAL_SCORE_WITH_AVATAR_ID_LIST = 638;
    MISSION_REUNION_COOK_WITH_BOOK_ID_LIST = 639;
    MISSION_CHATWORLD_BEAST_TREASURE_TAKE_TIMES = 640;
    MISSION_CHATWORLD_BEAST_SINGLE_DAMAGE = 641;
    MISSION_CHATWORLD_BEAST_TOTAL_DAMAGE = 642;
    MISSION_CHATWORLD_NORMAL_BOX_TAKE_TIMES = 643;
    MISSION_ADD_UP_VIP_POINT_BY_PRODUCT = 644;
    MISSION_OPENWORLD_AVATAR_ACTIVITY_CULTIVATE = 645;
    MISSION_OPENWORLD_AVATAR_ACTIVITY_TALENT = 646;
    MISSION_OPENWORLD_FINISH_QUEST_NO_BACKTRACK_WITH_RARITY_AND_MAP = 647;
    MISSION_OPENWORLD_AVATAR_ACTIVITY_LEVEL = 648;
    MISSION_BOSSRUSH_ACTIVITY_STAGE_TAG_ID_USE_SPECIFIC_BUFF_ID_LIST = 649;
    MISSION_STAGE_TAG_SCORE = 650;
    MISSION_OPENWORLD_AVATAR_ACCEPT_QUEST = 651;
    MISSION_THEME_WANTED_STAGE_PASS_NUM = 652;
    MISSION_THEME_WANTED_SPECIFIC_PROGRESS_PASS_NUM = 653;
    MISSION_THEME_WANTED_MP_SPECIFIC_PROGRESS_PASS_NUM = 654;
    MISSION_AVATAR_STAR_SUBSTAR = 655;
    MISSION_SLG_OCCUPIED_POINT_NUM = 656;
    MISSION_SLG_OCCUPIED_BUFF_POINT_NUM = 657;
    MISSION_SLG_PLAYER_SCORE = 658;
    MISSION_RELAY_STAGE_PHASE_PASS_TIME = 659;
    MISSION_EXBOSS_ACC_SCORE = 660;
    MISSION_GOD_WAR_STAGE_WITH_ITEM = 661;
    MISSION_GOD_WAR_STAGE_WITH_SUPPORT_AVATAR = 662;
    MISSION_GOD_WAR_ROLE_RELATION_LEVEL_BACKTRACK = 663;
    MISSION_GOD_WAR_TALENT_LEVEL_NUM_BACKTRACK = 664;
    MISSION_GOD_WAR_AVATAR_PUNISH_LEVEL_NUM_BACKTRACK = 665;
    MISSION_GOD_WAR_AVATAR_PUNISH_LEVEL_SUCC_NUM = 666;
    MISSION_GOD_WAR_PUNISH_BUFF_SUCC_NUM = 667;
    MISSION_GOD_WAR_STAGE_WITH_PUNISH_LEVEL = 668;
    MISSION_GOD_WAR_COLLECTION = 669;
    MISSION_GOD_WAR_COLLECTION_SUIT = 670;
    MISSION_GOD_WAR_COLLECTION_TYPE_NUM_BACKTRACK = 671;
    MISSION_GOD_WAR_ROLE_AVATAR_LEVEL_NUM_BACKTRACK = 672;
    MISSION_GOD_WAR_SETTLE_EVENT_BACKTRACK = 673;
    MISSION_GOD_WAR_FINISH_LOBBY_ACTION = 674;
    MISSION_GOD_WAR_STAGE_TAG_SPECIFIC_CHAPTER_ON_SETTLE = 675;
    MISSION_GOD_WAR_MAX_SCORE_ON_SETTLE = 676;
    MISSION_GOD_WAR_AVATAR_SPECIFIC_PUNISH_LEVEL_SUCC_NUM = 677;
    MISSION_RANCH_MONSTER_RARITY_NUM = 691;
    MISSION_RANCH_MONSTER_WIKI_LIST = 692;
    MISSION_RANCH_COLLCTION_POINT = 693;
    MISSION_RANCH_TAKE_PRODUCT_TIMES = 694;
    MISSION_RANCH_MONSTER_SYNTHESIS_WITH_FORMULA_TIMES = 695;
    MISSION_RANCH_MONSTER_SYNTHESIS_WITHOUT_FORMULA_TIMES = 696;
    MISSION_BIND_HOYOLAB_ACCOUNT = 701;
    MISSION_OPENWORLD_FINISH_STORY_NUM = 702;
    MISSION_OPENWORLD_CHAPTER_EQUIP_COST = 703;
    MISSION_NINJA_SLOT_LIST_LEVEL = 704;
    MISSION_RESTAURANT_DELIVER_QUEST_NUM = 705;
    MISSION_RESTAURANT_FACILITY_LEVEL = 706;
    MISSION_RESTAURANT_COOK_SPECIFIC_RECIPE = 707;
    MISSION_RESTAURANT_COOK_SPECIFIC_RECIPE_WITH_AVATAR = 708;
    MISSION_OPENWORLD_CHAPTER_FAME_LEVEL_BACKTRACK = 709;
    MISSION_SPECIFIC_MATERIAL_NUM_BACKTRACK = 710;
    MISSION_SC_DLC_FINISH_DAILY_QUEST_NUM = 711;
    MISSION_SC_DLC_LEVEL_BACKTRACK = 712;
    MISSION_SC_DLC_AVATAR_LEVEL_BACKTRACK = 713;
    MISSION_SC_DLC_AVATAR_TALENT_NUM_BACKTRACK = 714;
    MISSION_SC_DLC_NPC_SUPPORT_LEVEL_BACKTRACK = 715;
    MISSION_SC_DLC_TOWER_MAX_PROGRESS = 716;
    MISSION_SC_DLC_ANALYSIS_MONSTER = 717;
    MISSION_SC_DLC_AVATAR_LEVEL_NUM_BACKTRACK = 718;
    MISSION_SC_DLC_UNLOCK_TALENT_NUM_BACKTRACK = 719;
    MISSION_SC_DLC_NPC_SUPPORT_LEVEL_NUM_BACKTRACK = 720;
    MISSION_SC_DLC_LEVELUP_TALENT_NUM = 721;
    MISSION_SC_DLC_ACHIEVE_EVENT_NUM = 722;
    BingoMetaDataImpl = 723;
    MISSION_SPECIFIC_STAGE_NUM_BACKTRACK = 741;
    MISSION_UNLOCK_SPECIFIC_PHOTO_NUM_BACKTRACK = 742;
    MISSION_TOWN_ACTIVITY_FINISH_GAMES = 751;
    MISSION_TOWN_ACTIVITY_FINISH_BOSS = 752;
    MISSION_TOWN_ACTIVITY_BUILD_NUM = 753;
    MISSION_TOWN_ACTIVITY_BUILD_NUM_IN_ONE_GAME = 754;
    MISSION_TOWN_ACTIVITY_CHALLNGE_NUM_BACKTRACK = 755;
    MISSION_TUTORIAL_WATCH_SITE_VIDEO = 771;
    MISSION_CHATWORLD_BATTLE_BOX_TAKE_TIMES = 776;
    MISSION_FINISH_TUTORIAL_ID = 780;
    MISSION_SPECIFIC_AVATAR_EQUIP_WEAPON_LEVEL_BACKTRACK = 781;
    MISSION_SPECIFIC_AVATAR_EQUIP_STIGMATA_SUIT_BACKTRACK = 782;
    MISSION_AVATAR_SPECIFIC_UNLOCK_STAR_NUM_BACKTRACK = 783;
    MISSION_AVATAR_SPECIFIC_TYPE_NUM_BACKTRACK = 784;
    MISSION_AVATAR_SPECIFIC_UNLOCK_STAR_SPECIFC_LEVEL_NUM_BACKTRACK = 785;
    MISSION_BOSS_CHALLENGE_FINISH_STAGE = 786;
    MISSION_AVATAR_SPECIFIC_TYPE_SPECIFIC_LEVEL_NUM_BACKTRACK = 790;
    MISSION_GRAND_KEY_GET_ANY_BACKTRACK = 791;
    MISSION_SELECT_ADVENTURE_QUEST = 792;
    MISSION_BEGIN_ADVENTURE_STORY_SWEEP = 793;
    MISSION_STAGE_TAG_CHALLENGE_NUM_BACKTRACK = 796;
    MISSION_FINISH_MISSION_TIMES_WITH_MISSION_ID_LIST_BACKTRACK = 797;
    MISSION_FINISH_EXBOSS_WITH_AVATAR_LIST = 800;
    MISSION_OPENWORLD_CHAPTER_UNLOCK_HERO_BACKTRACK = 806;
    MISSION_OPENWORLD_CHAPTER_ADD_HERO_CARD_NUM = 807;
    MISSION_OPENWORLD_CHAPTER_HERO_CARD_LEVEL_BACKTRACK = 808;
    MISSION_OPENWORLD_CHAPTER_HERO_LEVEL_BACKTRACK = 809;
    MISSION_OPENWORLD_ACTIVE_CARD_GROUP_BATTLE_POINT_BACKTRACK = 810;
    MISSION_OPENWORLD_CHAPTER_UNLOCK_HERO_CARD_BACKTRACK = 811;
    MISSION_OPENWORLD_CHAPTER_FINISH_CHALLENGE_GROUP = 812;
    MISSION_OPENWORLD_CHAPTER_FINISH_CHALLENGE_GROUP_INDEX = 813;
    MISSION_OPENWORLD_CHAPTER_FINISH_ENDLESS_CHALLENGE = 814;
    MISSION_OPENWORLD_HUNT_FINISH_QUEST_NUM_BACKTRACK = 820;
    MISSION_OPENWORLD_HUNT_DESTROY_STRONGHOLD_NUM_BACKTRACK = 821;
    MISSION_OPENWORLD_HUNT_HUNTER_KILLED_MAP_NUM_BACKTRACK = 822;
    MISSION_OPENWORLD_HUNT_TALENT_TOTAL_LEVEL_BACKTRACK = 823;
    MISSION_MONSTER_CARD_COLLECTION_NUM_BACKTRACK = 826;
    MISSION_MONSTER_CARD_COLLECTION_LEVEL_BACKTRACK = 827;
    MISSION_MONSTER_CARD_NUM_LEVEL_GREATER_EQUAL_BACKTRACK = 828;
    MISSION_MONSTER_CARD_EXP_STAGE_PASS_TIMES = 829;
    MISSION_GACHA_NUM_SPECIFIC_TICKET_ID_LIST = 831;
    MISSION_GACHA_NUM_AFTER_DISCOUNT_SPECIFIC_TICKET_ID_LIST = 832;
    MISSION_OPENWORLD_FINISH_STORY_NO_BACKTRACK = 833;
    MISSION_EX_BOSS_FINISH_BOSS_NUM_WITH_LEVEL = 834;
    MISSION_BATTLE_PASS_EXP_ACTIVITY_MISSION = 835;
    MISSION_BUFF_ASSIST_SELECT_BUFF_TIMES = 836;
    MISSION_BUFF_ASSIST_PUBLISH_BUFF_TIMES = 837;
    MISSION_DICEY_DUNGEON_ENDLESS_PASSED_FLOOR = 838;
    MISSION_DICEY_DUNGEON_DAILY_PASSED_TIMES = 839;
    MISSION_DICEY_DUNGEON_WEAPON_UNLOCK = 840;
    MISSION_DICEY_DUNGEON_WEAPON_GACHA_TIMES = 841;
    MISSION_DICEY_DUNGEON_TOTAL_ROLE_LEVEL = 842;
    MISSION_DICEY_DUNGEON_ROLE_LEVEL_GREATER_EQUAL_NUM = 843;
    MISSION_DICEY_DUNGEON_ROLE_NUM_LEVEL_GREATER_EQUAL = 844;
    MISSION_PVZ_DAILY_PASS_TIMES = 845;
    MISSION_PVZ_QAVATAR_NUM_LEVEL_GREATER_EQUAL = 846;
    MISSION_PVZ_SPECIAL_MATERIAL_NUM = 847;
}

message MissionHideSwitchData {
    optional uint32 mission_id = 1;
}

enum MissionMpMemberType {
    MISSION_MP_LEADER = 1;
    MISSION_MP_ASSISTANT = 2;
}

message MissionRewardSwitchData {
    optional uint32 mission_id = 1;
}

enum MissionStatus {
    MISSION_STATUS_NONE = 0;
    MISSION_NOT_BEGIN = 1;
    MISSION_DOING = 2;
    MISSION_FINISH = 3;
    MISSION_TIMEOUT = 4;
    MISSION_CLOSE = 5;
    MISSION_WAIT_DELETE = 6;
}


message MissionStepCompensation {
    optional uint32 type_id = 1;
    optional uint32 old_step_id = 2;
    optional uint32 new_step_id = 3;
    optional uint32 old_step_compensation_reward_id = 4;
    optional uint32 old_step_reward_id = 5;
    repeated MissionCompensationReward mission_compensation_list = 6;
    repeated uint32 old_step_compensation_reward_id_list = 7;
}

enum MissionSubType {
    MISSION_SUB_BRANCH = 1;
    MISSION_SUB_MP_RAID = 102;
    MISSION_SUB_ARMADA = 301;
    MISSION_SUB_SHOP_ADD_ON = 501;
    MISSION_SUB_RAFFLE = 502;
    MISSION_SUB_WEB_ACTIVITY = 503;
    MISSION_SUB_COMPETITION_SEASON = 504;
    MISSION_SUB_DREAM = 505;
    MISSION_SUB_REFRESH_CYCLE_ON_FINISH = 506;
    MISSION_SUB_GOD_WAR = 507;
    MISSION_SUB_SC_DLC = 508;
    MISSION_SUB_CHAPTER_OW = 509;
    MISSION_SUB_OW_STORY = 510;
    MISSION_SUB_RPG_TAKE_REWARD_DROP = 1301;
    MISSION_SUB_GOBACK = 1501;
    MISSION_SUB_GOBACK_ACTIVITY = 1502;
    MISSION_SUB_GOBACK_LIMIT_TIME = 1503;
    MISSION_SUB_NINJA = 2001;
    MISSION_SUB_ARMADA_REUNION = 2002;
    MISSION_SUB_LOGIN_MISSION = 2003;
    MISSION_SUB_INVITEE = 2004;
}

message MissionThemeData {
    optional uint32 theme_id = 1;
    optional bool is_theme_upgrade = 2;
    repeated uint32 has_take_extra_reward_mission_list = 3;
    optional bool is_has_take_all_extra_reward = 4;
}

enum MissionType {
    MISSION_NONE = 0;
    MISSION_LINEAR = 1;
    MISSION_BOUNTY = 2;
    MISSION_TIMED = 3;
    MISSION_SIDE = 4;
    MISSION_CYCLE = 5;
    MISSION_DAILY = 6;
    MISSION_PROGRESS = 7;
    MISSION_CHALLENGE = 8;
    MISSION_MINUTE = 9;
    MISSION_MASTER_PUPIL_EXAM = 10;
    MISSION_MASTER_PUPIL_DAILY = 11;
    MISSION_AVATAR_TRAINING = 12;
    MISSION_RPG_TALE = 13;
    MISSION_MAINLINE_STEP = 14;
    MISSION_GOBACK = 15;
    MISSION_WEEKLY_ROUTINE = 16;
    MISSION_BATTLE_PASS = 17;
    MISSION_ADVENTURE_GROUP = 18;
    MISSION_MASTER_PUPIL_COMPANY = 19;
    MISSION_ACTIVITY = 20;
    MISSION_COMPETITION_SEASON = 21;
}

message ModifyDLCNameReq {
    optional string name = 1;

    enum CmdId {
        CMD_ID = 3557;
    }
}

message ModifyDLCNameRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3558;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FORMAT_ERROR = 2;
        SENSITIVE_WORDS = 3;
    }
}

message ModifyScDLCNameReq {
    optional string name = 1;

    enum CmdId {
        CMD_ID = 6326;
    }
}

message ModifyScDLCNameRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 6327;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FORMAT_ERROR = 2;
        SENSITIVE_WORDS = 3;
    }
}

message MonopolyAddMonsterReq {
    optional uint32 area_id = 1;
    optional uint32 floor_id = 2;
    optional uint32 monster_id = 3;
    optional uint32 position = 4;
    optional uint32 direction = 5;

    enum CmdId {
        CMD_ID = 3867;
    }
}

message MonopolyAddMonsterRsp {
    optional Retcode retcode = 1;
    optional uint32 monster_id = 2;
    optional uint32 position = 3;
    optional uint32 direction = 4;
    optional uint32 unique_id = 5;
    optional uint32 entity_type = 6;
    optional uint32 tile_entity_id = 7;

    enum CmdId {
        CMD_ID = 3868;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ALREADY_ADD = 2;
    }
}



message MonopolyArea {
    optional uint32 area_id = 1;
    optional MonopolyAreaStatus status = 2;
    repeated MonopolyFloor floor_list = 3;
}

enum MonopolyAreaStatus {
    MONOPOLY_AREA_STATUS_NONE = 0;
    MONOPOLY_AREA_STATUS_LOCKED = 1;
    MONOPOLY_AREA_STATUS_UNLOCKED = 2;
}

enum MonopolyBehaviorType {
    MONOPOLY_BEHAVIOR_WALK = 1;
    MONOPOLY_BEHAVIOR_DEMOLISH_BUILDING = 2;
    MONOPOLY_BEHAVIOR_FREEZE_BUILDING = 3;
    MONOPOLY_BEHAVIOR_RANDOM_FREEZE = 4;
    MONOPOLY_BEHAVIOR_SUMMON = 5;
    MONOPOLY_BEHAVIOR_REPEL = 7;
    MONOPOLY_BEHAVIOR_DELELTE_SELF = 8;
    MONOPOLY_BEHAVIOR_TRIGGER_RPG_EVENT = 9;
}

message MonopolyBuildingConstructReq {
    optional uint32 area_id = 1;
    optional uint32 building_type = 2;

    enum CmdId {
        CMD_ID = 3854;
    }
}

message MonopolyBuildingConstructRsp {
    optional Retcode retcode = 1;
    optional uint32 area_id = 2;
    optional uint32 building_type = 3;

    enum CmdId {
        CMD_ID = 3855;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LACK_MATERIAL = 2;
        ANOTHER_TYPE_EXIST = 3;
        NUM_LIMIT = 4;
        LEVEL_MAX = 5;
        NO_LOCATION = 6;
        WAIT_SELECT = 7;
        STATUS_ERROR = 8;
    }
}

enum MonopolyBuildingFuncType {
    MONOPOLY_BUILDING_FUNC_PRODUCT = 1;
    MONOPOLY_BUILDING_FUNC_BUFF = 2;
}

message MonopolyBuyGoodsReq {
    optional uint32 area_id = 1;
    optional uint32 goods_id = 2;

    enum CmdId {
        CMD_ID = 3861;
    }
}

message MonopolyBuyGoodsRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3862;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LACK_MATERIAL = 2;
        BUY_TIMES_LACK = 3;
        INVALID_POSITION = 4;
        STATUS_ERROR = 5;
    }
}

enum MonopolyDiceType {
    MONOPOLY_DICE_NONE = 0;
    MONOPOLY_DICE_NORMAL = 1;
    MONOPOLY_DICE_BUILDING_PRIORITY = 2;
}

message MonopolyEndRoundReq {
    optional uint32 area_id = 1;

    enum CmdId {
        CMD_ID = 3856;
    }
}

message MonopolyEndRoundRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3857;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STATUS_ERROR = 2;
    }
}



message MonopolyFloor {
    optional uint32 floor_id = 1;
    repeated Building building_list = 2;
    repeated MonopolyMonster monster_list = 3;
    optional MonopolyRoundStatus round_status = 4;
    message Building {
        optional uint32 location = 1;
        optional uint32 type = 2;
        optional uint32 level = 3;
        optional uint32 product_num = 4;
    }
}

enum MonopolyItemType {
    MONOPOLY_ITEM_CONTROLABLE_DICE = 1;
    MONOPOLY_ITEM_ROADBLOCK = 2;
    MONOPOLY_ITEM_EXCHANGE_POSITION = 4;
    MONOPOLY_ITEM_LEVELUP_BUILDING = 7;
    MONOPOLY_ITEM_CHANGE_DIRECTION = 8;
}

message MonopolyMonster {
    optional uint32 unique_id = 1;
    optional uint32 monster_id = 2;
}

message MonopolyResetFloorReq {
    optional uint32 area_id = 1;
    optional uint32 floor_id = 2;

    enum CmdId {
        CMD_ID = 3865;
    }
}

message MonopolyResetFloorRsp {
    optional Retcode retcode = 1;
    optional uint32 area_id = 2;
    optional uint32 floor_id = 3;
    optional uint32 tile_tower_id = 4;

    enum CmdId {
        CMD_ID = 3866;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message MonopolyRewardNotify {
    optional uint32 behavior_id = 1;
    optional RewardData reward = 2;

    enum CmdId {
        CMD_ID = 3860;
    }
}

enum MonopolyRoundStatus {
    MONOPOLY_ROUND_STATUS_NONE = 0;
    MONOPOLY_ROUND_STATUS_START = 1;
    MONOPOLY_ROUND_STATUS_AFTER_DICE = 2;
    MONOPOLY_ROUND_STATUS_AFTER_CONSTRUCT = 3;
}

message MonopolyShopGoods {
    optional uint32 goods_id = 1;
    optional uint32 buy_times = 2;
}

message MonopolySkipBattleReq {
    optional uint32 stage_id = 1;

    enum CmdId {
        CMD_ID = 3863;
    }
}

message MonopolySkipBattleRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3864;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message MonopolyThrowDiceReq {
    optional uint32 area_id = 1;

    enum CmdId {
        CMD_ID = 3852;
    }
}

message MonopolyThrowDiceRsp {
    optional Retcode retcode = 1;
    optional uint32 area_id = 2;
    optional uint32 dice_num = 3;

    enum CmdId {
        CMD_ID = 3853;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        WAIT_SELECT_PATH = 2;
        STATUS_ERROR = 3;
    }
}

message MonopolyUseItemReq {
    optional uint32 area_id = 1;
    optional uint32 item_id = 2;
    optional uint32 para = 3;

    enum CmdId {
        CMD_ID = 3858;
    }
}

message MonopolyUseItemRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3859;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LACK_MATERIAL = 2;
        INVALID_AREA = 3;
    }
}

message MonsterCard {
    optional uint32 unique_id = 1;
    optional uint32 level = 2;
    optional uint32 star = 3;
    optional uint32 fragment_num = 4;
    repeated uint32 talent_list = 5;
}


message MonsterCardActivityRankInfo {
    repeated MonsterCardCardBriefData team_brief_data_list = 1;
    optional uint32 collection_level = 2;
    optional uint32 floor = 3;
}

message MonsterCardCardBriefData {
    optional uint32 unique_id = 1;
    optional uint32 star = 2;
    optional uint32 level = 3;
    repeated uint32 talent_list = 4;
}


message MonsterCardConfirmRandomTalentReq {
    optional uint32 activity_id = 1;
    optional MonsterCardRandomTalentConfirmType type = 2;

    enum CmdId {
        CMD_ID = 5933;
    }
}



message MonsterCardConfirmRandomTalentRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional MonsterCardRandomTalentConfirmType type = 3;
    optional MonsterCardRandomTalentConfirmData confirm_data = 4;

    enum CmdId {
        CMD_ID = 5934;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message MonsterCardFragmentOverflowNotify {
    optional uint32 activity_id = 1;
    optional Material overflow_cost_material = 2;
    repeated Material return_material_list = 3;

    enum CmdId {
        CMD_ID = 5935;
    }
}

message MonsterCardGetActivityReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 5920;
    }
}



message MonsterCardGetActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated MonsterCard card_list = 3;
    optional uint32 has_take_daily_reward_times = 4;
    optional MonsterCardRandomTalentConfirmData random_talent_confirm_data = 5;

    enum CmdId {
        CMD_ID = 5921;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message MonsterCardGetBossRankReq {
    optional uint32 activity_id = 1;
    optional uint32 stage_id = 2;

    enum CmdId {
        CMD_ID = 5931;
    }
}



message MonsterCardGetBossRankRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 stage_id = 3;
    optional uint32 num = 4;
    optional RankShowData rank_data = 5;
    optional uint32 rank_percent = 6;
    optional MonsterCardActivityRankInfo self_rank_data = 7;

    enum CmdId {
        CMD_ID = 5932;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message MonsterCardGetTowerRankReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 5929;
    }
}



message MonsterCardGetTowerRankRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 num = 3;
    optional RankShowData rank_data = 4;
    optional uint32 rank_percent = 5;
    optional MonsterCardActivityRankInfo self_rank_data = 6;

    enum CmdId {
        CMD_ID = 5930;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message MonsterCardLearnRandomTalentReq {
    optional uint32 activity_id = 1;
    optional uint32 unique_id = 2;
    optional uint32 cost_material_id = 3;
    optional uint32 talent_index = 4;

    enum CmdId {
        CMD_ID = 5926;
    }
}

message MonsterCardLearnRandomTalentRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 unique_id = 3;
    optional uint32 cost_material_id = 4;
    optional uint32 talent_index = 5;
    optional uint32 old_talent_id = 6;
    optional uint32 new_talent_id = 7;

    enum CmdId {
        CMD_ID = 5927;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        MATERIAL_ERROR = 3;
        INDEX_ERROR = 4;
        NEED_TO_CONFIRM = 5;
    }
}

enum MonsterCardLevelLimitType {
    MONSTER_CARD_LEVEL_LIMIT_TYPE_NONE = 0;
    MONSTER_CARD_LEVEL_LIMIT_TYPE_PASS_RPG_SITE = 1;
}

message MonsterCardLevelUpReq {
    optional uint32 activity_id = 1;
    optional uint32 unique_id = 2;
    optional uint32 target_level = 3;

    enum CmdId {
        CMD_ID = 5922;
    }
}

message MonsterCardLevelUpRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 unique_id = 3;
    optional uint32 target_level = 4;

    enum CmdId {
        CMD_ID = 5923;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        LEVEL_LIMIT = 3;
        TARGET_LEVEL_ERROR = 4;
    }
}

message MonsterCardRandomTalentConfirmData {
    optional uint32 unique_id = 1;
    optional uint32 cost_material_id = 2;
    optional uint32 talent_index = 3;
    optional uint32 old_talent_id = 4;
    optional uint32 new_talent_id = 5;
}

enum MonsterCardRandomTalentConfirmType {
    MONSTER_CARD_RANDOM_TALENT_CONFIRM_TYPE_NONE = 0;
    MONSTER_CARD_RANDOM_TALENT_CONFIRM_TYPE_CONFIRM = 1;
    MONSTER_CARD_RANDOM_TALENT_CONFIRM_TYPE_ABANDON = 2;
}

enum MonsterCardSelectCardCondition {
    MONSTER_CARD_SELECT_CARD_CONDITION_NONE = 0;
    MONSTER_CARD_SELECT_CARD_CONDITION_LEVEL_GREATER_EQUAL = 1;
}

enum MonsterCardSkillType {
    MONSTER_CARD_SKILL_TYPE_NONE = 0;
    MONSTER_CARD_SKILL_TYPE_ATK = 1;
    MONSTER_CARD_SKILL_TYPE_LB = 2;
    MONSTER_CARD_SKILL_TYPE_AUTO = 3;
    MONSTER_CARD_SKILL_TYPE_PASSIVE = 4;
    MONSTER_CARD_SKILL_TYPE_WEATHER = 5;
    MONSTER_CARD_SKILL_TYPE_TALENT = 6;
    MONSTER_CARD_SKILL_TYPE_UNLOCK = 99;
}

enum MonsterCardStageType {
    MONSTER_CARD_STAGE_TYPE_NONE = 0;
    MONSTER_CARD_STAGE_TYPE_NORMAL = 1;
    MONSTER_CARD_STAGE_TYPE_BOSS = 2;
    MONSTER_CARD_STAGE_TYPE_EXP = 3;
    MONSTER_CARD_STAGE_TYPE_TOWER = 4;
}

message MonsterCardStarUpReq {
    optional uint32 activity_id = 1;
    optional uint32 unique_id = 2;

    enum CmdId {
        CMD_ID = 5924;
    }
}

message MonsterCardStarUpRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 unique_id = 3;

    enum CmdId {
        CMD_ID = 5925;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FRAGMENT_LACK = 2;
        LEVEL_LACK = 3;
        STAR_LIMIT = 4;
    }
}



message MonsterCardSyncCardNotify {
    optional uint32 activity_id = 1;
    optional bool is_all = 2;
    repeated MonsterCard card_list = 3;
    optional MonsterCardSyncType type = 4;

    enum CmdId {
        CMD_ID = 5928;
    }
}

enum MonsterCardSyncType {
    MONSTER_CARD_SYNC_TYPE_NONE = 0;
    MONSTER_CARD_SYNC_TYPE_LEVEL_UP = 1;
    MONSTER_CARD_SYNC_TYPE_STAR_UP = 2;
    MONSTER_CARD_SYNC_TYPE_LEARN_TALENT = 3;
    MONSTER_CARD_SYNC_TYPE_NEW_CARD = 4;
    MONSTER_CARD_SYNC_TYPE_REFRESH = 5;
    MONSTER_CARD_SYNC_TYPE_ADD_FRAGMENT = 6;
}

message MosaicActivity {
    optional uint32 activity_id = 1;
    optional uint32 progress = 2;
    optional bool is_take_reward = 3;
}


message MoveArmadaCabinReq {
    repeated ArmadaGrid grid_list = 1;

    enum CmdId {
        CMD_ID = 2635;
    }
}

message MoveArmadaCabinRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2636;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        NOT_GRANTED = 3;
        DATA_ERROR = 4;
        NO_OWNERSHIP = 5;
    }
}

enum MpAction {
    MP_ACTION_ERROR = 0;
    MP_ACTION_CLOSE_MVP_PAGE = 1;
    MP_ACTION_CLOSE_LIKE_PAGE = 2;
}

message MpBadge {
    optional uint64 unique_id_u64 = 1;
    optional uint32 badge_id = 2;
}


message MpBadgeData {
    optional uint64 equiped_badge_uid_u64 = 1;
    repeated MpBadge badge_list = 2;
}

message MpCancelMatchReq {

    enum CmdId {
        CMD_ID = 468;
    }
}

message MpCancelMatchRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 469;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message MpCreateTeamReq {
    optional MpTeamMember member = 1;

    enum CmdId {
        CMD_ID = 348;
    }
}

message MpCreateTeamRsp {
    optional Retcode retcode = 1;
    optional uint32 team_id = 2;

    enum CmdId {
        CMD_ID = 349;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ALREADY_IN_TEAM = 2;
        CLIENT_VERSION_ERROR = 3;
        SERVER_BUSY = 4;
        IN_SQUAD = 5;
        IN_SQUAD_MATCH = 6;
        IN_ROOM = 7;
        FEATURE_LIMIT = 8;
    }
}

enum MpDataType {
    MP_DATA_ALL = 0;
    MP_DATA_LEVEL = 1;
    MP_DATA_EXP = 2;
    MP_DATA_SKILL_POINT = 3;
    MP_DATA_SKILL = 4;
    MP_DATA_AVATAR = 5;
    MP_DATA_PUNISH_TIME = 6;
}


message MpEnterTeamReq {
    optional uint32 team_id = 1;
    optional MpTeamMember member = 2;
    optional uint32 uid = 3;

    enum CmdId {
        CMD_ID = 350;
    }
}

message MpEnterTeamRsp {
    optional Retcode retcode = 1;
    optional uint32 team_id = 2;
    optional uint32 stage_id = 3;

    enum CmdId {
        CMD_ID = 351;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TEAM_NOT_EXIST = 2;
        TEAM_FULL = 3;
        TEAM_ENTER_LOBBY = 4;
        TEAM_IN_LOBBY = 5;
        TEAM_IN_FIGHT = 6;
        ALREADY_IN_TEAM = 7;
        CLIENT_VERSION_ERROR = 8;
        SERVER_BUSY = 9;
        IN_SQUAD = 10;
        IN_SQUAD_MATCH = 11;
        IN_ROOM = 12;
        CONDITION_NOT_MEET = 13;
        FEATURE_LIMIT = 14;
        DATA_VERSION_CONFLICT = 15;
    }
}



message MpFastMatchReq {
    repeated uint32 stage_id_list = 1;
    optional uint32 device_score = 2;
    repeated MpMatchStage match_stage_list = 3;
    optional uint32 level = 4;
    optional uint32 client_rtt = 5;
    optional MpTeamMember member = 6;
    optional uint32 report_num = 7;

    enum CmdId {
        CMD_ID = 1247;
    }
}

message MpFastMatchRsp {
    optional Retcode retcode = 1;
    repeated uint32 stage_id_list = 2;
    optional uint32 lobby_id = 3;

    enum CmdId {
        CMD_ID = 1248;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STAGE_ERROR = 2;
        CLIENT_VERSION_ERROR = 3;
        BAD_NETWORK = 4;
        SERVER_BUSY = 5;
        ALREADY_IN_TEAM = 6;
        MATCH_STAGE_EXCEED_MAX = 7;
        IN_SQUAD = 8;
        IN_SQUAD_MATCH = 9;
        IN_ROOM = 10;
    }
}

message MpGetLobbyRecommendReq {
    optional uint32 stage_id = 1;

    enum CmdId {
        CMD_ID = 470;
    }
}

message MpGetLobbyRecommendRsp {
    optional Retcode retcode = 1;
    optional uint32 stage_id = 2;
    optional RecommendType recommend_type = 3;

    enum CmdId {
        CMD_ID = 471;
    }
    enum RecommendType {
        RECOMMEND_NONE = 0;
        RECOMMEND_CREATE = 1;
        RECOMMEND_ENTER = 2;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message MpGetMatchInfoReq {

    enum CmdId {
        CMD_ID = 466;
    }
}


message MpGetMatchInfoRsp {
    optional Retcode retcode = 1;
    repeated MpMatchInfo match_info_list = 2;
    optional uint32 battle_begin_time = 3;
    optional uint32 lobby_idx = 4;

    enum CmdId {
        CMD_ID = 467;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_MATCH_ROOM = 2;
    }
}

message MpGetTeamReq {

    enum CmdId {
        CMD_ID = 346;
    }
}


message MpGetTeamRsp {
    optional Retcode retcode = 1;
    optional MpTeamData team_data = 2;

    enum CmdId {
        CMD_ID = 347;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_TEAM = 2;
        DISCONNECT = 3;
        KICK = 4;
    }
}

message MpKickFromTeamReq {
    optional uint32 member_uid = 1;

    enum CmdId {
        CMD_ID = 354;
    }
}

message MpKickFromTeamRsp {
    optional Retcode retcode = 1;
    optional uint32 member_uid = 2;

    enum CmdId {
        CMD_ID = 355;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_TEAM = 2;
    }
}

message MpLeaveTeamNotify {
    optional int32 reason = 1;

    enum CmdId {
        CMD_ID = 1101;
    }
}

enum MpLeaveTeamReason {
    LEAVE_TEAM_REASON_NONE = 0;
    LEAVE_TEAM_REASON_KICK = 1;
}

message MpLikePlayerReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 392;
    }
}

message MpLikePlayerRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;
    optional uint32 from_uid = 3;
    optional uint32 target_like_num = 4;
    optional uint32 add_friends_point = 5;

    enum CmdId {
        CMD_ID = 393;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_TEAM = 2;
        HAS_LIKE = 3;
    }
}

message MpMatchInfo {
    optional uint32 stage_id = 1;
    optional uint32 start_match_time = 2;
}


message MpMatchStage {
    optional uint32 stage_id = 1;
    optional bool has_leader_stamina = 2;
    optional bool has_leader_enter_times = 3;
    optional AvatarDetailData avatar_detail = 4;
    repeated AvatarDetailData backup_avatar_list = 5;
    optional bool has_leader_theme_wanted_ticket = 6;
}

enum MpMemberClientStatus {
    MP_MEMBER_CLIENT_NONE = 0;
    MP_MEMBER_CLIENT_IN_TEAM = 1;
    MP_MEMBER_CLIENT_IN_LOBBY = 2;
}


message MpMemberSetClientStatusReq {
    optional MpMemberClientStatus status = 1;

    enum CmdId {
        CMD_ID = 375;
    }
}

message MpMemberSetClientStatusRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 376;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_TEAM = 2;
    }
}

message MpRaidRankData {
    optional uint32 uid = 1;
    optional uint32 score = 2;
    optional uint32 rank = 3;
    optional string nickname = 4;
    optional uint32 armada_id = 5;
    optional string armada_name = 6;
}

message MpRaidResetCycleReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 360;
    }
}

message MpRaidResetCycleRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 361;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        RESET_TIMES_LACK = 3;
        COIN_LACK = 4;
        HAVE_REWARD_NOT_TAKEN = 5;
        NOT_ACTIVE = 6;
    }
}

message MpRecordMember {
    optional uint32 uid = 1;
    optional uint32 avatar_id = 2;
    optional uint32 dress_id = 3;
    optional bool is_mvp = 4;
    optional bool is_leader = 5;
    optional string nick_name = 6;
    optional uint32 avatar_level = 7;
    optional uint32 avatar_star_level = 8;
    optional string region_name = 9;
}

message MpReportPlayerReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 381;
    }
}

message MpReportPlayerRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;
    optional bool report_success = 3;
    optional uint32 judge_term = 4;

    enum CmdId {
        CMD_ID = 382;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_TEAM = 2;
        ALREADY_REPORT = 3;
    }
}


message MpResetSkillPointReq {
    optional MpSkillType type = 1;

    enum CmdId {
        CMD_ID = 344;
    }
}


message MpResetSkillPointRsp {
    optional Retcode retcode = 1;
    optional MpSkillType type = 2;

    enum CmdId {
        CMD_ID = 345;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        COIN_NOT_ENOUGH = 2;
    }
}

message MpSetExtraSkillReq {
    optional uint32 extra_skill_id = 1;

    enum CmdId {
        CMD_ID = 1644;
    }
}

message MpSetExtraSkillRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 1645;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_TEAM = 2;
    }
}

message MpSkill {
    optional uint32 skill_id = 1;
    optional uint32 level = 2;
}


message MpSkillPoint {
    optional MpSkillType type = 1;
    optional uint32 value = 2;
}

enum MpSkillType {
    MP_SKILL_NONE = 0;
    MP_SKILL_ATTACK = 1;
    MP_SKILL_DEFENCE = 2;
    MP_SKILL_OTHER = 3;
}

message MpStageDamageInfo {
    optional uint32 hit_damage_1 = 1;
    optional uint32 hit_damage_2 = 2;
    optional uint32 hit_damage_3 = 3;
}

message MpStageGetVoteInfoReq {

    enum CmdId {
        CMD_ID = 1036;
    }
}


message MpStageGetVoteInfoRsp {
    optional Retcode retcode = 1;
    repeated MpStageVoteInfo vote_info_list = 2;
    optional uint32 vote_end_time = 3;

    enum CmdId {
        CMD_ID = 1037;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_TEAM = 2;
        NOT_IN_VOTING = 3;
    }
}

enum MpStageMatchType {
    CREATE_ENTER = 1;
    MATCH_ENTER = 2;
}

enum MpStageMemberLimitType {
    MP_MEMBER_LIMIT_NONE = 0;
    MP_MEMBER_LIMIT_MASTER_ONLY = 1;
    MP_MEMBER_LIMIT_PUPIL_ONLY = 2;
    MP_MEMBER_LIMIT_ARMADA_ONLY = 3;
    MP_MEMBER_LIMIT_NEWBIE_ONLY = 4;
}


message MpStageMemberVoteNotify {
    repeated MpStageVoteInfo vote_info_list = 1;

    enum CmdId {
        CMD_ID = 1038;
    }
}

message MpStageMvpReward {
    optional uint32 extra_coin = 1;
    optional uint32 extra_avatar_exp = 2;
    optional uint32 extra_mp_exp = 3;
}


message MpStageRecord {
    optional uint32 stage_id = 1;
    optional uint32 begin_time = 2;
    optional uint32 duration = 3;
    repeated MpRecordMember member_list = 4;
}

message MpStageSettle {
    optional uint32 uid = 1;
    optional uint32 score = 2;
    optional uint32 damage = 3;
    optional uint32 mvp_score = 4;
}


message MpStageSettleNotify {
    optional uint32 team_id = 1;
    repeated MpStageSettle settle_list = 2;

    enum CmdId {
        CMD_ID = 391;
    }
}

message MpStageVoteCountDownNotify {
    optional uint32 count_down_time = 1;

    enum CmdId {
        CMD_ID = 1029;
    }
}

message MpStageVoteInfo {
    optional uint32 uid = 1;
    optional uint32 option = 2;
}

enum MpStageVoteOption {
    MP_STAGE_VOTE_OPTION_STAY_IN_TEAM = 0;
    MP_STAGE_VOTE_OPTION_STAGE_AGAIN = 1;
    MP_STAGE_VOTE_OPTION_NEXT_STAGE = 2;
}


message MpStageVoteReq {
    optional MpStageVoteOption option = 1;

    enum CmdId {
        CMD_ID = 1030;
    }
}

message MpStageVoteResultNotify {
    optional uint32 option = 1;

    enum CmdId {
        CMD_ID = 1032;
    }
}


message MpStageVoteRsp {
    optional Retcode retcode = 1;
    optional MpStageVoteOption option = 2;

    enum CmdId {
        CMD_ID = 1031;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_TEAM = 2;
        NOT_VOTING = 3;
    }
}


message MpSyncActionFromPlayerNotify {
    optional MpAction action = 1;

    enum CmdId {
        CMD_ID = 1579;
    }
}


message MpSyncActionFromServerNotify {
    optional uint32 uid = 1;
    optional MpAction action = 2;

    enum CmdId {
        CMD_ID = 1580;
    }
}

message MpTeamChangeLeaderReq {
    optional uint32 new_leader_uid = 1;

    enum CmdId {
        CMD_ID = 362;
    }
}

message MpTeamChangeLeaderRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 363;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_TEAM = 2;
        NOT_LEADER = 3;
        NOT_ENOUGH_STAMINA = 4;
        NOT_ENOUGH_ENTER_TIMES = 5;
        NOT_ALLOW_CHANGE_LEADER = 6;
    }
}





message MpTeamData {
    optional uint32 team_id = 1;
    optional uint32 leader_uid = 2;
    optional MpTeamStatus status = 3;
    optional LobbyStatus lobby_status = 4;
    repeated MpTeamMember member_list = 5;
    optional uint32 min_level = 6;
    optional LobbyEnterType lobby_enter_type = 7;
    optional uint32 stage_id = 8;
    optional string team_name = 9;
    optional string team_description = 10;
    optional uint32 max_level = 11;
}


message MpTeamEnterLobbyReq {
    optional uint32 stage_id = 1;
    optional LobbyEnterType lobby_enter_type = 2;
    optional uint32 min_level = 3;
    optional string team_name = 4;
    optional string team_description = 5;
    optional bool is_team_name_default = 6;
    optional uint32 max_level = 7;

    enum CmdId {
        CMD_ID = 356;
    }
}

message MpTeamEnterLobbyRsp {
    optional Retcode retcode = 1;
    optional int32 sub_retcode = 2;
    optional uint32 error_uid = 3;
    optional uint32 stage_id = 4;

    enum CmdId {
        CMD_ID = 357;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_TEAM = 2;
        MEMBER_EXCEED_MAX = 3;
        MEMBER_OFFLINE = 4;
        IN_ENTER_LOBBY = 5;
        ENTER_TIME_OUT = 6;
        STAGE_ERROR = 7;
        NOT_LEADER = 8;
        MEMBER_NOT_ENTER_TEAM_UI = 9;
        NO_AVAILABLE_AVATAR = 10;
        TEAM_NOT_SATIFY_RAID = 11;
        NOT_ALLOW_CROSS_REGION = 12;
        TEAM_NAME_ERROR = 13;
        DEFAULT_TEAM_NAME_ERROR = 14;
    }
}

message MpTeamLeaveLobbyReq {

    enum CmdId {
        CMD_ID = 373;
    }
}

message MpTeamLeaveLobbyRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 374;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_LEADER = 2;
        NOT_IN_TEAM = 3;
        NOT_IN_LOBBY = 4;
        LEADER_IS_WILD = 5;
    }
}








message MpTeamMember {
    optional uint32 index = 1;
    optional uint32 uid = 2;
    optional uint32 mp_exp = 3;
    optional uint32 stamina = 4;
    repeated MpSkill skill_list = 5;
    optional uint32 head_avatar_id = 6;
    optional uint32 dress_id = 7;
    optional uint32 punish_end_time = 8;
    optional uint32 voice_id = 9;
    optional MpTeamMemberInfo member_info = 11;
    optional LobbyMemberStatus status = 12;
    optional LobbyClientStatus client_status = 13;
    optional uint32 avatar_trial_id = 14;
    optional bool is_wild = 15;
    optional ReclaimMpAvatar reclaim_avatar_info = 17;
    optional string region_name = 18;
    optional OpenworldBossMp openworld_boss_info = 19;
    optional uint32 frame_id = 20;
    optional uint32 enter_type = 21;
    optional uint32 custom_head_id = 22;
    optional uint32 newbie_id = 23;
    optional uint32 data_version = 24;
    optional uint32 season_id = 25;
    optional uint32 season_group_id = 26;
    optional uint32 season_level = 27;
    optional uint32 extra_skill_id = 28;
    optional ScDLCMpAvatar sc_dlc_avatar_info = 29;
}



message MpTeamMemberInfo {
    optional PlayerDetailData detail = 1;
    optional PlayerCardData card = 3;
}

message MpTeamMemberSetVoiceIdReq {
    optional uint32 voice_id = 1;

    enum CmdId {
        CMD_ID = 396;
    }
}

message MpTeamMemberSetVoiceIdRsp {
    optional Retcode retcode = 1;
    optional uint32 uid = 2;
    optional uint32 voice_id = 3;

    enum CmdId {
        CMD_ID = 397;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_TEAM = 2;
    }
}

enum MpTeamStatus {
    TEAM_STATUS_NONE = 0;
    TEAM_STATUS_IN_TEAM = 1;
    TEAM_STATUS_IN_LOBBY = 2;
}


message MpTeamSyncNotify {
    optional MpTeamData team_data = 1;

    enum CmdId {
        CMD_ID = 395;
    }
}

message MpUpgradeSkillReq {
    optional uint32 skill_id = 1;

    enum CmdId {
        CMD_ID = 342;
    }
}

message MpUpgradeSkillRsp {
    optional Retcode retcode = 1;
    optional uint32 skill_id = 2;

    enum CmdId {
        CMD_ID = 343;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        POINT_NOT_ENOUGH = 2;
        IS_MAX_LEVEL = 3;
    }
}

message NewbieActivityChallenge {
    optional bool is_take_challenge_reward = 1;
    repeated uint32 has_finished_stage_list = 2;
    optional uint32 enter_times = 3;
}

message NewbieLevelRush {
    optional bool is_purchased = 1;
    optional uint32 free_reward_max_take_level = 2;
    optional uint32 purchase_reward_max_take_level = 3;
}

message NewbieLevelRushPurchaseReq {

    enum CmdId {
        CMD_ID = 5881;
    }
}

message NewbieLevelRushPurchaseRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5882;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        PURCHASED = 2;
        MCOIN_LACK = 3;
    }
}

message NewbieLevelRushTakeRewardReq {

    enum CmdId {
        CMD_ID = 5883;
    }
}


message NewbieLevelRushTakeRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 5884;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message NewbiePrivilegeInfo {
    optional uint32 end_time = 1;
    optional bool has_take_daily_reward = 2;
    optional uint32 daily_free_gacha_times = 3;
    optional uint32 buy_times = 4;
}


message NewClientMailNotify {
    optional ClientMailType type = 1;

    enum CmdId {
        CMD_ID = 3808;
    }
}

message NicknameModifyReq {
    optional string nickname = 1;

    enum CmdId {
        CMD_ID = 20;
    }
}

message NicknameModifyRsp {
    optional Retcode retcode = 1;
    optional uint32 cd_end_time = 2;

    enum CmdId {
        CMD_ID = 21;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FORMAT_ERROR = 2;
        SENSITIVE_WORDS = 3;
        IN_AUDIT = 4;
        IN_CD = 5;
    }
}


message NinjaActivityData {
    optional uint32 ninja_id = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    repeated NinjaSlot slot_list = 4;
}


message NinjaActivityNotify {
    repeated NinjaSlot slot_list = 1;

    enum CmdId {
        CMD_ID = 4404;
    }
}

enum NinjaSiteType {
    NINJA_SITE_NORMAL = 1;
    NINJA_SITE_BOSS = 2;
    NINJA_SITE_CHALLENGE = 3;
}

message NinjaSlot {
    optional uint32 slot_id = 1;
    optional uint32 level = 2;
    optional uint32 exp = 3;
    optional uint32 choosed_effect_id = 4;
}

message NinjaSlotChooseEffectReq {
    optional uint32 slot_id = 1;
    optional uint32 effect_id = 2;

    enum CmdId {
        CMD_ID = 4405;
    }
}


message NinjaSlotChooseEffectRsp {
    optional Retcode retcode = 1;
    optional NinjaSlot slot = 2;

    enum CmdId {
        CMD_ID = 4406;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LOCKED = 2;
    }
}

message NinjaSlotStrengthenReq {
    optional uint32 slot_id = 1;
    optional uint32 material_id = 2;
    optional uint32 cost_num = 3;

    enum CmdId {
        CMD_ID = 4402;
    }
}


message NinjaSlotStrengthenRsp {
    optional Retcode retcode = 1;
    optional NinjaSlot slot = 2;

    enum CmdId {
        CMD_ID = 4403;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_NOT_ENOUGH = 2;
        LOCKED = 3;
        NOT_OPEN = 4;
        LEVEL_MAX = 5;
    }
}

message ObjSelected {
    optional uint32 id = 1;
}

message OfflineResource {
    optional uint32 resource_type = 1;
    optional uint32 has_take_box_num = 2;
    optional uint32 available_box_num = 3;
}

enum OfflineResourceType {
    OFFLINE_RESOURCE_TYPE_NONE = 0;
    OFFLINE_RESOURCE_TYPE_OW_QUEST = 1;
    OFFLINE_RESOURCE_TYPE_OW_MECHA = 2;
    OFFLINE_RESOURCE_TYPE_WEEK_DAY = 3;
    OFFLINE_RESOURCE_TYPE_ARMADA = 4;
    OFFLINE_RESOURCE_TYPE_ENDLESS = 5;
    OFFLINE_RESOURCE_TYPE_EX_BOSS = 6;
}

enum OffLineTagType {
    OFFLINE_TAG_TYPE_NORMAL = 0;
    OFFLINE_TAG_TYPE_SMURF = 1;
}

message OldEndlessPlayerSettle {
    optional uint32 uid = 1;
    optional uint32 begin_time = 2;
    optional uint32 endless_type = 3;
    optional uint32 group_level = 4;
}

enum OnlineRewardActivityType {
    ONLINE_REWARD_ACTIVITY_TYPE_DAILY = 1;
    ONLINE_REWARD_ACTIVITY_TYPE_ACTIVITY = 2;
}

message OpenArmadaStageReq {
    optional uint32 hard_level = 1;

    enum CmdId {
        CMD_ID = 2799;
    }
}

message OpenArmadaStageRsp {
    optional Retcode retcode = 1;
    optional uint32 hard_level = 2;

    enum CmdId {
        CMD_ID = 2800;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        NOT_LEADER = 3;
        TIME_LIMIT = 4;
        BOSS_NOT_FOUND = 5;
        LEVEL_LOCK = 6;
        POPL_LACK = 7;
        HAS_OPEN = 8;
        NOT_FINISH = 9;
    }
}

message OpenChatworldTreasureReq {
    optional uint32 chatworld_id = 1;
    optional uint32 treasure_id = 2;
    optional uint32 cur_treasure_schedule_id = 3;
    optional bool is_gs_check = 4;

    enum CmdId {
        CMD_ID = 2417;
    }
}


message OpenChatworldTreasureRsp {
    optional Retcode retcode = 1;
    optional uint32 chatworld_id = 2;
    optional uint32 treasure_id = 3;
    repeated DropItem drop_item_list = 4;
    optional bool is_take_reward = 5;
    optional uint32 cur_treasure_schedule_id = 6;
    repeated uint32 open_uid_list = 7;

    enum CmdId {
        CMD_ID = 2418;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        OPEN_NUM_LIMIT = 2;
        MATERIAL_LACK = 3;
        HAS_OPEN = 4;
        HAS_TAKEN = 5;
        TREASURE_EXPIRE = 6;
        NOT_IN_CHATWORLD = 7;
    }
}

message OpenWeekDayActivityReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 534;
    }
}

message OpenWeekDayActivityRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 535;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        IS_OPEN = 2;
        HAS_OPEN = 3;
        VALID_OPEN = 4;
        MATERIAL_LACK = 5;
        SCOIN_LACK = 6;
    }
}

message OpenworldActivity {
    optional uint32 activity_id = 1;
    optional uint32 phase_id = 2;
    optional uint32 activity_level = 3;
    optional uint32 activity_exp = 4;
    repeated uint32 activity_reward_taken_level_list = 5;
    repeated uint32 activity_treasure_taken_list = 6;
}

message OpenworldBoss {
    optional uint32 boss_id = 1;
    optional uint32 left_hp = 2;
    optional uint32 clue_progress = 3;
    optional uint32 search_time = 4;
    optional uint32 battle_time = 5;
    optional bool is_take_kill_reward = 6;
    optional uint32 location_idx = 7;
    repeated uint32 boss_killed_avatar_list = 9;
    optional uint32 mp_left_hp = 10;
    optional uint32 min_kill_time = 11;
}


message OpenworldBossHunt {
    optional uint32 map_id = 1;
    optional uint32 cur_boss_id = 2;
    repeated OpenworldBoss boss_list = 3;
    optional uint32 last_choose_boss_time = 4;
    repeated uint32 have_take_rating_reward_list = 5;
    optional bool is_call_boss = 6;
    repeated uint32 killed_boss_id_list = 7;
}

message OpenworldBossMp {
    optional uint32 boss_id = 1;
    optional uint32 left_hp = 2;
    optional uint32 mp_left_hp = 3;
    repeated uint32 buff_list = 4;
}

message OpenworldCook {
    optional uint32 cook_id = 1;
    optional uint32 eat_num = 2;
}


message OpenworldEndlessBattle {
    optional uint32 battle_id = 1;
    repeated OpenworldEndlessTrap trap_list = 2;
    optional uint32 scene_gear = 3;
}


message OpenworldEndlessBattleBeginReq {
    optional uint32 battle_id = 1;
    optional uint32 group_level = 2;
    optional uint32 monster_group_id = 3;
    optional uint32 layer_number = 4;
    optional string transaction_str = 5;
    optional EndlessType type = 6;

    enum CmdId {
        CMD_ID = 3438;
    }
}

message OpenworldEndlessBattleBeginRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3439;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}





message OpenworldEndlessBattleEndReq {
    optional uint32 battle_id = 1;
    optional uint32 group_level = 2;
    optional uint32 invasion_id = 3;
    optional uint32 invasion_buff_num = 4;
    optional uint32 cost_time = 5;
    optional StageEndStatus end_status = 6;
    repeated StageInnerAvatarData avatar_list = 7;
    optional uint32 monster_group_id = 8;
    optional uint32 environment_id = 9;
    optional uint32 layer_number = 10;
    optional string transaction_str = 11;
    optional string monster_str = 12;
    repeated StageInnerElfData elf_list = 13;
    optional EndlessType type = 14;
    optional string quantum_string = 15;
    optional string wave_string = 16;
    optional string aoe_string = 17;

    enum CmdId {
        CMD_ID = 3440;
    }
}

message OpenworldEndlessBattleEndRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3441;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message OpenworldEndlessChangeAvatarReq {
    repeated uint32 avatar_id_list = 1;

    enum CmdId {
        CMD_ID = 3450;
    }
}

message OpenworldEndlessChangeAvatarRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3451;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_ERROR = 2;
        STAGE_ERROR = 3;
    }
}

enum OpenworldEndlessDataType {
    OPENWORLD_ENDLESS_DATA_TYPE_INVAISON = 1;
    OPENWORLD_ENDLESS_DATA_TYPE_SCENE_GEAR = 2;
}

enum OpenworldEndlessInvasionBuffConditionType {
    INVASION_BUFF_CONDITION_TOTAL_LEVEL = 1;
    INVASION_BUFF_CONDITION_NUM_LEVEL = 2;
    INVASION_BUFF_CONDITION_NUM_LEVEL_ATTRIBUTE = 3;
    INVASION_BUFF_CONDITION_NUM_LEVEL_ALL_ATTRIBUTE = 4;
    INVASION_BUFF_CONDITION_NUM_CLASS = 5;
    INVASION_BUFF_CONDITION_ID_STAR_LEVEL = 6;
}

message OpenworldEndlessItem {
    optional uint32 item_id = 1;
    optional uint32 num = 2;
}

enum OpenworldEndlessItemType {
    OPENWORLD_ENDLESS_ITEM_INVASION = 1;
    OPENWORLD_ENDLESS_ITEM_BUFF = 2;
    OPENWORLD_ENDLESS_ITEM_TRAP = 3;
    OPENWORLD_ENDLESS_ITEM_COUNTER = 4;
    OPENWORLD_ENDLESS_ITEM_CONSUME = 5;
    OPENWORLD_ENDLESS_ITEM_TRAP_BUFF = 6;
}


message OpenworldEndlessItemUpdateNotify {
    repeated OpenworldEndlessItem item_list = 1;

    enum CmdId {
        CMD_ID = 3421;
    }
}

message OpenworldEndlessMonsterGroup {
    optional uint32 group_id = 1;
    optional uint32 progress = 2;
    optional uint32 old_progress = 3;
}




message OpenworldEndlessPlayer {
    optional uint32 uid = 1;
    optional uint32 score = 2;
    optional uint32 score_time = 3;
    repeated OpenworldEndlessPlayerInvasionData invasion_list = 4;
    optional LineupBriefInfo last_lineup_info = 5;
    repeated OpenworldEndlessItem effect_item_list = 6;
    optional uint32 max_score = 7;
    optional uint32 reward_progress = 8;
    optional uint32 group_level = 9;
    optional uint32 unfinished_monster_max_progress = 10;
    optional LineupBriefInfo max_score_lineup_info = 11;
    optional uint32 greedy_max_finish_floor = 12;
}

message OpenworldEndlessPlayerInvasionData {
    optional uint32 id = 1;
    optional uint32 invader_id = 2;
    optional uint32 active_time = 3;
    repeated uint32 buff_list = 4;
    optional uint32 sub_score = 5;
    optional uint32 battle_id = 6;
    optional uint32 invasion_id = 7;
}




message OpenworldEndlessPlayerUpdateNotify {
    optional OpenworldEndlessPlayer player_data = 1;
    optional PlayerFriendBriefData brief_data = 2;
    optional EndlessType type = 3;

    enum CmdId {
        CMD_ID = 3445;
    }
}

message OpenworldEndlessReprotBattle {
    optional uint32 battle_id = 1;
    optional uint32 scene_gear = 2;
}

message OpenworldEndlessReprotInvasion {
    optional uint32 id = 1;
    optional uint32 battle_id = 2;
}

message OpenworldEndlessTrap {
    optional uint32 item_id = 1;
    optional uint32 battle_id = 2;
    optional uint32 unique_id = 3;
    optional uint32 set_uid = 4;
}

message OpenworldEndlessWarInfo {
    optional uint32 uid = 1;
    optional Type type = 2;
    optional uint32 item_id = 3;
    optional uint32 battle_id = 4;
    optional uint32 target_id = 5;
    optional uint32 from_who = 6;
    optional uint32 invasion_id = 7;
    optional uint32 score = 8;
    optional uint32 scene_gear = 9;
    optional uint32 time = 10;

    enum Type {
        NONE = 0;
        SET_TRAP = 1;
        TRIGGER_TRAP = 2;
        SCENE_GEAR = 3;
        INVASION = 4;
        INVASION_SUB_SCORE = 5;
        FINISH_INVASION = 6;
    }
}


message OpenworldEndlessWarInfoNotify {
    optional OpenworldEndlessWarInfo war_info = 1;

    enum CmdId {
        CMD_ID = 3442;
    }
}


message OpenworldEvent {
    optional uint32 event_id = 1;
    repeated DropItem drop_item_list = 2;
}

message OpenworldInvasionItem {
    optional uint32 invasion_id = 1;
    repeated uint32 avatar_list = 2;
    repeated uint32 buff_list = 3;
}


message OpenworldMapBriefData {
    optional uint32 map_id = 1;
    optional uint32 status = 2;
    repeated OpenworldStat stat_list = 3;
    optional uint32 cycle = 4;
    optional uint32 quest_level = 5;
    optional uint32 has_take_finish_reward_cycle = 6;
}

message OpenworldOverView {
    optional uint32 mission_id = 1;
    optional uint32 progress = 2;
}


message OpenworldQuest {
    optional uint32 id = 2;
    optional OpenworldQuestStatus status = 3;
    optional uint32 buff_id = 4;
    optional uint32 debuff_id = 5;
    optional uint32 position = 6;
    repeated uint32 finish_challenge_list = 7;
    optional uint32 progress = 8;
    optional uint32 rarity_reward_id = 9;
    optional uint32 quest_activity_id = 10;
    optional uint32 special_timeout_sec = 11;
}


message OpenworldQuestData {
    optional uint32 level = 1;
    optional uint32 star = 2;
    optional bool is_open = 3;
    optional uint32 day_open_times = 4;
    repeated OpenworldQuest quest_list = 5;
    optional uint32 refresh_left_times = 6;
    optional uint32 next_refresh_cost = 7;
    optional OpenworldQuest key_quest = 8;
    optional uint32 max_quest_level = 9;
    optional bool is_can_abandon = 10;
    optional uint32 challenge_score = 11;
    repeated uint32 finish_key_quest_list = 12;
    optional bool is_quest_finish = 13;
    optional uint32 open_quest_time = 14;
}

enum OpenworldQuestStatus {
    OPENWORLD_QUEST_NONE = 0;
    OPENWORLD_QUEST_DOING = 1;
    OPENWORLD_QUEST_FINISH = 2;
    OPENWORLD_QUEST_CLOSE = 3;
}

message OpenworldStageArea {
    optional uint32 area_id = 1;
    repeated uint32 avatar_list = 2;
    repeated uint32 weapon_uid_list = 3;
    repeated uint32 stigmata_uid_list = 4;
}

message OpenworldStageAvatarInfo {
    optional uint32 avatar_id = 1;
    optional uint32 hp_percent = 2;
    optional uint32 sp_percent = 3;
    optional uint32 revive_time = 4;
    optional uint32 last_hp_recover_time = 5;
}

message OpenworldStageInner {
    optional uint32 condition_type = 1;
    optional uint32 condition_value = 2;
}

enum OpenworldStageType {
    OPENWORLD_STAGE_TYPE_NONE = 0;
    OPENWORLD_STAGE_TYPE_MAINLINE = 1;
    OPENWORLD_STAGE_TYPE_EXPORE = 2;
}

message OpenworldStat {
    optional uint32 id = 1;
    optional uint32 max_num = 2;
    optional uint32 finish_num = 3;
}

message OpenworldStory {
    optional uint32 story_id = 1;
    optional uint32 story_progress = 2;
    optional uint32 accept_time = 3;
}

message OpenworldTalent {
    optional uint32 talent_id = 1;
    optional uint32 level = 2;
}

message OpenworldTechData {
    optional uint32 map_id = 1;
    optional uint32 level = 2;
    optional uint32 exp = 3;
    optional uint32 next_collect_time = 4;
    optional uint32 skill_point = 5;
    repeated uint32 unlock_skill_list = 6;
}

message OptionalBuffActivity {
    repeated uint32 buff_list = 1;
}

message OptionalBuffActivityChooseBuffReq {
    optional uint32 activity_id = 1;
    repeated uint32 buff_list = 2;

    enum CmdId {
        CMD_ID = 4050;
    }
}

message OptionalBuffActivityChooseBuffRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4051;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        INVALID_BUFF = 2;
        BUFF_LOCKED = 3;
    }
}

enum OptionalBuffType {
    OPTIONAL_BUFF_NONE = 0;
    OPTIONAL_BUFF_DEBUFF = 1;
    OPTIONAL_BUFF_RESTRICT = 2;
}

enum OuterRewardType {
    OUTER_REWARD_TYPE_NONE = 0;
    OUTER_REWARD_TYPE_REDEEM = 1;
}


message OverlapActivityData {
    optional uint32 activity_id = 1;
    repeated OverlapGrid grid_list = 2;
    repeated uint32 has_take_reward_id_list = 3;
    optional uint32 overlap_id = 4;
}

message OverlapActivityMoveReq {
    optional uint32 activity_id = 1;
    optional uint32 from_grid_id = 2;
    optional uint32 to_grid_id = 3;

    enum CmdId {
        CMD_ID = 4221;
    }
}


message OverlapActivityMoveRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional OverlapGrid from_grid = 3;
    optional OverlapGrid to_grid = 4;

    enum CmdId {
        CMD_ID = 4222;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message OverlapActivitySummonReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4219;
    }
}



message OverlapActivitySummonRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional OverlapGrid grid = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 4220;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_NOT_ENOUGH = 2;
        NOT_OPEN = 3;
        FULL = 4;
    }
}

message OverlapGrid {
    optional uint32 id = 1;
    optional uint32 summon_id = 2;
}

enum PanelActivityType {
    PANEL_ACTIVITY_THEME = 2;
    PANEL_ACTIVITY_RECLAIM = 4;
    PANEL_ACTIVITY_KINGDOM_WAR = 5;
    PANEL_ACTIVITY_BATTLE_PASS = 6;
    PANEL_ACTIVITY_GLOBAL_WAR = 7;
    PANEL_ACTIVITY_SLG = 8;
    PANEL_ACTIVITY_GLOBAL_POLLING = 9;
    PANEL_ACTIVITY_COLLABORATION = 10;
}

enum PhoneEventStatus {
    PHONE_EVENT_NONE = 0;
    PHONE_EVENT_FINISH = 1;
    PHONE_EVENT_REFUSE = 2;
    PHONE_EVENT_HOLD = 3;
    PHONE_EVENT_OVER = 4;
}

message PhonePendant {
    optional uint32 id = 1;
    optional uint32 end_time = 2;
}


message PhonePendantOpReq {
    optional PhonePendantOpType op = 1;
    optional uint32 on_id = 2;
    optional uint32 off_id = 3;

    enum CmdId {
        CMD_ID = 1199;
    }
}


message PhonePendantOpRsp {
    optional Retcode retcode = 1;
    optional PhonePendantOpType op = 2;
    optional uint32 on_id = 3;
    optional uint32 off_id = 4;

    enum CmdId {
        CMD_ID = 1200;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_OWN = 2;
        EXPIRED = 3;
        OFF_ID_ERROR = 4;
    }
}

enum PhonePendantOpType {
    PHONE_PENDANT_WEAR = 1;
    PHONE_PENDANT_OFF = 2;
}

enum PhonePendantTimeType {
    PHONE_PENDANT_TIME_FOREVER = 1;
    PHONE_PENDANT_TIME_LIMIT = 2;
}

enum PhotoType {
    PHOTO_TYPE_ALL = 0;
    PHOTO_TYPE_CITY_ACTIVITY = 1;
    PHOTO_TYPE_ANNIVERSARY = 2;
    PHOTO_TYPE_RPG_TALE = 3;
    PHOTO_TYPE_FARM = 4;
    PHOTO_TYPE_KINGDOM_WAR = 5;
    PHOTO_TYPE_DLC = 6;
    PHOTO_TYPE_GLOBAL_WAR = 7;
    PHOTO_TYPE_NINJA = 8;
    PHOTO_TYPE_CHAPTER_HIDDEN = 9;
    PHOTO_TYPE_OW_AVATAR = 10;
    PHOTO_TYPE_SLG = 11;
    PHOTO_TYPE_GOD_WAR = 12;
    PHOTO_TYPE_OPENWORLD_CHAPTER = 13;
    PHOTO_TYPE_SC_DLC = 14;
    PHOTO_TYPE_OW_HUNT = 15;
}

enum PhotoUnlockType {
    PHOTO_UNLOCK_FINISH_OW_EVENT = 1;
    PHOTO_UNLOCK_KILL_MONSTER = 2;
    PHOTO_UNLOCK_FINISH_OW_STORY = 3;
    PHOTO_UNLOCK_FINISH_DLC_DIALOG = 4;
    PHOTO_UNLOCK_GOD_WAR = 5;
    PHOTO_UNLOCK_VISUAL_NOVEL = 6;
    PHOTO_UNLOCK_MATERIAL = 7;
}

message PictureActivityChooseReq {
    optional uint32 activity_id = 1;
    optional uint32 step_id = 2;
    optional uint32 choice_id = 3;

    enum CmdId {
        CMD_ID = 4268;
    }
}



message PictureActivityChooseRsp {
    optional Retcode retcode = 1;
    optional RewardData reward = 2;
    optional PictureStep step = 3;

    enum CmdId {
        CMD_ID = 4269;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HAS_CHOOSE = 3;
        SCORE_LACK = 4;
        PRE_NOT_CHOOSE = 5;
    }
}

message PictureActivityShareReq {
    optional uint32 activity_id = 1;
    optional bool is_take_reward = 2;

    enum CmdId {
        CMD_ID = 4270;
    }
}


message PictureActivityShareRsp {
    optional Retcode retcode = 1;
    optional RewardData reward = 2;

    enum CmdId {
        CMD_ID = 4271;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HAS_TAKE = 3;
        NOT_SHARE = 4;
        NOT_FINISH = 5;
    }
}

message PictureStep {
    optional uint32 step_id = 1;
    optional uint32 choice_id = 2;
}

enum PlatFormType {
    PLATFORM_NONE = 0;
    PLATFORM_ANDROID = 100001;
    PLATFORM_IOS = 200002;
    PLATFORM_PC = 300003;
}


message PlayerAdventureData {
    optional uint32 adventure_group_level = 1;
    repeated AdventureAvatar adventure_avatar_list = 2;
}

enum PlayerAreaType {
    AREA_NO_LIMIT = 0;
    AREA_NORTH_CHINA = 1;
    AREA_NORTH_EAST = 2;
    AREA_EAST_CHINA = 3;
    AREA_CENTRAL_CHINA = 4;
    AREA_CENTRAL_SOUTH = 5;
    AREA_NORTH_WEST = 6;
    AREA_SOUTH_WEST = 7;
    AREA_HK_MC_TW = 8;
}


message PlayerCardAvatarData {
    optional uint32 index = 1;
    optional AvatarDetailData avatar = 2;
}





message PlayerCardData {
    optional uint32 uid = 1;
    repeated PlayerCardAvatarData avatar_list = 2;
    repeated PlayerCardMedalData medal_list = 3;
    optional PlayerCardMsgData msg_data = 4;
    optional uint32 island_like_num = 5;
    optional uint32 on_phone_pendant_id = 6;
    repeated PlayerCardElfData elf_list = 7;
}



message PlayerCardDataChangeNotify {
    optional uint32 uid = 1;
    optional uint32 msg_config = 2;
    optional PlayerCardMedalData medal = 3;
    optional PlayerCardAvatarData avatar = 4;

    enum CmdId {
        CMD_ID = 492;
    }
}


message PlayerCardElfData {
    optional uint32 index = 1;
    optional ElfDetailData elf = 2;
}

message PlayerCardMedalData {
    optional uint32 index = 1;
    optional uint32 medal_id = 2;
    optional int32 extra_param = 3;
}


message PlayerCardMsg {
    optional uint32 index = 1;
    optional ChatMsg msg = 2;
}

enum PlayerCardMsgConfig {
    CARD_MSG_ALL = 0;
    CARD_MSG_FRIEND = 1;
    CARD_MSG_FORBIDDEN = 2;
}


message PlayerCardMsgData {
    optional uint32 msg_index = 1;
    optional uint32 msg_config = 2;
    repeated PlayerCardMsg msg_list = 3;
}

message PlayerCardSlot {
    optional uint32 index = 1;
    optional uint32 target_id = 2;
}

enum PlayerCardType {
    CARD_ALL = 0;
    CARD_AVATAR = 1;
    CARD_MEDAL = 2;
    CARD_MESSAGE = 3;
    CARD_MSG_CONFIG = 4;
    CARD_ELF = 5;
}







message PlayerDetailData {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 level = 3;
    optional AvatarDetailData leader_avatar = 4;
    optional string self_desc = 5;
    optional uint32 armada_id = 6;
    optional string armada_name = 7;
    optional uint32 mp_level = 8;
    optional uint32 on_medal_id = 9;
    optional bool is_newbie = 10;
    optional bool is_goback = 11;
    optional uint32 mp_like_num = 12;
    repeated GrandKey grand_key_list = 13;
    optional ElfDetailData leader_elf = 14;
    optional uint32 custom_head_id = 15;
    optional uint32 frame_id = 16;
    optional PlayerAdventureData adventure = 17;
    repeated AvatarDetailData backup_avatar_list = 18;
    optional Medal on_medal = 19;
    optional bool is_allow_visit = 30;
    optional uint32 visit_avatar = 31;
    optional uint32 be_liked_num = 32;
    optional uint32 show_house = 33;
    optional uint32 comfort_value = 34;
    optional uint32 house_level = 35;
    optional string house_name = 36;
    optional uint32 total_wiki_score = 37;
    optional uint32 total_achievement_num_get = 38;
    optional uint32 total_achievement_num = 39;
    optional uint32 chat_forbid_finish_time = 40;
    optional uint32 master_uid = 41;
    optional MasterPupilType master_pupil_tag = 42;
    optional uint32 season_id = 43;
    optional uint32 season_group_id = 44;
    optional uint32 season_level = 45;
    optional bool is_logoff = 46;
}



message PlayerFriendBriefData {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 level = 3;
    optional uint32 avatar_id = 4;
    optional uint32 avatar_star = 5;
    optional uint32 avatar_combat = 6;
    optional uint32 avatar_level = 7;
    repeated AvatarSubSkillDetailData main_sub_skill_list = 8;
    optional uint32 last_login_time = 10;
    optional uint32 dress_id = 11;
    optional uint32 armada_id = 12;
    optional string armada_name = 13;
    optional uint32 bond = 14;
    optional uint32 on_medal_id = 15;
    optional Medal on_medal = 19;
    optional uint32 frame_id = 16;
    optional uint32 mp_level = 17;
    optional uint32 custom_head_id = 18;
    optional bool is_allow_visit = 30;
    optional uint32 visit_avatar = 31;
    optional uint32 be_liked_num = 32;
    optional uint32 show_house = 33;
    optional uint32 comfort_value = 34;
    optional uint32 house_level = 35;
    optional string house_name = 36;
    optional bool is_goback = 37;
    optional uint32 avatar_sub_star = 38;
    optional uint32 last_logout_time = 39;
    optional uint32 online_status = 40;
    optional uint32 season_id = 41;
    optional uint32 season_group_id = 42;
    optional uint32 season_level = 43;
    optional bool is_logoff = 44;
}

enum PlayerGenderType {
    GENDER_NONE_TYPE = 0;
    GENDER_MALE_TYPE = 1;
    GENDER_FEMALE_TYPE = 2;
}

enum PlayerInterestType {
    INTEREST_NONE = 0;
    INTEREST_ANIMATION = 1;
    INTEREST_COMIC = 2;
    INTEREST_GAME = 3;
    INTEREST_MUSIC = 4;
    INTEREST_DANCING = 5;
    INTEREST_KITIKU = 6;
    INTEREST_MMD = 7;
    INTEREST_TOKUSATSU = 8;
}


message PlayerLevelUpNotify {
    optional uint32 old_level = 1;
    optional uint32 new_level = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 976;
    }
}


message PlayerLoginReq {
    optional uint32 last_server_packet_id = 2;
    optional string cps = 3;
    optional string check_sum = 4;
    optional string device_uuid = 5;
    optional string android_signatures = 6;
    optional string language = 7;
    optional string advertiser_id = 8;
    optional bytes security_cmd_reply = 9;
    optional uint32 last_login_version = 10;
    optional uint32 account_type = 11;
    optional string account_uid = 12;
    optional DeviceType device_type = 13;
    optional uint32 user_type = 14;
    optional string user_ip = 15;
    optional uint32 tag = 16;
    optional string client_version = 17;
    optional string client_device = 18;
    optional string system_info = 19;
    optional string android_sign = 20;
    optional uint32 limit_level = 21;
    optional uint32 black_list_end_time = 22;
    optional bool is_bind_access = 23;
    optional uint32 login_session_token = 25;
    optional string hoyolab_account_uid = 26;
    optional uint32 user_port = 27;

    enum CmdId {
        CMD_ID = 6;
    }
}


message PlayerLoginRsp {
    optional Retcode retcode = 1;
    optional string msg = 3;
    optional bool is_first_login = 4;
    optional uint32 last_client_packet_id = 5;
    optional string region_name = 6;
    optional CGType cg_type = 9;
    optional uint32 last_logout_time = 10;
    optional uint32 region_id = 11;
    optional bool is_valid_reconnect = 12;
    optional uint32 account_type = 13;
    optional string account_uid = 14;
    optional uint32 login_session_token = 15;

    enum CmdId {
        CMD_ID = 7;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        REPEAT_LOGIN = 2;
        IN_BLACK_LIST = 3;
        WAIT_STOP_ANOTHER_LOGIN = 4;
        ANTI_ADDICT_LOGIN = 5;
        SQUEEZE_CD = 6;
    }
}

message PlayerLogoutReq {
    optional bool is_kick = 1;

    enum CmdId {
        CMD_ID = 8;
    }
}

message PlayerMatrixShop {
    optional uint32 shop_id = 1;
    repeated MatrixGoods goods_list = 2;
    message MatrixGoods {
        optional uint32 id = 1;
        optional uint32 num = 2;
        optional bool is_sold = 3;
    }
}

enum PlayerOnlineStatus {
    PLAYER_ONLINE_STATUS_NONE = 0;
    PLAYER_ONLINE_STATUS_ONLINE = 1;
    PLAYER_ONLINE_STATUS_WAIT_SAVE = 2;
    PLAYER_ONLINE_STATUS_OFFLINE = 3;
}

message PlayerOnlineStatusInfo {
    optional uint32 uid = 1;
    optional uint32 online_status = 2;
    optional uint32 last_login_time = 3;
    optional uint32 last_logout_time = 4;
}


message PlayerRoomStatus {
    optional RoomMode room_mode = 1;
    optional uint32 room_id = 2;
}

message PlayerSkill {
    optional uint32 entity_id = 1;
    optional uint32 skill_id = 2;
}

enum PlotType {
    PLOT_TYPE_NORMAL = 0;
    PLOT_TYPE_DORM = 1;
    PLOT_TYPE_MATRIX = 2;
    PLOT_TYPE_RPG = 3;
    PLOT_TYPE_ISLAND = 4;
    PLOT_TYPE_CITY_ACTIVITY = 5;
}

message PostWareHouseDemandReq {
    optional uint32 demand_id = 1;

    enum CmdId {
        CMD_ID = 2649;
    }
}

message PostWareHouseDemandRsp {
    optional Retcode retcode = 1;
    optional uint32 demand_id = 2;

    enum CmdId {
        CMD_ID = 2650;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        STATUS_ERROR = 3;
        SCOIN_LACK = 4;
        ITEM_LACK = 5;
        LEVEL_LACK = 6;
        NOT_VALID = 7;
    }
}



message PrayGachaData {
    optional uint32 ticket_hcoin_cost = 2;
    optional uint32 ticket_material_id = 3;
    optional uint32 cost_material_id = 4;
    optional uint32 cost_material_num = 5;
    optional uint32 max_gacha_times = 8;
    optional uint32 gacha_times = 9;
    optional bool is_finished = 10;
    repeated GachaItem protect_item_list = 11;
    repeated PrayGachaItemData pool_item_list = 12;
    optional uint32 gacha_id = 13;
    optional uint32 pray_value_per_gacha = 14;
}

message PrayGachaItemData {
    optional uint32 id = 1;
    optional uint32 total_num = 2;
    optional uint32 gacha_num = 3;
}


message PrivateChatParam {
    optional ChatRelationType relation_type = 1;
}


message PrivilegeInfo {
    optional uint32 privilege_id = 1;
    optional uint32 expire_time = 2;
    repeated PrivilegeRightInfo right_info_list = 3;
}

enum PrivilegeProductType {
    PRIVILEGE_PRODUCT_ALL = 0;
    PRIVILEGE_PRODUCT_NEWBIE = 1;
    PRIVILEGE_PRODUCT_GOBACK = 2;
    PRIVILEGE_PRODUCT_ADVENTURE = 3;
}

message PrivilegeRightInfo {
    optional uint32 right_id = 1;
    optional uint32 type = 2;
    optional uint32 total_used_times = 3;
    optional uint32 max_use_times = 4;
    optional uint32 use_times = 5;
    optional uint32 next_auto_refresh_time = 6;
}

enum PrivilegeRightType {
    PRIVILEGE_RIGHT_FREE_GACHA = 1;
    PRIVILEGE_RIGHT_CARD_DAILY_REWARD = 2;
}



message Product {
    optional string name = 1;
    optional string desc = 2;
    optional ProductType type = 3;
    optional uint32 pay_hcoin = 4;
    optional uint32 free_hcoin = 5;
    optional uint32 price = 6;
    optional uint32 left_buy_times = 7;
    optional uint32 card_daily_hcoin = 8;
    optional uint32 card_left_days = 9;
    optional bool is_forbid_by_itunes_small_order = 10;
    repeated RewardData box_reward_list = 11;
    optional bool is_itunes_box_subscription = 12;
    optional uint32 card_activity_daily_hcoin = 13;
    optional bool is_add_hcoin = 14;
    optional uint32 end_time = 15;
    optional uint32 sort_priority = 16;
    optional bool is_show_pic = 17;
    optional string pic_path = 18;
    optional string detail = 19;
    optional uint32 id = 20;
    optional uint32 mcoin = 21;
    optional uint32 product_goods_id = 22;
    optional string price_tier = 23;
}

enum ProductType {
    PRODUCT_NORMAL = 1;
    PRODUCT_LIMIT = 2;
    PRODUCT_CARD = 3;
    PRODUCT_SUBSCRIPTION = 4;
    PRODUCT_RANDOM_BOX = 5;
    PRODUCT_FIXED_BOX = 6;
    PRODUCT_MCOIN = 7;
    PRODUCT_FOUNDATION = 8;
    PRODUCT_SUBSCRIPTION_NON_RENEWING = 9;
    PRODUCT_MAIL_REWARD = 10;
    PRODUCT_PROMO_CODE = 11;
}

message PromoteStigmataRuneReq {
    optional uint32 unique_id = 1;

    enum CmdId {
        CMD_ID = 332;
    }
}

message PromoteStigmataRuneRsp {
    optional Retcode retcode = 1;
    repeated uint32 wait_select_stgimata_list = 5;

    enum CmdId {
        CMD_ID = 333;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STIGMATA_NOT_EXIST = 2;
        MATERIAL_LACK = 3;
        STIGMATA_NOT_IDENTIFY = 4;
        CAN_NOT_PROMOTE = 5;
        TIMES_LIMIT = 6;
        LEVEL_LACK = 7;
        TOO_MANY_WAIT_RUNE = 8;
    }
}


message ProtectEntry {
    repeated DropItem possible_item_list = 1;
    optional uint32 total_times = 2;
    optional uint32 drop_times = 3;
}

message PublishGratuityStageReq {
    optional uint32 stage_unique_id = 1;
    optional uint32 target_uid = 2;
    optional uint32 relation_tag = 3;

    enum CmdId {
        CMD_ID = 4114;
    }
}

message PublishGratuityStageRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;
    optional uint32 stage_unique_id = 3;
    optional uint32 relation_tag = 4;

    enum CmdId {
        CMD_ID = 4115;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_ACCEPTOR = 2;
    }
}


message PupilDetailData {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional MasterPupilStatus status = 3;
}


message PupilFinishExamMissionMsg {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional MasterPupilMission mission = 3;
}



message PupilMainData {
    repeated PupilStep step_list = 1;
    optional uint32 last_dismiss_time = 2;
    optional uint32 pupil_id = 3;
    optional string nickname = 4;
    optional uint32 cur_step_id = 5;
    optional uint32 left_assistant_times = 6;
    optional uint32 left_frozen_time = 7;
    optional PlayerFriendBriefData master_brief = 8;
    optional uint32 pool_fame_num = 9;
    optional bool is_graduated = 10;
}


message PupilStep {
    optional uint32 step_id = 1;
    optional uint32 master_id = 2;
    optional uint32 star = 3;
    optional string comment = 4;
    optional uint32 level = 5;
    optional MasterPoolData pool_reward = 6;
    repeated uint32 exam_mission_id_list = 7;
}

message PushClientMsgNotify {
    repeated string platform_list = 1;
    repeated string uid_list = 2;
    repeated string tag_list = 3;
    repeated string tag_and_list = 4;
    repeated string tag_not_list = 5;
    optional string content = 6;

    enum CmdId {
        CMD_ID = 801;
    }
}

message PushTowerActivityInfo {
    optional uint32 enter_times = 1;
    repeated uint32 stage_reward_taken_list = 2;
    optional bool is_clear_reward_taken = 3;
    optional uint32 grow_buff_level = 4;
}

message PushTowerActivityTakeClearRewardReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4011;
    }
}


message PushTowerActivityTakeClearRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated RewardData reward_data_list = 3;

    enum CmdId {
        CMD_ID = 4012;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE_CAMPAIGN_REWARD = 2;
    }
}

message PushTowerActivityTakeStageRewardReq {
    optional uint32 activity_id = 1;
    optional uint32 stage_config_id = 2;

    enum CmdId {
        CMD_ID = 4009;
    }
}


message PushTowerActivityTakeStageRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 stage_config_id = 3;
    repeated RewardData reward_data_list = 4;

    enum CmdId {
        CMD_ID = 4010;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}



message PvzActivity {
    optional uint32 activity_id = 1;
    repeated PvzQAvatar unlocked_qavatar_list = 2;
    repeated PvzSiteInfo site_info_list = 3;
    optional uint32 challenge_max_finish_wave = 4;
}

message PvzBattleBeginReq {
    optional uint32 activity_id = 1;
    optional uint32 tower_id = 2;
    optional uint32 floor_id = 3;
    repeated uint32 qavatar_id_list = 4;

    enum CmdId {
        CMD_ID = 6552;
    }
}


message PvzBattleBeginRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 tower_id = 3;
    optional uint32 floor_id = 4;
    repeated PvzQAvatar qavatar_list = 5;
    optional uint32 game_type = 6;

    enum CmdId {
        CMD_ID = 6553;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        QAVATAR_ERROR = 2;
        INVALID_TILE = 3;
        RPG_SITE_CANNOT_ENTER = 4;
        LACK_TICKET = 5;
        TILE_SITE_MISMATCH = 6;
    }
}


message PvzBattleEndReq {
    optional uint32 activity_id = 1;
    optional PvzBattleEndStatus end_status = 2;
    optional uint32 finish_wave = 3;
    optional uint32 tower_id = 4;
    optional uint32 floor_id = 5;
    optional uint32 cost_time = 6;
    optional uint32 left_hp = 7;
    optional uint32 used_coin_num = 8;

    enum CmdId {
        CMD_ID = 6554;
    }
}




message PvzBattleEndRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 tower_id = 3;
    optional uint32 floor_id = 4;
    optional PvzBattleEndStatus end_status = 5;
    optional uint32 finish_wave = 6;
    optional uint32 max_finish_wave = 7;
    optional RewardData reward_data = 8;
    repeated PvzQAvatar qavatar_list = 9;
    optional uint32 site_id = 10;
    optional uint32 cost_time = 11;
    optional uint32 left_hp = 12;
    optional uint32 used_coin_num = 13;

    enum CmdId {
        CMD_ID = 6555;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        BATTLE_MISMATCH = 2;
        INVALID_TILE = 3;
        RPG_SITE_CANNOT_ENTER = 4;
        LACK_TICKET = 5;
        TILE_SITE_MISMATCH = 6;
        END_STATUS_INVALID = 7;
    }
}

enum PvzBattleEndStatus {
    PVZ_BATTLE_END_NONE = 0;
    PVZ_BATTLE_END_SUCC = 1;
    PVZ_BATTLE_END_FAIL = 2;
    PVZ_BATTLE_END_QUIT = 3;
}

message PvzGetActivityReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 6550;
    }
}


message PvzGetActivityRsp {
    optional Retcode retcode = 1;
    optional PvzActivity pvz_activity = 2;

    enum CmdId {
        CMD_ID = 6551;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message PvzQAvatar {
    optional uint32 qavatar_id = 1;
    optional uint32 level = 2;
    optional bool is_special_material_unlocked = 3;
}

message PvzQAvatarLevelUpReq {
    optional uint32 activity_id = 1;
    optional uint32 qavatar_id = 2;
    optional uint32 target_level = 3;

    enum CmdId {
        CMD_ID = 6556;
    }
}

message PvzQAvatarLevelUpRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 qavatar_id = 3;
    optional uint32 target_level = 4;

    enum CmdId {
        CMD_ID = 6557;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        TARGET_LEVEL_ERROR = 3;
        QAVATAR_NOT_FOUND = 4;
    }
}

enum PvzQAvatarNextLevelConditionType {
    PVZ_QAVATAR_NEXT_LEVEL_CONDITION_NONE = 0;
    PVZ_QAVATAR_NEXT_LEVEL_CONDITION_PASS_SITE = 1;
}

enum PvzQAvatarType {
    PVZ_QAVATAR_ATTACK = 1;
    PVZ_QAVATAR_ASSIST = 2;
}

message PvzSiteDropMaterial {
    optional uint32 material_id = 1;
    optional uint32 has_drop_num = 2;
}



message PvzSiteInfo {
    optional uint32 site_id = 1;
    optional uint32 tower_id = 2;
    optional PvzSiteType site_type = 4;
    repeated PvzSiteDropMaterial has_drop_material_list = 5;
}

enum PvzSiteType {
    PVZ_SITE_NORMAL = 1;
    PVZ_SITE_DAILY = 2;
    PVZ_SITE_CHALLENGE = 3;
}

enum QAvatarActionType {
    QAVATAR_ACTION_NONE = 0;
    QAVATAR_ACTION_ADD_BUFF = 1;
    QAVATAR_ACTION_REMOVE_BUFF = 2;
    QAVATAR_ACTION_EVADE = 3;
    QAVATAR_ACTION_SHOOT_BULLET = 4;
    QAVATAR_ACTION_MELEE_ATK = 5;
    QAVATAR_ACTION_COMBO_ATK = 6;
    QAVATAR_ACTION_CREATE_GADGET = 7;
    QAVATAR_ACTION_MUTE_SKILL = 8;
    QAVATAR_ACTION_BREAK_SKILL = 9;
    QAVATAR_ACTION_CHANGE_PROP = 11;
    QAVATAR_ACTION_HOLDUP_ACTION = 13;
    QAVATAR_ACTION_SET_ANIM_PARA = 21;
    QAVATAR_ACTION_APPLY_EFFECT = 22;
    QAVATAR_ACTION_SET_CAMERA_PARA = 23;
    QAVATAR_ACTION_LOCK_AIM_ROTATION = 24;
    QAVATAR_ACTION_SIM_SKILL_BUTTON_OP = 25;
}


message QAvatarBattleBeginNotify {
    optional uint32 tale_id = 1;
    optional uint32 site_id = 2;
    optional uint32 fightserver_ip = 3;
    optional uint32 fightserver_port = 4;
    optional uint32 chatworld_id = 5;
    optional uint32 scene_id = 6;
    optional uint32 lobby_id = 10;
    optional uint32 battle_id = 11;
    optional uint32 battle_start_time = 12;
    repeated QAvatarBattleMember member_list = 13;

    enum CmdId {
        CMD_ID = 5550;
    }
}


message QAvatarBattleBuff {
    optional uint32 buff_id = 1;
    optional QAvatarBuffType buff_type = 2;
    optional uint64 expire_time_ms_u64 = 4;
    optional uint32 num = 5;
}


message QAvatarBattleBuffComponent {
    repeated QAvatarBattleBuff buff_list = 1;
}

enum QAvatarBattleCollidePropertyType {
    QAVATAR_BATTLE_COLLIDE_PROPERTY_TYPE_WALL = 0;
    QAVATAR_BATTLE_COLLIDE_PROPERTY_TYPE_AVATAR_SENSOR = 1;
    QAVATAR_BATTLE_COLLIDE_PROPERTY_TYPE_BULLET = 2;
    QAVATAR_BATTLE_COLLIDE_PROPERTY_TYPE_AVATAR = 3;
}

message QAvatarBattleComponentOpNotify {
    optional uint32 trigger_entity_id = 1;
    optional uint32 component_type = 2;
    optional ComponentOpType op_type = 3;

    enum CmdId {
        CMD_ID = 5611;
    }
    enum ComponentOpType {
        COMPONENT_OP_NONE = 0;
        COMPONENT_OP_ADD = 1;
        COMPONENT_OP_DEL = 2;
    }
}






message QAvatarBattleComponentSet {
    optional QAvatarBattlePositionComponent position_component = 1;
    optional QAvatarBattleSpeedComponent speed_component = 2;
    optional QAvatarBattleSkillComponent skill_component = 3;
    optional QAvatarBattleEvadeComponent evade_component = 4;
    optional QAvatarBattleBuffComponent buff_component = 5;
}

enum QAvatarBattleComponentType {
    QAVATAR_BATTLE_COMPONENT_TYPE_NONE = 0;
    QAVATAR_BATTLE_COMPONENT_TYPE_POSITION = 1;
    QAVATAR_BATTLE_COMPONENT_TYPE_SPEED = 2;
    QAVATAR_BATTLE_COMPONENT_TYPE_RIGID_BODY = 3;
    QAVATAR_BATTLE_COMPONENT_TYPE_SKILL = 4;
    QAVATAR_BATTLE_COMPONENT_TYPE_BUFF = 5;
    QAVATAR_BATTLE_COMPONENT_TYPE_EVADE = 6;
    QAVATAR_BATTLE_COMPONENT_TYPE_STIGMATA = 7;
    QAVATAR_BATTLE_COMPONENT_TYPE_CONTACT = 8;
    QAVATAR_BATTLE_COMPONENT_TYPE_TICK = 9;
}



message QAvatarBattleDataNotify {
    repeated QAvatarBattleEntity update_entity_list = 1;
    optional uint64 cur_time_ms_u64 = 3;
    repeated QAvatarBattleDeleteEntity delete_entity_list = 4;
    optional bool is_all = 5;

    enum CmdId {
        CMD_ID = 5600;
    }
}


message QAvatarBattleDeleteEntity {
    optional QAvatarBattleEntityDeleteReasonType delete_reason = 1;
    optional uint32 entity_id = 2;
}

message QAvatarBattleDiscardStigmataReq {
    optional uint32 stigmata_id = 1;

    enum CmdId {
        CMD_ID = 5612;
    }
}

message QAvatarBattleDiscardStigmataRsp {
    optional Retcode retcode = 1;
    optional uint32 stigmata_id = 2;

    enum CmdId {
        CMD_ID = 5613;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

enum QAvatarBattleDropItemType {
    QAVATAR_BATTLE_DROP_ITEM_TYPE_BUFF = 1;
    QAVATAR_BATTLE_DROP_ITEM_TYPE_STIGMATA = 2;
    QAVATAR_BATTLE_DROP_ITEM_TYPE_INSTANT_HEAL_HP = 3;
}



message QAvatarBattleEndBattleNotify {
    optional QAvatarBattleEndReason end_reason = 1;
    optional bool is_win = 2;
    optional bool is_mvp = 3;
    repeated QAvatarBattleFightInfo fight_info_list = 4;

    enum CmdId {
        CMD_ID = 5630;
    }
}

enum QAvatarBattleEndReason {
    QAVATAR_BATTLE_END_REASON_NONE = 0;
    QAVATAR_BATTLE_END_REASON_FAIL = 1;
    QAVATAR_BATTLE_END_REASON_TIMEOUT = 2;
    QAVATAR_BATTLE_END_REASON_TIMEOUT_INVALID = 3;
    QAVATAR_BATTLE_END_REASON_KILL_NUM = 4;
    QAVATAR_BATTLE_END_REASON_GM = 5;
}

message QAvatarBattleEndSkillNotify {
    optional uint32 src_entity_id = 1;
    optional uint32 skill_type = 2;
    optional uint32 skill_id = 3;

    enum CmdId {
        CMD_ID = 5609;
    }
}

message QAvatarBattleEndSkillReq {
    optional uint32 skill_type = 1;
    optional float rotation_x = 2;
    optional float rotation_y = 3;
    optional float dst_position_x = 4;
    optional float dst_position_y = 5;

    enum CmdId {
        CMD_ID = 5607;
    }
}

message QAvatarBattleEndSkillRsp {
    optional Retcode retcode = 1;
    optional uint32 skill_type = 2;
    optional uint32 skill_id = 3;

    enum CmdId {
        CMD_ID = 5608;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message QAvatarBattleEnterBattleReq {

    enum CmdId {
        CMD_ID = 5601;
    }
}

message QAvatarBattleEnterBattleRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5602;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        BATTLE_NOT_EXIST = 2;
    }
}




message QAvatarBattleEntity {
    optional uint32 entity_id = 1;
    optional QAvatarBattleEntityType type = 2;
    optional uint32 entity_name_id = 3;
    optional uint64 entity_expire_time_ms_u64 = 4;
    optional QAvatarBattleComponentSet component_set = 5;
    optional QAvatarBattleFightInfo fight_info = 7;
    optional uint32 owner_id = 8;
}

enum QAvatarBattleEntityDeleteReasonType {
    QAVATAR_BATTLE_ENTITY_DELETE_REASON_NONE = 0;
    QAVATAR_BATTLE_ENTITY_DELETE_REASON_EXPIRE = 1;
    QAVATAR_BATTLE_ENTITY_DELETE_REASON_HIT = 2;
    QAVATAR_BATTLE_ENTITY_DELETE_REASON_PICK_UP = 3;
}

enum QAvatarBattleEntityType {
    QAVATAR_BATTLE_ENTITY_TYPE_NONE = 0;
    QAVATAR_BATTLE_ENTITY_TYPE_PLAYER = 1;
    QAVATAR_BATTLE_ENTITY_TYPE_BULLET = 2;
    QAVATAR_BATTLE_ENTITY_TYPE_GADGET = 3;
    QAVATAR_BATTLE_ENTITY_TYPE_SCHEDULED_TASK = 4;
}

message QAvatarBattleEvadeComponent {
    optional float speed_x = 1;
    optional float speed_y = 2;
    optional uint64 expire_time_ms_u64 = 3;
}

message QAvatarBattleFightInfo {
    optional uint32 uid = 1;
    optional uint32 kill_num = 2;
    optional uint32 dead_num = 3;
    optional uint32 rank = 4;
    optional bool is_mvp = 5;
    optional bool is_win = 6;
    optional uint32 max_hp = 11;
    optional uint32 cur_hp = 12;
    optional uint64 reborn_time_ms_u64 = 13;
    optional uint32 max_sp = 14;
    optional uint32 cur_sp = 15;
}

enum QAvatarBattleGadgetEffectCampType {
    QAVATAR_BATTLE_GADGET_EFFECT_CAMP_TYPE_ALL = 0;
    QAVATAR_BATTLE_GADGET_EFFECT_CAMP_TYPE_ALLIES = 1;
    QAVATAR_BATTLE_GADGET_EFFECT_CAMP_TYPE_ENEMIES = 2;
}

enum QAvatarBattleGadgetType {
    QAVATAR_BATTLE_GADGET_TYPE_BREAKABLE_BOX = 1;
    QAVATAR_BATTLE_GADGET_TYPE_DROP_ITEM = 2;
    QAVATAR_BATTLE_GADGET_TYPE_DAMAGE_AREA = 3;
    QAVATAR_BATTLE_GADGET_TYPE_DELAYED_BOMB = 4;
    QAVATAR_BATTLE_GADGET_TYPE_UNSTABLE_DELAYED_BOMB = 5;
    QAVATAR_BATTLE_GADGET_TYPE_BREAKABLE_DELAYED_BOMB = 6;
}

message QAvatarBattleGetDataNotify {

    enum CmdId {
        CMD_ID = 5614;
    }
}

message QAvatarBattleGetLobbyInfoReq {
    optional uint32 tale_id = 1;
    optional uint32 lobby_id = 3;

    enum CmdId {
        CMD_ID = 5552;
    }
}


message QAvatarBattleGetLobbyInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 tale_id = 2;
    optional uint32 lobby_id = 3;
    optional uint32 lobby_status = 4;
    optional uint32 fightserver_ip = 5;
    optional uint32 fightserver_port = 6;
    optional uint32 battle_id = 7;
    repeated QAvatarBattleMember member_list = 8;

    enum CmdId {
        CMD_ID = 5553;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_EXIST = 2;
    }
}

message QAvatarBattleKillNotify {
    optional uint32 killer_uid = 1;
    optional uint32 killed_uid = 2;
    optional uint32 killer_streak_num = 3;
    optional uint32 battle_total_kill_num = 4;

    enum CmdId {
        CMD_ID = 5621;
    }
}


message QAvatarBattleMember {
    optional uint32 uid = 1;
    optional string region_name = 2;
    optional string nickname = 3;
    optional uint32 level = 4;
    optional uint32 frame_id = 5;
    optional uint32 custom_head_id = 6;
    optional uint32 division = 7;
    optional uint32 elo_score = 8;
    optional VirtualAvatar choose_virtual_avatar = 9;
    optional uint32 camp_id = 10;
}

message QAvatarBattleMoveNotify {
    optional float speed_x = 1;
    optional float speed_y = 2;
    optional float rotation_x = 3;
    optional float rotation_y = 4;

    enum CmdId {
        CMD_ID = 5603;
    }
}

message QAvatarBattlePositionComponent {
    optional float x = 1;
    optional float y = 2;
    optional float rotation_x = 3;
    optional float rotation_y = 4;
}

message QAvatarBattleRefreshGadget {
    optional uint32 gadget_id = 1;
    optional uint32 spawn_point_id = 2;
}

message QAvatarBattleRefreshGadgetForecastNotify {
    optional uint32 refresh_id = 1;
    optional uint64 refresh_time_ms_u64 = 2;
    repeated uint32 spawn_point_id_list = 3;

    enum CmdId {
        CMD_ID = 5622;
    }
}


message QAvatarBattleRefreshGadgetGenerateNotify {
    optional uint32 refresh_id = 1;
    repeated QAvatarBattleRefreshGadget refresh_gadget_list = 2;

    enum CmdId {
        CMD_ID = 5623;
    }
}





message QAvatarBattleSettleNotify {
    optional QAvatarBattleEndReason end_reason = 1;
    optional uint32 tale_id = 2;
    optional uint32 site_id = 3;
    optional uint32 lobby_id = 4;
    optional uint32 battle_start_time = 5;
    optional uint32 previous_score = 6;
    optional uint32 cur_score = 8;
    repeated QAvatarBattleFightInfo fight_info_list = 9;
    repeated Material get_material_list = 10;
    repeated QAvatarBattleMember member_list = 11;

    enum CmdId {
        CMD_ID = 5551;
    }
}


message QAvatarBattleSkillComponent {
    repeated QAvatarBattleSkillInfo skill_info_list = 1;
}

message QAvatarBattleSkillInfo {
    optional uint32 skill_id = 1;
    optional uint32 skill_type = 2;
    optional uint64 btn_holdup_time_ms_u64 = 4;
    optional uint32 combo_num = 5;
    optional uint32 max_bullet_num = 6;
    optional uint32 cur_bullet_num = 7;
    optional uint32 max_charge_num = 8;
    optional uint32 cur_charge_num = 9;
    optional uint64 skill_cd_ms_u64 = 10;
}



message QAvatarBattleSkillTriggerNotify {
    optional uint32 trigger_entity_id = 1;
    optional QAvatarBattleEntity trigger_entity = 2;
    optional QAvatarBattleSkillInfo skill_info = 3;

    enum CmdId {
        CMD_ID = 5610;
    }
}

message QAvatarBattleSpeedComponent {
    optional float speed_x = 1;
    optional float speed_y = 2;
}

message QAvatarBattleStartSkillNotify {
    optional uint32 src_entity_id = 1;
    optional uint32 skill_type = 2;
    optional uint32 skill_id = 3;

    enum CmdId {
        CMD_ID = 5606;
    }
}

message QAvatarBattleStartSkillReq {
    optional uint32 skill_type = 1;
    optional float rotation_x = 2;
    optional float rotation_y = 3;

    enum CmdId {
        CMD_ID = 5604;
    }
}

message QAvatarBattleStartSkillRsp {
    optional Retcode retcode = 1;
    optional uint32 skill_type = 2;
    optional uint32 skill_id = 3;

    enum CmdId {
        CMD_ID = 5605;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SKILL_CD = 2;
        BULLET_LACK = 3;
        RELOAD_TO_MAX = 4;
        CHARGE_LACK = 5;
        SP_LACK = 6;
    }
}

message QAvatarBattleStigmata {
    optional uint32 stigmata_id = 1;
}


message QAvatarBattleStigmataComponent {
    repeated QAvatarBattleStigmata stigmata_list = 1;
}

enum QAvatarBattleTickComponentEventType {
    QAVATAR_BATTLE_TICK_EVENT_TYPE_ENABLE = 1;
    QAVATAR_BATTLE_TICK_EVENT_TYPE_INTERVAL = 2;
}

enum QAvatarBuffEffectType {
    QAVATAR_BUFF_EFFECT_NONE = 0;
    QAVATAR_BUFF_EFFECT_HP_GREATER = 1;
    QAVATAR_BUFF_EFFECT_HP_LESS = 2;
    QAVATAR_BUFF_EFFECT_OUT_OF_BATTLE = 3;
}

enum QAvatarBuffType {
    QAVATAR_BUFF_NONE = 0;
    QAVATAR_BUFF_MAXHP = 1;
    QAVATAR_BUFF_ATTACK = 2;
    QAVATAR_BUFF_MOVESPEED = 3;
    QAVATAR_BUFF_HEALHP = 4;
    QAVATAR_BUFF_CHANGESKILL = 5;
    QAVATAR_BUFF_HEALSP = 6;
    QAVATAR_BUFF_ADDEDDAMAGERATIO = 7;
    QAVATAR_BUFF_DAMAGETAKENRATIO = 8;
    QAVATAR_BUFF_CHANGESKILLCD = 9;
    QAVATAR_BUFF_CRITICALRATE = 10;
    QAVATAR_BUFF_CRITICALDAMAGERATIO = 11;
    QAVATAR_BUFF_CLIENT_ONLY = 21;
}

enum QAvatarChangePropType {
    QAVATAR_CHANGE_PROP_NONE = 0;
    QAVATAR_CHANGE_PROP_HP = 1;
    QAVATAR_CHANGE_PROP_SP = 2;
}

enum QAvatarLobbyStatus {
    QAVATAR_LOBBY_STATUS_INVALID = 0;
    QAVATAR_LOBBY_STATUS_INIT = 1;
    QAVATAR_LOBBY_STATUS_PREPARE = 2;
    QAVATAR_LOBBY_STATUS_FIGHT = 3;
    QAVATAR_LOBBY_STATUS_SETTLE = 4;
    QAVATAR_LOBBY_STATUS_DELETE = 5;
}

enum QAvatarShapeType {
    QAVATAR_SHAPE_NONE = 0;
    QAVATAR_SHAPE_AABB = 1;
    QAVATAR_SHAPE_CIRCLE = 2;
    QAVATAR_SHAPE_OAB = 3;
}

enum QAvatarSkillTriggerType {
    QAVATAR_SKILL_TRIGGER_NONE = 0;
    QAVATAR_SKILL_TRIGGER_DOWN = 1;
    QAVATAR_SKILL_TRIGGER_UP = 2;
    QAVATAR_SKILL_TRIGGER_HOLDUP = 3;
    QAVATAR_SKILL_TRIGGER_HOLDLOOP = 4;
}

enum QAvatarSkillType {
    QAVATAR_SKILL_NONE = 0;
    QAVATAR_SKILL_ATK = 1;
    QAVATAR_SKILL_SKL01 = 2;
    QAVATAR_SKILL_SKL02 = 3;
}

enum QAvatarStigmataEffectType {
    QAVATAR_STIGMATA_EFFECT_NONE = 0;
    QAVATAR_STIGMATA_EFFECT_DIRECT = 1;
    QAVATAR_STIGMATA_EFFECT_SKILL_TRIGGER = 2;
    QAVATAR_STIGMATA_EFFECT_ROLE = 3;
    QAVATAR_STIGMATA_EFFECT_AVATAR_ID = 4;
    QAVATAR_STIGMATA_EFFECT_ATTACK_ON = 5;
    QAVATAR_STIGMATA_EFFECT_DEL_HP = 8;
}

enum QAvatarStigmataSrcType {
    QAVATAR_STIGMATA_SRC_NONE = 0;
    QAVATAR_STIGMATA_SRC_DEFAULT = 1;
    QAVATAR_STIGMATA_SRC_DROP = 2;
}

enum QCandyBattleActionType {
    QCANDY_BATTLE_ACTION_TYPE_NONE = 0;
    QCANDY_BATTLE_ACTION_TYPE_ADD_SCORE = 1;
}

message QCandyBattleArriveReq {

    enum CmdId {
        CMD_ID = 6583;
    }
}

message QCandyBattleArriveRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 6584;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SETTLE_FAILED = 2;
    }
}

message QCandyBattleAvatarLifeTimesChangeNotify {
    optional uint32 life_times = 1;

    enum CmdId {
        CMD_ID = 6582;
    }
}

enum QCandyBattleAvatarState {
    QCANDY_BATTLE_AVATAR_NONE = 0;
    QCANDY_BATTLE_AVATAR_IDLE = 1;
    QCANDY_BATTLE_AVATAR_GROUND_MOVE = 2;
    QCANDY_BATTLE_AVATAR_JUMP = 3;
    QCANDY_BATTLE_AVATAR_DOUBLE_JUMP = 4;
    QCANDY_BATTLE_AVATAR_FALL = 5;
    QCANDY_BATTLE_AVATAR_TUMBLE = 6;
    QCANDY_BATTLE_AVATAR_FLY = 7;
}


message QCandyBattleAvatarStateClientNotify {
    optional QCandyBattleAvatarState state = 1;
    optional bool is_move = 2;
    optional uint32 sub_state = 3;

    enum CmdId {
        CMD_ID = 6588;
    }
}


message QCandyBattleAvatarStateServerNotify {
    optional uint32 entity_id = 1;
    optional QCandyBattleAvatarState state = 2;
    optional bool is_move = 3;
    optional uint32 sub_state = 4;

    enum CmdId {
        CMD_ID = 6589;
    }
}


message QCandyBattleBeginNotify {
    optional uint32 lobby_id = 1;
    optional uint32 battle_id = 2;
    optional uint32 map_id = 3;
    optional uint32 fightserver_ip = 4;
    optional uint32 fightserver_port = 5;
    optional uint32 battle_begin_time = 6;
    optional uint32 battle_end_time = 7;
    repeated QCandyBattleMember member_list = 8;
    optional uint32 activity_id = 9;

    enum CmdId {
        CMD_ID = 6603;
    }
}

message QCandyBattleChooseAvatarReq {
    optional uint32 activity_id = 1;
    optional uint32 old_avatar_id = 2;
    optional uint32 new_avatar_id = 3;

    enum CmdId {
        CMD_ID = 6604;
    }
}

message QCandyBattleChooseAvatarRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 old_avatar_id = 3;
    optional uint32 new_avatar_id = 4;

    enum CmdId {
        CMD_ID = 6605;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        OLD_AVATAR_MISMATCH = 2;
        NEW_AVATAR_LOCKED = 3;
        IN_MATCH_STATUS = 4;
        IN_READY_STATUS = 5;
    }
}


message QCandyBattleComponentPosition {
    optional QCandyBattleVector3 postion = 1;
    optional QCandyBattleVector3 forward = 2;
}


message QCandyBattleComponentSet {
    optional QCandyBattleComponentPosition position_component = 1;
}

enum QCandyBattleComponentType {
    QCANDY_BATTLE_COMPONENT_TYPE_NONE = 0;
    QCANDY_BATTLE_COMPONENT_TYPE_POSITION = 1;
}



message QCandyBattleCreateEntityReq {
    optional uint32 prop_id = 1;
    optional QCandyBattleEntityType type = 2;
    optional QCandyBattleVector3 init_pos = 3;
    optional QCandyBattleVector3 init_forward = 4;

    enum CmdId {
        CMD_ID = 6576;
    }
}

message QCandyBattleCreateEntityRsp {
    optional Retcode retcode = 1;
    optional uint32 entity_id = 2;
    optional uint32 prop_id = 3;
    optional uint32 owner_entity_id = 4;

    enum CmdId {
        CMD_ID = 6577;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}



message QCandyBattleDataNotify {
    optional uint64 cur_time_ms_u64 = 1;
    repeated QCandyBattleEntity update_entity_list = 2;
    repeated QCandyBattleEntity delete_entity_list = 3;
    optional QCandyBattleInfo battle_info = 4;

    enum CmdId {
        CMD_ID = 6572;
    }
}

enum QCandyBattleDelayActionType {
    QCANDY_BATTLE_DELAY_ACTION_TYPE_NONE = 0;
    QCANDY_BATTLE_DELAY_ACTION_TYPE_STATE_RESET = 1;
    QCANDY_BATTLE_DELAY_ACTION_TYPE_SKILL_END = 2;
}

message QCandyBattleDeleteEntityReq {
    optional uint32 entity_id = 1;

    enum CmdId {
        CMD_ID = 6578;
    }
}

message QCandyBattleDeleteEntityRsp {
    optional Retcode retcode = 1;
    optional uint32 entity_id = 2;

    enum CmdId {
        CMD_ID = 6579;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ENTITY_NOT_EXIST = 2;
        ENTITY_CANNOT_DELETE = 3;
    }
}

message QCandyBattleEndNotify {
    optional uint32 battle_id = 1;

    enum CmdId {
        CMD_ID = 6573;
    }
}

message QCandyBattleEnterBattleReq {

    enum CmdId {
        CMD_ID = 6570;
    }
}





message QCandyBattleEnterBattleRsp {
    optional Retcode retcode = 1;
    optional QCandyBattleType battle_type = 2;
    optional uint32 battle_begin_time = 3;
    optional uint32 battle_end_time = 4;
    repeated QCandyBattleMember member_list = 5;
    repeated QCandyBattleMemberBrief member_brief_list = 6;
    repeated QCandyBattlePropData prop_data_list = 7;

    enum CmdId {
        CMD_ID = 6571;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        BATTLE_NOT_EXIST = 2;
    }
}



message QCandyBattleEntity {
    optional uint32 entity_id = 1;
    optional QCandyBattleEntityType type = 2;
    optional QCandyBattleComponentSet component_set = 3;
    optional uint32 prop_id = 4;
    optional uint32 owner_entity_id = 5;
    optional uint32 state = 6;
}

enum QCandyBattleEntityType {
    QCANDY_BATTLE_ENTITY_TYPE_NONE = 0;
    QCANDY_BATTLE_ENTITY_TYPE_PLAYER = 1;
    QCANDY_BATTLE_ENTITY_TYPE_PROP = 2;
}

message QCandyBattleFinishBattleNotify {
    optional uint32 uid = 1;
    optional uint32 rank_num = 2;
    optional bool is_over = 3;

    enum CmdId {
        CMD_ID = 6591;
    }
}

message QCandyBattleGetActivityReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 6601;
    }
}

message QCandyBattleGetActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 today_currency_got_num = 3;
    optional uint32 rank_score = 4;
    optional uint32 max_rank_score = 5;
    optional uint32 last_avatar_id = 6;
    repeated uint32 unlocked_avatar_list = 7;

    enum CmdId {
        CMD_ID = 6602;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message QCandyBattleInfo {
    optional uint32 battle_id = 1;
    optional uint32 remain_life_times = 2;
    optional uint32 score = 3;
}

message QCandyBattleLeaveBattleNotify {
    optional uint32 uid = 1;

    enum CmdId {
        CMD_ID = 6594;
    }
}

message QCandyBattleLeaveBattleReq {

    enum CmdId {
        CMD_ID = 6592;
    }
}

message QCandyBattleLeaveBattleRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 6593;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message QCandyBattleMember {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 rank_score = 3;
    optional uint32 team_id = 4;
    optional uint32 avatar_id = 5;
}

message QCandyBattleMemberBrief {
    optional uint32 uid = 1;
    optional uint32 entity_id = 2;
}

message QCandyBattleMemberSettleInfo {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 avatar_id = 3;
    optional uint32 cur_rank_score = 4;
    optional bool is_abandoned = 5;
    optional uint32 rank = 6;
    optional uint32 progress = 7;
    optional uint32 cost_time = 8;
    optional uint32 life_times = 9;
    optional uint32 score = 10;
}


message QCandyBattleMoveNotify {
    optional QCandyBattleVector3 pos = 1;
    optional QCandyBattleVector3 forward = 2;

    enum CmdId {
        CMD_ID = 6574;
    }
}


message QCandyBattlePropData {
    optional uint32 entity_id = 1;
    optional uint32 prop_id = 2;
    optional QCandyBattleVector3 postion = 3;
    optional QCandyBattleVector3 rotation = 4;
    optional QCandyBattleVector3 scale = 5;
    optional string parent_name = 6;
}

enum QCandyBattlePropState {
    QCANDY_BATTLE_PROP_CANNOT_TRIGGER = 0;
    QCANDY_BATTLE_PROP_CAN_TRIGGER = 1;
}

enum QCandyBattlePropType {
    QCANDY_BATTLE_PROP_TYPE_NONE = 0;
    QCANDY_BATTLE_PROP_TYPE_HAS_CD = 1;
    QCANDY_BATTLE_PROP_TYPE_AUTO_RECOVER = 2;
}


message QCandyBattleSettleBattleNotify {
    optional uint32 activity_id = 1;
    optional uint32 lobby_id = 2;
    optional uint32 map_id = 3;
    repeated QCandyBattleMemberSettleInfo settle_info_list = 4;

    enum CmdId {
        CMD_ID = 6608;
    }
}


message QCandyBattleSkillEndNotify {
    optional PlayerSkill player_skill_end = 1;

    enum CmdId {
        CMD_ID = 6590;
    }
}

message QCandyBattleTriggerEntityReq {
    optional uint32 entity_id = 1;
    optional uint32 cur_state = 2;

    enum CmdId {
        CMD_ID = 6580;
    }
}

message QCandyBattleTriggerEntityRsp {
    optional Retcode retcode = 1;
    optional uint32 entity_id = 2;
    optional uint32 cur_state = 3;

    enum CmdId {
        CMD_ID = 6581;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ENTITY_NOT_EXIST = 2;
        STATE_ERROR = 3;
    }
}

enum QCandyBattleTriggerEventType {
    QCANDY_BATTLE_TRIGGER_EVENT_TYPE_ADD_SCORE = 1;
}

enum QCandyBattleType {
    QCANDY_BATTLE_TYPE_NONE = 0;
    QCANDY_BATTLE_TYPE_RACING = 1;
    QCANDY_BATTLE_TYPE_SURVIVE = 2;
    QCANDY_BATTLE_TYPE_SCORE = 3;
}

message QCandyBattleUnlockAvatarReq {
    optional uint32 activity_id = 1;
    optional uint32 avatar_id = 2;

    enum CmdId {
        CMD_ID = 6606;
    }
}

message QCandyBattleUnlockAvatarRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 avatar_id = 3;

    enum CmdId {
        CMD_ID = 6607;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        RANK_SCORE_LACK = 3;
    }
}


message QCandyBattleUseSkillNotify {
    optional PlayerSkill player_use_skill = 1;

    enum CmdId {
        CMD_ID = 6587;
    }
}

message QCandyBattleUseSkillReq {
    optional uint32 skill_id = 1;

    enum CmdId {
        CMD_ID = 6585;
    }
}

message QCandyBattleUseSkillRsp {
    optional Retcode retcode = 1;
    optional uint32 skill_id = 2;

    enum CmdId {
        CMD_ID = 6586;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SKILL_INVALID = 2;
        SKILL_IN_CD = 3;
        SKILL_ALL_USED = 4;
    }
}

message QCandyBattleVector3 {
    optional float x = 1;
    optional float y = 2;
    optional float z = 3;
}

enum QCandyLobbyStatus {
    QCANDY_LOBBY_STATUS_INVALID = 0;
    QCANDY_LOBBY_STATUS_INIT = 1;
    QCANDY_LOBBY_STATUS_PREPARE = 2;
    QCANDY_LOBBY_STATUS_FIGHT = 3;
    QCANDY_LOBBY_STATUS_SETTLE = 4;
    QCANDY_LOBBY_STATUS_DELETE = 5;
}

message QuantumEndless {
    optional uint32 cur_monster_group = 1;
    optional uint32 monster_progress = 2;
    optional uint32 finish_monster_num = 3;
}

message QuantumEndlessBattleAoe {
    optional uint32 aoe_num = 1;
    optional uint32 evade_num = 2;
}


message QuantumEndlessBattleWave {
    optional uint32 wave_id = 1;
    optional StageEndStatus end_status = 2;
    optional uint32 cost_time = 3;
}

message Question {
    optional uint32 id = 1;
    repeated uint32 answer_list = 2;
    repeated uint32 right_answer_list = 3;
}

message QuickApplyJoinArmadaReq {
    optional uint32 level = 1;

    enum CmdId {
        CMD_ID = 2732;
    }
}

message QuickApplyJoinArmadaRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2733;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
        ALREADY_IN_ARMADA = 3;
        NO_QUICK_APPLY_ARMADA = 4;
        IN_CD_TIME = 5;
        IN_LOW_POPL_CD_TIME = 6;
        FEATURE_CLOSED = 7;
    }
}

message QuitArmadaReq {

    enum CmdId {
        CMD_ID = 2627;
    }
}

message QuitArmadaRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2628;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 3;
        IS_LEADER = 4;
    }
}


message Raffle {
    optional uint32 id = 1;
    optional uint32 draw_begin_time = 3;
    optional uint32 draw_end_time = 4;
    optional uint32 reward_begin_time = 5;
    optional uint32 mission_id = 6;
    optional uint32 total_ticket_num = 7;
    repeated RaffleTicket ticket_list = 8;
}


message RaffleActivity {
    optional uint32 cur_schedule_id = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    repeated Raffle raffle_list = 4;
}

enum RaffleActivityType {
    RAFFLE_ACTIVITY_NONE = 0;
    RAFFLE_ACTIVITY_MONOPOLY = 1;
}

enum RaffleRewardGrade {
    RAFFLE_REWARD_NONE = 0;
    RAFFLE_REWARD_FIRST = 1;
    RAFFLE_REWARD_SECOND = 2;
    RAFFLE_REWARD_THIRD = 3;
}


message RaffleTicket {
    optional uint32 ticket_num = 1;
    optional uint32 draw_idx = 2;
    optional RaffleRewardGrade reward_grade = 3;
    optional bool is_reward_taken = 4;
}

enum RaidActiveType {
    RAID_ACTIVE_NONE = 0;
    RAID_ACTIVE_DAILY_RAID = 1;
    RAID_ACTIVE_WEEKLY_RAID = 2;
}

message RanchArea {
    optional uint32 area_id = 1;
    optional uint32 cur_product_num = 2;
    repeated uint32 monster_unique_id_list = 3;
    optional uint32 production_efficiency = 4;
}

message RanchAssignMonsterReq {
    optional uint32 activity_id = 1;
    repeated uint32 unique_id_list = 2;
    optional uint32 area_id = 3;

    enum CmdId {
        CMD_ID = 5839;
    }
}

message RanchAssignMonsterRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated uint32 unique_id_list = 3;
    optional uint32 area_id = 4;

    enum CmdId {
        CMD_ID = 5840;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MONSTER_NOT_EXIST = 2;
        UNIQUE_ID_REPEATED = 3;
        AREA_NOT_EXIST = 4;
        MONSTER_ALREADY_ASSIGNED = 5;
        SLOT_NOT_ENOUGH = 6;
    }
}

message RanchDelMonsterNotify {
    optional uint32 activity_id = 1;
    repeated uint32 del_monster_unique_id_list = 2;

    enum CmdId {
        CMD_ID = 5848;
    }
}

message RanchFireMonsterReq {
    optional uint32 activity_id = 1;
    repeated uint32 unique_id_list = 2;

    enum CmdId {
        CMD_ID = 5841;
    }
}

message RanchFireMonsterRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated uint32 unique_id_list = 3;

    enum CmdId {
        CMD_ID = 5842;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MONSTER_NOT_EXIST = 2;
        UNIQUE_ID_REPEATED = 3;
        AREA_NOT_EXIST = 4;
        MONSTER_NOT_ASSIGNED = 5;
    }
}

message RanchFreeMonsterReq {
    optional uint32 activity_id = 1;
    repeated uint32 unique_id_list = 2;

    enum CmdId {
        CMD_ID = 5837;
    }
}

message RanchFreeMonsterRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated uint32 unique_id_list = 3;
    optional uint32 return_material_num = 4;

    enum CmdId {
        CMD_ID = 5838;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MONSTER_NOT_EXIST = 2;
        UNIQUE_ID_REPEATED = 3;
        MONSTER_ALREADY_ASSIGNED = 4;
    }
}

message RanchGetActivityReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 5833;
    }
}




message RanchGetActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated RanchMonster monster_list = 3;
    repeated RanchArea area_list = 4;
    optional uint32 next_refresh_time = 5;
    repeated RanchStage stage_list = 6;
    repeated uint32 battle_unique_id_list = 7;

    enum CmdId {
        CMD_ID = 5834;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message RanchGetMonsterWikiReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 5845;
    }
}



message RanchGetMonsterWikiRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated RanchMonsterWiki monster_wiki_list = 3;
    repeated RanchSkillWiki skill_wiki_list = 4;
    optional uint32 collection_point = 5;

    enum CmdId {
        CMD_ID = 5846;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message RanchLockMonsterSkillReq {
    optional uint32 activity_id = 1;
    optional uint32 unique_id = 2;
    repeated uint32 lock_skill_idx_list = 3;

    enum CmdId {
        CMD_ID = 5849;
    }
}

message RanchLockMonsterSkillRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 unique_id = 3;
    repeated uint32 lock_skill_idx_list = 4;

    enum CmdId {
        CMD_ID = 5850;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MONSTER_NOT_EXIST = 2;
        LOCK_NUM_LIMIT = 3;
    }
}


message RanchMonster {
    optional uint32 unique_id = 1;
    optional uint32 monster_id = 2;
    repeated RanchMonsterSkill skill_list = 3;
    optional uint32 ranch_area_id = 4;
    optional uint32 ranch_last_settle_time = 5;
    optional uint32 monster_level = 6;
    optional uint32 monster_exp = 7;
}

message RanchMonsterBriefInfo {
    optional uint32 monster_id = 1;
    repeated uint32 skill_id_list = 2;
    optional uint32 monster_level = 3;
}

message RanchMonsterSkill {
    optional uint32 skill_id = 1;
    optional bool is_locked = 2;
}

enum RanchMonsterSkillType {
    RANCH_MONSTER_SKILL_ACTIVE = 1;
    RANCH_MONSTER_SKILL_PASSIVE = 2;
    RANCH_MONSTER_SKILL_FAST_PRODUCTION = 3;
    RANCH_MONSTER_SKILL_RARITY_UP = 4;
}

enum RanchMonsterSourceType {
    RANCH_MONSTER_SOURCE_STAGE = 1;
    RANCH_MONSTER_SOURCE_MATERIAL = 2;
    RANCH_MONSTER_SOURCE_SYNTHESIS_WITH_FOMULA = 3;
    RANCH_MONSTER_SOURCE_PRODUCT = 4;
    RANCH_MONSTER_SOURCE_SYNTHESIS_WITHOUT_FORMULA = 5;
    RANCH_MONSTER_SOURCE_GM = 6;
}

message RanchMonsterWiki {
    optional uint32 monster_id = 1;
    optional uint32 unlock_time = 2;
    optional uint32 battle_times = 3;
    optional uint32 catch_times = 4;
    repeated uint32 skill_id_list = 5;
}

enum RanchNotifyType {
    RANCH_NOTIFY_UNKNOWN = 0;
    RANCH_NOTIFY_SYNTHESIS = 1;
    RANCH_NOTIFY_STAGE_END = 2;
    RANCH_NOTIFY_LOCK = 3;
}

enum RanchRarityType {
    RANCH_LEGENDARY = 4;
}

message RanchSetBattleMonsterReq {
    optional uint32 activity_id = 1;
    repeated uint32 unique_id_list = 2;

    enum CmdId {
        CMD_ID = 5851;
    }
}

message RanchSetBattleMonsterRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated uint32 unique_id_list = 3;

    enum CmdId {
        CMD_ID = 5852;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MONSTER_NOT_EXIST = 2;
    }
}

message RanchSkillWiki {
    optional uint32 skill_type = 1;
    optional uint32 skill_id = 2;
}


message RanchStage {
    optional uint32 stage_id = 1;
    optional uint32 take_challenge_reward_times = 2;
    optional uint32 max_challenge_score = 3;
    repeated RanchMonster drop_monster_list = 4;
    repeated uint32 unique_id_list = 5;
}



message RanchSyncMonsterNotify {
    optional uint32 activity_id = 1;
    repeated RanchMonster monster_list = 2;
    repeated uint32 del_monster_unique_id_list = 3;
    optional RanchNotifyType notify_type = 4;
    optional uint32 stage_id = 5;

    enum CmdId {
        CMD_ID = 5847;
    }
}

message RanchSynthesisMonsterReq {
    optional uint32 activity_id = 1;
    optional uint32 synthesis_id = 2;
    optional uint32 main_unique_id = 3;
    optional uint32 assist_unique_id = 4;

    enum CmdId {
        CMD_ID = 5835;
    }
}

message RanchSynthesisMonsterRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 synthesis_id = 3;
    optional uint32 main_unique_id = 4;
    optional uint32 assist_unique_id = 5;
    optional uint32 output_unique_id = 6;

    enum CmdId {
        CMD_ID = 5836;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MONSTER_NOT_EXIST = 2;
        UNIQUE_ID_REPEATED = 3;
        MONSTER_ALREADY_ASSIGNED = 4;
        MATERIAL_LACK = 5;
        MONSTER_NOT_MATCH = 6;
    }
}

enum RanchSynthesisType {
    RANCH_SYNSHESIS_WITHOUT_FORMULA = 1;
    RANCH_SYNSHESIS_WITH_FORMULA = 2;
}

message RanchTakeProductReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 5843;
    }
}

message RanchTakeProductRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated uint32 unique_id_list = 3;

    enum CmdId {
        CMD_ID = 5844;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MONSTER_NUM_OVERFLOW = 2;
    }
}

enum RankPowerType {
    AVATAR_SSS_NUM = 101;
    AVATAR_SS_NUM = 102;
    AVATAR_S_NUM = 103;
    AVATAR_A_NUM = 104;
    WEAPON_5STAR_NUM = 201;
    WEAPON_4STAR_NUM = 202;
    WEAPON_3STAR_NUM = 203;
    STIGMATA_5STAR_NUM = 301;
    STIGMATA_4STAR_NUM = 302;
    STIGMATA_3STAR_NUM = 303;
}

message RankScheduleData {
    optional uint32 schedule_id = 1;
    optional uint32 type = 2;
    optional uint32 begin_time = 3;
    optional uint32 end_time = 4;
}

enum RankScheduleType {
    RANK_SCHEDULE_DORM = 1;
}


message RankShowData {
    optional uint32 my_rank_type = 1;
    optional uint32 my_rank = 2;
    repeated UserRankData rank_list = 3;
    optional uint32 my_score = 4;
}

message RecallMasterPupilApplicationReq {
    optional uint32 target_uid = 1;
    optional string self_nickname = 2;

    enum CmdId {
        CMD_ID = 970;
    }
}


message RecallMasterPupilApplicationRsp {
    optional MasterPupilRetcode.Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 971;
    }
}


message RechargeFinishNotify {
    optional Retcode retcode = 1;
    optional string product_name = 2;
    optional uint32 pay_hcoin = 3;
    optional uint32 free_hcoin = 4;
    optional string product_desc = 5;
    repeated RewardData box_reward_list = 6;
    optional uint32 product_price = 7;
    optional string channel_name = 8;
    optional string channel_order_no = 9;
    optional bool is_add_hcoin = 10;
    optional uint32 mcoin = 11;
    optional uint32 goods_id = 12;
    optional string pay_currency = 13;
    optional string pay_price = 14;

    enum CmdId {
        CMD_ID = 83;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ORDER_REPEAT = 2;
        ITUNES_RECEIPT_ERROR = 3;
        DUPLICATE_FAIL = 4;
    }
}

enum ReclaimActivityDataType {
    RECLAIM_ACTIVITY_DATA_ALL = 0;
    RECLAIM_ACTIVITY_DATA_AVATAR = 1;
    RECLAIM_ACTIVITY_DATA_LEVEL = 2;
}

message ReclaimAvatar {
    optional uint32 reclaim_avatar_id = 1;
    optional uint32 reclaim_weapon_id = 2;
    optional uint32 reclaim_stigmata_id_1 = 3;
    optional uint32 reclaim_stigmata_id_2 = 4;
    optional uint32 reclaim_stigmata_id_3 = 5;
}

enum ReclaimEquipmentType {
    RECLAIM_NONE = 0;
    RECLAIM_AVATAR = 1;
    RECLAIM_WEAPON = 2;
    RECLAIM_STIGMATA = 3;
}

message ReclaimGachaReq {
    optional uint32 box_id = 1;

    enum CmdId {
        CMD_ID = 1177;
    }
}


message ReclaimGachaRsp {
    optional Retcode retcode = 1;
    repeated uint32 candidate_item_list = 2;
    repeated RewardData reward_list = 3;

    enum CmdId {
        CMD_ID = 1178;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        WAIT_CHOOSE = 2;
        MATERIAL_LACK = 3;
    }
}


message ReclaimMpAvatar {
    optional ReclaimAvatar reclaim_avatar = 1;
    optional uint32 reclaim_level = 2;
    repeated uint32 reclaim_avatar_id_list = 3;
    optional uint32 avatar_id = 4;
}



message RecommendAvatar {
    optional LineupBriefInfo lineup_info = 1;
    optional uint32 battle_times = 2;
    optional float battle_rate = 3;
    optional AvatarRecommendSource source = 5;
    optional string ext_info = 8;
    optional uint32 recommend_style = 9;
    optional uint32 rank = 10;
    optional bool is_has_course_info = 11;
}


message RecommendGoods {
    optional uint32 shop_id = 1;
    optional Goods goods = 2;
    optional string banner_bg = 3;
    optional uint32 accurate_deliver_schedule_id = 4;
}

message RecommendMissionPanel {
    optional uint32 panel_id = 1;
    optional bool is_panel_show = 2;
    optional uint32 mission_begin_time = 3;
}

message RecoverChatCreditNotify {
    optional uint32 lost_chat_credit = 1;

    enum CmdId {
        CMD_ID = 1162;
    }
}


message RecvArmadaSystemChatMsgNotify {
    optional ArmadaSystemChatMsg chat_msg = 1;

    enum CmdId {
        CMD_ID = 2662;
    }
}


message RecvChatMsgNotify {
    repeated ChatMsg chat_msg_list = 1;

    enum CmdId {
        CMD_ID = 2235;
    }
}


message RecvCommonChatworldMsgNotify {
    repeated ChatworldMsg chat_msg_list = 1;

    enum CmdId {
        CMD_ID = 2405;
    }
}


message RecvOfflinePrivateChatMsgNotify {
    repeated ChatMsg chat_msg_list = 1;

    enum CmdId {
        CMD_ID = 2236;
    }
}


message RecvPlayerCardMsgNotify {
    repeated PlayerCardMsg msg_list = 1;
    optional uint32 target_uid = 2;

    enum CmdId {
        CMD_ID = 487;
    }
}



message RecvRoomChatMsgNotify {
    optional RoomMode room_mode = 1;
    optional ChatMsg chat_msg = 2;

    enum CmdId {
        CMD_ID = 3164;
    }
}

message RefineRuneSwitchData {
}




message RefineStigmataRuneReq {
    optional StigmataRefineType type = 1;
    optional uint32 unique_id = 2;
    optional EquipmentItemList consume_item_list = 3;
    optional uint32 special_id = 4;
    optional uint32 lock_rune_index = 5;
    optional bool is_retry = 6;
    optional StigmataRefineTimesType times_type = 7;

    enum CmdId {
        CMD_ID = 193;
    }
}




message RefineStigmataRuneRsp {
    optional Retcode retcode = 1;
    repeated StigmataRune rune_list = 2;
    optional StigmataRefineTimesType times_type = 3;
    repeated StigmataRuneGroup rune_group_list = 4;
    repeated uint32 wait_select_stgimata_list = 5;

    enum CmdId {
        CMD_ID = 194;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STIGMATA_NOT_EXIST = 2;
        STIGMATA_NOT_IDENTIFY = 3;
        STIGMATA_CAN_NOT_REFINE = 4;
        STIGMATA_WAIT_RUNE_EXIST = 5;
        CONSUME_ITEM_NOT_EXIST = 6;
        CONSUME_ITEM_IN_USE = 7;
        CONSUME_ITEM_REPEAT = 8;
        CONSUME_ITEM_UN_NECESSARY = 9;
        CONSUME_ITEM_LACK = 10;
        ITEM_IN_CONSUME_ITEM_LIST = 11;
        CONSUME_ITEM_PROTECTED = 12;
        COST_GACHA_TICKET = 13;
        COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 14;
        COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 15;
        LEVEL_LACK = 16;
        CONSUME_ITEM_IN_FACILITY = 17;
        CONSUME_ITEM_GRAND_KEY = 18;
        SLOT_LACK = 19;
        TRIGGER_MATERIAL_LACK = 20;
        LOCK_INDEX_ERROR = 21;
        CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 22;
        NOT_OPEN = 23;
        TOO_MANY_WAIT_RUNE = 24;
    }
}


message ReforgeEquipmentReq {
    optional EquipmentType type = 1;
    optional uint32 unique_id = 2;
    optional uint32 target_equip_id = 3;

    enum CmdId {
        CMD_ID = 3657;
    }
}

message ReforgeEquipmentRsp {
    optional Retcode retcode = 1;
    optional uint32 unique_id = 2;
    optional uint32 remain_reforge_times = 3;

    enum CmdId {
        CMD_ID = 3658;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        JUST_SUPPORT_WEAPON = 2;
        CONSUME_ITEM_NOT_EXIST = 3;
        CONSUME_ITEM_IN_USE = 4;
        CONSUME_ITEM_PROTECTED = 5;
        COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 6;
        COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 7;
        EQUIPMENT_NOT_EXTRACTED = 8;
        ACTIVITY_NOT_OPEN = 9;
        EQUIPMENT_NOT_OPEN = 10;
        TIMES_LACK = 11;
        CONSUME_ITEM_IN_FACILITY = 12;
        TARGET_NOT_FITTED = 13;
        CONSUME_ITEM_GRAND_KEY = 14;
        CONSUME_ITEM_REPEAT = 15;
        COST_GACHA_TICKET = 16;
        CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 17;
    }
}

message RefreshAndSyncMissionNotify {

    enum CmdId {
        CMD_ID = 1473;
    }
}

message RefreshDLCTalentAffixReq {
    optional uint32 avatar_id = 1;
    optional uint32 talent_id = 2;

    enum CmdId {
        CMD_ID = 3580;
    }
}

message RefreshDLCTalentAffixRsp {
    optional Retcode retcode = 1;
    optional uint32 new_affix_set_id = 2;

    enum CmdId {
        CMD_ID = 3581;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_ERROR = 2;
        NOT_REFRESHABLE_TALENT = 3;
        MATERIAL_LACK = 4;
        WAIT_SELECT_AFFIX_SET_NOT_EMPTY = 5;
    }
}

message RefreshScDLCDailyQuestReq {

    enum CmdId {
        CMD_ID = 6318;
    }
}


message RefreshScDLCDailyQuestRsp {
    optional Retcode retcode = 1;
    repeated OpenworldQuest quest_list = 2;

    enum CmdId {
        CMD_ID = 6319;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
    }
}

message RegionUidRange {
    optional string region_name = 1;
    optional uint32 start_uid = 2;
    optional uint32 end_uid = 3;
}

message RejectGratuityStageReq {
    optional uint32 stage_unique_id = 1;

    enum CmdId {
        CMD_ID = 4118;
    }
}

message RejectGratuityStageRsp {
    optional Retcode retcode = 1;
    optional uint32 stage_unique_id = 2;

    enum CmdId {
        CMD_ID = 4119;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message RelationActivityDataNotify {
    optional uint32 limit_type = 1;
    optional uint32 limit_num = 2;
    optional uint32 got_material_num = 3;
    optional uint32 relation_type = 4;
    optional uint32 drop_material_id = 5;

    enum CmdId {
        CMD_ID = 1373;
    }
}

message ReleaseArmadaBuildOwnershipReq {

    enum CmdId {
        CMD_ID = 2687;
    }
}

message ReleaseArmadaBuildOwnershipRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2688;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_GRANTED = 2;
        NOT_IN_ARMADA = 3;
    }
}




message Replay {
    optional uint64 replay_id_u64 = 1;
    optional ReplayType replay_type = 2;
    optional ReplayCommonInfo common_info = 3;
    optional ReplayExtInfo ext_info = 4;
}

message ReplayBeginReq {
    optional string key = 1;

    enum CmdId {
        CMD_ID = 5400;
    }
}

message ReplayBeginRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5401;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ReplayCommonInfo {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 create_time = 3;
    optional uint32 stage_id = 4;
    optional string file_md5 = 5;
    optional string download_url = 6;
    optional string version = 7;
    optional uint32 timespan = 8;
}

message ReplayEndReq {
    optional string key = 1;

    enum CmdId {
        CMD_ID = 5402;
    }
}

message ReplayEndRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5403;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message ReplayExBossInfo {
    optional uint32 rank_id = 1;
    optional FinishedExBossInfo finished_boss_info = 2;
    optional uint32 raw_score = 3;
    optional bool is_event_boss = 4;
}


message ReplayExtInfo {
    optional ReplayExBossInfo ex_boss_info = 1;
}

message ReplayFrame {
    optional uint32 seq = 1;
    optional uint32 count = 2;
    optional bytes frame = 3;
}

message ReplayFrameEndNotify {

    enum CmdId {
        CMD_ID = 5409;
    }
}


message ReplayFrameNotify {
    repeated ReplayFrame replay_frame_list = 1;

    enum CmdId {
        CMD_ID = 5408;
    }
}



message ReplayGetFileTokenReq {
    optional ReplayOp op = 1;
    optional Replay replay = 2;

    enum CmdId {
        CMD_ID = 5410;
    }
}

message ReplayGetFileTokenRsp {
    optional Retcode retcode = 1;
    optional string token = 2;
    optional string token_url = 3;

    enum CmdId {
        CMD_ID = 5411;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LIMIT = 2;
        INVALID_PARAM = 3;
        HAS_UPLOAD = 4;
        HAS_DELETE = 5;
        DAILY_LIMIT = 6;
    }
}


message ReplayGetRecommendBriefReq {
    repeated ReplayRecommendBriefKey key_list = 1;

    enum CmdId {
        CMD_ID = 5418;
    }
}


message ReplayGetRecommendBriefRsp {
    optional Retcode retcode = 1;
    repeated ReplayRecommendBrief brief_list = 2;

    enum CmdId {
        CMD_ID = 5419;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message ReplayGetRecommendListReq {
    optional ReplayType type = 1;
    optional uint32 stage_or_boss_id = 2;
    optional uint32 rank = 3;
    optional uint32 start_idx = 4;
    optional uint32 end_idx = 5;
    optional bool is_random = 6;

    enum CmdId {
        CMD_ID = 5416;
    }
}



message ReplayGetRecommendListRsp {
    optional Retcode retcode = 1;
    optional ReplayType type = 2;
    optional uint32 stage_or_boss_id = 3;
    optional uint32 rank = 4;
    optional uint32 start_idx = 5;
    optional uint32 end_idx = 6;
    repeated Replay replay_list = 7;
    optional bool is_random = 8;

    enum CmdId {
        CMD_ID = 5417;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ReplayGetUploadListReq {

    enum CmdId {
        CMD_ID = 5414;
    }
}


message ReplayGetUploadListRsp {
    optional Retcode retcode = 1;
    repeated Replay replay_list = 2;
    optional uint32 today_upload_num = 3;

    enum CmdId {
        CMD_ID = 5415;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

enum ReplayOp {
    REPLAY_UPLOAD = 1;
    REPLAY_DELETE = 2;
}


message ReplayRecommendBrief {
    optional ReplayRecommendBriefKey key = 1;
    optional uint32 num = 2;
}


message ReplayRecommendBriefKey {
    optional ReplayType type = 1;
    optional uint32 stage_or_boss_id = 2;
    optional uint32 rank = 3;
}

message ReplayReportFileResultReq {
    optional string token = 1;

    enum CmdId {
        CMD_ID = 5412;
    }
}

message ReplayReportFileResultRsp {
    optional Retcode retcode = 1;
    optional uint64 replay_id_u64 = 2;

    enum CmdId {
        CMD_ID = 5413;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_MATCH = 2;
    }
}

enum ReplayType {
    REPLAY_NONE = 0;
    REPLAY_EXBOSS = 1;
    REPLAY_TVT = 2;
}

message ReportBirthdayReq {
    optional uint32 birthday = 1;

    enum CmdId {
        CMD_ID = 299;
    }
}

message ReportBirthdayRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 300;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACCOUNT_ERROR = 2;
        INVALID_BIRTHDAY = 3;
    }
}

message ReportChapterActivityStageReq {
    optional uint32 chapter_id = 1;
    optional uint32 stage_id = 2;
    optional uint32 floor = 3;

    enum CmdId {
        CMD_ID = 4390;
    }
}

message ReportChapterActivityStageRsp {
    optional Retcode retcode = 1;
    optional uint32 chapter_id = 2;
    optional uint32 stage_id = 3;

    enum CmdId {
        CMD_ID = 4391;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        STAGE_NOT_EXIST = 3;
    }
}

message ReportClickRechargeButtonNotify {
    optional string product_name = 1;
    optional string currency_code = 2;
    optional string price = 3;

    enum CmdId {
        CMD_ID = 661;
    }
}

message ReportClientDataVersionReq {
    optional uint32 version = 1;

    enum CmdId {
        CMD_ID = 398;
    }
}

message ReportClientDataVersionRsp {
    optional uint32 server_version = 1;

    enum CmdId {
        CMD_ID = 399;
    }
}


message ReportDLCDropItemReq {
    repeated DropItem drop_item_list = 1;

    enum CmdId {
        CMD_ID = 3590;
    }
}

message ReportDLCDropItemRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3591;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}




message ReportOpenworldEndlessDataReq {
    optional OpenworldEndlessDataType type = 1;
    optional OpenworldEndlessReprotInvasion invasion = 2;
    optional OpenworldEndlessReprotBattle battle = 3;

    enum CmdId {
        CMD_ID = 3434;
    }
}

message ReportOpenworldEndlessDataRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3435;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message ReportReplayFrameReq {
    optional string key = 1;
    optional ReplayFrame replay_frame = 2;

    enum CmdId {
        CMD_ID = 5404;
    }
}

message ReportReplayFrameRsp {
    optional Retcode retcode = 1;
    optional string key = 2;
    optional uint32 seq = 3;
    optional uint32 count = 4;

    enum CmdId {
        CMD_ID = 5405;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ReportRpgTaleStageReq {
    optional uint32 stage_id = 1;
    optional uint32 cur_floor = 2;
    optional string client_data = 3;
    optional uint32 tale_id = 4;
    optional uint32 score = 5;
    repeated uint32 monster_unique_id_list = 6;
    repeated uint32 monster_card_unique_id_list = 7;

    enum CmdId {
        CMD_ID = 2374;
    }
}

message ReportRpgTaleStageRsp {
    optional Retcode retcode = 1;
    optional uint32 stage_id = 2;
    optional uint32 cur_floor = 3;
    optional uint32 tale_id = 4;
    optional uint32 score = 5;

    enum CmdId {
        CMD_ID = 2375;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message ReportTvtBattleStageMessageNotify {
    repeated TvtBattleStageMessage message_list = 1;

    enum CmdId {
        CMD_ID = 3355;
    }
}

message RequestLogoffReq {

    enum CmdId {
        CMD_ID = 1670;
    }
}

message RequestLogoffRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 1671;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ResetAdventureQuestReq {
    optional uint32 pool_id = 1;

    enum CmdId {
        CMD_ID = 3924;
    }
}

message ResetAdventureQuestRsp {
    optional Retcode retcode = 1;
    optional uint32 pool_id = 2;

    enum CmdId {
        CMD_ID = 3925;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_QUEST = 2;
        NO_TIMES = 3;
        HAS_FINISHED = 4;
        HAS_SELECTED = 5;
    }
}

message ResetAvatarMissionAvatarReq {

    enum CmdId {
        CMD_ID = 3008;
    }
}

message ResetAvatarMissionAvatarRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3009;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        CAN_NOT_RESET = 3;
        NOT_CHOOSE = 4;
    }
}

message ResetChapterActivityExclusiveStageReq {
    optional uint32 chapter_id = 1;
    optional uint32 group_id = 2;
    optional uint32 stage_id = 3;

    enum CmdId {
        CMD_ID = 4386;
    }
}

message ResetChapterActivityExclusiveStageRsp {
    optional Retcode retcode = 1;
    optional uint32 chapter_id = 2;
    optional uint32 group_id = 3;
    optional uint32 stage_id = 4;

    enum CmdId {
        CMD_ID = 4387;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        GROUP_NOT_EXIST = 2;
        STAGE_NOT_EXIST = 3;
        ACTIVITY_NOT_OPEN = 4;
    }
}

message ResetChapterActivityTalentReq {
    optional uint32 chapter_id = 1;

    enum CmdId {
        CMD_ID = 4388;
    }
}

message ResetChapterActivityTalentRsp {
    optional Retcode retcode = 1;
    optional uint32 chapter_id = 2;

    enum CmdId {
        CMD_ID = 4389;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        NOT_ALLOWED = 3;
    }
}

message ResetConsignedOrderReq {

    enum CmdId {
        CMD_ID = 2645;
    }
}

message ResetConsignedOrderRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2646;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        IN_CD_TIME = 3;
    }
}

message ResetDLCTowerProgressReq {

    enum CmdId {
        CMD_ID = 3576;
    }
}

message ResetDLCTowerProgressRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3577;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ResetExtraStoryChallengeModeReq {
    optional uint32 chapter_id = 1;
    optional uint32 difficulty = 2;

    enum CmdId {
        CMD_ID = 504;
    }
}

message ResetExtraStoryChallengeModeRsp {
    optional Retcode retcode = 1;
    optional uint32 chapter_id = 2;
    optional uint32 difficulty = 3;

    enum CmdId {
        CMD_ID = 505;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TIME_LIMIT = 2;
        EXTRA_STORY_NOT_OPEN = 3;
        RESET_TIMES_LACK = 4;
        DIFFICULTY_NOT_OPEN = 5;
        LEVEL_LIMIT = 6;
    }
}

message ResetRogueStageReq {

    enum CmdId {
        CMD_ID = 279;
    }
}

message ResetRogueStageRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 280;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_JOIN_ARMADA = 2;
        NOT_INIT = 3;
        RESET_TIMES_LACK = 4;
        NOT_OPEN = 5;
    }
}

message ResetScratchTicketPlateReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4154;
    }
}

message ResetScratchTicketPlateRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;

    enum CmdId {
        CMD_ID = 4155;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        TIMES_LIMIT = 3;
        MATERIAL_LACK = 4;
        CORE_PLATE = 5;
        ACTIVITY_LIMIT = 6;
    }
}

message ResetSecurityPasswordReq {
    optional bool is_withdraw = 1;

    enum CmdId {
        CMD_ID = 5031;
    }
}

message ResetSecurityPasswordRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5032;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        IS_ALREADY_RESETTING = 2;
    }
}

message ResetStageEnterTimesReq {
    optional uint32 stage_id = 1;

    enum CmdId {
        CMD_ID = 108;
    }
}

message ResetStageEnterTimesRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 109;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HCOIN_LACK = 2;
        TIMES_LACK = 3;
        NOT_NEED_RESET = 4;
        STAGE_ID_ERROR = 5;
        MATERIAL_LACK = 6;
    }
}

message ResetStigmataTitleReq {
    optional uint32 unique_id = 1;

    enum CmdId {
        CMD_ID = 330;
    }
}

message ResetStigmataTitleRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 331;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STIGMATA_NOT_EXIST = 2;
        MATERIAL_LACK = 3;
        SCOIN_LACK = 4;
        LEVEL_LACK = 5;
    }
}

message RestaurantOrder {
    optional uint32 material_id = 1;
    optional uint32 price = 2;
}

message RestaurantRoom {
    optional uint32 room_id = 1;
    optional uint32 avatar_id = 2;
    optional uint32 material_id = 3;
    optional double speed = 4;
    optional double progress = 5;
    optional uint32 status = 6;
}

enum RestaurantRoomType {
    RESTAURANT_ROOM_STORE = 1;
    RESTAURANT_ROOM_KITCHEN = 2;
    RESTAURANT_ROOM_CHECKOUT = 3;
}

enum RestaurantSkillType {
    RESTAURANT_SKILL_COOK_ID_SPEED_UP = 1;
    RESTAURANT_SKILL_COOK_TAG_SPEED_UP = 2;
    RESTAURANT_SKILL_COOK_ALL_SPEED_UP = 3;
    RESTAURANT_SKILL_SELL_ID_SPEED_UP = 4;
    RESTAURANT_SKILL_SELL_TAG_SPEED_UP = 5;
    RESTAURANT_SKILL_SELL_ALL_SPEED_UP = 6;
    RESTAURANT_SKILL_SELL_ID_PRICE_UP = 7;
    RESTAURANT_SKILL_SELL_TAG_PRICE_UP = 8;
    RESTAURANT_SKILL_SELL_ALL_PRICE_UP = 9;
}

enum RestaurantWorkStatus {
    RESTAURANT_WORK_NOT_BEGIN = 1;
    RESTAURANT_WORK_DOING = 2;
    RESTAURANT_WORK_PAUSE = 3;
}


message ReunionCookActivity {
    optional uint32 cur_schedule_id = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional uint32 cook_score = 4;
    optional uint32 last_settle_reward_score = 5;
    repeated ReunionCookHistory cook_history = 6;
    optional uint32 score_reward_group = 7;
    optional uint32 group_id = 8;
}

enum ReunionCookBookType {
    REUNION_COOK_BOOK_NORMAL = 1;
    REUNION_COOK_BOOK_RECYCLE = 2;
}


message ReunionCookData {
    optional uint32 book_id = 1;
    optional uint32 cook_times = 2;
    repeated Material recycle_material_list = 3;
}

message ReunionCookGetActivityReq {

    enum CmdId {
        CMD_ID = 4380;
    }
}


message ReunionCookGetActivityRsp {
    optional Retcode retcode = 1;
    optional ReunionCookActivity reunion_cook_activity = 2;

    enum CmdId {
        CMD_ID = 4381;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message ReunionCookHistory {
    optional uint32 book_id = 1;
    optional uint32 daily_num = 2;
    optional uint32 total_num = 3;
}




message ReunionCookMakeDinnerReq {
    optional uint32 book_id = 1;
    repeated Material recycle_material_list = 2;
    optional ReunionCookBookType book_type = 3;
    repeated ReunionCookData cook_data = 4;

    enum CmdId {
        CMD_ID = 4382;
    }
}


message ReunionCookMakeDinnerRsp {
    optional Retcode retcode = 1;
    optional uint32 book_id = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 4383;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        INVALID_BOOK_ID = 3;
        INVALID_MATERIAL = 4;
        MATERIAL_LACK = 5;
        TIMES_LIMIT = 6;
        DUPLICATE_BOOK_ID = 7;
    }
}

message ReunionCookTakeScoreRewardReq {

    enum CmdId {
        CMD_ID = 4384;
    }
}


message ReunionCookTakeScoreRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;

    enum CmdId {
        CMD_ID = 4385;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message RewardData {
    optional uint32 exp = 1;
    optional uint32 scoin = 2;
    optional uint32 hcoin = 3;
    optional uint32 stamina = 4;
    optional uint32 friends_point = 6;
    repeated RewardItemData item_list = 7;
    optional uint32 exp_convert_scoin = 9;
}

message RewardItemData {
    optional uint32 id = 1;
    optional uint32 level = 2;
    optional uint32 num = 3;
    optional uint32 split_fragment_num = 4;
}

message RewardLineActivity {
    optional uint32 id = 1;
    optional uint32 schedule_id = 2;
    optional uint32 score = 3;
    optional uint32 last_taken_reward_score = 4;
}

message RogueBuff {
    optional uint32 id = 1;
    optional uint32 level = 2;
    optional Type type = 3;

    enum Type {
        NORMAL = 1;
        SUPPORT_AVATAR = 2;
    }
}


message RogueStageAvatar {
    optional uint32 avatar_id = 1;
    optional uint32 position = 2;
    optional uint32 hp_percent = 3;
    optional uint32 sp_percent = 4;
    repeated RogueStageAvatarProp prop_list = 5;
}

message RogueStageAvatarProp {
    optional uint32 prop_id = 1;
    optional uint32 value = 2;
}

message RogueStageBeginReq {
    repeated uint32 avatar_id_list = 1;

    enum CmdId {
        CMD_ID = 281;
    }
}



message RogueStageBeginRsp {
    optional Retcode retcode = 1;
    optional uint32 energy = 2;
    optional uint32 random_seed = 3;
    repeated DropItem drop_item_list = 4;
    optional uint32 hard_level = 5;
    optional uint32 progress = 6;
    repeated RogueStageBuff buff_list = 7;

    enum CmdId {
        CMD_ID = 282;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_JOIN_ARMADA = 2;
        NOT_INIT = 3;
        ITEM_LACK = 4;
        AVATAR_DIE = 5;
        AVATAR_ERROR = 6;
        PROGRESS_FULL = 7;
        NOT_OPEN = 8;
    }
}

message RogueStageBuff {
    optional uint32 buff_id = 1;
    optional uint32 value = 2;
}





message RogueStageEndReq {
    optional StageEndStatus end_status = 1;
    repeated RogueStageAvatar avatar_list = 2;
    repeated DropItem drop_item_list = 3;
    optional uint32 energy = 4;
    repeated RogueStageBuff buff_list = 5;
    optional uint32 stage_pass_time = 6;

    enum CmdId {
        CMD_ID = 283;
    }
}



message RogueStageEndRsp {
    optional Retcode retcode = 1;
    optional StageEndStatus end_status = 2;
    repeated DropItem drop_item_list = 3;
    optional uint32 progress = 4;
    optional uint32 max_next_hard_level = 5;

    enum CmdId {
        CMD_ID = 284;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_BEGIN = 2;
        AVATAR_ERROR = 3;
        DROP_ERROR = 4;
        NOT_INIT = 5;
        ITEM_LACK = 6;
    }
}

enum RogueStageEnum {
    ROGUE_STAGE_HARD_LEVEL_NUM = 4;
    ROGUE_STAGE_AVATAR_POSITION_NUM = 9;
}

message RogueTowerGetActivityReq {
    optional uint32 id = 1;

    enum CmdId {
        CMD_ID = 4360;
    }
}



message RogueTowerGetActivityRsp {
    optional Retcode retcode = 1;
    optional uint32 id = 2;
    optional RogueTowerChallengeStatus challenge_status = 3;
    optional RogueTowerBuffStatus buff_status = 4;
    optional RogueTowerCandidate buff_candidate = 5;
    optional RogueTowerEndlessStatus endless_status = 6;
    repeated RogueTowerSnapshot save_list = 7;
    optional uint32 left_support_avatar_levelup_times = 8;

    enum CmdId {
        CMD_ID = 4361;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
    message WaitPool {
        optional uint32 pool_id = 1;
        optional uint32 left_times = 2;
    }
    message RandomSiteStage {
        optional uint32 site_id = 1;
        optional uint32 stage_id = 2;
    }
    message RogueTowerCandidate {
        optional uint32 cur_pool_id = 1;
        repeated uint32 cur_candidate_id_list = 3;
        repeated WaitPool wait_pool_list = 2;
    }
    message RogueTowerBuffStatus {
        optional uint32 refresh_buff_times = 1;
        repeated RogueBuff buff_list = 2;
    }
    message RogueTowerChallengeStatus {
        repeated ChallengeModeAvatar avatar_list = 1;
        optional bool is_challenge_fail = 2;
        optional uint32 cur_area_id = 3;
        repeated RandomSiteStage site_stage_list = 4;
    }
    message RogueTowerEndlessScore {
        optional uint32 avatar_id = 1;
        optional uint32 score = 2;
    }
    message RogueTowerEndlessStatus {
        optional uint32 endless_score = 1;
        optional uint32 last_settle_reward_score = 2;
        optional uint32 endless_floor = 3;
        repeated RogueTowerEndlessScore avatar_max_score_list = 4;
    }
    message RogueTowerSnapshot {
        optional uint32 stage_pass_count = 1;
        optional uint32 score = 2;
        repeated uint32 avatar_id_list = 3;
        repeated RogueBuff selected_buff_list = 4;
    }
}

message RogueTowerGetCandidateBuffReq {
    optional uint32 id = 1;
    optional uint32 pool_id = 2;

    enum CmdId {
        CMD_ID = 4362;
    }
}

message RogueTowerGetCandidateBuffRsp {
    optional Retcode retcode = 1;
    optional uint32 id = 2;
    optional uint32 pool_id = 3;
    repeated uint32 buff_id_list = 4;

    enum CmdId {
        CMD_ID = 4363;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_SELECT = 2;
        NO_LEFT_TIMES = 3;
    }
}

message RogueTowerGetRankReq {
    optional uint32 id = 1;
    optional uint32 avatar_id = 2;

    enum CmdId {
        CMD_ID = 4376;
    }
}


message RogueTowerGetRankRsp {
    optional Retcode retcode = 1;
    optional uint32 id = 2;
    optional uint32 avatar_id = 3;
    optional RankShowData rank_data = 4;

    enum CmdId {
        CMD_ID = 4377;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message RogueTowerLevelUpBuffReq {
    optional uint32 id = 1;
    optional uint32 buff_id = 2;

    enum CmdId {
        CMD_ID = 4370;
    }
}

message RogueTowerLevelUpBuffRsp {
    optional Retcode retcode = 1;
    optional uint32 id = 2;
    optional uint32 buff_id = 3;
    optional uint32 buff_level = 4;

    enum CmdId {
        CMD_ID = 4371;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_BUFF = 2;
        COIN_LACK = 3;
        LEVEL_LIMIT = 4;
    }
}

message RogueTowerLevelupSupportAvatarReq {
    optional uint32 id = 1;
    optional uint32 support_avatar_id = 2;

    enum CmdId {
        CMD_ID = 4374;
    }
}

message RogueTowerLevelupSupportAvatarRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4375;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LACK_TIMES = 2;
        MAX_LEVEL = 3;
        AVATAR_LOCKED = 4;
    }
}

message RogueTowerRefreshBuffReq {
    optional uint32 id = 1;

    enum CmdId {
        CMD_ID = 4368;
    }
}

message RogueTowerRefreshBuffRsp {
    optional Retcode retcode = 1;
    optional uint32 id = 2;

    enum CmdId {
        CMD_ID = 4369;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_LEFT_TIMES = 2;
        COIN_LACK = 3;
        NOT_IN_CANDIDATE = 4;
    }
}

message RogueTowerSaveReq {
    optional uint32 id = 1;
    optional uint32 index = 2;
    optional uint32 stage_pass_count = 3;
    optional uint32 score = 4;

    enum CmdId {
        CMD_ID = 4372;
    }
}

message RogueTowerSaveRsp {
    optional Retcode retcode = 1;
    optional uint32 id = 2;
    optional uint32 index = 3;

    enum CmdId {
        CMD_ID = 4373;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SAVE_LIMIT = 2;
    }
}

message RogueTowerSelectBuffReq {
    optional uint32 id = 1;
    optional uint32 buff_id = 2;

    enum CmdId {
        CMD_ID = 4364;
    }
}

message RogueTowerSelectBuffRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4365;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_CANDIDATE = 2;
    }
}

message RogueTowerSelectChallengeAvatarReq {
    optional uint32 id = 1;
    repeated uint32 avatar_id_list = 2;

    enum CmdId {
        CMD_ID = 4366;
    }
}

message RogueTowerSelectChallengeAvatarRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4367;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ALREADY_SELECTED = 2;
        AVATAR_ERROR = 3;
    }
}

message RoomChatParam {
    optional bool is_broadcast_msg = 1;
}

enum RoomClientStatus {
    ROOM_CLIENT_NONE = 0;
    ROOM_CLIENT_SELECTING_MAP = 1;
    ROOM_CLIENT_EQUIPING = 2;
}

enum RoomExitReason {
    ROOM_EXIT_NONE = 0;
    ROOM_EXIT_KICK = 1;
}


message RoomGetStatusReq {
    optional uint32 room_id = 1;
    optional RoomMember member_data = 2;

    enum CmdId {
        CMD_ID = 3181;
    }
}




message RoomGetStatusRsp {
    optional Retcode retcode = 1;
    optional PlayerRoomStatus player_room_status = 2;
    repeated RoomMember member_list = 3;
    optional RoomInfo room_info = 4;

    enum CmdId {
        CMD_ID = 3182;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TOO_FREQUENT = 2;
        ROOM_NOT_EXIST = 3;
    }
}

message RoomInfo {
    optional uint32 sub_type = 1;
    optional uint32 stage_id = 2;
}




message RoomInvitationNotify {
    optional uint32 target_uid = 1;
    optional RoomMode room_mode = 2;
    optional uint32 room_id = 3;
    optional RoomMember from_player = 4;
    optional RoomInfo room_info = 5;

    enum CmdId {
        CMD_ID = 3162;
    }
}

message RoomKickMemberReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 3175;
    }
}

message RoomKickMemberRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3176;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ROOM = 2;
        NOT_LEADER = 3;
        NO_TARGET = 4;
        SELF = 5;
    }
}

message RoomMatchTimeoutNotify {

    enum CmdId {
        CMD_ID = 3170;
    }
}



message RoomMember {
    optional uint32 uid = 1;
    optional string region_name = 2;
    optional string nickname = 3;
    optional uint32 level = 4;
    optional uint32 head_avatar_id = 5;
    optional uint32 frame_id = 6;
    optional uint32 dress_id = 7;
    optional RoomMemberStatus status = 8;
    optional MemberPosition position = 9;
    optional bytes mode_bytes = 10;
    optional uint32 custom_head_id = 11;
    optional RoomClientStatus client_status = 12;
    optional uint32 voice_id = 13;

    enum MemberPosition {
        NORMAL = 1;
        LEADER = 2;
    }
}

message RoomMemberSetVoiceIdReq {
    optional uint32 voice_id = 1;

    enum CmdId {
        CMD_ID = 3179;
    }
}

message RoomMemberSetVoiceIdRsp {
    optional Retcode retcode = 1;
    optional uint32 uid = 2;
    optional uint32 voice_id = 3;

    enum CmdId {
        CMD_ID = 3180;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ROOM = 2;
    }
}

enum RoomMemberStatus {
    ROOM_UNREADY = 1;
    ROOM_READY = 2;
    ROOM_IN_BATTLE = 3;
}

enum RoomMode {
    ROOM_MODE_INVALID = 0;
    ROOM_MODE_TVT = 1;
    ROOM_MODE_MASSIVE_WAR = 2;
    ROOM_MODE_QAVATAR_BATTLE = 3;
    ROOM_MODE_QCANDY_BATTLE = 4;
}



message RoomSwitchMemberStatusReq {
    optional RoomMemberStatus status = 1;
    optional RoomClientStatus client_status = 2;

    enum CmdId {
        CMD_ID = 3173;
    }
}

message RoomSwitchMemberStatusRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3174;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message RoomTransferLeaderReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 3177;
    }
}

message RoomTransferLeaderRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3178;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ROOM = 2;
        NOT_LEADER = 3;
        NO_TARGET = 4;
        SELF = 5;
    }
}

enum RoomType {
    ROOM_TYPE_HALL = 1;
    ROOM_TYPE_BEDROOM = 2;
}




message RpgDungeonActivity {
    optional uint32 id = 1;
    repeated RpgDungeonQuest quest_list = 2;
    repeated uint32 candidate_buff_id_list = 3;
    repeated RpgDungeonBuff buff_list = 4;
    repeated RpgDungeonBuffPool pool_list = 5;
}

message RpgDungeonBuff {
    optional uint32 buff_id = 1;
    optional uint32 buff_level = 2;
}

message RpgDungeonBuffPool {
    optional uint32 pool_id = 1;
    optional uint32 left_times = 2;
}

message RpgDungeonGetActivityReq {
    optional uint32 dungeon_id = 1;

    enum CmdId {
        CMD_ID = 5500;
    }
}


message RpgDungeonGetActivityRsp {
    optional Retcode retcode = 1;
    optional RpgDungeonActivity activity = 2;
    optional uint32 dungeon_id = 3;

    enum CmdId {
        CMD_ID = 5501;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message RpgDungeonGetCandidateBuffReq {
    optional uint32 dungeon_id = 1;
    optional uint32 pool_id = 2;

    enum CmdId {
        CMD_ID = 5504;
    }
}

message RpgDungeonGetCandidateBuffRsp {
    optional Retcode retcode = 1;
    optional uint32 dungeon_id = 2;
    optional uint32 pool_id = 3;
    repeated uint32 buff_id_list = 4;

    enum CmdId {
        CMD_ID = 5505;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_SELECT = 2;
        NO_LEFT_TIMES = 3;
    }
}

message RpgDungeonQuest {
    optional uint32 id = 1;
    repeated uint32 avatar_id_list = 2;
}

message RpgDungeonSelectBuffReq {
    optional uint32 dungeon_id = 1;
    optional uint32 buff_id = 2;

    enum CmdId {
        CMD_ID = 5506;
    }
}

message RpgDungeonSelectBuffRsp {
    optional Retcode retcode = 1;
    optional uint32 dungeon_id = 2;

    enum CmdId {
        CMD_ID = 5507;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_CANDIDATE = 2;
    }
}

message RpgDungeonSelectQuestReq {
    optional uint32 dungeon_id = 1;
    optional uint32 quest_id = 2;
    repeated uint32 avatar_id_list = 3;

    enum CmdId {
        CMD_ID = 5502;
    }
}

message RpgDungeonSelectQuestRsp {
    optional Retcode retcode = 1;
    optional uint32 dungeon_id = 2;

    enum CmdId {
        CMD_ID = 5503;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_MEET_TAG = 2;
        AVATAR_NOT_EXIST = 3;
        LOCKED = 4;
        SELECTED = 5;
    }
}

enum RpgScheduleRankType {
    RPG_SCHEDULE_RANK_COLLECTION = 1;
    RPG_SCHEDULE_RANK_GENERAL = 2;
}

message RpgTaleAbility {
    optional uint32 ability_id = 1;
    optional uint32 ability_level = 2;
}

message RpgTaleArea {
    optional uint32 area_id = 1;
}

enum RpgTaleCollectionRewardType {
    RPG_TALE_COLLECTION_REWARD_NONE = 0;
    RPG_TALE_COLLECTION_REWARD_QAVATAR_STAR = 1;
    RPG_TALE_COLLECTION_REWARD_EVENT = 2;
    RPG_TALE_COLLECTION_REWARD_SHOP = 3;
    RPG_TALE_COLLECTION_REWARD_TOTAL_STAGE_SCORE = 4;
    RPG_TALE_COLLECTION_REWARD_STAGE_CHALLENGE_NUM = 5;
    RPG_TALE_COLLECTION_REWARD_LINKED_ACTIVITY_SCORE = 6;
    RPG_TALE_COLLECTION_REWARD_STAGE_SCORE = 7;
}









message RpgTaleData {
    optional uint32 tale_id = 1;
    repeated RpgTaleSite site_list = 2;
    optional uint32 cur_site_id = 3;
    repeated uint32 reward_taken_collection_count_list = 4;
    optional uint32 end_time = 5;
    repeated uint32 finished_event_id_list = 8;
    repeated RpgTaleArea area_list = 9;
    repeated RpgTaleOverall overall_list = 10;
    optional uint32 schedule_id = 11;
    repeated RpgTaleStage stage_list = 12;
    repeated RpgTaleTotalScoreDrop total_score_drop_list = 13;
    repeated RpgTaleAbility ability_list = 14;
    optional uint32 site_refresh_num = 15;
    optional uint32 last_reset_site_refresh_num_time = 16;
    optional RpgTaleQAvatarBattle qavatar_battle = 17;
    repeated RpgTaleStageEnterTimesLimit stage_enter_times_limit_list = 18;
}


message RpgTaleEvent {
    optional uint32 event_id = 1;
    optional uint32 event_type = 2;
    repeated uint32 event_param_list = 3;
    optional RewardData reward_data = 4;
}


message RpgTaleEventNotify {
    optional RpgTaleEvent event_data = 1;
    optional uint32 tale_id = 2;

    enum CmdId {
        CMD_ID = 2312;
    }
}


message RpgTaleFlag {
    optional RpgTaleFlagType type = 1;
    repeated uint32 param_list = 2;
}

enum RpgTaleFlagType {
    RPG_TALE_FLAG_INVALID = 0;
    RPG_TALE_FLAG_MATERIAL = 1;
    RPG_TALE_FLAG_MISSION = 2;
    RPG_TALE_FLAG_DIALOG = 3;
    RPG_TALE_FLAG_ROLE = 4;
    RPG_TALE_FLAG_ROLE_STAR_NUM = 5;
    RPG_TALE_FLAG_BEGIN_TIME = 6;
    RPG_TALE_FLAG_END_TIME = 7;
    RPG_TALE_FLAG_PRE_SITE = 8;
    RPG_TALE_FLAG_MATERIAL_NUM = 9;
    RPG_TALE_FLAG_AVATAR = 10;
    RPG_TALE_FLAG_STAGE_CHALLENGE_NUM = 11;
    RPG_TALE_FLAG_PLAYER_LEVEL = 12;
    RPG_TALE_FLAG_OVERALL = 13;
    RPG_TALE_FLAG_TOTAL_STAGE_SCORE = 15;
    RPG_TALE_FLAG_STAGE_SCORE = 16;
    RPG_TALE_FLAG_ABILITY_LEVEL = 17;
    RPG_TALE_FLAG_ABILITY_TOTAL_LEVEL = 18;
    RPG_TALE_FLAG_SITE_ALLOW_ENTER = 19;
    RPG_TALE_FLAG_SITE_STATUS = 20;
    RPG_TALE_FLAG_DROP_LIMIT = 21;
    RPG_TALE_FLAG_IS_STAGE_PASSED = 22;
}

message RpgTaleGetPvpDivisionRewardReq {
    optional uint32 tale_id = 1;

    enum CmdId {
        CMD_ID = 2392;
    }
}


message RpgTaleGetPvpDivisionRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 tale_id = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 2393;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ALREADY_TAKEN = 2;
    }
}

message RpgTaleLevelUpAbilityReq {
    optional uint32 tale_id = 1;
    optional uint32 ability_id = 2;
    optional uint32 target_level = 3;

    enum CmdId {
        CMD_ID = 2382;
    }
}


message RpgTaleLevelUpAbilityRsp {
    optional Retcode retcode = 1;
    optional uint32 tale_id = 2;
    optional uint32 ability_id = 3;
    repeated RpgTaleFlag limit_flag_list = 4;

    enum CmdId {
        CMD_ID = 2383;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TARGET_LEVEL_ERROR = 2;
        MATERIAL_LACK = 3;
        FLAG_LIMIT = 4;
        ABILITY_ERROR = 5;
    }
}

enum RpgTaleLinkedActivityType {
    RPG_TALE_LINKED_NONE = 0;
    RPG_TALE_LINKED_ROGUE_TOWER = 1;
    RPG_TALE_LINKED_NEWBIE = 2;
    RPG_TALE_LINKED_RPG_DUNGEON = 3;
    RPG_TALE_LINKED_RANCH = 4;
    RPG_TALE_LINKED_RESTAURANT = 5;
    RPG_TALE_LINKED_TOWN = 6;
    RPG_TALE_LINKED_MONSTER_CARD = 7;
    RPG_TALE_LINKED_DICEY_DUNGEON = 8;
    RPG_TALE_LINKED_PVZ = 9;
    RPG_TALE_LINKED_QCANDY_BATTLE = 10;
}

message RpgTaleOverall {
    optional uint32 overall_id = 1;
    optional uint32 value = 2;
}

enum RpgTaleOverallCmpType {
    RPG_TALE_CMP_INVALID = 0;
    RPG_TALE_CMP_LESS = 1;
    RPG_TALE_CMP_LESS_OR_EQUAL = 2;
    RPG_TALE_CMP_EQUAL = 3;
    RPG_TALE_CMP_GREATER = 4;
    RPG_TALE_CMP_GREATER_OR_EQUAL = 5;
}

enum RpgTaleOverallRefreshType {
    RPG_TALE_OVERALL_REFRESH_NONE = 0;
    RPG_TALE_OVERALL_REFRESH_DAILY = 1;
    RPG_TALE_OVERALL_REFRESH_WEEKLY = 2;
}

message RpgTaleProgress {
    optional uint32 id = 1;
    optional uint32 progress = 2;
}

enum RpgTaleProgressType {
    RPG_TALE_PROGRESS_NONE = 0;
    RPG_TALE_PROGRESS_EVENT = 1;
    RPG_TALE_PROGRESS_TOWER = 2;
    RPG_TALE_PROGRESS_GENERAL_ACTIVITY = 3;
    RPG_TALE_PROGRESS_STAGE_SCORE = 4;
}


message RpgTaleQAvatarBattle {
    optional uint32 cur_score = 1;
    optional uint32 has_take_reward_score = 2;
    optional uint32 choose_virtual_avatar_id = 3;
    optional uint32 win_num = 4;
    optional uint32 win_streak = 5;
    optional uint32 virtual_avatar_drop_num = 6;
    repeated RpgTaleQAvatarSettleGotMaterial got_material_list = 7;
}

message RpgTaleQAvatarSettleGotMaterial {
    optional uint32 material_id = 1;
    optional uint32 material_num = 2;
}

message RpgTaleRefreshSiteReq {
    optional uint32 tale_id = 1;

    enum CmdId {
        CMD_ID = 2388;
    }
}

message RpgTaleRefreshSiteRsp {
    optional Retcode retcode = 1;
    optional uint32 tale_id = 2;

    enum CmdId {
        CMD_ID = 2389;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HCOIN_LACK = 2;
        MATERIAL_LACK = 3;
        REFRESH_TIME_LACK = 4;
        SITE_NOT_FINISH = 5;
    }
}

message RpgTaleRefreshTicketReq {
    optional uint32 tale_id = 1;

    enum CmdId {
        CMD_ID = 2380;
    }
}


message RpgTaleRefreshTicketRsp {
    optional Retcode retcode = 1;
    optional uint32 tale_id = 2;
    repeated RpgTaleTicketRefreshInfo ticket_refresh_list = 3;

    enum CmdId {
        CMD_ID = 2381;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message RpgTaleResetTowerReq {
    optional uint32 tale_id = 1;

    enum CmdId {
        CMD_ID = 2384;
    }
}

message RpgTaleResetTowerRsp {
    optional Retcode retcode = 1;
    optional uint32 tale_id = 2;

    enum CmdId {
        CMD_ID = 2385;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

enum RpgTaleRoleStatus {
    RPG_TALE_ROLE_STATUS_INVALID = 0;
    RPG_TALE_ROLE_STATUS_LOCKED = 1;
    RPG_TALE_ROLE_STATUS_UNLOCKED = 2;
    RPG_TALE_ROLE_STATUS_AWAY = 3;
}

message RpgTaleSetOverallReq {
    optional uint32 tale_id = 1;
    optional uint32 overall_id = 2;
    optional uint32 value = 3;

    enum CmdId {
        CMD_ID = 2386;
    }
}

message RpgTaleSetOverallRsp {
    optional Retcode retcode = 1;
    optional uint32 tale_id = 2;
    optional uint32 overall_id = 3;

    enum CmdId {
        CMD_ID = 2387;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message RpgTaleSetPvpVirtualAvatarReq {
    optional uint32 tale_id = 1;
    optional uint32 virtual_avatar_id = 2;

    enum CmdId {
        CMD_ID = 2390;
    }
}

message RpgTaleSetPvpVirtualAvatarRsp {
    optional Retcode retcode = 1;
    optional uint32 tale_id = 2;
    optional uint32 virtual_avatar_id = 3;

    enum CmdId {
        CMD_ID = 2391;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
    }
}





message RpgTaleSite {
    optional uint32 site_id = 1;
    optional uint32 area_id = 2;
    optional RpgTaleSiteStatus status = 3;
    optional RpgTaleSiteContentType content_type = 4;
    optional string content_param = 5;
    repeated uint32 finished_matrix_event_id_list = 6;
    optional uint32 event_type = 7;
    optional uint32 event_param = 8;
    optional RpgTaleProgress cur_progress = 9;
    optional uint32 pass_times = 10;
    optional uint32 status_end_time = 11;
    optional uint32 close_time = 12;
    repeated RpgTaleFlag unlock_limit_flag_list = 13;
}

enum RpgTaleSiteContentType {
    RPG_TALE_SITE_CONTENT_INVALID = 0;
    RPG_TALE_SITE_CONTENT_NONE = 1;
    RPG_TALE_SITE_CONTENT_MATRIX = 2;
    RPG_TALE_SITE_CONTENT_PLOT = 3;
    RPG_TALE_SITE_CONTENT_TIPS = 4;
    RPG_TALE_SITE_CONTENT_LINK = 5;
}

enum RpgTaleSiteStatus {
    RPG_TALE_SITE_STATUS_INVALID = 0;
    RPG_TALE_SITE_STATUS_HIDE = 1;
    RPG_TALE_SITE_STATUS_SHOW = 2;
    RPG_TALE_SITE_STATUS_CONTENT_UNLOCKED = 3;
    RPG_TALE_SITE_STATUS_PASSED = 4;
    RPG_TALE_SITE_STATUS_CLOSED = 5;
    RPG_TALE_SITE_STATUS_CD = 6;
    RPG_TALE_SITE_STATUS_DISCARD = 7;
}

enum RpgTaleSiteType {
    RPG_TALE_SITE_TYPE_STORY = 1;
    RPG_TALE_SITE_TYPE_CLUE = 2;
    RPG_TALE_SITE_TYPE_CYCLE = 3;
    RPG_TALE_SITE_TYPE_RANK = 4;
    RPG_TALE_SITE_TYPE_ENDLESS = 5;
}


message RpgTaleStage {
    optional uint32 stage_id = 1;
    optional uint32 max_floor = 2;
    optional uint32 max_score = 3;
    optional RpgTaleStageScoreDrop score_drop = 5;
}

message RpgTaleStageEnterTimesLimit {
    optional uint32 limit_id = 1;
    optional uint32 enter_times = 2;
}

message RpgTaleStageScoreDrop {
    optional uint32 total_num = 1;
    optional uint32 daily_num = 2;
}

message RpgTaleSweepReq {
    optional uint32 stage_id = 1;
    optional uint32 times = 2;
    optional uint32 tale_id = 3;

    enum CmdId {
        CMD_ID = 2376;
    }
}


message RpgTaleSweepRsp {
    optional Retcode retcode = 1;
    optional uint32 stage_id = 2;
    optional uint32 times = 3;
    optional RewardData reward_data = 4;
    optional uint32 tale_id = 5;
    optional uint32 max_floor = 6;

    enum CmdId {
        CMD_ID = 2377;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LACK_MATERIAL = 2;
        STAGE_ERROR = 3;
        NO_REWARD = 4;
        ENTER_TIMES_LACK = 5;
        CHALLENGE_NUM_LACK = 6;
    }
}

message RpgTaleSwitchData {
    optional uint32 tale_id = 1;
    optional uint32 site_id = 2;
}

message RpgTaleTicketRefreshInfo {
    optional uint32 ticket_id = 1;
    optional uint32 material_id = 2;
    optional uint32 add_num = 3;
}

enum RpgTaleTicketRefreshType {
    RPG_TALE_TICKET_REFRESH_DAILY = 1;
    RPG_TALE_TICKET_REFRESH_WEEKLY = 2;
    RPG_TALE_TICKET_REFRESH_CUSTOM = 3;
    RPG_TALE_TICKET_REFRESH_DAILY_WITH_STORAGE = 4;
}

message RpgTaleTotalScoreDrop {
    optional uint32 material_id = 1;
    optional uint32 daily_num = 2;
}

message SanctuaryActivityData {
    optional uint32 activity_id = 1;
    optional uint32 level = 2;
    optional uint32 exp = 3;
    optional uint32 has_take_reward_level = 4;
    optional uint32 product_counter_time = 5;
    optional uint32 product_storage_num = 6;
    optional bool is_init = 7;
    optional uint32 player_level_group_id = 8;
    repeated uint32 stage_id_list = 9;
    optional bool is_new_stage = 10;
}

message SanctuaryGetMainInfoReq {

    enum CmdId {
        CMD_ID = 4305;
    }
}


message SanctuaryGetMainInfoRsp {
    optional Retcode retcode = 1;
    optional SanctuaryActivityData activity_data = 2;
    optional uint32 begin_time = 3;
    optional uint32 end_time = 4;

    enum CmdId {
        CMD_ID = 4306;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message SanctuaryStageEndNotify {
    optional uint32 total_add_exp = 1;
    optional uint32 bonus_add_exp = 2;
    optional uint32 old_level = 3;
    optional uint32 old_exp = 4;

    enum CmdId {
        CMD_ID = 4314;
    }
}

message SanctuaryStartNotify {

    enum CmdId {
        CMD_ID = 4311;
    }
}

message SanctuaryTakeLevelRewardReq {

    enum CmdId {
        CMD_ID = 4307;
    }
}


message SanctuaryTakeLevelRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 has_take_reward_level = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 4308;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message SanctuaryTakeProductReq {

    enum CmdId {
        CMD_ID = 4309;
    }
}


message SanctuaryTakeProductRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;

    enum CmdId {
        CMD_ID = 4310;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message ScDLCAchievement {
    optional uint32 mission_id = 1;
    optional uint32 finish_time = 2;
}

message ScDLCActiveFeverAbilityReq {
    repeated uint32 ability_group_id_list = 1;

    enum CmdId {
        CMD_ID = 6345;
    }
}

message ScDLCActiveFeverAbilityRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 6346;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVE_NUM_LIMIT = 2;
        ACTIVE_LIST_EMPTY = 3;
        GROUP_INVALID = 4;
    }
}


message ScDLCAvatar {
    optional uint32 avatar_id = 1;
    optional uint32 level = 2;
    repeated ScDLCTalent talent_list = 3;
    repeated uint32 equip_talent_list = 4;
}


message ScDLCDailyQuestData {
    repeated OpenworldQuest quest_list = 1;
    optional uint32 left_accept_times = 2;
    optional uint32 refresh_left_times = 3;
    optional uint32 refresh_cost_material_id = 4;
    optional uint32 refresh_cost_material_num = 5;
}


message ScDLCFever {
    optional uint32 level = 1;
    optional uint32 exp = 2;
    optional uint32 fever_slot_num = 3;
    optional uint32 has_take_reward_level = 4;
    repeated FeverSkillSuite skill_suite_list = 5;
    optional uint32 active_suite_id = 6;
}


message ScDLCMpAvatar {
    optional uint32 sc_dlc_avatar_id = 1;
    repeated ScDLCMpTalent talent_list = 2;
    repeated uint32 equip_talent_list = 3;
}

message ScDLCMpTalent {
    optional uint32 talent_id = 1;
    optional uint32 talent_level = 2;
}

message ScDLCReviveAvatarReq {
    optional uint32 avatar_id = 1;

    enum CmdId {
        CMD_ID = 6341;
    }
}

message ScDLCReviveAvatarRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 6342;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_ERROR = 2;
        MATERIAL_LACK = 3;
    }
}

message ScDLCStatus {
    optional uint32 sc_dlc_fever_score = 1;
    optional uint32 sc_dlc_climax_score = 2;
}

message ScDLCSupportNPC {
    optional uint32 npc_id = 1;
    optional uint32 exp = 2;
    optional uint32 level = 3;
}

message ScDLCSweepTowerReq {

    enum CmdId {
        CMD_ID = 6347;
    }
}


message ScDLCSweepTowerRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 6348;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CANNOT_SWEEP = 2;
    }
}

message ScDLCTalent {
    optional uint32 talent_id = 1;
    optional uint32 talent_level = 2;
}

message ScDLCTowerAvatarInfo {
    optional uint32 avatar_id = 1;
    optional uint32 hp_percent = 2;
    optional uint32 sp_percent = 3;
}

message ScDLCTowerReviveAvatarReq {

    enum CmdId {
        CMD_ID = 6343;
    }
}

message ScDLCTowerReviveAvatarRsp {
    optional Retcode retcode = 1;
    optional uint32 revive_times = 2;

    enum CmdId {
        CMD_ID = 6344;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        REVIVE_TIMES_LACK = 2;
        NOT_IN_TOWER = 3;
        MATERIAL_LACK = 4;
    }
}


message ScDLCTowerScheduleRewardNotify {
    optional uint32 score = 1;
    optional RewardData reward_data = 2;

    enum CmdId {
        CMD_ID = 6340;
    }
}

message ScDLCTowerStageBeginReq {
    repeated uint32 avatar_id_list = 1;
    optional uint32 support_avatar_id = 2;

    enum CmdId {
        CMD_ID = 6334;
    }
}

message ScDLCTowerStageBeginRsp {
    optional Retcode retcode = 1;
    optional uint32 cur_floor = 2;

    enum CmdId {
        CMD_ID = 6335;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_BEGIN = 2;
        PROGRESS_FULL = 3;
        AVATAR_ERROR = 4;
        AVATAR_DIE = 5;
        NOT_OPEN = 6;
        SUPPORT_AVATAR_ERROR = 7;
        FLOOR_ERROR = 8;
        STORY_NOT_FINISH = 9;
    }
}




message ScDLCTowerStageEndReq {
    optional StageEndStatus end_status = 1;
    optional uint32 floor = 2;
    optional uint32 score = 3;
    repeated ScDLCTowerAvatarInfo avatar_info_list = 4;
    repeated DropItem drop_item_list = 5;
    optional uint32 sc_dlc_fever_score = 6;
    optional uint32 sc_dlc_climax_score = 7;

    enum CmdId {
        CMD_ID = 6336;
    }
}


message ScDLCTowerStageEndRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;
    optional uint32 score = 3;
    optional uint32 floor = 4;
    optional uint32 settle_floor = 5;

    enum CmdId {
        CMD_ID = 6337;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_BEGIN = 2;
        FLOOR_ERROR = 3;
        AVATAR_ERROR = 4;
    }
}


message ScheduledMapSiteActivity {
    repeated GeneralActivityStageGroupScheduleInfo stage_group_schedule_list = 1;
    optional uint32 enter_times = 2;
}

message ScoinExchangeReq {
    optional uint32 purple_jade_num = 1;

    enum CmdId {
        CMD_ID = 14;
    }
}

message ScoinExchangeRsp {
    optional Retcode retcode = 1;
    optional uint32 hcoin_cost = 2;
    optional uint32 scoin_get = 3;
    optional uint32 boost_rate = 4;
    optional uint32 purple_jade_cost = 5;

    enum CmdId {
        CMD_ID = 15;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HCOIN_LACK = 2;
        TIMES_LACK = 3;
        LACK_PURPLE_JADE = 4;
    }
}

message ScratchReq {
    optional uint32 x_pos = 1;
    optional uint32 y_pos = 2;
    optional uint32 activity_id = 3;

    enum CmdId {
        CMD_ID = 4152;
    }
}

message ScratchRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;

    enum CmdId {
        CMD_ID = 4153;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        POS_ERROR = 3;
        POS_REPEAT = 4;
        MATERIAL_LACK = 5;
    }
}

message ScratchTicketPoint {
    optional uint32 x_pos = 1;
    optional uint32 y_pos = 2;
    optional uint32 ticket_item_id = 3;
}


message SealedMatchPlayer {
    optional uint32 uid = 1;
    optional string name = 2;
    optional uint32 player_level = 3;
    optional uint32 avatar_id = 4;
    optional SealedPlayerRankLevel rank_level = 5;
}

message SealedModeAbandonTicketReq {

    enum CmdId {
        CMD_ID = 742;
    }
}

message SealedModeAbandonTicketRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 743;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_TICKET_USED = 2;
        NO_TIMES_USED = 3;
        NOT_SETTLED = 4;
    }
}

message SealedModeBattleBeginNotify {
    optional uint32 begin_time = 1;
    optional uint32 round = 2;

    enum CmdId {
        CMD_ID = 719;
    }
}

message SealedModeCancelMatchReq {

    enum CmdId {
        CMD_ID = 705;
    }
}

message SealedModeCancelMatchRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 706;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message SealedModeEvent {
    optional uint32 open_time = 1;
    optional uint32 close_time = 2;
    optional uint32 event_id = 3;
}

message SealedModeExchangeAvatarReq {
    optional uint32 index_lhs = 1;
    optional uint32 index_rhs = 2;

    enum CmdId {
        CMD_ID = 707;
    }
}


message SealedModeExchangeAvatarRsp {
    optional Retcode retcode = 1;
    repeated AvatarSuite avatar_suite_list = 2;

    enum CmdId {
        CMD_ID = 708;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message SealedModeExchangeEquipReq {
    optional SealedModeEquip equip_from = 1;
    optional SealedModeEquip equip_to = 2;

    enum CmdId {
        CMD_ID = 732;
    }
    message SealedModeEquip {
        optional uint32 index = 1;
        optional uint32 avatar_object_id = 2;
        optional EquipmentSlot slot = 3;
        optional uint32 equip_object_id = 4;
    }
}


message SealedModeExchangeEquipRsp {
    optional Retcode retcode = 1;
    repeated AvatarSuite avatar_suite_list = 2;

    enum CmdId {
        CMD_ID = 733;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message SealedModeGetMatchInfoReq {

    enum CmdId {
        CMD_ID = 703;
    }
}



message SealedModeGetMatchInfoRsp {
    optional Retcode retcode = 1;
    optional SealedModeMatchInfo match_info = 2;
    repeated SealedMatchPlayer match_player_list = 3;

    enum CmdId {
        CMD_ID = 704;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_MATCH_ROOM = 2;
    }
}

message SealedModeGetPlayerStatusReq {

    enum CmdId {
        CMD_ID = 720;
    }
}



message SealedModeGetPlayerStatusRsp {
    optional Retcode retcode = 1;
    optional SealedModePlayerStatus status = 2;
    optional SealedModeMatchInfo match_info = 3;

    enum CmdId {
        CMD_ID = 721;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message SealedModeGetRankInfoReq {
    optional uint32 unique_ticket_id = 1;

    enum CmdId {
        CMD_ID = 724;
    }
}



message SealedModeGetRankInfoRsp {
    optional Retcode retcode = 1;
    optional SealedPlayerRankLevel rank_level = 2;
    repeated SealedModeRoundRank round_rank_list = 3;
    repeated uint32 reward_taken_level_list = 4;

    enum CmdId {
        CMD_ID = 725;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message SealedModeGetTotalRewardScoreInfoReq {

    enum CmdId {
        CMD_ID = 738;
    }
}

message SealedModeGetTotalRewardScoreInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 total_reward_score = 2;
    repeated uint32 reward_taken_total_score_list = 3;

    enum CmdId {
        CMD_ID = 739;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message SealedModeMatchInfo {
    optional uint32 event_id = 1;
    optional uint32 match_begin_time = 2;
}


message SealedModePlayerScoreNotify {
    repeated SealedRoomPlayer player_list = 1;

    enum CmdId {
        CMD_ID = 711;
    }
}

enum SealedModePlayerStatus {
    SEALED_MODE_PLAYER_STATUS_NONE = 0;
    SEALED_MODE_PLAYER_STATUS_IN_MATCH = 1;
    SEALED_MODE_PLAYER_STATUS_IN_ROOM = 2;
}


message SealedModeRankLevelRewardNotify {
    optional uint32 rank_level = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 726;
    }
}


message SealedModeReceiveItemNotify {
    optional SealedModeUseItem item = 1;

    enum CmdId {
        CMD_ID = 712;
    }
}

message SealedModeRoundRank {
    optional uint32 round = 1;
    optional uint32 rank = 2;
}


message SealedModeSelectionNotify {
    optional SealedSuiteSelection selection_suite = 1;

    enum CmdId {
        CMD_ID = 729;
    }
}


message SealedModeSelectReq {
    optional SealedSuiteSelectionStep step = 1;
    optional uint32 index = 2;
    optional uint32 id = 3;

    enum CmdId {
        CMD_ID = 730;
    }
}

message SealedModeSelectRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 731;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message SealedModeSettleNotify {
    repeated SealedSettleInfo settle_info_list = 1;
    optional uint32 round = 2;

    enum CmdId {
        CMD_ID = 717;
    }
}

enum SealedModeStageType {
    SEALED_MODE_PRACTICE = 1;
    SEALED_MODE_SP = 2;
    SEALED_MODE_MP = 3;
}



message SealedModeStartMatchReq {
    optional uint32 event_id = 1;
    optional SealedMatchPlayer player = 2;
    optional double elo_score = 3;
    optional uint32 ticket_id = 4;
    optional uint32 round = 5;
    optional uint32 rank_level = 6;
    optional uint32 rank_star = 7;
    optional uint32 ticket_time = 8;
    repeated AvatarSuite avatar_suite_list = 9;

    enum CmdId {
        CMD_ID = 701;
    }
}

message SealedModeStartMatchRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 702;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_BEGUN = 2;
    }
}

message SealedModeStartNewSelectionReq {

    enum CmdId {
        CMD_ID = 727;
    }
}

message SealedModeStartNewSelectionRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 728;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        IS_SELECTING = 2;
        IS_FINISH = 3;
    }
}

message SealedModeStartSelectionReq {

    enum CmdId {
        CMD_ID = 598;
    }
}

message SealedModeStartSelectionRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 599;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        IS_SELECTING = 2;
        AVATAR_FULL = 3;
    }
}

message SealedModeSyncLevelInfoReq {
    optional uint32 seq = 1;
    optional uint32 level = 2;
    repeated uint32 block_item_unique_id_list = 3;

    enum CmdId {
        CMD_ID = 715;
    }
}


message SealedModeSyncLevelInfoRsp {
    optional Retcode retcode = 1;
    optional uint32 level = 2;
    repeated SealedModeUseItem use_item_list = 3;
    optional uint32 seq = 4;

    enum CmdId {
        CMD_ID = 716;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message SealedModeTakeTotalScoreRewardReq {
    optional uint32 total_score = 1;

    enum CmdId {
        CMD_ID = 740;
    }
}


message SealedModeTakeTotalScoreRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 total_score = 2;
    repeated RewardData reward_data_list = 3;

    enum CmdId {
        CMD_ID = 741;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TOTAL_SCORE_LACK = 2;
        NO_REWARD = 3;
        HAVE_TAKEN = 4;
    }
}


message SealedModeUpdateCheatDataReq {
    optional uint32 stage_id = 1;
    optional uint32 event_id = 2;
    repeated StageCheatData cheat_data_list = 3;

    enum CmdId {
        CMD_ID = 734;
    }
}

message SealedModeUpdateCheatDataRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 735;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message SealedModeUpdateScoreReq {
    optional uint32 level = 1;
    optional uint32 score = 2;

    enum CmdId {
        CMD_ID = 709;
    }
}

message SealedModeUpdateScoreRsp {
    optional Retcode retcode = 1;
    optional uint32 level = 2;
    optional uint32 score = 3;

    enum CmdId {
        CMD_ID = 710;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STATE_MISMATCH = 2;
    }
}

message SealedModeUseItem {
    optional uint32 unique_id = 1;
    optional uint32 item_id = 2;
    optional uint32 from_uid = 3;
    optional uint32 to_uid = 4;
}

message SealedModeUseItemReq {
    optional uint32 item_id = 1;
    repeated uint32 to_uid_list = 2;

    enum CmdId {
        CMD_ID = 713;
    }
}

message SealedModeUseItemRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 714;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message SealedModeUseTicketReq {

    enum CmdId {
        CMD_ID = 722;
    }
}

message SealedModeUseTicketRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 723;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_LEFT_TIMES = 2;
    }
}

message SealedModeWinBattleReq {
    optional uint32 level = 1;
    optional uint32 score = 2;

    enum CmdId {
        CMD_ID = 736;
    }
}

message SealedModeWinBattleRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 737;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message SealedModeWinnerNotify {
    optional uint32 uid = 1;
    optional uint32 end_time = 2;

    enum CmdId {
        CMD_ID = 718;
    }
}

message SealedPlayerRankLevel {
    optional uint32 rank_level = 1;
    optional uint32 rank_star = 2;
}

message SealedRoomPlayer {
    optional uint32 uid = 1;
    optional uint32 level = 2;
    optional uint32 score = 3;
    optional uint32 rank = 4;
}


message SealedSettleInfo {
    optional uint32 uid = 1;
    optional uint32 level = 2;
    optional uint32 score = 3;
    optional uint32 time_cost = 4;
    optional uint32 bonus_points = 5;
    optional uint32 total_bonus_points = 6;
    repeated AvatarSuite avatar_suite_list = 7;
}




message SealedSuiteSelection {
    optional SealedSuiteSelectionStatus status = 1;
    optional uint32 begin_time = 2;
    optional SealedSuiteSelectionStep step = 3;
    repeated uint32 choice_list = 4;
    repeated AvatarSuite avatar_suite_list = 5;
}

enum SealedSuiteSelectionStatus {
    SEALED_SUITE_SELECTION_STATUS_NONE = 0;
    SEALED_SUITE_SELECTION_STATUS_ING = 1;
    SEALED_SUITE_SELECTION_STATUS_FINISH = 2;
}

enum SealedSuiteSelectionStep {
    SEALED_SUITE_SELECTION_STEP_NONE = 0;
    SEALED_SUITE_SELECTION_STEP_AVATAR = 1;
    SEALED_SUITE_SELECTION_STEP_WEAPON = 2;
    SEALED_SUITE_SELECTION_STEP_STIGMATA = 3;
}

message SearchArmadaReq {
    optional string name = 1;
    repeated uint32 label_id_list = 2;

    enum CmdId {
        CMD_ID = 2605;
    }
}


message SearchArmadaRsp {
    optional Retcode retcode = 1;
    repeated ArmadaBriefData armada_list = 2;

    enum CmdId {
        CMD_ID = 2606;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

enum SecurityEngineCheckType {
    SECURITY_ENGINE_CHECK_NONE = 0;
    SECURITY_ENGINE_CHECK_LOGIN = 1;
    SECURITY_ENGINE_CHECK_STAGE = 2;
}

enum SecurityPasswordDeviceStatus {
    SECURITY_PASSWORD_DEVICE_UNLOCKED = 0;
    SECURITY_PASSWORD_DEVICE_LOCKED = 1;
}

message SecurityPasswordInfo {
    optional int32 remain_fail_times = 1;
}


message SecurityPasswordOpReq {
    optional string password = 1;
    optional SecurityPasswordOpType op_type = 2;
    repeated uint32 para_list = 3;

    enum CmdId {
        CMD_ID = 5029;
    }
}



message SecurityPasswordOpRsp {
    optional Retcode retcode = 1;
    optional SecurityPasswordOpType op_type = 2;
    optional SecurityPasswordInfo security_password_info = 3;

    enum CmdId {
        CMD_ID = 5030;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TOO_MANY_FAILS = 2;
        WRONG_PASSWORD = 3;
    }
}

enum SecurityPasswordOpType {
    SECURITY_PASSWORD_NONE_OP = 0;
    SECURITY_PASSWORD_FAST_UNPROTECT_WEAPON = 1;
    SECURITY_PASSWORD_FAST_UNPROTECT_STIGMATA = 2;
}

message SecurityPasswordRejectionNotify {

    enum CmdId {
        CMD_ID = 5033;
    }
}

enum SecurityPasswordStatus {
    SECURITY_PASSWORD_NOT_SET = 0;
    SECURITY_PASSWORD_IS_SET = 1;
    SECURITY_PASSWORD_TOO_MANY_FAILS = 2;
}

message SelectAdventureQuestReq {
    optional uint32 pool_id = 1;
    repeated uint32 avatar_list = 2;
    optional uint32 elf_id = 3;

    enum CmdId {
        CMD_ID = 3902;
    }
}

message SelectAdventureQuestRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3903;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_FINISHED = 2;
        HAS_TAKE = 3;
        LACK_GRAIN = 4;
        LACK_STAMINA = 5;
        AVATAR_LOCK = 6;
        AVATAR_IN_QUEST = 7;
        AVATAR_NUM_ERROR = 8;
        ELF_LOCK = 9;
        ELF_IN_QUEST = 10;
        SKILL_LACK = 11;
    }
}

message SelectAvatarEquipSuiteReq {
    optional uint32 avatar_id = 1;
    optional uint32 suite_id = 2;

    enum CmdId {
        CMD_ID = 1458;
    }
}

message SelectAvatarEquipSuiteRsp {
    optional Retcode retcode = 1;
    optional uint32 succ_num = 2;
    optional uint32 suite_id = 3;

    enum CmdId {
        CMD_ID = 1459;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_LOCK = 2;
        SLOT_WEAPON = 3;
        SLOT_STIGMATA_1 = 4;
        SLOT_STIGMATA_2 = 5;
        SLOT_STIGMATA_3 = 6;
    }
}

message SelectAvatarSuiteReq {
    optional uint32 sys_id = 1;
    optional uint32 step = 2;
    optional uint32 index = 3;
    optional uint32 id = 4;

    enum CmdId {
        CMD_ID = 580;
    }
}

message SelectAvatarSuiteRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 581;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message SelectDLCTalentAffixReq {
    optional uint32 avatar_id = 1;
    optional uint32 talent_id = 2;
    optional bool is_select = 3;

    enum CmdId {
        CMD_ID = 3584;
    }
}

message SelectDLCTalentAffixRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3585;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_NEW_AFFIX = 2;
    }
}

message SelectGodWarChallengeAvatarReq {
    optional uint32 god_war_id = 1;
    optional uint32 tale_id = 2;
    repeated uint32 avatar_id_list = 3;
    repeated uint32 support_avatar_id_list = 4;
    optional uint32 elf_id = 5;
    optional uint32 extra_item_id = 6;
    optional bool is_use_virtual_avatar = 7;
    repeated uint32 boon_buff_id_list = 8;
    optional uint32 step_level = 9;
    optional uint32 assistant_extra_item_id = 10;

    enum CmdId {
        CMD_ID = 6152;
    }
}

message SelectGodWarChallengeAvatarRsp {
    optional Retcode retcode = 1;
    optional uint32 god_war_id = 2;
    optional uint32 tale_id = 3;

    enum CmdId {
        CMD_ID = 6153;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ALREADY_SELECTED = 2;
        AVATAR_ERROR = 3;
        SUPPORT_AVATAR_ERROR = 4;
        ELF_ERROR = 5;
        AVATAR_SCHEDULE_ERROR = 6;
        PUNISH_BUFF_ERROR = 7;
        FEATURE_CLOSE = 8;
        FORCE_SETTLE = 9;
        NOT_OPEN = 10;
        BOON_BUFF_ERROR = 11;
        AVATAR_MISSION_NOT_FINISH = 12;
        EXTRA_ITEM_ERROR = 13;
    }
}


message SelectNewStigmataRuneReq {
    optional uint32 unique_id = 1;
    optional bool is_select = 2;
    optional StigmataRefineTimesType times_type = 3;
    optional uint32 select_unique_id = 4;

    enum CmdId {
        CMD_ID = 195;
    }
}

message SelectNewStigmataRuneRsp {
    optional Retcode retcode = 1;
    optional uint32 select_unique_id = 2;
    optional bool is_select = 3;

    enum CmdId {
        CMD_ID = 196;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STIGMATA_NOT_EXIST = 2;
        NO_NEW_RUNE = 3;
        SELECT_EMPTY = 4;
        NOT_OPEN = 5;
        TOO_FAST = 6;
    }
}


message SellAvatarFragmentReq {
    repeated AvatarFragment fragment_list = 1;

    enum CmdId {
        CMD_ID = 102;
    }
}

message SellAvatarFragmentRsp {
    optional Retcode retcode = 1;
    optional uint32 scoin_add = 2;

    enum CmdId {
        CMD_ID = 103;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FRAGMENT_NOT_ENOUGH = 2;
    }
}

enum SellCurrencyType {
    SELL_CURRENCY_TYPE_NONE = 0;
    SELL_CURRENCY_TYPE_SCOIN = 1;
    SELL_CURRENCY_TYPE_PURPLE_JADE = 5;
}


message SendArmadaSystemChatMsgNotify {
    optional ArmadaSystemChatMsg chat_msg = 1;

    enum CmdId {
        CMD_ID = 2661;
    }
}



message SendChatMsgNotify {
    optional ChatMsg chat_msg = 1;
    repeated uint32 target_uid_list = 2;
    optional ExtraChatParam extra_chat_param = 3;

    enum CmdId {
        CMD_ID = 2234;
    }
}

message SendChatRedEnvelopeReq {
    optional uint32 item_id = 1;
    optional uint32 channel = 2;
    optional string msg = 3;
    optional string nickname = 4;
    optional uint32 armada_id = 5;
    optional uint32 red_envelope_id = 6;

    enum CmdId {
        CMD_ID = 1163;
    }
}

message SendChatRedEnvelopeRsp {
    optional Retcode retcode = 1;
    optional uint32 item_id = 2;
    optional uint32 channel = 3;
    optional string msg = 4;
    optional uint32 red_envelope_id = 5;
    optional uint32 expire_time = 6;

    enum CmdId {
        CMD_ID = 1164;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LACK_ITEM = 2;
        LACK_TIMES = 3;
        CHAT_FORBIDEN = 4;
        LACK_CD = 5;
        LACK_LEVEL = 6;
        NOT_IN_CHATWORLD = 7;
        NOT_IN_ARMADA = 8;
        NOT_IN_WORLD_CHATROOM = 9;
        SENSITIVE_WORDS = 10;
    }
}


message SendCommonChatworldMsgNotify {
    optional ChatworldMsg msg = 1;

    enum CmdId {
        CMD_ID = 2404;
    }
}

message SendDanmakuReq {
    optional uint32 danmaku_slot = 1;
    optional string content = 2;

    enum CmdId {
        CMD_ID = 1543;
    }
}


message SendDanmakuRsp {
    optional Retcode retcode = 1;
    optional uint32 danmaku_slot = 2;
    optional DanmakuContent content = 3;
    optional uint32 blacklist_expire_time = 4;

    enum CmdId {
        CMD_ID = 1544;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SENSITIVE_WORDS = 2;
        CHAT_FORBIDEN = 3;
        TOO_FREQUENT = 4;
        DANMAKU_CLOSED = 5;
        IN_BLACKLIST = 6;
        NUM_LIMIT = 7;
        LENGTH_LIMIT = 8;
    }
}


message SendPlayerCardMsgReq {
    optional uint32 target_uid = 1;
    optional string msg = 2;
    optional ChatMsg chat_msg = 3;
    optional uint32 msg_num_limit = 4;
    optional bool is_friend = 5;

    enum CmdId {
        CMD_ID = 486;
    }
}


message SendPlayerCardMsgRsp {
    optional Retcode retcode = 1;
    optional uint32 target_uid = 2;
    optional uint32 msg_index = 3;
    optional uint32 forbidden_time = 4;
    optional ChatMsg chat_msg = 5;

    enum CmdId {
        CMD_ID = 493;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SEND_NUM_LIMIT = 2;
        SEND_NUM_LIMIT_PLAYER = 3;
        MSG_INVALID = 4;
        BLACK_LIST = 5;
        FORBIDDEN = 6;
        ONLY_FRIEND = 7;
        MSG_CLOSED = 8;
    }
}



message SendRoomChatMsgNotify {
    optional ChatMsg chat_msg = 1;
    optional bool is_broadcast_msg = 2;
    optional RoomMode room_mode = 3;
    repeated uint32 target_uid_list = 4;

    enum CmdId {
        CMD_ID = 3163;
    }
}

message SensitiveWordCheckReq {
    optional string content = 1;

    enum CmdId {
        CMD_ID = 5005;
    }
}

message SensitiveWordCheckRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5006;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SENSITIVE_WORDS = 2;
    }
}

message ServerStopGachaMsgData {
}

message SetArmadaApplyReq {
    optional uint32 apply_level = 1;
    optional bool auto_pass = 2;
    optional uint32 auto_pass_level = 3;

    enum CmdId {
        CMD_ID = 2613;
    }
}

message SetArmadaApplyRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2614;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_GRANTED = 2;
        NOT_IN_ARMADA = 3;
        LEVEL_ERROR = 4;
    }
}

message SetArmadaBulletinReq {
    optional string bulletin = 1;
    optional string contact = 2;

    enum CmdId {
        CMD_ID = 2615;
    }
}

message SetArmadaBulletinRsp {
    optional Retcode retcode = 1;
    optional string bulletin = 2;
    optional string old_bulletin = 3;
    optional string audit_bulletin = 4;
    optional uint32 cd_end_time = 5;

    enum CmdId {
        CMD_ID = 2616;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_GRANTED = 2;
        FORMAT_ERROR = 3;
        SENSITIVE_WORDS = 4;
        NOT_IN_ARMADA = 5;
        IN_CD = 6;
        IN_AUDIT = 7;
    }
}


message SetArmadaLabelReq {
    optional ArmadaLabel label = 1;

    enum CmdId {
        CMD_ID = 2840;
    }
}


message SetArmadaLabelRsp {
    optional Retcode retcode = 1;
    optional ArmadaLabel label = 2;

    enum CmdId {
        CMD_ID = 2841;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        NOT_LEADER = 3;
        LABEL_ERROR = 4;
        PREFIX_ERROR = 5;
        FORMAT_ERROR = 6;
        HEXIE_OPEN = 7;
        SENSITIVE_WORDS = 8;
    }
}


message SetArmadaPositionReq {
    optional uint32 target_uid = 1;
    optional ArmadaPosition position = 2;

    enum CmdId {
        CMD_ID = 2621;
    }
}

message SetArmadaPositionRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2622;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_GRANTED = 2;
        NOT_IN_ARMADA = 3;
        TARGET_NOT_IN_ARMADA = 4;
        OFFICER_FULL = 5;
    }
}


message SetAvatarEquipSuiteReq {
    optional uint32 avatar_id = 1;
    optional uint32 suite_id = 2;
    optional AvatarEquipSuite suite = 3;

    enum CmdId {
        CMD_ID = 1456;
    }
}

message SetAvatarEquipSuiteRsp {
    optional Retcode retcode = 1;
    optional uint32 suite_id = 2;

    enum CmdId {
        CMD_ID = 1457;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_LOCK = 2;
        SLOT_WEAPON = 3;
        SLOT_STIGMATA_1 = 4;
        SLOT_STIGMATA_2 = 5;
        SLOT_STIGMATA_3 = 6;
        SUITE_ID = 7;
        SENSITIVE_WORDS = 8;
        NAME_LEN_ERROR = 9;
        TOO_FREQUENT = 10;
        FORMAT_ERROR = 11;
    }
}

message SetChatgroupReq {
    optional uint32 chatgroup_id = 1;
    optional string name = 2;
    optional string notice = 3;
    optional uint32 icon_id = 4;
    repeated uint32 label_id_list = 5;

    enum CmdId {
        CMD_ID = 2206;
    }
}

message SetChatgroupRsp {
    optional Retcode retcode = 1;
    optional uint32 chatgroup_id = 2;
    optional string name = 3;
    optional string notice = 4;
    optional uint32 icon_id = 5;
    repeated uint32 label_id_list = 6;
    optional string old_name = 7;
    optional string old_notice = 8;
    optional string audit_name = 9;
    optional string audit_notice = 10;
    optional uint32 cd_end_time = 11;

    enum CmdId {
        CMD_ID = 2207;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_CREATER = 2;
        SENSITIVE_WORD = 3;
        LABEL_ERROR = 4;
        NAME_FORMAT_ERROR = 5;
        NOTICE_FORMAT_ERROR = 6;
        FORBIDDEN = 7;
        IN_CD = 8;
        IN_AUDIT = 9;
    }
}


message SetClientDataReq {
    optional ClientData client_data = 1;

    enum CmdId {
        CMD_ID = 1588;
    }
}


message SetClientDataRsp {
    optional Retcode retcode = 1;
    optional ClientDataType type = 2;
    optional uint32 id = 3;

    enum CmdId {
        CMD_ID = 1589;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SIZE_LIMIT = 2;
        UNKNOWN_ID = 3;
    }
}

message SetCustomHeadReq {
    optional uint32 id = 1;

    enum CmdId {
        CMD_ID = 1525;
    }
}

message SetCustomHeadRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 1526;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LOCKED = 2;
    }
}


message SetDormAvatarReq {
    optional uint32 house_id = 1;
    repeated DormRoomAvatar room_avatar_list = 2;

    enum CmdId {
        CMD_ID = 611;
    }
}

message SetDormAvatarRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 612;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HOUSE_NOT_EXIST = 2;
        ROOM_NOT_EXIST = 3;
        AVATAR_NOT_EXIST = 4;
        AVATAR_LIMIT = 5;
    }
}

message SetDormNameReq {
    optional uint32 house_id = 1;
    optional uint32 room_id = 2;
    optional string name = 3;

    enum CmdId {
        CMD_ID = 615;
    }
}

message SetDormNameRsp {
    optional Retcode retcode = 1;
    optional uint32 cd_end_time = 2;

    enum CmdId {
        CMD_ID = 616;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HOUSE_NOT_EXIST = 2;
        ROOM_NOT_EXIST = 3;
        FORMAT_ERROR = 4;
        SENSITIVE_WORDS = 5;
        NAME_REPEAT = 6;
        IN_AUDIT = 7;
        IN_CD = 8;
    }
}

message SetDormSnsInfoReq {
    optional uint32 show_house = 1;
    optional uint32 show_room = 2;
    optional uint32 visit_avatar = 3;
    optional bool is_allow_visit = 4;

    enum CmdId {
        CMD_ID = 635;
    }
}

message SetDormSnsInfoRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 636;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HOUSE_NOT_EXIST = 2;
        ROOM_NOT_EXIST = 3;
        AVATAR_NOT_EXIST = 4;
    }
}

message SetDressReq {
    optional uint32 avatar_id = 1;
    optional uint32 dress_id = 2;

    enum CmdId {
        CMD_ID = 248;
    }
}

message SetDressRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 249;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        DRESS_NOT_EXIST = 3;
        DRESS_CAN_NOT_USE = 4;
        DRESS_IN_USE = 5;
    }
}

message SetFrameUseReq {
    optional uint32 frame_id = 1;

    enum CmdId {
        CMD_ID = 592;
    }
}

message SetFrameUseRsp {
    optional Retcode retcode = 1;
    optional uint32 frame_id = 2;

    enum CmdId {
        CMD_ID = 593;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message SetFriendRemarkReq {
    optional uint32 uid = 1;
    optional string new_remark = 2;
    optional string old_remark = 3;

    enum CmdId {
        CMD_ID = 972;
    }
}

message SetFriendRemarkRsp {
    optional Retcode retcode = 1;
    optional uint32 uid = 2;
    optional string remark = 3;
    optional uint32 set_friend_remark_cd_end_time = 4;

    enum CmdId {
        CMD_ID = 973;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_FRIEND = 2;
        FORMAT_ERROR = 3;
        SENSITIVE_WORDS = 4;
        SAME_REMARK = 5;
        FEATURE_CLOSED = 6;
        IN_AUDIT = 7;
        IN_CD = 8;
    }
}

message SetLevelLockReq {
    optional uint32 level_lock_id = 1;

    enum CmdId {
        CMD_ID = 1488;
    }
}

message SetLevelLockRsp {
    optional Retcode retcode = 1;
    optional uint32 level_lock_id = 2;

    enum CmdId {
        CMD_ID = 1489;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_MEET_MAX_LEVEL = 2;
        NOT_NEXT_ID = 3;
    }
}

message SetLobbyFastEntranceReq {
    optional uint32 lobby_id = 1;
    optional bool is_open = 2;

    enum CmdId {
        CMD_ID = 319;
    }
}

message SetLobbyFastEntranceRsp {
    optional uint32 lobby_id = 1;
    optional Retcode retcode = 2;
    optional bool is_open = 3;

    enum CmdId {
        CMD_ID = 320;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message SetOpenworldEndlessMonsterGroupProgressReq {
    optional uint32 group_id = 1;
    optional uint32 progress = 2;
    optional EndlessType type = 3;

    enum CmdId {
        CMD_ID = 3448;
    }
}



message SetOpenworldEndlessMonsterGroupProgressRsp {
    optional Retcode retcode = 1;
    repeated OpenworldEndlessMonsterGroup monster_group_list = 2;
    optional EndlessType type = 3;

    enum CmdId {
        CMD_ID = 3449;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        GROUP_ERROR = 2;
        PROGRESS_ERROR = 3;
        HAS_FINISHED = 4;
    }
}

message SetPlayerTagNotify {
    optional string uid = 1;
    repeated string tag_list = 2;

    enum CmdId {
        CMD_ID = 802;
    }
}

message SetReclaimAvatarTeamReq {
    repeated uint32 reclaim_avatar_team_list = 1;

    enum CmdId {
        CMD_ID = 1171;
    }
}

message SetReclaimAvatarTeamRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 1172;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        AVATAR_REPEATED = 3;
        AVATAR_EMPTY = 4;
        TEAM_SIZE_LIMIT = 5;
    }
}

message SetSecurityPasswordReq {
    optional string password = 1;

    enum CmdId {
        CMD_ID = 5023;
    }
}

message SetSecurityPasswordRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5024;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        IS_NOT_OFTEN_DEVICE = 2;
        ALREADY_SET = 3;
    }
}

message SetSelfDescReq {
    optional string self_desc = 1;

    enum CmdId {
        CMD_ID = 78;
    }
}

message SetSelfDescRsp {
    optional Retcode retcode = 1;
    optional uint32 cd_end_time = 2;

    enum CmdId {
        CMD_ID = 79;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FORMAT_ERROR = 2;
        SENSITIVE_WORDS = 3;
        IN_AUDIT = 4;
        IN_CD = 5;
    }
}

message SettingDict {
    repeated DictItem dict_item_list = 1;

    enum ValueType {
        INT = 1;
        FLOAT = 2;
        STRING = 3;
    }
    message DictItem {
        optional string key = 1;
        optional ValueType type = 2;
        optional string value = 3;
    }
}

message SetTransferPwdReq {
    optional string transfer_pwd = 1;

    enum CmdId {
        CMD_ID = 245;
    }
}

message SetTransferPwdRsp {
    optional Retcode retcode = 1;
    optional string transfer_code = 2;
    optional uint32 transfer_pwd_expire_time = 3;

    enum CmdId {
        CMD_ID = 246;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        PWD_FORMAT_ERROR = 2;
    }
}

message SetVirtualAvatarTeamReq {
    optional uint32 group_id = 1;
    repeated uint32 avatar_team_list = 2;

    enum CmdId {
        CMD_ID = 3504;
    }
}

message SetVirtualAvatarTeamRsp {
    optional Retcode retcode = 1;
    optional uint32 group_id = 2;
    repeated uint32 avatar_team_list = 3;

    enum CmdId {
        CMD_ID = 3505;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        AVATAR_REPEATED = 3;
        AVATAR_EMPTY = 4;
        TEAM_SIZE_LIMIT = 5;
        LOCK = 6;
    }
}

message SetWarshipAvatarReq {
    optional uint32 first_avatar_id = 1;
    optional uint32 second_avatar_id = 2;

    enum CmdId {
        CMD_ID = 1492;
    }
}

message SetWarshipAvatarRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 1493;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        AVATAR_NOT_TWINS = 3;
    }
}


message SetWarshipComponentReq {
    optional uint32 warship_id = 1;
    repeated WarshipComponent component_list = 2;

    enum CmdId {
        CMD_ID = 5458;
    }
}

message SetWarshipComponentRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5459;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        WARSHIP_NOT_EXIST = 2;
        COMPONENT_TYPE_ERROR = 3;
        COMPONENT_NOT_EXIST = 4;
        WARSHIP_ERROR = 5;
    }
}

message SetWarshipReq {
    optional uint32 warship_id = 1;

    enum CmdId {
        CMD_ID = 5456;
    }
}

message SetWarshipRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5457;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_EXIST = 2;
    }
}



message SetWarshipSettingReq {
    optional uint32 warship_id = 1;
    optional WarshipSettingType setting_type = 2;
    optional WarshipBgmPlayMode bgm_play_mode = 3;
    optional bool is_weather_fixed = 4;
    optional uint32 weather_idx = 5;

    enum CmdId {
        CMD_ID = 5460;
    }
}

message SetWarshipSettingRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5461;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        WARSHIP_NOT_EXIST = 2;
    }
}

message ShareRewardRecord {
    optional uint32 share_id = 1;
    optional uint32 last_take_time = 2;
}

enum ShareRewardType {
    SHARE_REWARD_TYPE_NONE = 0;
    SHARE_REWARD_TYPE_ONCE = 1;
    SHARE_REWARD_TYPE_DAILY = 2;
}


message Shop {
    optional uint32 shop_id = 1;
    optional bool is_open = 2;
    optional string text_map_name = 3;
    optional string shop_icon_path = 4;
    repeated Goods goods_list = 5;
    optional uint32 next_auto_refresh_time = 6;
    optional uint32 manual_refresh_times = 7;
    optional uint32 refresh_item = 8;
    optional uint32 next_refresh_cost = 9;
    optional uint32 max_manual_refresh_times = 10;
    optional uint32 shop_type = 11;
    repeated uint32 currency_list = 12;
    optional uint32 schedule_change_time = 13;
    optional string shop_name = 14;
    optional uint32 unlock_level = 15;
    repeated uint32 all_goods_id_list = 16;
    optional uint32 begin_time = 17;
    optional uint32 end_time = 18;
    optional bool is_hot = 19;
    optional uint32 multi_currency = 20;
    optional bool is_double_confirm = 21;
    optional bool is_show = 22;
    optional uint32 sort_priority = 23;
    repeated uint32 toolbar_currency_list = 24;
    repeated uint32 new_currency_list = 25;
    optional uint32 free_manual_refresh_times = 26;
}

message ShopGoodsInfo {
    optional uint32 goods_id = 1;
    optional uint32 sell_num = 2;
}

message ShopGoodsPoolHideSwitchData {
    optional uint32 shop_id = 1;
    optional uint32 pool_id = 2;
}

message ShopGoodsPoolSwitchData {
    optional uint32 pool_id = 1;
}

enum ShopGoodsPoolUnlockType {
    SHOP_GOODS_POOL_UNLOCK_PLAYER_LEVEL = 1;
    SHOP_GOODS_POOL_UNLOCK_MP_LEVEL = 2;
    SHOP_GOODS_POOL_UNLOCK_MAX_QUEST_LEVEL = 3;
    SHOP_GOODS_POOL_UNLOCK_OPENWORLD_ACTIVITY_LEVEL = 4;
    SHOP_GOODS_POOL_UNLOCK_EX_BOSS_MONSTER_LEVEL = 5;
    SHOP_GOODS_POOL_UNLOCK_EX_BOSS_SCORE = 6;
    SHOP_GOODS_POOL_UNLOCK_ELF = 7;
    SHOP_GOODS_POOL_UNLOCK_GLOBALWAR_POINT_NUM = 8;
    SHOP_GOODS_POOL_UNLOCK_GLOBALWAR_POINT_ID = 9;
    SHOP_GOODS_POOL_UNLOCK_ADVENTURE_LEVEL = 10;
    SHOP_GOODS_POOL_UNLOCK_DAILY_DUTY_POINT = 11;
    SHOP_GOODS_POOL_UNLOCK_AVATAR = 12;
    SHOP_GOODS_POOL_UNLOCK_STAGE = 13;
    SHOP_GOODS_POOL_UNLOCK_KINGDOM_WAR_CURRENCY = 14;
    SHOP_GOODS_POOL_UNLOCK_MISSION = 15;
    SHOP_GOODS_POOL_UNLOCK_SANCTUARY_LEVEL = 16;
    SHOP_GOODS_POOL_UNLOCK_GOBACK_LEVEL = 17;
    SHOP_GOODS_POOL_UNLOCK_AVATAR_LOCKED = 18;
    SHOP_GOODS_POOL_UNLOCK_HAS_GOT_ITEM = 19;
    SHOP_GOODS_POOL_UNLOCK_AVATAR_DETAIL = 20;
    SHOP_GOODS_POOL_UNLOCK_ELF_DETAIL = 21;
    SHOP_GOODS_POOL_UNLOCK_BATTLE_PASS_TICKET = 22;
    SHOP_GOODS_POOL_UNLOCK_PRIVILEGE_DETAIL = 23;
    SHOP_GOODS_POOL_UNLOCK_HAS_NOT_GOT_ITEM = 24;
    SHOP_GOODS_POOL_UNLOCK_BP_LEVEL = 25;
    SHOP_GOODS_POOL_UNLOCK_PLAYER_LEVEL_LOCK_ID = 26;
    SHOP_GOODS_POOL_UNLOCK_GOBACK_NEWBIE_LEVEL = 27;
}

message ShopGoodsSwitchData {
    optional uint32 goods_id = 1;
}

message ShopSwitchData {
    optional uint32 shop_id = 1;
}

enum ShopType {
    SHOP_NORMAL = 1;
    SHOP_ENDLESS = 2;
    SHOP_ACTIVITY = 3;
    SHOP_EXTRASTORY = 4;
    SHOP_ARMADA = 5;
    SHOP_GACHATICKET = 6;
    SHOP_EXCHANGE_HOUSE = 7;
    SHOP_EXTRASTORY_ACTIVITY = 8;
    SHOP_MP = 9;
    SHOP_EXBOSS = 10;
    SHOP_SKIN = 11;
    SHOP_MASTER = 12;
    SHOP_DORM = 13;
    SHOP_FRAGMENT = 14;
    SHOP_ACTIVITY_EXCLUDE = 15;
    SHOP_MINUTE = 16;
    SHOP_DUNGEONS = 17;
    SHOP_GOBACK = 18;
    SHOP_MASTER_PUPIL = 19;
    SHOP_TYPE_ENCORE = 20;
    SHOP_TYPE_WANTED = 21;
    SHOP_TYPE_ADVENTURE = 22;
    SHOP_TYPE_NEWBIE_ACTIVITY = 23;
    SHOP_TYPE_VIP_EQUIPMENT = 24;
    SHOP_TYPE_GACHA_COIN = 25;
    SHOP_TYPE_MAIN_STORY = 26;
    SHOP_GOBACK_2 = 27;
    SHOP_GOBACK_3 = 28;
    SHOP_TYPE_NEWBIE_ACTIVITY_2 = 29;
    SHOP_TYPE_NEWBIE_ACTIVITY_3 = 30;
    SHOP_TYPE_GOD_WAR = 31;
    SHOP_TYPE_CHAPTER = 32;
    SHOP_TYPE_SC_DLC = 33;
    SHOP_TYPE_BP_ELITE_WORKS = 34;
    SHOP_TYPE_BP_STORE = 35;
    SHOP_TYPE_BP_ELITE_WORKS_VINTAGE = 36;
    SHOP_TYPE_NEWBIE_ACTIVITY_4 = 37;
    SHOP_TYPE_NEWBIE_ACTIVITY_5 = 38;
    SHOP_TYPE_CHAPTER_OW = 39;
    SHOP_OPENWORLD = 100;
    SHOP_OPENWORLD_SENIOR = 101;
    SHOP_OPENWORLD_NEW = 102;
    SHOP_OPENWORLD_ACTIVITY = 103;
    SHOP_TYPE_GIFT_PACK = 201;
    SHOP_ACTIVITY_2 = 302;
    SHOP_ACTIVITY_3 = 303;
    SHOP_ACTIVITY_4 = 304;
    SHOP_ACTIVITY_5 = 305;
    SHOP_ACTIVITY_6 = 306;
    SHOP_ACTIVITY_7 = 307;
    SHOP_ACTIVITY_8 = 308;
    SHOP_WEST = 1001;
}

enum SideMissionCond {
    SIDE_MISSION_COND_AVATAR_GOODFEEL = 1;
}

message SimulatePlayerData {
    optional uint32 uid = 1;
    optional uint32 level = 2;
    optional string nickname = 3;
    optional uint32 avatar_trial_id = 4;
}

message SingleRaidActivity {
    optional uint32 cur_step_stage_id = 1;
    optional uint32 last_done_challenge_stage_id = 2;
    optional uint32 step_stage_remain_enter_times = 3;
}

enum SkillDamageCollisionType {
    SKILL_DAMAGE_COLLISION_TYPE_POINT = 1;
    SKILL_DAMAGE_COLLISION_TYPE_CIRCLE = 2;
    SKILL_DAMAGE_COLLISION_TYPE_RECT = 3;
    SKILL_DAMAGE_COLLISION_TYPE_SECTOR = 4;
}

message SlgBattleAddScoreFailNotify {
    optional uint32 point_id = 1;

    enum CmdId {
        CMD_ID = 6061;
    }
}

message SlgBattleBriefCountryData {
    optional uint32 country_id = 1;
    optional uint32 country_score = 2;
}


message SlgBattleBroadcast {
    optional uint32 broadcast_id = 1;
    optional uint32 trigger_time = 2;
    optional uint32 point_id = 3;
    optional uint32 para = 4;
    optional SlgBroadcastPlayer trigger_player = 5;
}


message SlgBattleBuffData {
    optional uint32 buff_id = 1;
    optional SlgBuffType type = 2;
    optional uint32 num = 3;
}


message SlgBattleCountryData {
    optional uint32 country_id = 1;
    optional uint32 take_down_boss_num = 2;
    repeated SlgBattleBuffData buff_list = 3;
    optional uint32 country_score = 4;
}




message SlgBattleData {
    optional uint32 battle_id = 1;
    optional uint32 battle_schedule_id = 2;
    repeated SlgBattleCountryData country_data_list = 3;
    repeated SlgBattlePointData point_data_list = 4;
    optional uint32 begin_time = 5;
    optional uint32 end_time = 6;
    optional uint32 today_begin_time = 7;
    optional uint32 today_end_time = 8;
    optional SlgBattlePlayerData player_data = 9;
    repeated uint32 adjoining_point_list = 10;
    optional uint32 last_settle_time = 11;
    optional bool is_settled = 12;
    optional uint32 level_group_id = 13;
}

message SlgBattleInSettleNotify {

    enum CmdId {
        CMD_ID = 6070;
    }
}

message SlgBattleMatchRsp {
    optional Retcode retcode = 1;
    optional uint32 battle_id = 2;
    optional uint32 battle_schedule_id = 3;

    enum CmdId {
        CMD_ID = 6054;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_BATTLE_AVAILABLE = 2;
    }
}

message SlgBattlePlayerData {
    optional uint32 country_id = 1;
    repeated uint32 buff_list = 2;
    optional uint32 score = 3;
}


message SlgBattlePointBossData {
    optional uint32 boss_id = 1;
    optional SlgBossType type = 2;
    optional bool is_alive = 3;
    optional uint32 boss_schedule_id = 4;
}

message SlgBattlePointCountryData {
    optional uint32 country_id = 1;
    optional uint64 point_score_u64 = 2;
}



message SlgBattlePointData {
    optional uint32 point_id = 1;
    optional uint32 occupy_country_id = 2;
    repeated SlgBattlePointCountryData point_country_data_list = 3;
    optional SlgBattlePointBossData boss_data = 4;
    repeated uint32 occupied_country_list = 5;
}


message SlgBattleRank {
    optional bool is_all = 1;
    optional uint32 country_id = 2;
    optional uint32 total_num = 3;
    optional RankShowData rank_data = 4;
}

enum SlgBattleRankType {
    SLG_BATTLE_RANK_NORMAL_POINT = 1;
    SLG_BATTLE_RANK_BIG_BOSS = 2;
    SLG_BATTLE_RANK_COUNTRY = 3;
}


message SlgBattleSettleNotify {
    optional uint32 schedule_id = 1;
    optional uint32 battle_schedule_id = 2;
    optional RewardData reward_data = 3;
    optional uint32 rank = 5;

    enum CmdId {
        CMD_ID = 6066;
    }
}

enum SlgBossType {
    SLG_BOSS_TYPE_NONE = 0;
    SLG_BOSS_TYPE_SMALL_BOSS = 1;
    SLG_BOSS_TYPE_BIG_BOSS = 2;
}


message SlgBriefBattleData {
    optional uint32 battle_id = 1;
    optional uint32 battle_schedule_id = 2;
    optional uint32 country_id = 3;
    repeated SlgBattleBriefCountryData country_data_list = 4;
    optional bool is_settled = 5;
}


message SlgBroadcastNotify {
    repeated SlgBattleBroadcast broadcast_list = 1;

    enum CmdId {
        CMD_ID = 6068;
    }
}

message SlgBroadcastPlayer {
    optional uint32 uid = 1;
    optional uint32 country_id = 2;
    optional string nickname = 3;
}

enum SlgBroadcastType {
    SLG_BROADCAST_TYPE_OCCUPY = 1;
    SLG_BROADCAST_TYPE_SCORE_STREAK = 2;
    SLG_BROADCAST_TYPE_OCCUPY_STREAK = 3;
}

enum SlgBuffType {
    SLG_BUFF_TYPE_NONE = 0;
    SLG_BUFF_TYPE_ACTIVITY_STAMINA_COST = 1;
    SLG_BUFF_TYPE_STAGE_SCORE = 2;
    SLG_BUFF_TYPE_SETTLE_SCORE = 3;
    SLG_BUFF_TYPE_STAGE = 4;
}

enum SlgBuildingType {
    SLG_BUILDING_TYPE_OCCUPY_OWNER_BUFF = 1;
    SLG_BUILDING_TYPE_OCCUPY_OTHERS_BUFF = 2;
    SLG_BUILDING_TYPE_SMALL_BOSS = 3;
    SLG_BUILDING_TYPE_BIG_BOSS = 4;
}

message SlgEnrollData {
    optional uint32 enroll_battle_schedule_id = 1;
    optional uint32 enroll_begin_time = 2;
    optional uint32 enroll_end_time = 3;
    optional bool is_enrolled = 4;
}

message SlgEnrollReq {
    optional uint32 battle_schedule_id = 1;
    optional uint32 group_id = 2;
    optional uint32 match_score = 3;
    optional string region_name = 4;

    enum CmdId {
        CMD_ID = 6055;
    }
}

message SlgEnrollRsp {
    optional Retcode retcode = 1;
    optional uint32 battle_schedule_id = 2;

    enum CmdId {
        CMD_ID = 6056;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        BATTLE_SCHEDULE_ID_ERROR = 2;
        HAS_ENROLL = 3;
        TOO_FREQUENT = 4;
        FEATURE_CLOSED = 5;
    }
}

message SlgGetActivityStaminaReq {

    enum CmdId {
        CMD_ID = 6057;
    }
}

message SlgGetActivityStaminaRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_stamina_num = 2;
    optional uint32 last_recover_activity_stamina_time = 3;

    enum CmdId {
        CMD_ID = 6058;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
    }
}

message SlgGetBattleRankReq {
    optional uint32 country_id = 1;

    enum CmdId {
        CMD_ID = 6062;
    }
}


message SlgGetBattleRankRsp {
    optional Retcode retcode = 1;
    optional SlgBattleRank rank = 2;
    optional uint32 battle_schedule_id = 3;

    enum CmdId {
        CMD_ID = 6063;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
        NOT_IN_BATTLE = 3;
    }
}

message SlgGetBriefRankReq {

    enum CmdId {
        CMD_ID = 6071;
    }
}

message SlgGetBriefRankRsp {
    optional Retcode retcode = 1;
    optional uint32 all_country_rank = 2;
    optional uint32 self_country_rank = 3;

    enum CmdId {
        CMD_ID = 6072;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_BATTLE = 2;
    }
}

message SlgGetDataReq {
    optional uint32 country_id = 1;
    optional string region = 2;

    enum CmdId {
        CMD_ID = 6050;
    }
}




message SlgGetDataRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 next_battle_begin_time = 3;
    optional SlgBattleData battle_data = 4;
    optional uint32 activity_stamina_num = 5;
    optional uint32 last_recover_activity_stamina_time = 6;
    optional uint32 begin_time = 7;
    optional uint32 end_time = 8;
    repeated uint32 unlock_story_id_list = 9;
    repeated SlgBriefBattleData history_battle_data_list = 10;
    optional uint32 battle_schedule_id = 11;
    optional SlgEnrollData current_enroll_data = 12;
    repeated uint32 taken_score_reward_id_list = 13;
    optional uint32 total_score = 14;

    enum CmdId {
        CMD_ID = 6051;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        BATTLE_NOT_FOUND = 3;
        NOT_IN_BATTLE = 4;
        FEATURE_CLOSED = 5;
    }
}

message SlgGetPointRankReq {
    optional uint32 point_id = 1;

    enum CmdId {
        CMD_ID = 6064;
    }
}


message SlgGetPointRankRsp {
    optional Retcode retcode = 1;
    optional uint32 battle_schedule_id = 2;
    optional uint32 point_id = 3;
    optional uint32 player_score = 4;
    repeated UserRankData rank_list = 5;

    enum CmdId {
        CMD_ID = 6065;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
        NOT_IN_BATTLE = 3;
        POINT_ERROR = 4;
    }
}

message SlgMainPageReq {
    optional bool is_in_main_page = 1;

    enum CmdId {
        CMD_ID = 6069;
    }
}

enum SlgMatchFactorType {
    SLG_MATCH_FACTOR_TYPE_NONE = 0;
    SLG_MATCH_FACTOR_TYPE_CRYSTAL_COST = 1;
    SLG_MATCH_FACTOR_TYPE_PLAYER_LEVEL = 2;
    SLG_MATCH_FACTOR_TYPE_TOP_AVATAR_COMBAT_SUM = 3;
    SLG_MATCH_FACTOR_TYPE_CUR_BATTLE_SCORE = 4;
}

message SlgPointSweepReq {
    optional uint32 point_id = 1;

    enum CmdId {
        CMD_ID = 6052;
    }
}


message SlgPointSweepRsp {
    optional Retcode retcode = 1;
    optional uint32 point_id = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 6053;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 3;
        POINT_INVALID = 4;
        COST_MATERIAL_LACK = 5;
        EQUIPMENT_FULL = 6;
    }
}

enum SlgScoreRewardType {
    SLG_SCORE_REWARD_TYPE_NONE = 0;
    SLG_SCORE_REWARD_TYPE_PERSONAL_TOTAL = 1;
    SLG_SCORE_REWARD_TYPE_COUNTRY = 2;
}


message SlgTakeScoreRewardReq {
    optional SlgScoreRewardType score_reward_type = 1;

    enum CmdId {
        CMD_ID = 6059;
    }
}


message SlgTakeScoreRewardRsp {
    optional Retcode retcode = 1;
    repeated uint32 has_taken_score_reward_id_list = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 6060;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
    }
}

message SnsRequestSwitchData {
}




message SnsShowEndlessData {
    optional EndlessType cur_type = 1;
    optional EndlessPlayerData endless_player_data = 2;
    optional OpenworldEndlessPlayer openworld_endless_player_data = 3;
}


message SnsShowExBossData {
    optional uint32 cur_rank = 1;
    optional uint32 total_score = 2;
    repeated FinishedExBossInfo finished_boss_info_list = 3;
    optional uint32 rank_id = 4;
    optional uint32 cur_rank_percent = 5;
}

message SnsShowPriviledge {
    optional uint32 sns_show_type = 1;
    optional uint32 sns_show_priviledge_state = 2;
}

enum SnsShowPriviledgeState {
    SNS_SHOW_NONE = 0;
    SNS_SHOW_OPEN_TO_PUBLIC = 1;
    SNS_SHOW_OPEN_TO_FRIENDS = 2;
    SNS_SHOW_OPEN_TO_SELF = 3;
}

message SnsShowTowerRaidData {
    optional uint32 hard_level = 1;
    optional uint32 max_hard_level = 2;
    optional uint32 total_enter_times = 3;
    optional uint32 total_battle_during_time = 4;
}

enum SnsShowType {
    SNS_NONE = 0;
    SNS_MAIN = 1;
    SNS_WAR_HISTORY = 2;
    SNS_WIKI = 3;
    SNS_MSG_CARD = 4;
}

enum SpecialArmadaMatrixGenericItem {
    ARMADA_MATRIX_GENERIC_ITEM_CANDY = 7002;
}

enum SpecialItemId {
    ITEM_GREEN_STONE = 4;
    ITEM_PURPLE_JADE = 5;
    ITEM_FRIENDS_POINT = 6;
    ITEM_SCOIN = 100;
    ITEM_FIGHT_OPENWORLD_STAGE_BOSS = 901;
    ITEM_ARMADA_WAR_ENERGE_ITEM_ID = 914;
    ITEM_DLC_COIN = 801;
    ITEM_DLC_REVIVE_COIN = 803;
    ITEM_SC_DLC_REVIVE_COIN = 835;
    ITEM_STAMINA_MEDICINE = 7033;
    ITEM_BENG_HUAI_FRAGMENTS = 7032;
    ITEM_WEEK_DAY_ACTIVITY_COIN = 7034;
    ITEM_SPEED_UP_STAGE = 9007;
    ITEM_ROGUE_STAGE_COIN = 9008;
}

enum SpecialMailId {
    MAIL_INVITE = 1001;
    MAIL_INVITEE = 1002;
    MAIL_ACTIVITY_INVITE = 1003;
    MAIL_ARMADA_KICK = 2001;
    MAIL_ARMADA_DISSOLVE = 2002;
    MAIL_RECLAIM_RANK_REWARD = 2017;
    MAIL_CHAPTER_RESET = 2021;
    MAIL_CHAPTER_RESET_AVATAR_COMPENSATE = 2022;
    MAIL_MP_RAID_HCOIN_COMPENSATE = 2023;
    MAIL_ARMADA_CHANGE_NAME = 2101;
    MAIL_ARMADA_LEADER_OFFLINE_NOTICE = 2102;
    MAIL_ARMADA_IMPEACH_LEADER_START = 2103;
    MAIL_ARMADA_IMPEACH_LEADER_SUCCESS = 2104;
    MAIL_ARMADA_IMPEACH_LEADER_FAIL = 2105;
    MAIL_ARMADA_IMPEACH_LEADER_CANCEL = 2106;
    MAIL_MP_NEWBIE = 3001;
    MAIL_MP_REPORT = 3002;
    MAIL_PAY_CARD = 4001;
    MAIL_PAY_SUBS = 4002;
    MAIL_SECURITY_PASSWORD_RESET = 4101;
    MAIL_OPENWORLD_QUEST_REWARD = 5001;
    MAIL_SIMULATE_REWARD = 6004;
    MAIL_ARMADA_WAREHOUSE_AUTO_CANCEL = 6023;
    MAIL_CHATWORLD_DISH_COMPENSATE = 6024;
    MAIL_RAFFLE_COMPENSATE = 6025;
    MAIL_BULLETIN_SCORE_REWARD = 6039;
    MAIL_BIRTHDAY_REWARD = 6101;
    MAIL_RAID_RANK_REWARD = 6201;
    MAIL_RAID_SCORE_REWARD = 6202;
    MAIL_RAID_SPECIAL_REWARD = 6203;
    MAIL_SEASON_WEEK_RANK_REWARD = 6301;
    MAIL_SEASON_RANK_REWARD = 6302;
    MAIL_SEASON_SCORE_REWARD = 6303;
    MAIL_EXTRA_STORY_COMPENSATE_REWARD = 6401;
    MAIL_WORLD_BOSS_SCORE_REWARD = 6501;
    MAIL_WORLD_BOSS_RANK_REWARD = 6502;
    MAIL_WORLD_BOSS_KILL_BOSS_REWARD = 6503;
    MAIL_HCOIN_GACHA_RESET = 6601;
    MAIL_GACHA_EX_REWARD = 6602;
    MAIL_COUPLE_TOWER_ACTIVITY_FLOOR_REWARD = 6801;
    MAIL_PLAYER_WEEKLY_REPORT = 6901;
    MAIL_MASTER_PUPIL_MASTER_REWARD_0_STAR = 7001;
    MAIL_MASTER_PUPIL_MASTER_REWARD_1_STAR = 7002;
    MAIL_MASTER_PUPIL_MASTER_REWARD_2_STAR = 7003;
    MAIL_MASTER_PUPIL_MASTER_REWARD_3_STAR = 7004;
    MAIL_MASTER_PUPIL_PUPIL_REWARD = 7005;
    MAIL_MASTER_PUPIL_DISMISS = 7006;
    MAIL_ARMADA_MATRIX_DEPOSIT_REWARD = 7101;
    MAIL_ARMADA_WAR_SEASON_REWARD = 7102;
    MAIL_ARMADA_WAR_BATTLE_REWARD = 7103;
    MAIL_ARMADA_WAR_BATTLE_CONTRIBUTION_REWARD = 7104;
    MAIL_ARMADA_WAR_BATTLE_RANK_REWARD = 7105;
    MAIL_ARMADA_WAR_APPLY_NOTIFY_MAIL = 7106;
    MAIL_ARMADA_WAR_ARMADA_RESET_MAIL = 7107;
    MAIL_ARMADA_WAR_PLAYER_BATTLE_NUM_REWARD = 7108;
    MAIL_ARMADA_FIRST_JOIN_REWARD = 7109;
    MAIL_TIME_LIMIT_ADD_UP_REWARD = 7201;
    MAIL_TVT_FIRST_DIVISION_UP_REWARD = 7202;
    MAIL_TVT_SEASON_OFF_REWARD = 7203;
    MAIL_CREDIT_BEHAVIOR_SELF_NOTIFY = 7209;
    MAIL_CREDIT_BEHAVIOR_OTHER_NOTIFY = 7210;
    MAIL_CREDIT_RANK_REDUCE_NOTIFY = 7211;
    MAIL_CREDIT_RANK_IMPROVE_NOTIFY = 7212;
    MAIL_KINGDOM_WAR_RANK_REWARD = 7301;
    MAIL_KINGDOM_WAR_PERCENT_RANK_REWARD = 7302;
    MAIL_KINGDOM_WAR_PERCENT_SCORE_REWARD = 7303;
    MAIL_KINGDOM_WAR_PHASE_REWARD = 7304;
    MAIL_ARMADA_MATRIX_ARMADA_REWARD = 7305;
    MAIL_MP_RAID_RESET_MISSION_REWARD = 7402;
    MAIL_BLOCK_ZONE_MISSION_REWARD = 7403;
    MAIL_AVATAR_STAR_UP_RETURN = 7601;
    MAIL_ROGUE_TOWER_ENDLESS_SCORE_REWARD = 7602;
    MAIL_DREAM_REWARD = 7604;
    MAIL_SLG_BATTLE_COUNTRY_RANK_REWARD = 7607;
    MAIL_SINGLE_WANTED_WEEKLY_ENGAGE_REWARD = 7608;
    MAIL_SINGLE_WANTED_BOX_FIXED_REWARD = 7609;
    MAIL_SINGLE_WANTED_BOX_CHOICE_REWARD = 7610;
    MAIL_SLG_BATTLE_SCORE_REWARD = 7611;
    MAIL_SLG_ACTIVITY_SCORE_REWARD = 7612;
    MAIL_WANTED_OFF_COMPENSATE_REWARD = 7613;
    MAIL_OPENWORLD_CHAPTER_LIMIT_REWARD_COMPENSATE = 7617;
    MAIL_SC_DLC_DAILY_QUEST_COMPENSATE = 7619;
    MAIL_NEWBIE_LEVEL_RUSH_COMPENSATE = 7620;
    MAIL_SC_DLC_EVENT_COMPENSATE = 7621;
    MAIL_MODIFY_PLAYER_DATA_580_LEVEL_DATA_COMPENSATE = 7625;
    MAIL_NEWBIE_MATERIAL_RECYCLE = 8058;
}

enum SpecialStageId {
    STAGE_ID_ENDLESS = 900101;
    STAGE_ID_ROGUE = 900201;
    STAGE_ID_ARMADA = 900301;
    STAGE_ID_ARMADA_MP = 900302;
    STAGE_ID_OPENWORLD = 900401;
    STAGE_ID_OPENWORLD_BOSS = 900402;
    STAGE_ID_OPENWORLD_DEFENSE = 900408;
    STAGE_ID_EXBOSS = 900501;
    STAGE_ID_ARMADA_MATRIX = 900601;
    STAGE_ID_SC_DLC_TOWER = 900701;
    STAGE_ID_SEVEN_CHAPTER_CG = 901000;
    STAGE_ID_ARMADA_BOSS = 100000000;
}

enum SpecificRankType {
    SPECIFIC_RANK_NONE = 0;
    SPECIFIC_RANK_GLOBAL_GOODS = 1;
}

message SpeedUpFarmProduceReq {
    optional uint32 slot_id = 1;
    optional uint32 speed_up_material_id = 2;
    optional uint32 speed_up_material_num = 3;

    enum CmdId {
        CMD_ID = 1393;
    }
}

message SpeedUpFarmProduceRsp {
    optional Retcode retcode = 1;
    optional uint32 slot_id = 2;
    optional uint32 speed_up_material_id = 3;
    optional uint32 speed_up_material_num = 4;

    enum CmdId {
        CMD_ID = 1394;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_PRODUCE = 2;
        MATERIAL_LACK = 3;
    }
}

message Stage {
    optional uint32 id = 1;
    optional uint32 progress = 2;
    optional uint32 enter_times = 3;
    optional uint32 reset_times = 4;
    repeated uint32 challenge_index_list = 5;
    optional uint32 bonus_end_time = 6;
    optional uint32 bonus_enter_times = 7;
    optional uint32 bonus_total_times = 8;
    optional uint32 min_stage_time = 9;
    optional uint32 max_score = 10;
    optional uint32 stamina_discount = 11;
    optional uint32 total_score = 12;
    optional uint32 mp_raid_pass_avatar_uid = 13;
    optional uint32 mp_raid_weapon_uid = 14;
    repeated uint32 mp_raid_stigmata_uid_set = 15;
    optional bool is_done = 16;
    optional uint32 assist_enter_times = 17;
    repeated uint32 backup_challenge_index_list = 18;
    optional uint32 max_battle_score = 19;
    optional uint32 max_rank = 20;
    optional string client_data = 21;
    optional uint32 first_stamina_discount = 22;
}

message StageActDifficultyInfo {
    optional uint32 act_id = 1;
    optional uint32 difficulty = 2;
    repeated uint32 has_take_challenge_num_index = 3;
}

message StageBattleSaveClientDataReq {
    optional uint32 stage_id = 1;
    optional uint32 act_id = 2;
    optional string client_data = 3;

    enum CmdId {
        CMD_ID = 829;
    }
}

message StageBattleSaveClientDataRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 830;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ONE_VALID_ID = 2;
        STAGE_BEGIN = 3;
    }
}


message StageBeginReq {
    optional uint32 stage_id = 1;
    repeated uint32 avatar_id_list = 2;
    optional AvatarTeamType avatar_team_type = 8;
    optional uint32 assistant_uid = 3;
    optional bool is_speed_up_stage = 4;
    repeated uint32 avatar_trial_id_list = 5;
    repeated uint32 elf_id_list = 6;
    optional uint32 target_wave = 7;
    optional uint32 gratuity_stage_unique_id = 9;
    optional bool is_gratuity_bonus = 10;
    optional string mtp_report_type = 11;
    optional string mtp_report_value = 12;
    optional bool is_re_begin = 13;
    repeated uint32 avatar_restrict_list = 14;
    optional bool is_theme_wanted_mp_assist_mode = 15;
    optional uint32 sc_dlc_support_avatar_id = 16;
    optional uint32 stage_begin_floor = 17;
    repeated uint32 monster_card_unique_id_list = 18;

    enum CmdId {
        CMD_ID = 43;
    }
}



message StageBeginRsp {
    optional Retcode retcode = 1;
    optional uint32 stage_id = 2;
    optional uint32 progress = 3;
    repeated DropItem drop_item_list = 4;
    optional bool is_collect_cheat_data = 5;
    optional string sign_key = 6;
    optional uint32 tag = 7;
    repeated AvatarEquipBuff equip_buff_list = 8;
    repeated string battle_buff_list = 9;
    repeated string battle_attr_list = 10;
    optional bool is_trigger_baodi = 11;
    optional bytes security_cmd_buffer = 12;
    optional string stage_transaction_str = 13;
    optional uint32 god_war_skill_id = 14;

    enum CmdId {
        CMD_ID = 44;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STAGE_NOT_EXIST = 2;
        LEVEL_LACK = 3;
        STAMINA_LACK = 4;
        AVATAR_ERROR = 5;
        EQUIPMENT_FULL = 6;
        ENTER_TIMES_LACK = 7;
        ASSISTANT_PLAYER_FROZEN = 8;
        ACTIVITY_LEVEL_LACK = 9;
        ACTIVITY_ENTER_TIMES_LACK = 10;
        ACTIVITY_NOT_BEGIN = 11;
        ACTIVITY_END = 12;
        AVATAR_NUM_ERROR = 13;
        CHALLENGE_NUM_LACK = 14;
        FRIEND_NUM_MAX = 15;
        EXTRA_STORY_LEVEL_LACK = 16;
        EXTRA_STORY_NOT_BEGIN = 17;
        EXTRA_STORY_END = 18;
        NOT_MEET_RESTRICT = 19;
        EQUIPMENT_MATERIAL_LIMIT = 20;
        EQUIPMENT_FRAGMENT_LIMIT = 21;
        NOT_MEET_FAST = 22;
        PRE_MP_STAGE_NOT_FINISH = 23;
        STAGE_TYPE_ERROR = 24;
        MP_LEVEL_LACK = 25;
        ACTIVITY_UNLOCK = 26;
        NOT_MEET_EXTRA_STORY_CHALLENGE_MODE = 28;
        EXTRA_STORY_EQUIPMENT_USED = 29;
        EXTRA_STORY_AVATAR_USED = 30;
        EXTRA_STORY_AVATAR_LIMIT = 31;
        STAGE_FINISH_ONCE = 32;
        SEASON_TICKET_LACK = 33;
        PRE_STAGE_NOT_FINISH = 34;
        CHALLENGE_MODE_NEED_RESET = 35;
        ALREADY_OPEN_DUNGEONS = 36;
        DUNGEONS_AREA_LOCKED = 37;
        DUNGEONS_TEST_STAGE_FIRST = 38;
        DUNGEONS_TEST_STAGE_DONE = 39;
        COST_MATERIAL_LACK = 40;
        WEEKLY_ENTER_TIMES_LACK = 41;
        RECLAIM_BOOM_ENERGY_LACK = 42;
        RECLAIM_LEVEL_LACK = 43;
        OPENWORLD_BOSS_MP_INVALID = 44;
        SCORE_LACK = 45;
        COUPLE_TOWER_FLOOR_LACK = 46;
        GENERAL_ACTIVITY_CONDITION_LIMIT = 47;
        EQUIPMENT_DISMATCH_LOCKED = 48;
        WEAPON_LOCKED = 49;
        STIGMATA_LOCKED = 50;
        ELF_ERROR = 51;
        NOT_IN_SQUAD = 52;
        ELF_CARRY_LEVEL_LIMIT = 53;
        CAMPAIGN_PHASE_ERROR = 54;
        MISSION_LOCKED = 55;
        HAS_TAKE_CAMPAIGN_REWARD = 56;
        KINGDOM_WAR_NOT_OPEN = 57;
        KINGDOM_WAR_POINT_ERROR = 58;
        KINGDOM_WAR_LEVEL_LACK = 59;
        FEATURE_CLOSED = 61;
        NOT_IN_TEAM = 62;
        EXTRA_MATERIAL_LACK = 63;
        FEATURE_LIMIT = 64;
        STAGE_MISMATCH = 65;
        GRATUITY_STAGE_NOT_EXIST = 66;
        NOT_IN_SAME_ARMADA = 67;
        ASSIST_STAMINA_LACK = 68;
        ARMADA_ACTIVITY_NOT_OPEN = 69;
        NOT_IN_ARMADA = 70;
        LOGIN_DAYS_LACK = 71;
        NOT_NEWBIE = 72;
        IN_CD = 73;
        DAILY_RAID_NOT_ACTIVE = 74;
        CHAPTER_PRE_ZONE_NOT_FINISHED = 75;
        BEAST_TIME_NOT_ENOUGH = 76;
        SINGLE_WANTED_BOX_UNPICK = 77;
        EXCLUSIVE_STAGE_CONFLICT = 78;
        THEME_WANTED_LEADER_TICKET_LACK = 79;
        THEME_WANTED_MEMBER_LOCKED = 80;
        THEME_WANTED_LOCK = 81;
        THEME_WANTED_TICKET_LACK = 82;
        SLG_BATTLE_NOT_OPEN = 83;
        SLG_BATTLE_POINT_ERROR = 84;
        SLG_BATTLE_POINT_NOT_OPEN = 85;
        UNLOCK_TIME_LIMIT = 86;
        BEGIN_FLOOR_ERROR = 87;
        OPENWORLD_STORY_NOT_FINISH = 88;
        MONSTER_CARD_MONSTER_ERROR = 89;
        MONSTER_CARD_COST_LIMIT = 90;
        CHAPTER_OW_FAME_LEVEL_LACK = 91;
        BUFF_ASSIST_STAGE_NOT_OPEN = 92;
    }
}

message StageBuff {
    optional uint32 stage_id = 1;
    repeated uint32 gen_buff_id_list = 2;
    repeated uint32 hold_buff_id_list = 3;
    optional bool is_new = 4;
    repeated uint32 carry_buff_id_list = 5;
}


message StageChallengeData {
    optional uint32 challenge_index = 1;
    optional RewardData reward = 2;
}

enum StageChallengeType {
    CHALLENGE_LIMIT_AVATAR = 1;
    CHALLENGE_LIMIT_AVATAR_KILLED = 2;
    CHALLENGE_MAX_COMBO = 3;
    CHALLENGE_LIMIT_BE_HIT = 4;
    CHALLENGE_LIMIT_LEVEL_TIME = 5;
    CHALLENGE_LIMIT_WITCH_TIME_TRIGGERED = 6;
    CHALLENGE_MAX_DAMAGE_IN_WITCH_TIME = 7;
    CHALLENGE_MAX_ULTIMATE_SKILL_TRIGGERED = 8;
    CHALLENGE_MAX_DAMAGE_IN_CERTAIN_TIME = 9;
    CHALLENGE_MAX_ULTIMATE_SKILL_TRIGGERED_BY_DISTINCT_AVATAR = 10;
    CHALLENGE_LIMIT_BE_HIT_DOWN = 11;
    CHALLENGE_MAX_AVATAR_CLASS_IN_TEAM = 12;
    CHALLENGE_MAX_MONSTER_KILLED = 13;
    CHALLENGE_MAX_AVATAR_NATURE_IN_TEAM = 14;
    CHALLENGE_LIMIT_TOTAL_DAMAGE = 15;
    CHALLENGE_HELPER_AVATAR_ALIVE = 16;
    CHALLENGE_LIMIT_TRAP_TRIGGERED = 17;
    CHALLENGE_MAX_BOX_OPENED = 18;
    CHALLENGE_MAX_DEBUFF_ADD = 19;
    CHALLENGE_LIMIT_BE_ADDED_DEBUFF = 20;
    CHALLENGE_MAX_ALL_DAMAGE_IND_WITCH_TIME = 21;
    CHALLENGE_MAX_MONSTER_KILLED_BY_SWITCH_IN_ATTACK = 22;
    CHALLENGE_MAX_MONSTER_KILLED_IN_WITCH_TIME = 23;
    CHALLENGE_MONSTER_LAST_KILLED_BY_SWITCH_IN_ATTACK = 24;
    CHALLENGE_MAX_MONSTER_KILLED_IN_CERTAIN_TIME = 25;
    CHALLENGE_MAX_MONSTER_HIT_AIR = 26;
    CHALLENGE_FINISH_STAGE_NORMAL = 27;
    CHALLENGE_FINISH_STAGE_FAST = 28;
    CHALLENGE_FINISH_STAGE_VERY_FAST = 29;
    CHALLENGE_MONSTER_KILLED_BY_BRANCH = 30;
    CHALLENGE_QTE_TRIGGERED = 31;
    CHALLENGE_MAX_MONSTER_KILLED_BY_ASSASSIN = 32;
    CHALLENGE_MAX_MONSTER_CONTINOUS_KILLED_BY_ASSASSIN = 33;
    CHALLENGE_MAX_ELITE_MONSTER_KLLED = 34;
    CHALLENGE_LIMIT_DISCOVERED = 35;
    CHALLENGE_MAX_DEFEND_OBJECT_DAMAGE = 36;
    CHALLENGE_MAX_TEAM_SKILL_TRIGGERED = 37;
    CHALLENGE_ALL_STORY_MISSION_COMPLETE = 38;
    CHALLENGE_MAX_SCORE = 39;
    CHALLENGE_MAX_TEAM_SKILL_TRIGGERED_FOR_ALL_TEAM_MEMBER = 40;
    CHALLENGE_MAX_MONSTER_KILLED_IN_WITCH_TIME_FOR_ALL_TEAM_MEMBER = 41;
    CHALLENGE_MAX_MONSTER_KILLED_FOR_ALL_TEAM_MEMBER = 42;
    CHALLENGE_MONSTER_KILLED_BY_BRANCH_FOR_ALL_TEAM_MEMBER = 43;
    CHALLENGE_MAX_QTE_TRIGGERED_FOR_ALL_TEAM_MEMBER = 44;
    CHALLENGE_LIMIT_EVADE_SUCCESS_TRIGGERED_FOR_ALL_TEAM_MEMBER = 45;
    CHALLENGE_MAX_ULTIMATE_SKILL_TRIGGERED_FOR_ALL_TEAM_MEMBER = 46;
    CHALLENGE_LIMIT_AVATAR_KILLED_FOR_ALL_TEAM_MEMBER = 47;
    CHALLENGE_MONSTER_KILLED_BY_QTE_FOR_ALL_TEAM_MEMBER = 48;
    CHALLENGE_CLIENT_CUSTOM = 49;
    CHALLENGE_CUSTOM_BUTTON = 50;
    CHALLENGE_LIMIT_LEVEL_TIME2 = 51;
    CHALLENGE_MONSTERCARD_LIMIT_AVATARSIDE_MONSTER_KILLED = 52;
}

message StageChapterBoss {
    optional uint32 boss_stage_id = 1;
    optional uint32 left_hp = 2;
}

message StageChapterExclusive {
    optional uint32 group_id = 1;
    optional uint32 stage_id = 2;
}



message StageChapterInfo {
    optional uint32 chapter_id = 1;
    optional uint64 has_take_challenge = 2;
    optional uint32 enter_player_level = 3;
    repeated StageChapterBoss boss_list = 4;
    repeated StageChapterExclusive exclusive_stage_list = 5;
}

message StageCheatData {
    optional Type type = 1;
    optional float value = 2;

    enum Type {
        STAGE_ID = 1;
        STAGE_PROGRESS = 2;
        STAGE_MAX_SCORE = 3;
        TIME_START = 1001;
        TIME_USE = 1002;
        AVG_FRAME_TIME = 1003;
        PLAYER_LEVEL = 1004;
        STAGE_SCORE = 1005;
        MONSTER_TOTAL_HP = 1006;
        MONSTER_TOTAL_LOSS_HP = 1007;
        MONSTER_HIT_MISS_NUM = 1008;
        MONSTER_HIT_NUM = 1009;
        NATURE_DAMAGE_BONUS_RATIO_MAX = 1010;
        AVATAR_ID_1 = 2001;
        AVATAR_LEVEL_1 = 2002;
        AVATAR_COMBAT_1 = 2003;
        ATTACK_MAX_1 = 2004;
        SP_MAX_1 = 2005;
        SP_BEGIN_1 = 2006;
        SP_END_1 = 2007;
        SP_GAIN_1 = 2008;
        SP_USE_1 = 2009;
        HP_MAX_1 = 2010;
        HP_BEGIN_1 = 2011;
        HP_END_1 = 2012;
        HP_GAIN_1 = 2013;
        HIT_COUNT_1 = 2014;
        HIT_DAMAGE_1 = 2015;
        HIT_NORMAL_DAMAGE_MAX_1 = 2016;
        HIT_CRITICAL_DAMAGE_MAX_1 = 2017;
        BEHIT_COUNT_1 = 2018;
        BEHIT_NORMAL_DAMAGE_MAX_1 = 2019;
        BEHIT_CRITICAL_DAMAGE_MAX_1 = 2020;
        COMBO_MAX_1 = 2021;
        AVATAR_TIME_USE_1 = 2022;
        WEAPON_LEVEL_1 = 2023;
        STIGMATA_LEVEL_MAX_1 = 2024;
        MP_TEAM_SKILL_TIMES_1 = 2025;
        MP_QTE_SKILL_TIMES_1 = 2026;
        MP_BE_RESCUED_TIMES_1 = 2027;
        MP_RESCUE_TIMES_1 = 2028;
        MP_AVG_RESCUE_TIME_1 = 2029;
        MP_CHAT_TIMES_1 = 2030;
        ULTIMATE_SKILL_TIMES_1 = 2031;
        ULTIMATE_SKILL_DURATION_1 = 2032;
        ATTACK_SP_GAIN_1 = 2033;
        WEAPON_SKILL_TIMES_1 = 2034;
        SWITCH_IN_SKILL_DAMAGE_MAX_1 = 2035;
        BRANCH_SKILL_DAMAGE_MAX_1 = 2036;
        CHARGE_SKILL_DAMAGE_MAX_1 = 2037;
        ULTIMATE_SKILL_DAMAGE_MAX_1 = 2038;
        ULTIMATE_SKILL_INTERVAL_TIME_MIN_1 = 2039;
        WEAPON_SKILL_INTERVAL_TIME_MIN_1 = 2040;
        HIT_INTERVAL_TIME_MIN_1 = 2041;
        SP_MIN_1 = 2042;
        HP_MIN_1 = 2043;
        STIGMATA_1_1 = 2044;
        STIGMATA_1_2 = 2045;
        STIGMATA_1_3 = 2046;
        WEAPON_ID_1 = 2047;
        DRESS_ID_1 = 2048;
        SERVER_AVATAR_ID_1 = 2049;
        SERVER_STIGMATA_1_1 = 2050;
        SERVER_STIGMATA_1_2 = 2051;
        SERVER_STIGMATA_1_3 = 2052;
        SERVER_WEAPON_ID_1 = 2053;
        SERVER_DRESS_ID_1 = 2054;
        AVATAR_ID_2 = 2101;
        AVATAR_LEVEL_2 = 2102;
        AVATAR_COMBAT_2 = 2103;
        ATTACK_MAX_2 = 2104;
        SP_MAX_2 = 2105;
        SP_BEGIN_2 = 2106;
        SP_END_2 = 2107;
        SP_GAIN_2 = 2108;
        SP_USE_2 = 2109;
        HP_MAX_2 = 2110;
        HP_BEGIN_2 = 2111;
        HP_END_2 = 2112;
        HP_GAIN_2 = 2113;
        HIT_COUNT_2 = 2114;
        HIT_DAMAGE_2 = 2115;
        HIT_NORMAL_DAMAGE_MAX_2 = 2116;
        HIT_CRITICAL_DAMAGE_MAX_2 = 2117;
        BEHIT_COUNT_2 = 2118;
        BEHIT_NORMAL_DAMAGE_MAX_2 = 2119;
        BEHIT_CRITICAL_DAMAGE_MAX_2 = 2120;
        COMBO_MAX_2 = 2121;
        AVATAR_TIME_USE_2 = 2122;
        WEAPON_LEVEL_2 = 2123;
        STIGMATA_LEVEL_MAX_2 = 2124;
        MP_TEAM_SKILL_TIMES_2 = 2125;
        MP_QTE_SKILL_TIMES_2 = 2126;
        MP_BE_RESCUED_TIMES_2 = 2127;
        MP_RESCUE_TIMES_2 = 2128;
        MP_AVG_RESCUE_TIME_2 = 2129;
        MP_CHAT_TIMES_2 = 2130;
        ULTIMATE_SKILL_TIMES_2 = 2131;
        ULTIMATE_SKILL_DURATION_2 = 2132;
        ATTACK_SP_GAIN_2 = 2133;
        WEAPON_SKILL_TIMES_2 = 2134;
        SWITCH_IN_SKILL_DAMAGE_MAX_2 = 2135;
        BRANCH_SKILL_DAMAGE_MAX_2 = 2136;
        CHARGE_SKILL_DAMAGE_MAX_2 = 2137;
        ULTIMATE_SKILL_DAMAGE_MAX_2 = 2138;
        ULTIMATE_SKILL_INTERVAL_TIME_MIN_2 = 2139;
        WEAPON_SKILL_INTERVAL_TIME_MIN_2 = 2140;
        HIT_INTERVAL_TIME_MIN_2 = 2141;
        SP_MIN_2 = 2142;
        HP_MIN_2 = 2143;
        STIGMATA_2_1 = 2144;
        STIGMATA_2_2 = 2145;
        STIGMATA_2_3 = 2146;
        WEAPON_ID_2 = 2147;
        DRESS_ID_2 = 2148;
        SERVER_AVATAR_ID_2 = 2149;
        SERVER_STIGMATA_2_1 = 2150;
        SERVER_STIGMATA_2_2 = 2151;
        SERVER_STIGMATA_2_3 = 2152;
        SERVER_WEAPON_ID_2 = 2153;
        SERVER_DRESS_ID_2 = 2154;
        AVATAR_ID_3 = 2201;
        AVATAR_LEVEL_3 = 2202;
        AVATAR_COMBAT_3 = 2203;
        ATTACK_MAX_3 = 2204;
        SP_MAX_3 = 2205;
        SP_BEGIN_3 = 2206;
        SP_END_3 = 2207;
        SP_GAIN_3 = 2208;
        SP_USE_3 = 2209;
        HP_MAX_3 = 2210;
        HP_BEGIN_3 = 2211;
        HP_END_3 = 2212;
        HP_GAIN_3 = 2213;
        HIT_COUNT_3 = 2214;
        HIT_DAMAGE_3 = 2215;
        HIT_NORMAL_DAMAGE_MAX_3 = 2216;
        HIT_CRITICAL_DAMAGE_MAX_3 = 2217;
        BEHIT_COUNT_3 = 2218;
        BEHIT_NORMAL_DAMAGE_MAX_3 = 2219;
        BEHIT_CRITICAL_DAMAGE_MAX_3 = 2220;
        COMBO_MAX_3 = 2221;
        AVATAR_TIME_USE_3 = 2222;
        WEAPON_LEVEL_3 = 2223;
        STIGMATA_LEVEL_MAX_3 = 2224;
        MP_TEAM_SKILL_TIMES_3 = 2225;
        MP_QTE_SKILL_TIMES_3 = 2226;
        MP_BE_RESCUED_TIMES_3 = 2227;
        MP_RESCUE_TIMES_3 = 2228;
        MP_AVG_RESCUE_TIME_3 = 2229;
        MP_CHAT_TIMES_3 = 2230;
        ULTIMATE_SKILL_TIMES_3 = 2231;
        ULTIMATE_SKILL_DURATION_3 = 2232;
        ATTACK_SP_GAIN_3 = 2233;
        WEAPON_SKILL_TIMES_3 = 2234;
        SWITCH_IN_SKILL_DAMAGE_MAX_3 = 2235;
        BRANCH_SKILL_DAMAGE_MAX_3 = 2236;
        CHARGE_SKILL_DAMAGE_MAX_3 = 2237;
        ULTIMATE_SKILL_DAMAGE_MAX_3 = 2238;
        ULTIMATE_SKILL_INTERVAL_TIME_MIN_3 = 2239;
        WEAPON_SKILL_INTERVAL_TIME_MIN_3 = 2240;
        HIT_INTERVAL_TIME_MIN_3 = 2241;
        SP_MIN_3 = 2242;
        HP_MIN_3 = 2243;
        STIGMATA_3_1 = 2244;
        STIGMATA_3_2 = 2245;
        STIGMATA_3_3 = 2246;
        WEAPON_ID_3 = 2247;
        DRESS_ID_3 = 2248;
        SERVER_AVATAR_ID_3 = 2249;
        SERVER_STIGMATA_3_1 = 2250;
        SERVER_STIGMATA_3_2 = 2251;
        SERVER_STIGMATA_3_3 = 2252;
        SERVER_WEAPON_ID_3 = 2253;
        SERVER_DRESS_ID_3 = 2254;
        ELF_ID = 2301;
        ELF_LEVEL = 2302;
        ELF_COMBAT = 2303;
        ELF_ATTACK = 2304;
        ELF_SP_MAX = 2305;
        ELF_ULTIMATE_SKILL_TIMES = 2306;
        ELF_SP_USE = 2307;
        ELF_HIT_CRITICAL_DAMAGE_MAX = 2308;
        ELF_HIT_NORMAL_DAMAGE_MAX = 2309;
        ELF_ULTIMATE_SKILL_INTERVAL_TIME_MIN = 2310;
        ELF_HIT_INTERVAL_TIME_MIN = 2311;
        SERVER_ELF_ID = 2312;
        ELF_ID_2 = 2401;
        ELF_LEVEL_2 = 2402;
        ELF_COMBAT_2 = 2403;
        ELF_ATTACK_2 = 2404;
        ELF_SP_MAX_2 = 2405;
        ELF_ULTIMATE_SKILL_TIMES_2 = 2406;
        ELF_SP_USE_2 = 2407;
        ELF_HIT_CRITICAL_DAMAGE_MAX_2 = 2408;
        ELF_HIT_NORMAL_DAMAGE_MAX_2 = 2409;
        ELF_ULTIMATE_SKILL_INTERVAL_TIME_MIN_2 = 2410;
        ELF_HIT_INTERVAL_TIME_MIN_2 = 2411;
        SERVER_ELF_ID_2 = 2412;
        ELF_ID_3 = 2501;
        ELF_LEVEL_3 = 2502;
        ELF_COMBAT_3 = 2503;
        ELF_ATTACK_3 = 2504;
        ELF_SP_MAX_3 = 2505;
        ELF_ULTIMATE_SKILL_TIMES_3 = 2506;
        ELF_SP_USE_3 = 2507;
        ELF_HIT_CRITICAL_DAMAGE_MAX_3 = 2508;
        ELF_HIT_NORMAL_DAMAGE_MAX_3 = 2509;
        ELF_ULTIMATE_SKILL_INTERVAL_TIME_MIN_3 = 2510;
        ELF_HIT_INTERVAL_TIME_MIN_3 = 2511;
        SERVER_ELF_ID_3 = 2512;
        IS_MP_VOICE_USED = 3001;
        MP_VOICE_USE_TIME = 3002;
        SEALED_EVENT_ID = 4001;
    }
}

enum StageDifficulty {
    STAGE_DIFFICULTY_NORMAL = 1;
    STAGE_DIFFICULTY_HARD = 2;
    STAGE_DIFFICULTY_HELL = 3;
}


message StageDropDisplayInfo {
    optional uint32 stage_id = 1;
    repeated uint32 drop_item_id_list = 2;
    repeated uint32 first_drop_item_id_list = 3;
    optional bool double_drop = 4;
    repeated uint32 bonus_drop_item_id_list = 5;
    repeated string battle_buff_list = 6;
    repeated uint32 bonus_equip_need_list = 7;
    optional uint32 battle_display_id = 8;
    repeated string battle_attr_list = 9;
    repeated RewardItemData first_drop_item_data_list = 10;
}

message StageEndReq {
    optional bytes body = 1;
    optional string sign = 2;

    enum CmdId {
        CMD_ID = 45;
    }
}










message StageEndReqBody {
    optional uint32 stage_id = 1;
    optional StageEndStatus end_status = 2;
    optional bool is_mvp = 3;
    optional uint32 avatar_exp_reward = 4;
    optional uint32 scoin_reward = 5;
    repeated uint32 challenge_index_list = 6;
    repeated DropItem drop_item_list = 7;
    repeated StageCheatData cheat_data_list = 8;
    optional uint32 cheat_type = 9;
    optional uint32 stage_pass_time = 10;
    optional uint32 max_combo_num = 11;
    optional uint32 score = 12;
    optional uint32 client_average_rtt = 13;
    optional uint32 client_max_rtt = 14;
    optional uint32 be_hit_times = 15;
    optional uint32 team_id = 16;
    optional uint32 mvp_score = 17;
    repeated ChallengeModeAvatar avatar_list = 18;
    optional uint32 evade_times = 19;
    optional uint32 evade_success_times = 20;
    optional uint32 boss_damage = 21;
    optional uint32 battle_score = 23;
    optional uint32 rank = 24;
    optional MpStageRecord mp_stage_record = 25;
    optional uint32 dungeons_evaluation = 26;
    optional StageFightInfo fight_info = 27;
    optional MpStageDamageInfo mp_stage_damage_info = 28;
    optional bytes security_cmd_reply = 29;
    repeated uint32 buff_id_list = 30;
    optional uint32 stage_end_floor = 31;
    optional GodWarStatus god_war_status = 32;
    optional ScDLCStatus sc_dlc_status = 33;
}








message StageEndRsp {
    optional Retcode retcode = 1;
    optional uint32 stage_id = 2;
    optional uint32 player_exp_reward = 3;
    optional uint32 avatar_exp_reward = 4;
    optional uint32 scoin_reward = 5;
    repeated StageChallengeData challenge_list = 6;
    optional uint32 friends_point_add = 7;
    optional uint32 progress = 8;
    repeated StageSpecialChallengeData special_challenge_list = 9;
    optional MpStageMvpReward mvp_reward = 10;
    repeated DropItem mp_drop_item_list = 11;
    optional uint32 mp_exp_reward = 12;
    optional uint32 exp_convert_scoin = 13;
    optional uint32 bond_add_friends_point = 14;
    optional AccountBuffReward buff_reward = 16;
    optional uint32 world_boss_score = 17;
    optional uint32 rank_scoin = 18;
    optional RewardData line_enhance_reward_data = 19;
    optional uint32 dungeons_evaluation = 20;
    repeated DropItem dungeons_drop_item_list = 21;
    optional StageEndStatus end_status = 22;
    optional uint32 bonus_score = 24;
    repeated DropItem bonus_drop_list = 25;
    repeated DropItem gratuity_drop_list = 26;
    repeated RewardData extra_reward_data_list = 27;
    repeated DropItem extra_drop_list = 28;
    optional bool is_new_max_score = 29;
    repeated DropItem theme_wanted_drop_item_list = 31;
    repeated DropItem theme_wanted_show_extra_drop_item_list = 32;
    optional bool is_theme_wanted_extra_drop_taken_by_first_pass = 33;
    optional uint32 god_war_challenge_score = 34;

    enum CmdId {
        CMD_ID = 46;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        STAGE_ERROR = 2;
        DROP_ERROR = 3;
        CHALLENGE_ERROR = 4;
        STAGE_TIME_ERROR = 5;
        ALREADY_OPEN_DUNGEONS = 6;
        NOT_MEET_FAST = 22;
        COST_MATERIAL_LACK = 40;
        NOT_IN_TEAM = 62;
        SLG_BATTLE_NOT_OPEN = 63;
    }
}

enum StageEndStatus {
    STAGE_WIN = 1;
    STAGE_NOT_MEET_CONDITION = 2;
    STAGE_All_DEAD = 3;
    STAGE_EXIT = 4;
}

enum StageEnterTimesType {
    STAGE_ENTER_TIMES_DAILY = 0;
    STAGE_ENTER_TIMES_WEEKLY = 1;
}

message StageEventData {
    optional uint32 begin_time = 1;
    optional uint32 end_time = 2;
    optional uint32 chapter_id = 3;
    optional uint32 unlock_level = 4;
}

message StageFightInfo {
    optional uint32 damage = 1;
    optional uint32 elf_damage = 2;
    optional uint32 score = 3;
}

message StageInnerAvatarData {
    optional uint32 avatar_id = 1;
    optional uint32 avatar_level = 2;
    optional uint32 avatar_star = 3;
    optional uint32 total_output = 4;
    optional uint32 no_restrict_output = 5;
    optional uint32 do_restrict_output = 6;
    optional uint32 be_restrict_output = 7;
    optional uint32 total_input = 8;
    optional float battle_time = 9;
    optional float total_time = 10;
    optional uint32 enter_times = 11;
    optional uint32 leave_times = 12;
    optional uint32 do_break_times = 13;
    optional uint32 be_break_times = 14;
    optional uint32 do_hit_times = 15;
    optional uint32 be_hit_times = 16;
    optional uint32 exskill_times = 17;
    optional uint32 evade_times = 18;
    optional uint32 evade_effect_times = 19;
    optional uint32 attack_sp_recover = 20;
    optional uint32 total_sp_recover = 21;
    optional uint32 dps = 22;
    optional uint32 special_attack_times = 23;
    optional uint32 evade_success_times = 24;
    optional uint32 weapon_active_skill = 25;
    optional uint32 stage_id = 26;
    optional uint32 normal_output = 27;
    optional uint32 ultra_output = 28;
    optional uint32 switchin_output = 29;
    optional uint32 branch_output = 30;
    optional uint32 charge_output = 31;
    optional uint32 hp_cost = 32;
    optional uint32 hp_recover = 33;
    optional uint32 sp_cost = 34;
    optional uint32 shield_damage = 35;
    optional uint32 avatar_sub_star = 36;
    optional bool is_player_avatar = 37;
}




message StageInnerDataReportReq {
    repeated StageInnerAvatarData avatar_list = 1;
    repeated StageInnerMonsterData monster_list = 2;
    optional uint32 rotate_camera_times = 3;
    repeated StageInnerElfData elf_list = 4;
    optional uint32 stage_id = 5;

    enum CmdId {
        CMD_ID = 131;
    }
}

message StageInnerDataReportRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 132;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message StageInnerElfData {
    optional uint32 elf_id = 1;
    optional uint32 elf_star = 2;
    optional uint32 elf_level = 3;
    optional uint32 attack_times = 4;
    optional uint32 hit_times = 5;
    optional uint32 total_output = 6;
    optional uint32 normal_output = 7;
    optional uint32 ultra_output = 8;
    optional uint32 total_sp_recover = 9;
    optional uint32 skill_use_times = 10;
}

message StageInnerMonsterData {
    optional string monster_name = 1;
    optional string monster_type = 2;
    optional uint32 monster_level = 3;
    optional uint32 monster_num = 4;
    optional uint32 avg_output = 5;
    optional uint32 avg_live_time = 6;
    optional uint32 dps = 7;
    optional uint32 hit_avatar_times = 8;
    optional uint32 break_avatar_times = 9;
}

enum StageOpenStatus {
    STAGE_NOT_OPEN = 1;
    STAGE_OPENED = 2;
    STAGE_CLOSED = 3;
}

enum StagePassType {
    STAGE_PASS_TYPE_NORMAL = 0;
    STAGE_PASS_TYPE_BURDEN_ALLEVIATION = 1;
}



message StageRecommendAvatar {
    optional string id = 1;
    repeated RecommendAvatar recommend_avatar_list = 2;
    optional AvatarRecommendType type = 3;
}

enum StageRecordType {
    STAGE_RECORD_SCORE = 1;
    STAGE_RECORD_TIME = 2;
    STAGE_RECORD_TOTAL_SCORE = 3;
    STAGE_RECORD_BATTLE_SCORE = 4;
    STAGE_RECORD_BATTLE_SCORE_NO_COIN = 5;
}

enum StageResetType {
    STAGE_RESET_TYPE_RESET = 0;
    STAGE_RESET_TYPE_ADD = 1;
}


message StageSpecialChallengeData {
    optional uint32 challenge_index = 1;
    optional DropItem drop_item = 2;
}

enum StageStatus {
    STAGE_LOCKED = 1;
    STAGE_DOING = 2;
    STAGE_DONE = 3;
}

message StageSwitchData {
    optional uint32 stage_id = 1;
}

enum StageTagRestrictType {
    STAGE_TAG_RESTRICT_NONE = 0;
    STAGE_TAG_RESTRICT_TAG = 1;
    STAGE_TAG_RESTRICT_NO_TAG = 2;
    STAGE_TAG_RESTRICT_ATTRIBUTE = 3;
    STAGE_TAG_RESTRICT_NO_ATTRIBUTE = 4;
    STAGE_TAG_RESTRICT_ROLE = 5;
    STAGE_TAG_RESTRICT_NO_ROLE = 6;
}

enum StageType {
    STAGE_STORY = 1;
    STAGE_WEEK_DAY = 2;
    STAGE_BEFALL = 3;
    STAGE_ENDLESS = 4;
    STAGE_NUCLEAR = 5;
    STAGE_EXTRA_STORY = 7;
    STAGE_ROGUE = 9;
    STAGE_ARMADA = 10;
    STAGE_OPENWORLD = 11;
    STAGE_OPENWORLD_BOSS = 12;
    STAGE_TUTORIAL = 13;
    STAGE_CAMPWAR = 14;
    STAGE_EX_BOSS = 15;
    STAGE_MINUTE = 16;
    STAGE_SEALED = 17;
    STAGE_WORLDBOSS = 18;
    STAGE_LEVELMATRIX = 19;
    STAGE_PUSHTOWER = 20;
    STAGE_TEAM_ASSAULT = 21;
    STAGE_GENERAL_ACTIVITY = 22;
    STAGE_AVATAR_TRAINING = 23;
    STAGE_ARMADA_WAR = 24;
    STAGE_DUNGEONS = 25;
    STAGE_OPENWORLD_DEFENSE = 26;
    STAGE_RECLAIM = 27;
    STAGE_OPENWORLD_BOSS_MP = 28;
    STAGE_OPENWORLD_ENDLESS = 29;
    STAGE_MATRIX_NORMAL = 30;
    STAGE_MATRIX_QAVATAR = 31;
    STAGE_COUPLE_TOWER = 32;
    STAGE_CAMPAIGN = 33;
    STAGE_TOWER_RAID = 34;
    STAGE_KINGDOM_WAR = 35;
    STAGE_TVT = 36;
    STAGE_QUANTUM_ENDLESS = 37;
    STAGE_WANTED = 38;
    STAGE_QAVATAR_PVE = 39;
    STAGE_DLC_TOWER = 40;
    STAGE_ENDLESS_SINGLE = 41;
    STAGE_MONOPOLY_BOSS = 42;
    STAGE_ADVENTURE_GROUP = 43;
    STAGE_GLOBAL_WAR = 44;
    STAGE_GRATUITY = 45;
    STAGE_NINJA = 46;
    STAGE_SINGLE_RAID_STEP = 47;
    STAGE_ARMADA_STAGE_SCORE_ACTIVITY = 48;
    STAGE_NEWBIE_CHALLENGE_ACTIVITY = 49;
    STAGE_CHALLENGE_WAR = 50;
    STAGE_MASSIVE_WAR = 51;
    STAGE_SANCTUARY = 52;
    STAGE_CRISIS_MODE = 53;
    STAGE_SCHEDULED_MAP_SITE = 54;
    STAGE_EXAMINATION = 55;
    STAGE_MONOPOLY_MONSTER = 56;
    STAGE_ULTIMATE_ENDLESS = 57;
    STAGE_HYBRID = 58;
    STAGE_DAILY_MP = 59;
    STAGE_ULTRA_ENDLESS = 60;
    STAGE_BUFF_TOWER = 61;
    STAGE_ROGUE_TOWER = 62;
    STAGE_ROGUE_TOWER_ENDLESS = 64;
    STAGE_CHATWORLD_BEAST = 65;
    STAGE_SLG = 66;
    STAGE_THEME_WANTED = 67;
    STAGE_GOD_WAR = 68;
    STAGE_HYBRID_RELAY = 69;
    STAGE_GENSHIN_LD = 70;
    STAGE_RANCH = 71;
    STAGE_SINK_CITY_DLC_PREHEAT = 72;
    STAGE_SC_DLC_CHALLENGE = 73;
    STAGE_OW_CHAPTER_TOWER = 74;
    STAGE_OW_CHAPTER_ENDLESS_TOWER = 75;
    STAGE_CHATWORLD_BOX = 76;
    STAGE_SC_DLC_MP = 77;
    STAGE_GREEDY_ENDLESS = 78;
    STAGE_OW_CHAPTER_CYCLE = 79;
    STAGE_OW_HUNT_ACTIVITY = 80;
    STAGE_FRONT_ENDLESS = 81;
    STAGE_MONSTER_CARD_NORMAL = 82;
    STAGE_MONSTER_CARD_BOSS = 83;
    STAGE_MONSTER_CARD_TOWER = 84;
    STAGE_DICEY_DUNGEON_STORY = 85;
    STAGE_DICEY_DUNGEON_SCHEDULE = 86;
    STAGE_BUFF_ASSIST = 87;
    STAGE_QCANDY_TUTORIAL = 88;
    STAGE_QCANDY_PVP = 89;
}

message StaminaExchangeReq {

    enum CmdId {
        CMD_ID = 18;
    }
}

message StaminaExchangeRsp {
    optional Retcode retcode = 1;
    optional uint32 hcoin_cost = 2;
    optional uint32 stamina_get = 3;

    enum CmdId {
        CMD_ID = 19;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HCOIN_LACK = 2;
        TIMES_LACK = 3;
        STAMINA_FULL = 4;
    }
}

message StartFarmProduceReq {
    optional uint32 slot_id = 1;
    optional uint32 produce_material_id = 2;

    enum CmdId {
        CMD_ID = 1389;
    }
}


message StartFarmProduceRsp {
    optional Retcode retcode = 1;
    optional uint32 slot_id = 2;
    optional uint32 produce_material_id = 3;
    optional FarmSlotDetail slot_detail = 4;

    enum CmdId {
        CMD_ID = 1390;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SLOT_LOCKED = 2;
        SLOT_IN_PRODUCE = 3;
        EQUIPMENT_MATERIAL_LIMIT = 4;
        PRODUCE_MATERIAL_LIMIT = 5;
        PRODUCE_TIMES_LIMIT = 6;
    }
}

message StartNextRoundExaminationReq {

    enum CmdId {
        CMD_ID = 4327;
    }
}

message StartNextRoundExaminationRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4328;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_FINISHED = 2;
    }
}


message StartRoomMatchReq {
    optional RoomMode room_mode = 1;

    enum CmdId {
        CMD_ID = 3165;
    }
}

message StartRoomMatchRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3166;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TOO_FREQUENT = 2;
        ALREADY_IN_MATCH = 3;
        IS_IN_BATTLE = 4;
        IN_CD = 5;
        TIMES_LACK = 6;
        STAGE_NOT_IN_SCHEDULE = 7;
        IS_NOT_READY = 8;
        NO_SCHEDULE = 9;
    }
}

message StartSlotMachineReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4317;
    }
}

message StartSlotMachineRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 box_item_id = 3;

    enum CmdId {
        CMD_ID = 4318;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        MATERIAL_LACK = 3;
    }
}


message StepCompensation {
    optional uint32 step_id = 1;
    optional uint32 step_reward_id = 2;
    repeated StepMissionCompensation mission_list = 3;
}

message StepMissionCompensation {
    optional uint32 mission_id = 1;
    optional uint32 reward_id = 2;
}



message Stigmata {
    optional uint32 unique_id = 1;
    optional uint32 id = 2;
    optional uint32 level = 3;
    optional uint32 exp = 4;
    optional bool is_protected = 5;
    optional bool is_affix_identify = 6;
    optional uint32 cancel_protect_time = 7;
    optional uint32 slot_num = 8;
    repeated StigmataRune rune_list = 9;
    repeated StigmataRune wait_select_rune_list = 10;
    optional uint32 refine_value = 11;
    optional uint32 promote_times = 12;
    optional uint32 title_level = 13;
    optional uint32 title_exp = 14;
    optional uint32 title_id = 15;
    repeated StigmataRuneGroup wait_select_rune_group_list = 16;
}


message StigmataDetailData {
    optional uint32 id = 1;
    optional uint32 level = 2;
    repeated StigmataRune rune_list = 3;
    optional uint32 title_level = 4;
    optional uint32 title_exp = 5;
    optional uint32 title_id = 6;
    optional uint32 unique_id = 7;
}

enum StigmataPosition {
    STIGMATA_UP = 1;
    STIGMATA_MID = 2;
    STIGMATA_DOWN = 3;
    STIGMATA_MAX = 4;
}

enum StigmataRefineTimesType {
    STIGMATA_REFINE_TIMES_ONE = 1;
    STIGMATA_REFINE_TIMES_TEN = 10;
}

enum StigmataRefineType {
    STIGMATA_REFINE_NORMAL = 1;
    STIGMATA_REFINE_ADD_SLOT = 2;
    STIGMATA_REFINE_SPECIAL = 3;
    STIGMATA_REFINE_LOCK = 4;
}

message StigmataRune {
    optional uint32 rune_id = 1;
    optional uint32 strength_percent = 2;
}


message StigmataRuneGroup {
    optional uint32 unique_id = 1;
    repeated StigmataRune rune_list = 2;
}

enum StigmataType {
    STIGMATA_SLOT_1 = 1;
    STIGMATA_SLOT_2 = 2;
    STIGMATA_SLOT_3 = 3;
}

enum StorySweepGroupType {
    STORY_SWEEP_GROUP_AVATAR_FRAGMENT = 1;
    STORY_SWEEP_GROUP_MATERIAL = 2;
    STORY_SWEEP_GROUP_ACTIVITY = 3;
    STORY_SWEEP_GROUP_MATERIAL_NEW = 4;
}

message Subscription {
    optional uint32 subs_id = 1;
    optional uint32 expires_time = 2;
}


message SubscriptionStatusNotify {
    repeated Subscription subs_list = 1;

    enum CmdId {
        CMD_ID = 1496;
    }
}

message SupportActivitySupportReq {

    enum CmdId {
        CMD_ID = 4334;
    }
}

message SupportActivitySupportRsp {
    optional Retcode retcode = 1;
    optional uint32 support_index = 2;

    enum CmdId {
        CMD_ID = 4335;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        IN_CD_TIME = 3;
        HAS_SUPPORT = 4;
    }
}

message SupportActivityTakeGlobalRewardReq {

    enum CmdId {
        CMD_ID = 4338;
    }
}


message SupportActivityTakeGlobalRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;

    enum CmdId {
        CMD_ID = 4339;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HAS_TAKE = 3;
    }
}

message SupportActivityTakeShareRewardReq {

    enum CmdId {
        CMD_ID = 4336;
    }
}


message SupportActivityTakeShareRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;

    enum CmdId {
        CMD_ID = 4337;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HAS_TAKE = 3;
        NOT_SUPPORT = 4;
    }
}

enum SupportActivityType {
    ACTIVITY_TYPE_GLOBAL_SUPPORT = 0;
    ACTIVITY_TYPE_NORMAL = 1;
}

message SupportData {
    optional uint32 support_index = 1;
    optional bool is_take_share_reward = 2;
    optional uint32 support_end_time = 3;
    optional uint32 support_begin_time = 4;
    optional uint32 count_down_time = 5;
}

message SurveyData {
    optional uint32 id = 1;
    optional string url = 2;
}

message SweepCurrency {
    optional uint32 point_id = 1;
    optional uint32 add_num = 2;
}

message SwitchAvatarSubSkillReq {
    optional uint32 avatar_id = 1;
    optional uint32 skill_id = 2;
    optional uint32 sub_skill_id = 3;

    enum CmdId {
        CMD_ID = 253;
    }
}

message SwitchAvatarSubSkillRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 254;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        SKILL_NOT_EXIST = 3;
        SUB_SKILL_NOT_EXIST = 4;
        SUB_SKILL_CAN_NOT_SWITCH = 5;
    }
}



message SwitchChangeDataNotify {
    optional FeatureSwitchOpType op_type = 1;
    repeated SwitchData data_list = 2;

    enum CmdId {
        CMD_ID = 3701;
    }
}


message SwitchData {
    optional FeatureSwitchType type = 1;
    optional bytes data = 2;
    optional uint32 min_level = 3;
    optional uint32 max_level = 4;
}


message SwitchDataNotify {
    repeated SwitchData data_list = 1;

    enum CmdId {
        CMD_ID = 3700;
    }
}

message SwitchDLCAvatarTalentReq {
    optional uint32 avatar_id = 1;
    optional uint32 talent_id = 2;

    enum CmdId {
        CMD_ID = 3588;
    }
}

message SwitchDLCAvatarTalentRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3589;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        TALENT_NOT_EXIST = 3;
        TALENT_CAN_NOT_SWITCH = 4;
    }
}

message SwitchDynamicHardLvReq {

    enum CmdId {
        CMD_ID = 239;
    }
}

message SwitchDynamicHardLvRsp {
    optional Retcode retcode = 1;
    optional bool is_dynamic_hard_lv = 2;

    enum CmdId {
        CMD_ID = 240;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message SwitchExtraStoryLineEnhanceReq {

    enum CmdId {
        CMD_ID = 1039;
    }
}

message SwitchExtraStoryLineEnhanceRsp {
    optional Retcode retcode = 1;
    optional bool is_open_enhance = 2;

    enum CmdId {
        CMD_ID = 1040;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message SwitchExtraStoryLockedAvatarBindEquipReq {
    optional AvatarBindEquipMode mode = 1;

    enum CmdId {
        CMD_ID = 1002;
    }
}


message SwitchExtraStoryLockedAvatarBindEquipRsp {
    optional Retcode retcode = 1;
    optional uint32 succ_cnt = 2;
    optional AvatarBindEquipMode mode = 3;

    enum CmdId {
        CMD_ID = 1003;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message SwitchMemberStatusReq {
    optional LobbyMemberStatus status = 1;

    enum CmdId {
        CMD_ID = 309;
    }
}

message SwitchMemberStatusRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 310;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_LOBBY = 2;
        STATUS_ERROR = 3;
        IS_LEADER = 4;
    }
}


message SyncChapterActivityDataNotify {
    optional uint32 chapter_id = 1;
    optional ChapterActivity chapter_activity = 2;

    enum CmdId {
        CMD_ID = 4204;
    }
}


message SyncDLCAvatarNotify {
    repeated DLCAvatar avatar_list = 1;

    enum CmdId {
        CMD_ID = 3556;
    }
}

message SyncDutyNotify {
    optional uint32 daily_duty_point = 1;
    repeated uint32 has_take_daily_duty_id_list = 2;
    optional uint32 weekly_duty_point = 3;
    repeated uint32 has_take_weekly_duty_id_list = 4;

    enum CmdId {
        CMD_ID = 969;
    }
}


message SyncElfDataNotify {
    repeated Elf elf_list = 3;

    enum CmdId {
        CMD_ID = 2102;
    }
}


message SyncElfFragmentNotify {
    repeated ElfFragment elf_fragment_list = 3;

    enum CmdId {
        CMD_ID = 2103;
    }
}


message SyncElfTalentNotify {
    repeated ElfTalent elf_talent_list = 4;

    enum CmdId {
        CMD_ID = 2104;
    }
}


message SyncGratuityStageReq {
    optional uint32 stage_unique_id = 1;
    repeated GratuityStageMessage message_list = 2;

    enum CmdId {
        CMD_ID = 4112;
    }
}



message SyncGratuityStageRsp {
    optional Retcode retcode = 1;
    optional GratuityStage stage = 2;
    repeated GratuityStageMessage message_list = 3;

    enum CmdId {
        CMD_ID = 4113;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message SyncMatrixCurEventNotify {
    optional MatrixGridPos pos = 1;
    optional uint32 event_id = 2;
    optional uint32 real_event_param = 3;

    enum CmdId {
        CMD_ID = 2334;
    }
}



message SyncMatrixFloorNotify {
    optional uint32 floor_id = 1;
    optional MatrixFloorBriefInfo floor_brief_info = 2;
    optional MatrixFloorMapInfo floor_map_info = 3;

    enum CmdId {
        CMD_ID = 2328;
    }
}


message SyncMatrixNotify {
    repeated MatrixFloorBriefInfo floor_brief_info_list = 1;
    optional uint32 cur_floor_id = 2;

    enum CmdId {
        CMD_ID = 2329;
    }
}

message SyncPictureActivityScoreNotify {
    optional uint32 activity_id = 1;
    optional uint32 score = 2;

    enum CmdId {
        CMD_ID = 4272;
    }
}




message SyncRoomDataNotify {
    optional PlayerRoomStatus player_room_status = 1;
    repeated RoomMember member_list = 2;
    optional RoomInfo room_info = 3;

    enum CmdId {
        CMD_ID = 3152;
    }
}


message SyncRoomMatchDataNotify {
    optional RoomMode room_mode = 1;
    optional bool is_in_matching = 2;
    optional uint32 match_start_time = 3;
    optional uint32 estimate_match_cost_time = 4;
    optional Reason reason = 5;

    enum CmdId {
        CMD_ID = 3169;
    }
    enum Reason {
        SUCC = 0;
        CANCEL = 1;
        TIMEOUT = 2;
        MATCH_SUCC = 3;
    }
}


message SyncRpgTaleSiteNotify {
    repeated RpgTaleSite site_list = 1;
    optional uint32 tale_id = 3;

    enum CmdId {
        CMD_ID = 2302;
    }
}


message SyncThemeDataNotify {
    optional ThemeData theme = 1;

    enum CmdId {
        CMD_ID = 4246;
    }
}

message SyncTimeReq {
    optional uint32 seq = 1;

    enum CmdId {
        CMD_ID = 803;
    }
}

message SyncTimeRsp {
    optional Retcode retcode = 1;
    optional uint32 cur_time = 2;
    optional uint32 seq = 3;

    enum CmdId {
        CMD_ID = 804;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message SyncTvtBattleInfoNotify {
    optional TvtBattleInfo battle_info = 1;

    enum CmdId {
        CMD_ID = 3350;
    }
}


message SyncTvtBattleStageMessageNotify {
    repeated TvtBattleStageMessage message_list = 2;

    enum CmdId {
        CMD_ID = 3356;
    }
}


message SyncTvtMemberInRoomNotify {
    repeated TvtMember member_list = 1;

    enum CmdId {
        CMD_ID = 3304;
    }
}


message SyncVirtualGachaStatusNotify {
    optional uint32 group_id = 1;
    optional VirtualGacha gacha = 2;

    enum CmdId {
        CMD_ID = 3517;
    }
}

enum SystemChatMsgType {
    CHAT_MSG_NONE = 0;
    CHAT_MSG_GACHA = 1;
    CHAT_MSG_LOBBY = 2;
    CHAT_MSG_FORGE = 3;
    CHAT_MSG_SCRATCH = 4;
}

message TakeActivityChallengeRewardReq {
    optional uint32 activity_id = 1;
    optional uint32 challenge_num_index = 2;

    enum CmdId {
        CMD_ID = 460;
    }
}


message TakeActivityChallengeRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 challenge_num_index = 3;
    repeated RewardData reward_list = 4;

    enum CmdId {
        CMD_ID = 461;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
        CHALLENGE_NUM_LACK = 3;
    }
}


message TakeAdventureCompensationReq {
    repeated CompensationType type_list = 1;

    enum CmdId {
        CMD_ID = 3918;
    }
}



message TakeAdventureCompensationRsp {
    optional Retcode retcode = 1;
    repeated CompensationType type_list = 2;
    repeated RewardItemData item_list = 3;

    enum CmdId {
        CMD_ID = 3919;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
    }
}

message TakeAdventureLevelRewardReq {

    enum CmdId {
        CMD_ID = 3908;
    }
}


message TakeAdventureLevelRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 has_take_reward_level = 2;
    repeated RewardData reward_list = 3;

    enum CmdId {
        CMD_ID = 3909;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
    }
}

message TakeAdventureQuestRewardReq {
    optional uint32 pool_id = 1;

    enum CmdId {
        CMD_ID = 3904;
    }
}


message TakeAdventureQuestRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 pool_id = 2;
    repeated DropItem drop_item_list = 3;
    optional uint32 quest_id = 4;

    enum CmdId {
        CMD_ID = 3905;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_QUEST = 2;
        HAS_TAKE = 3;
        NOT_END = 4;
    }
}

message TakeAdventureStorySweepRewardReq {
    optional uint32 sweep_id = 1;
    optional bool is_take_all = 2;
    repeated uint32 sweep_group_type_list = 3;

    enum CmdId {
        CMD_ID = 3916;
    }
}


message TakeAdventureStorySweepRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 sweep_id = 2;
    optional uint32 siege_stage_id = 3;
    repeated DropItem drop_item_list = 4;
    optional uint32 player_exp_reward = 5;
    optional uint32 exp_convert_scoin = 6;
    optional uint32 scoin_reward = 7;
    optional uint32 rank_scoin = 8;
    optional bool is_take_all = 9;
    repeated uint32 sweep_group_type_list = 10;

    enum CmdId {
        CMD_ID = 3917;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_EXIST = 2;
        NOT_FINISHED = 3;
    }
}

message TakeArmadaAchievementReq {
    optional uint32 id = 1;

    enum CmdId {
        CMD_ID = 2801;
    }
}


message TakeArmadaAchievementRsp {
    optional Retcode retcode = 1;
    optional uint32 id = 2;
    optional RewardData reward_data = 3;
    repeated uint32 take_achievement_id_list = 4;

    enum CmdId {
        CMD_ID = 2802;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        NOT_REACH = 3;
        HAS_TAKE = 4;
        ALREADY_DISSOLVE = 5;
    }
}

message TakeArmadaReunionRewardReq {
    optional uint32 reward_id = 1;

    enum CmdId {
        CMD_ID = 2837;
    }
}



message TakeArmadaReunionRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 reward_id = 2;
    optional RewardData reward_data = 3;
    repeated ChatworldDishReward reward_list = 4;

    enum CmdId {
        CMD_ID = 2838;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        NOT_IN_ARMADA = 3;
        HAVE_TAKEN = 4;
        QUIT_SHORT = 5;
        IN_CD_TIME = 6;
    }
}

message TakeArmadaStageRewardReq {

    enum CmdId {
        CMD_ID = 2675;
    }
}


message TakeArmadaStageRewardRsp {
    optional Retcode retcode = 1;
    repeated uint32 reward_id_list = 2;
    repeated RewardData reward_list = 3;
    optional uint32 kill_reward_material_id = 4;
    optional uint32 kill_reward_material_num = 5;

    enum CmdId {
        CMD_ID = 2676;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        TIME_INVALID = 3;
        NO_BOSS = 4;
        HAS_TAKE = 5;
        NOT_FIGHT = 6;
        BOSS_NOT_FINISH = 7;
    }
}


message TakeArmadaStageScoreActivityRewardReq {
    optional ArmadaStageScoreActivityRewardType type = 1;

    enum CmdId {
        CMD_ID = 2823;
    }
}




message TakeArmadaStageScoreActivityRewardRsp {
    optional Retcode retcode = 1;
    optional ArmadaStageScoreActivityRewardType type = 2;
    repeated RewardData reward_list = 3;
    repeated ArmadaStageScorePlayerScore score_list = 4;

    enum CmdId {
        CMD_ID = 2824;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HAS_TAKE = 3;
        NOT_FINISH_STAGE = 4;
    }
}

message TakeAvatarMissionDailyRewardReq {

    enum CmdId {
        CMD_ID = 3004;
    }
}


message TakeAvatarMissionDailyRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward = 2;

    enum CmdId {
        CMD_ID = 3005;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HAVE_TAKEN = 3;
        LACK_CONTRACT_POINT = 4;
    }
}

message TakeAvatarMissionPhaseRewardReq {
    optional uint32 days = 1;

    enum CmdId {
        CMD_ID = 3006;
    }
}


message TakeAvatarMissionPhaseRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 days = 3;
    optional RewardData reward = 4;

    enum CmdId {
        CMD_ID = 3007;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HAVE_TAKEN = 3;
        LACK_DAYS = 4;
        NO_REWARD = 5;
    }
}

message TakeBattlePassLevelRewardReq {

    enum CmdId {
        CMD_ID = 3754;
    }
}


message TakeBattlePassLevelRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData basic_reward_list = 2;
    repeated RewardData advanced_reward_list = 3;
    repeated RewardData luxury_reward_list = 4;

    enum CmdId {
        CMD_ID = 3755;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HAS_TAKE = 3;
        FEATURE_CLOSED = 4;
    }
}

message TakeBattlePassPhaseExpReq {

    enum CmdId {
        CMD_ID = 3758;
    }
}

message TakeBattlePassPhaseExpRsp {
    optional Retcode retcode = 1;
    optional uint32 add_exp = 2;
    optional uint32 add_theme_exp = 3;

    enum CmdId {
        CMD_ID = 3759;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HAS_TAKE = 3;
    }
}

message TakeBattlePassThemeLevelRewardReq {

    enum CmdId {
        CMD_ID = 3762;
    }
}


message TakeBattlePassThemeLevelRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 3763;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
        NOT_OPEN = 3;
        FEATURE_CLOSED = 4;
    }
}

message TakeBulletinScoreActivityRewardReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4165;
    }
}


message TakeBulletinScoreActivityRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated RewardData reward_list = 3;

    enum CmdId {
        CMD_ID = 4166;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE_ALL = 2;
    }
}

message TakeCardProductBonusRewardReq {

    enum CmdId {
        CMD_ID = 1146;
    }
}


message TakeCardProductBonusRewardRsp {
    optional Retcode retcode = 1;
    repeated CardProductReward card_product_reward_list = 2;

    enum CmdId {
        CMD_ID = 1147;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message TakeCardProductDailyRewardReq {

    enum CmdId {
        CMD_ID = 1144;
    }
}


message TakeCardProductDailyRewardRsp {
    optional Retcode retcode = 1;
    repeated CardProductReward card_product_reward_list = 2;

    enum CmdId {
        CMD_ID = 1145;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message TakeChallengeStepCompensationReq {
    optional uint32 compensation_id = 1;

    enum CmdId {
        CMD_ID = 1678;
    }
}


message TakeChallengeStepCompensationRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 1679;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKEN = 2;
        LEVEL_LACK = 3;
        NO_REWARD = 4;
    }
}

message TakeChapterActivityLevelRewardReq {
    optional uint32 chapter_id = 1;
    optional uint32 level = 2;
    optional bool is_take_all = 3;

    enum CmdId {
        CMD_ID = 4202;
    }
}


message TakeChapterActivityLevelRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 chapter_id = 2;
    repeated uint32 level_list = 3;
    repeated RewardData reward_list = 4;
    optional bool is_take_all = 5;

    enum CmdId {
        CMD_ID = 4203;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LACK_LEVEL = 2;
        HAVE_TAKE = 3;
        NO_REWARD = 4;
    }
}

message TakeChapterChallengeRewardReq {
    optional uint32 chapter_id = 1;
    optional uint32 challenge_num_index = 2;

    enum CmdId {
        CMD_ID = 967;
    }
}


message TakeChapterChallengeRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 chapter_id = 2;
    optional uint32 challenge_num_index = 3;
    repeated RewardData reward_list = 4;

    enum CmdId {
        CMD_ID = 968;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
        CHALLENGE_NUM_LACK = 3;
        REWARD_INVALID = 4;
    }
}

message TakeChapterCompensationReq {
    optional uint32 chapter_id = 1;

    enum CmdId {
        CMD_ID = 1674;
    }
}


message TakeChapterCompensationRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 1675;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKEN = 2;
        NO_REWARD = 3;
        CHAPTER_NOT_FINISH = 4;
    }
}



message TakeChatRedEnvelopePlayer {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 scoin_num = 3;
    optional DropItem drop_item = 4;
    optional Material material = 5;
}

message TakeChatRedEnvelopeReq {
    optional uint32 channel = 1;
    optional uint32 sender_uid = 2;
    optional uint32 red_envelope_id = 3;
    optional uint32 item_id = 4;
    optional uint32 armada_id = 5;
    optional bool is_sender_npc = 6;
    optional string nickname = 7;

    enum CmdId {
        CMD_ID = 1165;
    }
}



message TakeChatRedEnvelopeRsp {
    optional Retcode retcode = 1;
    optional uint32 channel = 2;
    optional uint32 sender_uid = 3;
    optional string sender_nickname = 4;
    optional uint32 item_id = 5;
    optional uint32 take_scoin = 6;
    repeated DropItem drop_item_list = 7;
    optional string msg = 8;
    optional uint32 red_envelope_id = 9;
    optional uint32 drop_id = 10;
    optional uint32 take_hcoin = 11;
    optional bool is_sender_npc = 12;
    optional Material take_material = 13;
    optional bool is_take_over = 14;

    enum CmdId {
        CMD_ID = 1166;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKEN = 2;
        OVER = 3;
        LACK_TIMES = 4;
        LACK_LEVEL = 5;
        EXPIRE_TIME = 6;
        TAKE_BY_OTHERS = 7;
        NO_CHATROOM = 8;
        NOT_IN_ARMADA = 9;
        NOT_IN_WORLD_CHATROOM = 10;
    }
}


message TakeClientMailAttachmentReq {
    repeated ClientMailKey mail_key_list = 1;
    optional bool is_show_attachment = 2;

    enum CmdId {
        CMD_ID = 3802;
    }
}




message TakeClientMailAttachmentRsp {
    optional Retcode retcode = 1;
    repeated ClientMailKey succ_mail_key_list = 2;
    optional bool is_show_attachment = 3;
    optional MailAttachment mail_attachment = 4;
    optional bool is_take_all = 5;
    repeated ClientMailAttachmentItem fail_mail_list = 6;

    enum CmdId {
        CMD_ID = 3803;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        REPEATED_REQ = 2;
        PART_FAIL = 3;
    }
}

message TakeConsignedRewardReq {
    optional uint32 reliable_id = 1;

    enum CmdId {
        CMD_ID = 523;
    }
}


message TakeConsignedRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;
    optional uint32 reliable_id = 3;

    enum CmdId {
        CMD_ID = 524;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ARMADA = 2;
        REWARD_TAKEN = 3;
    }
}

message TakeContinuousRechargeRewardReq {
    optional uint32 progress = 1;

    enum CmdId {
        CMD_ID = 4169;
    }
}


message TakeContinuousRechargeRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward = 2;

    enum CmdId {
        CMD_ID = 4170;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        PROGRESS_LACK = 3;
        HAS_TAKE = 4;
    }
}

message TakeDailyCompensationRewardReq {

    enum CmdId {
        CMD_ID = 564;
    }
}


message TakeDailyCompensationRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 565;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message TakeDLCLevelRewardReq {

    enum CmdId {
        CMD_ID = 3561;
    }
}


message TakeDLCLevelRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 3562;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_REWARD = 2;
    }
}


message TakeDLCTowerRankRewardNotify {
    optional RewardData reward_data = 1;
    optional uint32 rank = 2;
    optional uint32 score = 3;

    enum CmdId {
        CMD_ID = 3573;
    }
}

message TakeDormLikesDropReq {

    enum CmdId {
        CMD_ID = 1008;
    }
}


message TakeDormLikesDropRsp {
    optional Retcode retcode = 1;
    repeated DropItem drop_item_list = 2;
    optional uint32 yesterday_be_liked_num = 3;

    enum CmdId {
        CMD_ID = 1009;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LIMIT = 2;
        NO_DROP = 3;
        HAVE_TAKEN = 4;
    }
}


message TakeDutyRewardReq {
    optional DutyType duty_type = 1;
    repeated uint32 duty_id_list = 2;

    enum CmdId {
        CMD_ID = 288;
    }
}



message TakeDutyRewardRsp {
    optional Retcode retcode = 1;
    optional DutyType duty_type = 2;
    repeated RewardData reward_list = 3;
    repeated uint32 duty_id_list = 4;

    enum CmdId {
        CMD_ID = 289;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
        LEVEL_LACK = 3;
        DUTY_POINT_LACK = 4;
    }
}

message TakeEliteChapterCompensationReq {
    optional uint32 chapter_id = 1;

    enum CmdId {
        CMD_ID = 1638;
    }
}


message TakeEliteChapterCompensationRsp {
    optional Retcode retcode = 1;
    repeated RewardData rn = 2;

    enum CmdId {
        CMD_ID = 1639;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKEN = 2;
        NO_REWARD = 3;
        CHAPTER_NOT_FINISH = 4;
    }
}


message TakeEndlessBaseRewardReq {
    optional EndlessType type = 1;

    enum CmdId {
        CMD_ID = 3417;
    }
}



message TakeEndlessBaseRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 reward_progress = 2;
    repeated RewardData reward_list = 3;
    repeated uint32 reward_id_list = 4;
    optional EndlessType type = 5;

    enum CmdId {
        CMD_ID = 3418;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_REWARD = 2;
        NOT_JOIN = 3;
    }
}


message TakeExBossRankRewardNotify {
    repeated RewardData reward_list = 1;
    optional uint32 rank = 2;
    optional uint32 score = 3;

    enum CmdId {
        CMD_ID = 516;
    }
}


message TakeExBossScoreRewardNotify {
    repeated RewardData reward_list = 1;

    enum CmdId {
        CMD_ID = 533;
    }
}

message TakeExtraStoryChallengeModeChapterRewardReq {
    optional uint32 chapter_id = 1;
    optional uint32 difficulty = 2;

    enum CmdId {
        CMD_ID = 807;
    }
}


message TakeExtraStoryChallengeModeChapterRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData chapter_reward = 2;

    enum CmdId {
        CMD_ID = 808;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        LEVEL_LIMIT = 3;
        DIFFICULTY_NOT_OPEN = 4;
        NOT_FINISHED = 5;
        HAS_TAKEN = 6;
        NO_CHAPTER_REWARD = 7;
    }
}

message TakeExtraStoryLineStoryFinishRewardReq {
    optional uint32 line_id = 1;

    enum CmdId {
        CMD_ID = 836;
    }
}


message TakeExtraStoryLineStoryFinishRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 line_id = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 837;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_FINISH = 2;
        HAS_TAKEN = 3;
    }
}

message TakeFlopRewardReq {
    optional uint32 activity_id = 1;
    optional uint32 reward_index = 2;

    enum CmdId {
        CMD_ID = 4171;
    }
}


message TakeFlopRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 reward_index = 3;
    repeated RewardData reward_list = 4;

    enum CmdId {
        CMD_ID = 4172;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        LOCK = 3;
        HAS_TAKE = 4;
    }
}

message TakeFoundationRewardReq {
    optional string product_name = 1;
    optional uint32 level = 2;

    enum CmdId {
        CMD_ID = 963;
    }
}


message TakeFoundationRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;
    optional string product_name = 3;
    repeated uint32 has_take_reward_level_list = 4;

    enum CmdId {
        CMD_ID = 964;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_BUY = 2;
        LEVEL_LACK = 3;
        HAS_TAKE = 4;
        PRODUCT_INVALID = 5;
    }
}

message TakeGalInteractTriggerEventReq {
    optional uint32 avatar_id = 1;
    optional uint32 event_id = 2;

    enum CmdId {
        CMD_ID = 815;
    }
}



message TakeGalInteractTriggerEventRsp {
    optional Retcode retcode = 1;
    optional uint32 avatar_id = 2;
    optional uint32 event_id = 3;
    optional RewardData reward_data = 4;
    optional DropItem drop_item = 5;

    enum CmdId {
        CMD_ID = 816;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_SUCH_AVATAR = 2;
        EVENT_ID_ERROR = 3;
    }
}

message TakeGeneralActivityScoreRewardReq {
    optional uint32 activity_id = 1;
    optional uint32 score_id = 2;

    enum CmdId {
        CMD_ID = 4034;
    }
}


message TakeGeneralActivityScoreRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;
    optional uint32 activity_id = 3;
    optional uint32 score_id = 4;

    enum CmdId {
        CMD_ID = 4035;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKEN = 2;
        NOT_REACH = 3;
        NOT_OPEN = 4;
    }
}

message TakeGobackFundRewardReq {
    optional uint32 progress_id = 1;

    enum CmdId {
        CMD_ID = 1653;
    }
}


message TakeGobackFundRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;

    enum CmdId {
        CMD_ID = 1654;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ALREADY_TAKEN = 2;
        NO_REWARD = 3;
        FUND_LOCKED = 4;
    }
}

message TakeGobackLoginRewardReq {
    optional uint32 take_days = 1;
    optional uint32 reward_type = 2;
    repeated uint32 reward_list = 3;

    enum CmdId {
        CMD_ID = 366;
    }
}


message TakeGobackLoginRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 take_days = 2;
    repeated RewardData reward_list = 3;
    optional uint32 reward_type = 4;
    repeated uint32 reward_id_list = 5;

    enum CmdId {
        CMD_ID = 367;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
        LOGIN_DAYS_LACK = 3;
        NOT_GOBACK = 4;
        REWARD_TYPE_ERROR = 5;
        SELECT_REWARD_ERROR = 6;
    }
}

message TakeGobackScoreRewardReq {
    optional uint32 score_id = 1;

    enum CmdId {
        CMD_ID = 1448;
    }
}


message TakeGobackScoreRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 score_id = 2;
    repeated RewardData reward_list = 3;
    optional uint32 score = 4;

    enum CmdId {
        CMD_ID = 1449;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SCORE_LACK = 2;
        NOT_GOBACK = 3;
        HAS_TAKE = 4;
    }
}


message TakeInviteActivityInviterProgressRewardReq {
    optional InviterActivityType activity_type = 1;

    enum CmdId {
        CMD_ID = 1692;
    }
}



message TakeInviteActivityInviterProgressRewardRsp {
    optional Retcode retcode = 1;
    optional InviterActivityType activity_type = 2;
    optional uint32 taken_reward_progress = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 1693;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_REWARD = 2;
        FEATURE_CLOSED = 3;
    }
}


message TakeLoginActivityRewardReq {
    optional uint32 id = 1;
    optional uint32 take_days = 2;
    optional LoginActivityRewardType reward_type = 3;

    enum CmdId {
        CMD_ID = 4194;
    }
}



message TakeLoginActivityRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 id = 2;
    optional uint32 take_days = 3;
    repeated RewardData reward_list = 4;
    optional LoginActivityRewardType reward_type = 5;

    enum CmdId {
        CMD_ID = 4195;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
        HAS_TAKE = 3;
        LOGIN_DAYS_LACK = 4;
        NOT_NEWBIE = 5;
        DURATION_END = 6;
    }
}

message TakeLoginMissionRewardReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4301;
    }
}


message TakeLoginMissionRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated RewardData reward_list = 3;

    enum CmdId {
        CMD_ID = 4302;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_FINISHED = 2;
        HAS_TAKE = 3;
    }
}

message TakeMissionGroupRewardReq {
    optional uint32 group_id = 1;

    enum CmdId {
        CMD_ID = 4348;
    }
}


message TakeMissionGroupRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;

    enum CmdId {
        CMD_ID = 4349;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKEN = 2;
        NO_REWARD = 3;
        NOT_FINISH = 4;
    }
}

message TakeMissionStepCompensationReq {

    enum CmdId {
        CMD_ID = 1634;
    }
}


message TakeMissionStepCompensationRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 1635;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKEN = 2;
        NO_REWARD = 3;
    }
}

message TakeMissionThemeRewardReq {
    optional uint32 theme_id = 1;
    optional uint32 mission_id = 2;

    enum CmdId {
        CMD_ID = 4209;
    }
}


message TakeMissionThemeRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 theme_id = 2;
    optional uint32 mission_id = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 4210;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MISSION_NOT_FINISH = 2;
        ALREADY_TAKEN = 3;
        EQUIPMENT_FULL = 4;
        EQUIPMENT_MATERIAL_LIMIT = 5;
        EQUIPMENT_FRAGMENT_LIMIT = 6;
    }
}

message TakeMosaicActivityRewardReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4342;
    }
}


message TakeMosaicActivityRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 4343;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
        NOT_FINISHED = 3;
        NOT_OPEN = 4;
    }
}

message TakeNewbieActivityLevelRewardReq {
    optional uint32 level = 1;

    enum CmdId {
        CMD_ID = 4256;
    }
}


message TakeNewbieActivityLevelRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 level = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 4257;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_NEWBIE = 2;
        HAVE_TAKEN = 3;
        NO_REWARD = 4;
        LEVEL_LIMIT = 5;
    }
}

message TakeNewbieChallengeRewardReq {

    enum CmdId {
        CMD_ID = 4285;
    }
}


message TakeNewbieChallengeRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward = 2;

    enum CmdId {
        CMD_ID = 4286;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
        MATERIAL_LACK = 3;
        HAS_TAKE = 4;
    }
}

message TakeNewbiePrivilegeRewardReq {

    enum CmdId {
        CMD_ID = 1640;
    }
}


message TakeNewbiePrivilegeRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 1641;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKEN = 2;
        NO_REWARD = 3;
    }
}

message TakeOfflineResourceBoxReq {
    optional uint32 resource_type = 1;
    optional uint32 box_id = 2;
    optional uint32 box_num = 3;

    enum CmdId {
        CMD_ID = 4213;
    }
}



message TakeOfflineResourceBoxRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_data_list = 2;
    optional OfflineResource offline_resource_data = 3;

    enum CmdId {
        CMD_ID = 4214;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
        EQUIPMENT_FULL = 3;
        EQUIPMENT_MATERIAL_LIMIT = 4;
        STAMINA_LACK = 5;
        HCOIN_LACK = 6;
        MATERIAL_LACK = 7;
        BOX_LACK = 8;
    }
}

message TakeOnlineRewardReq {
    optional uint32 id = 1;

    enum CmdId {
        CMD_ID = 4198;
    }
}


message TakeOnlineRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;
    optional uint32 id = 3;

    enum CmdId {
        CMD_ID = 4199;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        LEVEL_NOT_SATISFY = 3;
        NOT_REACH = 4;
        HAS_TAKE = 5;
    }
}

message TakeOverlapActivityRewardReq {
    optional uint32 activity_id = 1;
    optional uint32 id = 2;

    enum CmdId {
        CMD_ID = 4217;
    }
}


message TakeOverlapActivityRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    optional uint32 id = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 4218;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HAS_TAKEN = 3;
        NOT_FINISH = 4;
    }
}

message TakeRaffleRewardReq {
    repeated uint32 raffle_id_list = 1;

    enum CmdId {
        CMD_ID = 3894;
    }
}


message TakeRaffleRewardRsp {
    optional Retcode retcode = 1;
    repeated uint32 raffle_id_list = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 3895;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAVE_TAKEN = 2;
        NOT_OPEN = 3;
        NOT_DRAW = 4;
        NOT_EXIST = 5;
    }
}

message TakeReclaimLevelRewardReq {
    optional uint32 level = 1;

    enum CmdId {
        CMD_ID = 1169;
    }
}


message TakeReclaimLevelRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 level = 2;
    repeated RewardData reward_list = 3;

    enum CmdId {
        CMD_ID = 1170;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LACK_LEVEL = 2;
        HAVE_TAKE = 3;
        NO_REWARD = 4;
    }
}

message TakeRestaurantOrderReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 5868;
    }
}

message TakeRestaurantOrderRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;

    enum CmdId {
        CMD_ID = 5869;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ORDER_LIST_EMPTY = 2;
    }
}

message TakeRewardLineActivityRewardReq {
    optional uint32 id = 1;

    enum CmdId {
        CMD_ID = 5892;
    }
}


message TakeRewardLineActivityRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_data_list = 2;

    enum CmdId {
        CMD_ID = 5893;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CLOSED = 2;
        NO_REWARD = 3;
        ACTIVITY_NOT_EXIST = 4;
    }
}

message TakeRollRewardReq {
    optional uint32 avatar_id = 1;
    optional uint32 reward_group_id = 2;

    enum CmdId {
        CMD_ID = 645;
    }
}


message TakeRollRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 646;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_ERROR = 2;
        REWARD_ERROR = 3;
        PROGRESS_LACK = 4;
        REWARD_HAS_TAKE = 5;
    }
}

message TakeRpgTaleCollectionRewardReq {
    optional uint32 tale_id = 1;

    enum CmdId {
        CMD_ID = 2309;
    }
}


message TakeRpgTaleCollectionRewardRsp {
    optional Retcode retcode = 1;
    repeated uint32 collection_count_list = 2;
    repeated RewardData reward_data_list = 3;
    repeated uint32 reward_taken_collection_count_list = 4;
    optional uint32 tale_id = 5;

    enum CmdId {
        CMD_ID = 2310;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NUM_LACK = 2;
        NO_REWARD = 3;
        TIME_LIMIT = 4;
        HAVE_TAKE = 5;
    }
}

message TakeScDLCChallengeRewardReq {

    enum CmdId {
        CMD_ID = 6328;
    }
}


message TakeScDLCChallengeRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 6329;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_REWARD = 2;
    }
}

message TakeScDLCDailyQuestRewardReq {
    optional uint32 quest_id = 1;

    enum CmdId {
        CMD_ID = 6324;
    }
}


message TakeScDLCDailyQuestRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 quest_id = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 6325;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        QUEST_NOT_EXIST = 2;
        NOT_FINISH = 3;
    }
}

message TakeShareRewardReq {
    optional uint32 share_id = 1;

    enum CmdId {
        CMD_ID = 4237;
    }
}


message TakeShareRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 share_id = 2;
    repeated RewardData reward_list = 3;

    enum CmdId {
        CMD_ID = 4238;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        INVALID_SHARE_ID = 2;
        HAVE_TAKEN = 3;
    }
}

message TakeSlotMachineProgressRewardReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4319;
    }
}


message TakeSlotMachineProgressRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 activity_id = 2;
    repeated RewardData reward_list = 3;

    enum CmdId {
        CMD_ID = 4320;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACTIVITY_NOT_OPEN = 2;
        NO_REWARD = 3;
    }
}

message TakeStageActChallengeRewardReq {
    optional uint32 act_id = 1;
    optional uint32 difficulty = 2;
    optional uint32 challenge_num_index = 3;
    repeated uint32 challenge_num_index_list = 4;

    enum CmdId {
        CMD_ID = 458;
    }
}


message TakeStageActChallengeRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 act_id = 2;
    optional uint32 difficulty = 3;
    optional uint32 challenge_num_index = 4;
    repeated RewardData reward_list = 5;
    repeated uint32 succ_challenge_num_index_list = 6;
    repeated uint32 fail_challenge_num_index_list = 7;

    enum CmdId {
        CMD_ID = 459;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
        CHALLENGE_NUM_LACK = 3;
        PART_FAIL = 4;
    }
}

message TakeTechCollectRewardReq {
    optional uint32 map_id = 1;

    enum CmdId {
        CMD_ID = 540;
    }
}


message TakeTechCollectRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;
    optional uint32 map_id = 3;

    enum CmdId {
        CMD_ID = 541;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TECH_LEVEL_LIMIT = 2;
        IN_CD_TIME = 3;
    }
}

message TakeTowerRaidRewardReq {

    enum CmdId {
        CMD_ID = 4187;
    }
}




message TakeTowerRaidRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 activity_id = 3;
    optional uint32 hard_level = 4;
    repeated RewardData reward_list = 5;
    optional TowerRaidRating rating = 6;
    repeated DropItem drop_item_list = 7;

    enum CmdId {
        CMD_ID = 4188;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAVE_TAKE = 2;
        NOT_FINISH = 3;
    }
}

message TakeTradingCardRewardReq {

    enum CmdId {
        CMD_ID = 4264;
    }
}


message TakeTradingCardRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;
    optional uint32 trade_num = 3;

    enum CmdId {
        CMD_ID = 4265;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        NOT_JOIN_ARMADA = 3;
        TRADE_NUM_LIMIT = 4;
        LACK_MATERIAL = 5;
    }
}

message TakeVersionActivityMissionRewardReq {
    optional uint32 config_id = 1;
    optional uint32 module_id = 2;

    enum CmdId {
        CMD_ID = 4227;
    }
}


message TakeVersionActivityMissionRewardRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;
    optional uint32 config_id = 3;
    optional uint32 module_id = 4;

    enum CmdId {
        CMD_ID = 4228;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        NOT_FINISH = 3;
        HAS_TAKEN = 4;
    }
}

message TakeVersionActivityRewardReq {
    optional uint32 id = 1;

    enum CmdId {
        CMD_ID = 4225;
    }
}


message TakeVersionActivityRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 reward_score = 2;
    repeated RewardData reward_list = 3;

    enum CmdId {
        CMD_ID = 4226;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        NO_REWARD = 3;
    }
}

message TakeWeekDayActivityCompensationReq {

    enum CmdId {
        CMD_ID = 1668;
    }
}


message TakeWeekDayActivityCompensationRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_data_list = 2;

    enum CmdId {
        CMD_ID = 1669;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKEN = 2;
        LEVEL_LACK = 3;
    }
}

message TakeWeekDayActivityReturnCoinReq {

    enum CmdId {
        CMD_ID = 1034;
    }
}

message TakeWeekDayActivityReturnCoinRsp {
    optional Retcode retcode = 1;
    optional uint32 num = 2;
    optional bool is_coin_full_after_taken = 3;

    enum CmdId {
        CMD_ID = 1035;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_RETURN = 2;
        COIN_LIMIT = 3;
    }
}

message TakeWeeklyRoutineRewardReq {
    optional uint32 weekly_routine_reward_id = 1;

    enum CmdId {
        CMD_ID = 4231;
    }
}


message TakeWeeklyRoutineRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 weekly_routine_reward_id = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 4232;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ROUTINE_CONTRIBUTION_LACK = 2;
        HAS_TAKE = 3;
    }
}

message TakeWikiRatingRewardReq {
    optional uint32 rating_id = 1;
    optional uint32 rating_score = 2;
    repeated uint32 cg_list = 3;

    enum CmdId {
        CMD_ID = 1195;
    }
}


message TakeWikiRatingRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;
    optional uint32 rating_id = 3;

    enum CmdId {
        CMD_ID = 1196;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TKAE = 3;
        SCORE_LACK = 4;
    }
}

message TeamAssaultActivityBeginReq {
    optional uint32 activity_id = 1;
    repeated uint32 avatar_id_list = 2;

    enum CmdId {
        CMD_ID = 4020;
    }
}

message TeamAssaultActivityBeginRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4021;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        REPEAT_REQ = 3;
        LACK_TIMES = 4;
        AVATAR_RESTRICT = 5;
    }
}

message TeamAssaultActivityBossBeginReq {
    optional uint32 activity_id = 1;
    optional uint32 boss_idx = 2;
    repeated uint32 avatar_id_list = 3;

    enum CmdId {
        CMD_ID = 4024;
    }
}

message TeamAssaultActivityBossBeginRsp {
    optional Retcode retcode = 1;
    optional string client_data = 2;

    enum CmdId {
        CMD_ID = 4025;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        ORDER_ERROR = 3;
        AVATAR_ERROR = 4;
        AVATAR_RESTRICT = 5;
    }
}


message TeamAssaultActivityBossEndReq {
    optional uint32 activity_id = 1;
    optional uint32 boss_idx = 2;
    optional uint32 pass_time = 3;
    optional float hp_percentage = 4;
    optional uint32 cheat_type = 5;
    repeated StageCheatData cheat_data_list = 6;
    optional string client_data = 7;

    enum CmdId {
        CMD_ID = 4026;
    }
}

message TeamAssaultActivityBossEndRsp {
    optional Retcode retcode = 1;
    optional uint32 boss_idx = 2;
    optional uint32 score = 3;
    optional uint32 activity_score = 4;

    enum CmdId {
        CMD_ID = 4027;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        ORDER_ERROR = 3;
        CHEAT_ERROR = 4;
    }
}

message TeamAssaultActivityEndReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4022;
    }
}

message TeamAssaultActivityEndRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4023;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
    }
}

message TeamAssaultActivityInfo {
    optional uint32 enter_times = 1;
    repeated uint32 avatar_id_list = 2;
    repeated uint32 score_list = 3;
    optional uint32 boss_idx = 4;
    repeated uint32 pass_time_list = 5;
}

message TeamAssaultActivityResetReq {
    optional uint32 activity_id = 1;

    enum CmdId {
        CMD_ID = 4028;
    }
}

message TeamAssaultActivityResetRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4029;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        LACK_TIMES = 4;
        NOT_NEED = 5;
    }
}

enum TeamAssaultActivityScoreType {
    TEAM_ASSAULT_ACTIVITY_SCORE_ACCUM = 1;
    TEAM_ASSAULT_ACTIVITY_SCORE_MAX = 2;
}

message TeamLeaderChangeNotify {
    optional uint32 team_id = 1;
    optional uint32 old_leader = 2;
    optional uint32 new_leader = 3;
    optional bool is_timeout = 4;

    enum CmdId {
        CMD_ID = 371;
    }
}

enum TeamRestrictType {
    TEAM_RESTRICT_TYPE_AVATAR_NUM = 1;
    TEAM_RESTRICT_TYPE_AVATAR_CLASS_NUM = 2;
    TEAM_RESTRICT_TYPE_AVATAR_EACH_LEVEL = 3;
    TEAM_RESTRICT_TYPE_AVATAR_EACH_STAR = 4;
    TEAM_RESTRICT_TYPE_AVATAR_ONE_STAR = 5;
    TEAM_RESTRICT_TYPE_AVATAR_CLASS_NOT_SAME = 6;
    TEAM_RESTRICT_TYPE_AVATAR_ATTR_NOT_SAME = 7;
    TEAM_RESTRICT_TYPE_AVATAR_EACH_ATTR = 8;
    TEAM_RESTRICT_TYPE_AVATAR_NOT_ATTR = 9;
    TEAM_RESTRICT_TYPE_AVATAR_EACH_CLASS = 10;
    TEAM_RESTRICT_TYPE_AVATAR_NOT_CLASS = 11;
    TEAM_RESTRICT_TYPE_HAS_AVATAR_ID = 12;
    TEAM_RESTRICT_TYPE_AVATAR_NOT_ID = 13;
    TEMA_RESTRICT_TYPE_ROLE_AVATAR_NUM = 15;
    TEAM_RESTRICT_TYPE_ROLE_LIST = 16;
    TEAM_RESTRICT_TYPE_IN_AVATAR_LIST = 17;
    TEAM_RESTRICT_TYPE_RESISTANCE = 18;
    TEAM_RESTRICT_TYPE_HAS_ELF = 19;
    TEAM_RESTRICT_TYPE_AVATAR_EACH_TAG_LIST = 20;
    TEAM_RESTRICT_TYPE_AVATAR_NOT_TAG_LIST = 21;
    TEAM_RESTRICT_TYPE_AVATAR_ONE_TAG = 22;
    TEAM_RESTRICT_TYPE_AVATAR_TAG_NUM = 23;
    TEAM_RESTRICT_TYPE_AVATAR_ATTR_NUM = 24;
    TEAM_RESTRICT_TYPE_AVATAR_ATTR_SAME_NUM = 25;
    TEAM_RESTRICT_TYPE_IN_RPG_ROLE_LIST = 26;
}

message ThemeData {
    optional uint32 theme_id = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    optional uint32 bonus_drop_times = 4;
    optional uint32 total_bonus_score = 5;
}



message ThemeWantedActivity {
    optional uint32 schedule_id = 1;
    optional uint32 activity_id = 2;
    repeated uint32 open_stage_group_id_list = 3;
    repeated ThemeWantedStageGroupInfo stage_group_info_list = 4;
    repeated Material taken_weekly_assist_material_list = 5;
    optional uint32 end_time = 6;
}

message ThemeWantedBuyExtraDropReq {

    enum CmdId {
        CMD_ID = 5792;
    }
}


message ThemeWantedBuyExtraDropRsp {
    optional Retcode retcode = 1;
    repeated DropItem drop_item_list = 2;

    enum CmdId {
        CMD_ID = 5793;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        ACTIVITY_NOT_OPEN = 3;
        FEATURE_CLOSED = 4;
    }
}

message ThemeWantedRefreshTicketReq {

    enum CmdId {
        CMD_ID = 5794;
    }
}

message ThemeWantedRefreshTicketRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5795;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message ThemeWantedStageGroupInfo {
    optional uint32 stage_group_id = 1;
    optional uint32 progress = 2;
    repeated uint32 not_pass_progress_list = 3;
    repeated uint32 unlock_mp_progress_list = 4;
}

message ThemeWantedSwitchData {
}

enum TileBarrierType {
    TILE_BARRIER_TYPE_NONE = 0;
    TILE_BARRIER_TYPE_PERMANENT = 1;
    TILE_BARRIER_TYPE_BLOCK = 2;
    TILE_BARRIER_TYPE_STOP_ON_PLAYER = 3;
    TILE_BARRIER_TYPE_STOP_ON_ONCE = 4;
    TILE_BARRIER_TYPE_NON_ROADBLOCK = 5;
}

message TileEnterReq {
    optional uint32 tower_id = 1;
    optional uint32 floor_id = 2;

    enum CmdId {
        CMD_ID = 4906;
    }
}

message TileEnterRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4907;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LOCKED = 2;
    }
}



message TileEntity {
    optional uint32 unique_id = 1;
    optional uint32 entity_type = 2;
    optional uint32 position = 3;
    optional uint32 direction = 4;
    optional uint32 reset_tag = 5;
    optional TilePlayerInfo player_info = 11;
    optional TileNpcInfo npc_info = 12;
}






message TileEntityOpNotify {
    optional uint32 tower_id = 1;
    optional uint32 floor_id = 2;
    repeated TileEntityOp entity_op_list = 3;

    enum CmdId {
        CMD_ID = 4914;
    }
    message StatusOp {
        optional uint32 status = 1;
    }
    message MoveOp {
        repeated uint32 path_cell_id_list = 1;
        optional TileMoveType move_type = 2;
        optional uint32 direction = 3;
    }
    message UpdateCellOp {
        repeated TileMapCell cell_list = 1;
        repeated TileTrigger trigger_list = 2;
    }
    message UpdateEntityOp {
        repeated TileEntity create_entity_list = 1;
        repeated uint32 delete_entity_list = 2;
    }
    message TileEntityOp {
        optional uint32 unique_id = 1;
        optional MoveOp move = 2;
        optional TileWaitSelectPath wait_select_path = 3;
        optional UpdateCellOp update_cell = 4;
        optional UpdateEntityOp update_entity = 5;
        optional StatusOp status = 6;
    }
}

enum TileEntityType {
    TILE_ENTITY_TYPE_NONE = 0;
    TILE_ENTITY_TYPE_PLAYER = 1;
    TILE_ENTITY_TYPE_NPC = 2;
    TILE_ENTITY_TYPE_ROADBLOCK = 3;
    TILE_ENTITY_TYPE_TOWN_AVATAR = 4;
    TILE_ENTITY_TYPE_TOWN_BUILDING = 5;
}


message TileFloor {
    optional uint32 floor_id = 1;
    optional TileFloorStatus floor_status = 2;
}

enum TileFloorStatus {
    TILE_FLOOR_STATUS_NONE = 0;
    TILE_FLOOR_STATUS_LOCKED = 1;
    TILE_FLOOR_STATUS_UNLOCKED = 2;
    TILE_FLOOR_STATUS_VISTIED = 3;
}

message TileGetTowerReq {
    optional uint32 tower_id = 1;

    enum CmdId {
        CMD_ID = 4904;
    }
}


message TileGetTowerRsp {
    optional Retcode retcode = 1;
    optional uint32 cur_floor_id = 2;
    repeated uint32 finished_dialog_id_list = 3;
    repeated uint32 settled_event_id_list = 4;
    repeated TileFloor floor_list = 5;
    optional uint32 tower_id = 6;

    enum CmdId {
        CMD_ID = 4905;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message TileLoadSavedPositionReq {
    optional uint32 tower_id = 1;
    optional uint32 floor_id = 2;

    enum CmdId {
        CMD_ID = 4921;
    }
}

message TileLoadSavedPositionRsp {
    optional Retcode retcode = 1;
    optional uint32 position = 2;

    enum CmdId {
        CMD_ID = 4922;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_SAVED = 2;
    }
}





message TileMap {
    optional uint32 map_id = 1;
    optional uint32 width = 2;
    optional uint32 height = 3;
    repeated TileMapCell cell_list = 5;
    repeated TileTrigger trigger_list = 6;
    repeated TileEntity entity_list = 7;
    repeated TileMark mark_list = 8;
}

message TileMapCell {
    optional uint32 cell_id = 1;
    optional CellLayer ground = 2;
    optional CellLayer decoration = 3;
    optional uint32 barrier = 4;
    optional uint32 fog = 5;
    optional uint32 terrain = 6;
    message CellLayer {
        optional uint32 model_id = 1;
        optional uint32 direction = 2;
    }
}



message TileMapUpdateNotify {
    optional uint32 tower_id = 1;
    optional uint32 floor_id = 2;
    repeated TileMapCell cell_list = 3;
    repeated TileEntity entity_list = 4;

    enum CmdId {
        CMD_ID = 4923;
    }
}

message TileMark {
    optional uint32 mark_id = 1;
    optional uint32 mark_value = 2;
}

enum TileMoveType {
    TILE_MOVE_WALK = 0;
    TILE_MOVE_TELEPORT = 1;
    TILE_MOVE_KNOCK_OFF = 2;
}

message TileNpcInfo {
    optional uint32 id = 1;
}

message TilePlayerInfo {
    optional uint32 uid = 1;
    optional string nickname = 2;
    optional uint32 avatar_id = 3;
}

message TileReportSavedPositionReq {
    optional uint32 tower_id = 1;
    optional uint32 floor_id = 2;
    optional uint32 position = 3;

    enum CmdId {
        CMD_ID = 4919;
    }
}

message TileReportSavedPositionRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4920;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        POSITION_ERROR = 2;
    }
}

message TileResetFloorReq {
    optional uint32 tower_id = 1;
    repeated uint32 floor_id_list = 2;

    enum CmdId {
        CMD_ID = 4912;
    }
}

message TileResetFloorRsp {
    optional Retcode retcode = 1;
    optional uint32 tower_id = 2;
    repeated uint32 floor_id_list = 3;

    enum CmdId {
        CMD_ID = 4913;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message TileResetRegionReq {
    optional uint32 tower_id = 1;
    optional uint32 floor_id = 2;
    optional uint32 reset_tag = 3;

    enum CmdId {
        CMD_ID = 4917;
    }
}

message TileResetRegionRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 4918;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message TileSaveProgressReq {
    optional uint32 tower_id = 1;
    repeated uint32 finished_dialog_id_list = 2;

    enum CmdId {
        CMD_ID = 4908;
    }
}

message TileSaveProgressRsp {
    optional Retcode retcode = 1;
    repeated uint32 finished_dialog_id_list = 2;

    enum CmdId {
        CMD_ID = 4909;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message TileSelectPathReq {
    optional uint32 tower_id = 1;
    optional uint32 next_path_cell_id = 2;

    enum CmdId {
        CMD_ID = 4915;
    }
}

message TileSelectPathRsp {
    optional Retcode retcode = 1;
    optional uint32 tower_id = 2;
    optional uint32 next_path_cell_id = 3;

    enum CmdId {
        CMD_ID = 4916;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_CANDIDATE = 2;
    }
}

message TileTrigger {
    optional uint32 id = 1;
    optional bool is_active = 2;
    optional uint32 position = 3;
}





message TileUpdateMapReq {
    optional uint32 tower_id = 1;
    optional uint32 floor_id = 2;
    repeated TileMapCell cell_list = 3;
    repeated TileTrigger trigger_list = 4;
    repeated TileEntity create_entity_list = 5;
    repeated MoveEntity move_entity_list = 6;
    repeated uint32 delete_entity_list = 7;
    repeated TileMark mark_list = 8;
    repeated OuterValue outer_value_list = 9;


    enum CmdId {
        CMD_ID = 4902;
    }
    message MoveEntity {
        optional uint32 unique_id = 1;
        optional uint32 to_position = 2;
        repeated uint32 path_cell_id_list = 3;
        optional uint32 direction = 4;
        optional uint32 saved_position = 5;
    }
    message OuterValue {
        optional Type type = 1;
        optional uint32 key = 2;
        optional uint32 value = 3;

        enum Type {
            NONE = 0;
            RPG_OVERALL = 1;
        }
    }
}


message TileUpdateMapRsp {
    optional Retcode retcode = 1;
    repeated TileEntity created_entity_list = 2;

    enum CmdId {
        CMD_ID = 4903;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message TileWaitSelectPath {
    repeated uint32 candidate_path_cell_id_list = 1;
    optional uint32 left_step_num = 2;
}

message TimeLimitAddUpReward {
    optional uint32 add_up_value_need = 1;
    optional uint32 reward_id = 2;
    optional bool is_reward_get = 3;
}



message TimeLimitAddUpRewardGrantNotify {
    optional TimeLimitAddUpType type = 1;
    optional uint32 add_up_value_need = 2;
    optional RewardData reward = 3;

    enum CmdId {
        CMD_ID = 257;
    }
}

enum TimeLimitAddUpType {
    ADD_UP_VIP_POINT_ALL = 1;
    ADD_UP_HCOIN_COST = 2;
    ADD_UP_SCOIN_COST = 3;
    ADD_UP_STAMINA_COST = 4;
    ADD_UP_HCOIN_GACHA = 5;
    ADD_UP_EXP = 6;
    ADD_UP_VIP_POINT = 7;
}

message TimeLimitAddUpUpdateNotify {
    optional uint32 add_up_value = 1;

    enum CmdId {
        CMD_ID = 258;
    }
}

message TowerRaidAvatar {
    optional uint32 avatar_id = 1;
    optional uint32 enter_times = 2;
    optional uint32 weapon_id = 3;
    repeated uint32 stigmata_id_list = 4;
}

message TowerRaidBossStage {
    optional uint32 stage_id = 1;
    optional uint32 boss_left_hp = 2;
}


message TowerRaidLockAvatarNotify {
    repeated TowerRaidAvatar avatar_list = 1;

    enum CmdId {
        CMD_ID = 4191;
    }
}

enum TowerRaidRating {
    TOWER_RAID_RATING_NONE = 0;
    TOWER_RAID_RATING_DEGRADE = 1;
    TOWER_RAID_RATING_KEEP = 2;
    TOWER_RAID_RATING_UPGRADE = 3;
}










message TownActivity {
    optional uint32 town_id = 1;
    optional uint32 tower_id = 2;
    optional uint32 game_round = 3;
    repeated TownAvatar avatar_list = 4;
    repeated uint32 brick_id_list = 5;
    optional uint32 next_brick_round = 6;
    repeated TownBuilding building_list = 7;
    repeated uint32 valid_building_id_list = 8;
    repeated TownMonster monster_list = 9;
    repeated TownEvent event_list = 10;
    optional TownBoss boss = 11;
    repeated TownBuff buff_list = 12;
    repeated TownPassByTrigger trigger_list = 13;
    repeated TownChallenge challenge_list = 14;
    repeated uint32 finished_tower_id_list = 15;
    optional bool is_game_end = 16;
    repeated TownPath path_list = 17;
    optional string transaction_str = 18;
}


message TownActivityAlterPathReq {
    optional TownCommonHead head = 1;
    optional uint32 position = 2;

    enum CmdId {
        CMD_ID = 6478;
    }
}


message TownActivityAlterPathRsp {
    optional Retcode retcode = 1;
    optional TownCommonHead head = 2;
    optional uint32 position = 3;
    optional uint32 next_position = 4;

    enum CmdId {
        CMD_ID = 6479;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_ALTER = 2;
        NOT_MEET_CONDITION = 3;
    }
}



message TownActivityAttackEnemyBuffNotify {
    optional TownCommonHead head = 1;
    repeated Attack attack_list = 2;
    repeated DropItem drop_item_list = 3;

    enum CmdId {
        CMD_ID = 6480;
    }
    message Attack {
        optional uint32 building_unique_id = 1;
        optional uint32 skill_id = 2;
        repeated uint32 attacked_unique_id_list = 3;
    }
}


message TownActivityBattleReq {
    optional TownCommonHead head = 1;
    optional BattleEndStatus end_status = 2;
    repeated AvatarBattleResult avatar_result_list = 3;
    optional MonsterBattleResult monster_result = 4;

    enum CmdId {
        CMD_ID = 6456;
    }
    enum BattleEndStatus {
        WIN = 1;
        ALL_DEAD = 2;
    }
    message AvatarBattleResult {
        optional uint32 avatar_id = 1;
        optional uint32 left_hp_ratio = 2;
    }
    message MonsterBattleResult {
        optional uint32 monster_unique_id = 1;
        optional uint32 left_hp_ratio = 2;
    }
}



message TownActivityBattleRsp {
    optional Retcode retcode = 1;
    optional TownCommonHead head = 2;
    repeated DropItem drop_item_list = 3;

    enum CmdId {
        CMD_ID = 6457;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_ERROR = 2;
        AVATAR_TEAM_NUM_ERROR = 3;
        POSITION_ERROR = 4;
        MONSTER_NOT_EXIST = 5;
    }
}


message TownActivityBossAttackNotify {
    optional TownCommonHead head = 1;
    repeated uint32 attacked_position_list = 2;

    enum CmdId {
        CMD_ID = 6465;
    }
}


message TownActivityBuildReq {
    optional TownCommonHead head = 1;
    optional uint32 use_brick_index = 2;
    optional uint32 use_brick_position = 3;
    optional uint32 target_building_id = 4;
    optional uint32 target_building_position = 5;
    optional uint32 direction = 6;
    repeated uint32 consume_building_unique_id_list = 7;

    enum CmdId {
        CMD_ID = 6454;
    }
}


message TownActivityBuildRsp {
    optional Retcode retcode = 1;
    optional TownCommonHead head = 2;

    enum CmdId {
        CMD_ID = 6455;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        INVALID_BRICK = 2;
        BLUEPRINT_ERROR = 3;
        INVALID_POSITION = 4;
        LIMIT = 5;
    }
}

enum TownActivityChallengeCmpType {
    TOWN_ACTIVITY_CHALLENGE_CMP_GREATER = 1;
    TOWN_ACTIVITY_CHALLENGE_CMP_LESS = 2;
    TOWN_ACTIVITY_CHALLENGE_CMP_EQUAL = 3;
    TOWN_ACTIVITY_CHALLENGE_CMP_GREATER_EQUAL = 4;
    TOWN_ACTIVITY_CHALLENGE_CMP_LESS_EQUAL = 5;
}

enum TownActivityChallengeFinishWay {
    TOWN_ACTIVITY_CHALLENGE_BUILDING_HP = 1;
    TOWN_ACTIVITY_CHALLENGE_AVATAR_DIE_TIMES = 2;
    TOWN_ACTIVITY_CHALLENGE_BUILDING_TIMES = 3;
    TOWN_ACTIVITY_CHALLENGE_STRENTH_AVATAR_NUM = 4;
    TOWN_ACTIVITY_CHALLENGE_COIN_NUM = 5;
}

enum TownActivityChallengeRecordType {
    TOWN_ACTIVITY_CHALLENGE_RECORD_IN_GAME = 1;
    TOWN_ACTIVITY_CHALLENGE_RECORD_SETTLE_GAME = 2;
}


message TownActivityCheckInOptionalReq {
    optional TownCommonHead head = 1;
    optional uint32 building_unique_id = 2;
    optional uint32 avatar_id = 3;

    enum CmdId {
        CMD_ID = 6474;
    }
}


message TownActivityCheckInOptionalRsp {
    optional Retcode retcode = 1;
    optional TownCommonHead head = 2;

    enum CmdId {
        CMD_ID = 6475;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_LIST = 2;
        CHECKED_IN = 3;
    }
}

enum TownActivityCondType {
    TOWN_ACTIVITY_COND_NONE = 0;
    TOWN_ACTIVITY_COND_TOTAL_STRENGTH = 1;
    TOWN_ACTIVITY_COND_TOTAL_SPEED = 2;
    TOWN_ACTIVITY_COND_TOTAL_LUCK = 3;
    TOWN_ACTIVITY_COND_COIN_MATERIAL_NUM = 4;
    TOWN_ACTIVITY_COND_BUILDING_NUM = 5;
}

enum TownActivityConst {
    TOWN_ACTIVITY_ROUND_PER_SECOND = 50;
    TOWN_ACTIVITY_STEP_PER_TILE_CELL = 10000;
    TOWN_ACTIVITY_MAX_HP_RATIO = 100000;
}





message TownActivityEndNotify {
    optional TownCommonHead head = 1;
    optional Status status = 2;
    repeated TownChallenge challenge_list = 3;
    optional RewardData challenge_reward_data = 4;
    optional GenericItemNum talent_point_item = 5;

    enum CmdId {
        CMD_ID = 6464;
    }
    enum Status {
        WIN = 0;
        LOSE = 1;
        ABANDON = 2;
    }
}

message TownActivityGetDataReq {
    optional uint32 town_id = 1;

    enum CmdId {
        CMD_ID = 6450;
    }
}


message TownActivityGetDataRsp {
    optional Retcode retcode = 1;
    optional TownActivity town = 2;

    enum CmdId {
        CMD_ID = 6451;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message TownActivityGetShopReq {
    optional TownCommonHead head = 1;
    optional uint32 building_unique_id = 2;

    enum CmdId {
        CMD_ID = 6466;
    }
}


message TownActivityGetShopRsp {
    optional Retcode retcode = 1;
    optional TownCommonHead head = 2;
    optional uint32 building_unique_id = 3;
    repeated ShopGoods goods_list = 4;

    enum CmdId {
        CMD_ID = 6467;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
    message ShopGoods {
        optional uint32 goods_id = 1;
        optional uint32 material_id = 2;
        optional uint32 left_buy_times = 3;
        optional uint32 cost_material_id = 4;
        optional uint32 cost_num = 5;
        optional uint32 limit_type = 6;
    }
}

enum TownActivityGoodsLimitType {
    TOWN_ACTIVITY_GOODS_LIMIT_SHOP = 1;
    TOWN_ACTIVITY_GOODS_LIMIT_GLOBAL = 2;
}


message TownActivityHealAvatarReq {
    optional TownCommonHead head = 1;
    optional uint32 avatar_id = 2;

    enum CmdId {
        CMD_ID = 6460;
    }
}


message TownActivityHealAvatarRsp {
    optional Retcode retcode = 1;
    optional TownCommonHead head = 2;

    enum CmdId {
        CMD_ID = 6461;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message TownActivityMaterialUseReq {
    optional TownCommonHead head = 1;
    optional uint32 material_id = 2;
    optional uint32 target_param = 3;

    enum CmdId {
        CMD_ID = 6470;
    }
}


message TownActivityMaterialUseRsp {
    optional Retcode retcode = 1;
    optional TownCommonHead head = 2;
    optional uint32 material_id = 3;

    enum CmdId {
        CMD_ID = 6471;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        NOT_USABLE = 3;
        INVALID_TARGET = 4;
        FORBID = 5;
    }
}

enum TownActivityMaterialUseType {
    TOWN_ACTIVITY_MATERIAL_USE_BUILDING = 1;
    TOWN_ACTIVITY_MATERIAL_USE_AVATAR_BUFF = 2;
    TOWN_ACTIVITY_MATERIAL_USE_KILL_MONSTER = 3;
    TOWN_ACTIVITY_MATERIAL_USE_GLOBAL_BUFF = 4;
}


message TownActivityRefreshBrickReq {
    optional TownCommonHead head = 1;

    enum CmdId {
        CMD_ID = 6481;
    }
}


message TownActivityRefreshBrickRsp {
    optional Retcode retcode = 1;
    optional TownCommonHead head = 2;

    enum CmdId {
        CMD_ID = 6482;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LACK_COIN = 2;
        NO_BRICK = 3;
    }
}

message TownActivityResetReq {
    optional uint32 town_id = 1;

    enum CmdId {
        CMD_ID = 6476;
    }
}

message TownActivityResetRsp {
    optional Retcode retcode = 1;
    optional uint32 town_id = 2;

    enum CmdId {
        CMD_ID = 6477;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message TownActivitySaveReq {
    optional TownCommonHead head = 1;

    enum CmdId {
        CMD_ID = 6452;
    }
}


message TownActivitySaveRsp {
    optional Retcode retcode = 1;
    optional TownCommonHead head = 2;

    enum CmdId {
        CMD_ID = 6453;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}


message TownActivitySellBrickReq {
    optional TownCommonHead head = 1;
    optional uint32 sell_brick_index = 2;

    enum CmdId {
        CMD_ID = 6462;
    }
}



message TownActivitySellBrickRsp {
    optional Retcode retcode = 1;
    optional TownCommonHead head = 2;
    repeated Material return_material_list = 3;

    enum CmdId {
        CMD_ID = 6463;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CAN_NOT_SELL = 2;
    }
}


message TownActivitySellBuildingReq {
    optional TownCommonHead head = 1;
    optional uint32 sell_building_unique_id = 2;

    enum CmdId {
        CMD_ID = 6458;
    }
}



message TownActivitySellBuildingRsp {
    optional Retcode retcode = 1;
    optional TownCommonHead head = 2;
    repeated Material return_material_list = 3;

    enum CmdId {
        CMD_ID = 6459;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        CAN_NOT_SELL = 2;
    }
}


message TownActivityShopBuyReq {
    optional TownCommonHead head = 1;
    optional uint32 shop_building_unique_id = 2;
    optional uint32 goods_id = 3;

    enum CmdId {
        CMD_ID = 6468;
    }
}


message TownActivityShopBuyRsp {
    optional Retcode retcode = 1;
    optional TownCommonHead head = 2;
    optional uint32 goods_id = 3;
    optional uint32 left_buy_times = 4;

    enum CmdId {
        CMD_ID = 6469;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        COIN_LACK = 2;
        SOLD = 3;
        FORBID = 4;
    }
}


message TownActivitySpeedUpHealReq {
    optional TownCommonHead head = 1;
    optional uint32 avatar_id = 2;

    enum CmdId {
        CMD_ID = 6472;
    }
}


message TownActivitySpeedUpHealRsp {
    optional Retcode retcode = 1;
    optional TownCommonHead head = 2;

    enum CmdId {
        CMD_ID = 6473;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_HEALING = 2;
        LACK_MATERIAL = 3;
    }
}


message TownAvatar {
    optional uint32 avatar_id = 1;
    optional uint32 tile_unique_id = 2;
    optional uint32 left_step = 3;
    optional uint32 tile_position = 4;
    optional uint32 left_hp_ratio = 5;
    optional Status status = 6;
    optional uint32 status_begin_round = 7;
    optional uint32 check_in_building_unique_id = 8;
    repeated TownBuff buff_list = 9;
    optional uint32 speed_up_heal_times = 10;

    enum Status {
        NORMAL = 0;
        HEALING = 1;
        DEAD = 2;
    }
}

message TownBoss {
    optional uint32 monster_id = 1;
    optional uint32 unique_id = 2;
    optional uint32 strength = 3;
    optional uint32 left_hp_ratio = 4;
    optional uint32 born_round = 5;
    optional uint32 next_boss_born_round = 6;
    optional uint32 next_boss_monster_id = 7;
}

message TownBuff {
    optional uint32 buff_id = 1;
    optional uint32 buff_num = 2;
    optional uint32 left_duration_num = 3;
}

enum TownBuffDurationType {
    TOWN_BUFF_DURATION_PERMANENT = 0;
    TOWN_BUFF_DURATION_BATTLE = 1;
    TOWN_BUFF_DURATION_STEP = 2;
    TOWN_BUFF_DURATION_BOSS = 3;
}

enum TownBuffType {
    TOWN_BUFF_ADD_STRENGTH_RATIO = 1;
    TOWN_BUFF_ADD_STRENGTH = 2;
    TOWN_BUFF_ADD_LUCK = 3;
    TOWN_BUFF_COIN_RATIO = 4;
    TOWN_BUFF_ADD_MATERIAL = 5;
    TOWN_BUFF_ADD_DAMAGE_RATIO = 6;
    TOWN_BUFF_CHANGE_TERRAIN = 7;
    TOWN_BUFF_CHANGE_GROUND = 8;
    TOWN_BUFF_ADD_DAMAGE_RECEIVED = 9;
    TOWN_BUFF_RPG_EVENT = 10;
    TOWN_BUFF_HEAL_HP_BY_RATIO = 11;
    TOWN_BUFF_HEAL = 12;
    TOWN_BUFF_CHECK_IN = 13;
    TOWN_BUFF_CHECK_OUT = 14;
    TOWN_BUFF_POSTPONE_BOSS = 15;
    TOWN_BUFF_CREATE_ENTITY = 16;
    TOWN_BUFF_REPLACE_ENTITY = 17;
    TOWN_BUFF_ADD_BRICK = 18;
    TOWN_BUFF_LOSE_GAME = 19;
    TOWN_BUFF_RESET_GROUND = 20;
    TOWN_BUFF_ADD_SPEED = 21;
    TOWN_BUFF_CHECK_IN_OPTIONAL = 22;
    TOWN_BUFF_ADD_MONSTER = 23;
    TOWN_BUFF_ADD_EVENT = 24;
    TOWN_BUFF_WIN_GAME = 25;
    TOWN_BUFF_RESET_TERRAIN = 26;
    TOWN_BUFF_BATTLE_SKILL = 27;
    TOWN_BUFF_CHANGE_BUILDING = 28;
    TOWN_BUFF_REDUCE_BOSS_INITIAL_HP_RATIO = 29;
    TOWN_BUFF_ATTACK_ENEMY = 30;
}

message TownBuilding {
    optional uint32 unique_id = 1;
    optional uint32 building_id = 2;
    optional uint32 position = 3;
    repeated uint32 occupy_position_list = 4;
    repeated SkillTriggerTimes skill_trigger_times_list = 5;
    optional uint32 left_hp = 6;
    repeated uint32 activated_duration_skill_id_list = 7;
    repeated uint32 waiting_avatar_id_list = 8;
    optional uint32 next_interval_skill_round = 9;
    message SkillTriggerTimes {
        optional uint32 skill_id = 1;
        optional uint32 trigger_times = 2;
    }
}

enum TownBuildingSkillCondType {
    TOWN_BUILDING_COND_NONE = 0;
    TOWN_BUILDING_COND_SIDE_BUILDING = 1;
    TOWN_BUILDING_COND_SIDE_BUILDING_MAX_NUM = 2;
    TOWN_BUILDING_COND_NO_SIDE_BUILDING = 3;
    TOWN_BUILDING_COND_SIDE_ROAD = 4;
    TOWN_BUILDING_COND_TOTAL_BUILDING_NUM = 5;
    TOWN_BUILDING_COND_PASS_AVATAR = 6;
    TOWN_BUILDING_COND_SIDE_ROAD_WITH_TERRAIN = 7;
}

enum TownBuildingSkillTargetType {
    TOWN_TARGET_NONE = 0;
    TOWN_TARGET_AVATAR_CHECK_IN = 1;
    TOWN_TARGET_ALL_AVATAR = 2;
    TOWN_TARGET_ATTRIBUTE_AVATAR = 3;
    TOWN_TARGET_PASSED_AVATAR_IN_CROSS = 4;
    TOWN_TARGET_ROAD_IN_CROSS = 5;
    TOWN_TARGET_ROAD_IN_ROUND = 6;
    TOWN_TARGET_BUILDING = 7;
    TOWN_TARGET_PASSED_AVATAR_IN_ROUND = 8;
    TOWN_TARGET_SPECIFIC_AVATAR = 9;
    TOWN_TARGET_RANDOM_EMPTY_ROAD_IN_ROUND = 10;
    TOWN_TARGET_RANDOM_MONSTER_AOE = 11;
    TOWN_TARGET_BOSS = 12;
}

message TownChallenge {
    optional uint32 challenge_id = 1;
    optional Status status = 2;
    optional uint32 value = 3;
    optional uint32 tower_id = 4;

    enum Status {
        NONE = 0;
        DOING = 1;
        FINISH = 2;
        CLOSE = 3;
    }
}

message TownCommonHead {
    optional uint32 town_id = 1;
    optional uint32 tower_id = 2;
    optional uint32 game_round = 3;
}

message TownEvent {
    optional uint32 position = 1;
    optional uint32 event_id = 2;
}

message TownMonster {
    optional uint32 unique_id = 1;
    optional uint32 monster_id = 2;
    optional uint32 position = 3;
    optional uint32 strength = 4;
    optional uint32 left_hp_ratio = 5;
}

message TownPassByTrigger {
    optional uint32 position = 1;
    optional uint32 skill_id = 2;
    optional uint32 building_unique_id = 3;
}

message TownPath {
    optional uint32 position = 1;
    optional uint32 next_position = 2;
}

enum TownPropType {
    TOWN_NONE = 0;
    TOWN_AVATAR = 1;
    TOWN_MONSTER = 2;
}

enum TownRangeType {
    TOWN_RANGE_NONE = 0;
    TOWN_RANGE_CROSS = 1;
    TOWN_RANGE_ROUND = 2;
}

message TransferArmadaLeaderReq {
    optional uint32 target_uid = 1;

    enum CmdId {
        CMD_ID = 2619;
    }
}

message TransferArmadaLeaderRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 2620;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_GRANTED = 2;
        NOT_IN_ARMADA = 3;
        TARGET_NOT_IN_ARMADA = 4;
        LEVEL_LACK = 5;
    }
}

message TrialAvatar {
    optional uint32 sample_id = 1;
    optional uint32 end_time = 2;
    optional bool is_first_show = 3;
}

message TrialWarship {
    optional uint32 sample_id = 1;
    optional uint32 end_time = 2;
}

enum TrialWarshipTimeType {
    TRIAL_WARSHIP_TIME_UNTIL = 1;
    TRIAL_WARSHIP_TIME_DURATION = 2;
}

message TriggerBurdenAlleviationReq {
    optional uint32 alleviation_id = 1;
    repeated uint32 para_list = 2;

    enum CmdId {
        CMD_ID = 4354;
    }
}



message TriggerBurdenAlleviationRsp {
    optional Retcode retcode = 1;
    optional uint32 alleviation_id = 2;
    repeated uint32 para_list = 3;
    optional RewardData reward_data = 4;
    repeated DropItem drop_item_list = 5;

    enum CmdId {
        CMD_ID = 4355;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        PLAYER_LEVEL_LIMIT = 3;
        TIMES_LIMIT = 4;
        STAMINA_LACK = 5;
        STAGE_NOT_EXIST = 6;
        EQUIPMENT_FULL = 7;
        NO_ENTER_TIMES = 8;
        EXTRA_MATERIAL_LACK = 9;
        RAID_IS_PASS = 10;
        WEEKDAY_STAGE_ID_NOT_MATCH = 11;
        ACTIVITY_NOT_OPEN = 12;
    }
}

message TriggerOpenworldEndlessTrapReq {
    optional uint32 unique_id = 1;
    optional uint32 item_id = 2;

    enum CmdId {
        CMD_ID = 3428;
    }
}

message TriggerOpenworldEndlessTrapRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3429;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_JOIN = 2;
    }
}

message TriggerRecommendGoodsNotify {
    optional uint32 recommend_id = 1;
    repeated uint32 shop_goods_schedule_id_list = 2;
    optional uint32 trigger_recommend_goods_time = 3;

    enum CmdId {
        CMD_ID = 1538;
    }
}

message TriggerRpgTaleEventReq {
    optional uint32 tale_id = 2;
    repeated uint32 content_id_list = 3;

    enum CmdId {
        CMD_ID = 2313;
    }
}

message TriggerRpgTaleEventRsp {
    optional Retcode retcode = 1;
    optional uint32 tale_id = 2;

    enum CmdId {
        CMD_ID = 2314;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NO_EVENT = 2;
    }
}

message TriggerRpgTaleStageEventReq {
    optional uint32 trigger_id = 1;
    optional uint32 tale_id = 2;

    enum CmdId {
        CMD_ID = 2317;
    }
}


message TriggerRpgTaleStageEventRsp {
    optional Retcode retcode = 1;
    optional RpgTaleEvent event_data = 2;
    optional uint32 tale_id = 3;

    enum CmdId {
        CMD_ID = 2318;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message TvtActivity {
    optional uint32 cur_schedule_id = 1;
    optional uint32 open_time = 2;
    optional uint32 close_time = 3;
    optional uint32 tvt_division = 6;
    optional uint32 tvt_star = 7;
    optional uint32 win_streak = 8;
    repeated uint32 has_take_division_up_reward_list = 9;
    optional uint32 total_battle_num = 10;
    optional uint32 total_win = 11;
    optional uint32 max_win_streak = 12;
    optional uint32 mvp_num = 13;
    repeated uint32 has_take_mission_group_reward_list = 14;
    repeated OpenTimePeriod open_time_period_list = 15;
    optional uint32 type = 16;
    message OpenTimePeriod {
        optional uint32 open_day_time = 1;
        optional uint32 close_day_time = 2;
    }
}



message TvtBattleBeginNotify {
    optional uint32 battle_id = 1;
    optional uint32 battle_stage_id = 2;
    optional string transaction_str = 3;
    optional TvtBattleInfo battle_info = 4;
    repeated TvtMember lhs_member_list = 5;
    repeated TvtMember rhs_member_list = 6;
    optional bool is_robot_match = 7;

    enum CmdId {
        CMD_ID = 3352;
    }
}

message TvtBattleClientReportNotify {
    optional string report_type = 1;
    optional string report_value = 2;

    enum CmdId {
        CMD_ID = 3358;
    }
}

message TvtBattleConfirmNotify {

    enum CmdId {
        CMD_ID = 3361;
    }
}

message TvtBattleEndNotify {

    enum CmdId {
        CMD_ID = 3353;
    }
}


message TvtBattleHistory {
    optional TvtBattleResult battle_result = 1;
}


message TvtBattleInfo {
    optional uint32 battle_id = 1;
    optional uint32 battle_stage_id = 2;
    optional BattlePhase phase = 3;
    optional uint32 phase_begin_time = 4;
    optional uint32 phase_end_time = 5;
    repeated TvtBattleMember lhs_member_list = 6;
    repeated TvtBattleMember rhs_member_list = 7;
    optional bool is_robot_match = 8;
    optional uint32 battle_type = 9;
    optional uint32 battle_hard_level_group = 10;
    optional uint32 battle_hard_level = 11;

    enum BattlePhase {
        PHASE_INVALID = 0;
        PHASE_CONFIRM = 1;
        PHASE_PREPARE = 2;
        PHASE_FIGHT = 3;
        PHASE_FINISH = 4;
    }
}

enum TvtBattleJudgeType {
    TVT_BATTLE_JUDGE_NONE = 0;
    TVT_BATTLE_JUDGE_WIN_WHEN_ZERO = 1;
    TVT_BATTLE_JUDGE_LOSE_WHEN_ZERO = 2;
}


message TvtBattleMember {
    optional uint32 uid = 1;
    optional string region_name = 2;
    optional bool is_prepared = 3;
    optional TvtBattleMemberStatus member_status = 4;
    optional bool is_confirmed = 5;
}

message TvtBattleMemberPrepareNotify {
    optional bool is_cancel_prepare = 1;

    enum CmdId {
        CMD_ID = 3351;
    }
}

enum TvtBattleMemberStatus {
    TVT_BATTLE_MEMBER_STATUS_NONE = 0;
    TVT_BATTLE_MEMBER_STATUS_ONLINE = 1;
    TVT_BATTLE_MEMBER_STATUS_OFFLINE = 2;
}


message TvtBattleResult {
    optional uint32 battle_stage_id = 1;
    optional uint32 begin_time = 2;
    optional BattleStatus battle_status = 3;
    repeated TvtMemberStat lhs_member_stat_list = 4;
    repeated TvtMemberStat rhs_member_stat_list = 5;
    optional uint32 battle_type = 6;
    optional bool is_robot_match = 7;
    optional uint32 end_time = 8;

    enum BattleStatus {
        INVALID = 0;
        LEFT_WIN = 1;
        RIGHT_WIN = 2;
    }
}


message TvtBattleRobotSettleNotify {
    optional TvtBattleResult battle_result = 1;

    enum CmdId {
        CMD_ID = 3363;
    }
}


message TvtBattleSettleNotify {
    optional string transaction_str = 1;
    optional uint32 battle_id = 2;
    optional TvtBattleResult battle_result = 3;

    enum CmdId {
        CMD_ID = 3354;
    }
}

message TvtBattleStageMessage {
    optional uint32 message_id = 1;
    optional uint32 from_uid = 2;
    optional ItemMessage item_msg = 11;
    optional AvatarHpMesssage avatar_hp_msg = 12;
    optional PlayerMessage player_msg = 13;
    optional BossDamageMessage boss_damage_msg = 14;
    optional StageScoinMessage stage_scoin_msg = 15;
    optional ClientDefineMessage client_define_msg = 16;
    optional RoundScoreMessage round_score_msg = 17;

    enum MessageType {
        MESSAGE_ITEM = 1;
        MESSAGE_AVATAR_HP = 2;
        MESSAGE_PLAYER_WAVE = 3;
        MESSAGE_BOSS_DAMAGE = 4;
        MESSAGE_STAGE_SCOIN = 5;
        MESSAGE_CLIENT_DEFINE = 6;
        MESSAGE_ROUND_SCORE = 7;
    }
    message ItemMessage {
        optional uint32 item_id = 1;
        repeated uint32 target_uid_list = 2;
        optional uint32 level = 3;
    }
    message AvatarHpMesssage {
        repeated uint32 avatar_hp_list = 1;
        repeated uint32 avatar_id_list = 2;
    }
    message PlayerMessage {
        optional uint32 player_value = 1;
        optional uint32 progress = 2;
    }
    message BossDamageMessage {
        optional uint32 client_add_damage = 1;
        optional uint32 client_total_damage = 2;
        optional uint32 client_set_left_hp = 3;
        optional uint32 server_set_lhs_boss_hp = 4;
        optional uint32 server_set_rhs_boss_hp = 5;
        optional uint32 lhs_final_kill_player_uid = 6;
        optional uint32 rhs_final_kill_player_uid = 7;
    }
    message StageScoinMessage {
        optional uint32 client_add_scoin = 1;
        optional uint32 client_total_scoin = 2;
    }
    message ClientDefineMessage {
        optional uint32 type = 1;
        repeated uint32 para_uint_list = 2;
    }
    message RoundScoreMessage {
        optional uint32 client_add_score = 1;
        optional uint32 left_total_score = 2;
        optional uint32 right_total_score = 3;
        optional uint32 left_win_times = 4;
        optional uint32 right_win_times = 5;
        optional uint32 round = 6;
    }
}

message TvtCard {
    optional uint32 card_id = 1;
    optional uint32 card_level = 2;
}

message TvtCardGetDataReq {

    enum CmdId {
        CMD_ID = 3309;
    }
}



message TvtCardGetDataRsp {
    optional Retcode retcode = 1;
    repeated TvtCard card_list = 2;
    repeated TvtCardSuite suite_list = 3;
    optional uint32 selected_suite_idx = 4;
    optional bool is_take_season_return = 5;

    enum CmdId {
        CMD_ID = 3310;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LOCKED = 2;
    }
}

message TvtCardLevelUpReq {
    optional uint32 card_id = 1;

    enum CmdId {
        CMD_ID = 3311;
    }
}

message TvtCardLevelUpRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3312;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LACK_MATERIAL = 2;
        LOCKED = 3;
        MAX_LEVEL = 4;
    }
}

message TvtCardSuite {
    repeated uint32 card_id_list = 1;
}

message TvtCardTakeSeasonReturnReq {

    enum CmdId {
        CMD_ID = 3315;
    }
}


message TvtCardTakeSeasonReturnRsp {
    optional Retcode retcode = 1;
    repeated RewardItemData return_item_list = 2;

    enum CmdId {
        CMD_ID = 3316;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LOCKED = 2;
        HAS_TAKE = 3;
    }
}

message TvtCardTransformMaterialReq {
    repeated uint32 material_id_list = 1;

    enum CmdId {
        CMD_ID = 3317;
    }
}



message TvtCardTransformMaterialRsp {
    optional Retcode retcode = 1;
    repeated Material transformed_material_list = 2;
    repeated GenericItemNum item_list = 3;

    enum CmdId {
        CMD_ID = 3318;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LOCKED = 2;
    }
}


message TvtCardUpdateSuiteReq {
    repeated TvtCardSuite suite_list = 1;
    optional uint32 selected_suite_idx = 2;

    enum CmdId {
        CMD_ID = 3313;
    }
}

message TvtCardUpdateSuiteRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3314;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LOCKED = 2;
    }
}

message TvtEnterShopReq {

    enum CmdId {
        CMD_ID = 3359;
    }
}

message TvtEnterShopRsp {
    optional Retcode retcode = 1;
    optional uint32 enter_shop_order = 2;

    enum CmdId {
        CMD_ID = 3360;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_BATTLE = 2;
    }
}

message TvtGetStageScheduleReq {
    optional uint32 type = 1;

    enum CmdId {
        CMD_ID = 3307;
    }
}


message TvtGetStageScheduleRsp {
    optional Retcode retcode = 1;
    optional uint32 type = 2;
    repeated TvtStageSchedule schedule_list = 3;

    enum CmdId {
        CMD_ID = 3308;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
    }
}



message TvtMember {
    optional uint32 uid = 1;
    optional string region_name = 2;
    optional string nickname = 3;
    optional uint32 level = 4;
    optional uint32 head_avatar_id = 5;
    optional uint32 frame_id = 6;
    optional uint32 dress_id = 7;
    optional uint32 division = 8;
    optional uint32 division_star = 9;
    optional uint32 win_streak = 10;
    optional double elo_score = 11;
    optional double elo_score_para = 12;
    optional uint32 battle_combat = 13;
    optional uint32 custom_head_id = 14;
    optional uint32 win_add_star = 15;
    optional uint32 lose_del_star = 16;
    repeated TvtCard card_list = 17;
    optional LineupBriefInfo lineup_info = 18;
    optional bool is_robot = 19;
    optional uint32 robot_match_prob = 20;
    optional uint32 voice_id = 21;
    optional uint32 lane_order = 22;
    optional uint32 last_lane_order = 23;
}


message TvtMemberStat {
    optional TvtMember member = 1;
    optional uint32 total_score = 2;
    optional bool is_mvp = 3;
    optional uint32 old_division = 4;
    optional uint32 old_division_star = 5;
    optional double battle_points_in_stage = 6;
    optional uint32 stage_scoin_num = 7;
    optional bool is_team_match = 8;
}

enum TvtStagePickType {
    TVT_STAGE_PICK_NONE = 0;
    TVT_STAGE_PICK_FREE = 1;
    TVT_STAGE_PICK_RANDOM = 2;
}

message TvtStageSchedule {
    optional uint32 day_begin_time = 2;
    optional uint32 day_end_time = 3;
    repeated uint32 stage_id_list = 4;
}

message TvtTakeMissionGroupRewardReq {
    optional uint32 mission_group_id = 1;

    enum CmdId {
        CMD_ID = 3305;
    }
}


message TvtTakeMissionGroupRewardRsp {
    optional Retcode retcode = 1;
    repeated RewardData reward_list = 2;

    enum CmdId {
        CMD_ID = 3306;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
        MISSION_NOT_FINISH = 3;
        HAS_TAKEN = 4;
    }
}

enum TvtType {
    TVT_NONE = 0;
    TVT_NORMAL = 1;
    TVT_RANKING = 2;
}

message TvtUpdateLineupInfoNotify {
    repeated uint32 avatar_id_list = 1;
    repeated uint32 elf_id_list = 2;

    enum CmdId {
        CMD_ID = 3362;
    }
}


message UltraEndlessBriefDataNotify {
    optional UltraEndlessMainData main_data = 1;

    enum CmdId {
        CMD_ID = 5210;
    }
}

message UltraEndlessClientReportNotify {
    optional ClientReportType client_report_type = 1;
    optional string client_transaction_str = 2;
    optional string report_msg = 3;

    enum CmdId {
        CMD_ID = 5219;
    }
    enum ClientReportType {
        CLIENT_REPORT_TYPE_NONE = 0;
        CLIENT_REPORT_TYPE_STAGE_BEGIN = 1;
    }
}

message UltraEndlessCommonNotify {
    optional EventType event_type = 1;

    enum CmdId {
        CMD_ID = 5298;
    }
    enum EventType {
        EVENT_NONE = 0;
        EVENT_IN_SETTLE = 1;
    }
}

message UltraEndlessEnterSiteReq {
    optional uint32 site_id = 1;

    enum CmdId {
        CMD_ID = 5211;
    }
}

message UltraEndlessEnterSiteRsp {
    optional Retcode retcode = 1;
    optional uint32 site_id = 2;

    enum CmdId {
        CMD_ID = 5212;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_SCHEDULE = 2;
        PRE_NOT_FINISH = 3;
        ALREADY_FINISH = 4;
    }
}


message UltraEndlessFirstJoinRewardNotify {
    optional RewardData medal_reward = 1;
    optional RewardData promote_reward = 2;

    enum CmdId {
        CMD_ID = 5220;
    }
}

message UltraEndlessFloor {
    optional uint32 floor = 1;
    optional uint32 max_score = 2;
}

message UltraEndlessGetMainDataReq {
    optional uint32 player_level = 1;

    enum CmdId {
        CMD_ID = 5202;
    }
}





message UltraEndlessGetMainDataRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 group_level = 3;
    optional uint32 top_group_level = 4;
    optional uint32 cup_num = 5;
    optional UltraEndlessMainData main_data = 6;
    optional UltraEndlessSettleInfo last_settle_info = 7;
    optional bool is_just_join = 8;
    optional uint32 dynamic_hard_level = 9;
    repeated UltraEndlessPlayer endless_player_list = 10;
    repeated PlayerFriendBriefData brief_data_list = 11;

    enum CmdId {
        CMD_ID = 5203;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        PLAYER_LEVEL_LACK = 2;
        NOT_OPEN = 3;
        IN_OLD_ENDLESS = 4;
        FEATURE_CLOSED = 5;
    }
}

message UltraEndlessGetTopRankReq {
    optional uint32 schedule_id = 1;

    enum CmdId {
        CMD_ID = 5200;
    }
}


message UltraEndlessGetTopRankRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional RankShowData rank_data = 3;

    enum CmdId {
        CMD_ID = 5201;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}



message UltraEndlessLastSettleRewardNotify {
    optional UltraEndlessSettleInfo settle_info = 1;
    optional RewardData settle_reward_data = 2;
    optional RewardData group_level_reward_data = 3;

    enum CmdId {
        CMD_ID = 5205;
    }
}


message UltraEndlessMainData {
    optional uint32 schedule_id = 1;
    optional uint32 effect_time = 2;
    optional uint32 begin_time = 3;
    optional uint32 end_time = 4;
    optional uint32 close_time = 5;
    optional uint32 last_schedule_id = 6;
    repeated UltraEndlessSite site_list = 8;
    optional uint32 last_settle_top_rank_schedule_id = 10;
    optional uint32 cur_season_id = 11;
    optional uint32 last_settle_season_id = 12;
}


message UltraEndlessPlayer {
    optional uint32 uid = 1;
    optional uint32 group_level = 2;
    optional uint32 cup_num = 3;
    optional uint32 max_stage_score = 4;
    optional uint32 score_update_time = 5;
    optional LineupBriefInfo lineup_info = 6;
}

message UltraEndlessReportSiteFloorReq {
    optional uint32 site_id = 1;
    optional uint32 floor = 2;
    optional uint32 score = 3;
    optional uint32 cost_time = 4;
    optional uint32 total_cost_time = 5;
    repeated uint32 avatar_id_list = 6;
    repeated uint32 elf_id_list = 7;
    optional bool is_up_floor = 8;

    enum CmdId {
        CMD_ID = 5206;
    }
}

message UltraEndlessReportSiteFloorRsp {
    optional Retcode retcode = 1;
    optional uint32 site_id = 2;
    optional uint32 floor = 3;
    optional bool is_up_floor = 4;

    enum CmdId {
        CMD_ID = 5207;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        PRE_NOT_FINISH = 2;
        NOT_IN_SCHEDULE = 3;
    }
}


message UltraEndlessSettleInfo {
    optional uint32 schedule_id = 1;
    optional uint32 group_level = 2;
    optional uint32 max_stage_score = 3;
    optional uint32 group_member_num = 4;
    optional uint32 rank = 5;
    optional uint32 cup_num_before = 6;
    optional uint32 cup_num_after_schedule_settle = 7;
    optional uint32 cup_num_after_season_settle = 8;
    optional uint32 cup_num_before_season_settle = 9;
    optional uint32 cup_num = 10;
    repeated OldEndlessPlayerSettle old_endless_settle_list = 11;
    optional uint32 mmr_score = 12;
    optional uint32 buffer_cup_before_schedule_settle = 13;
    optional uint32 buffer_cup = 15;
}


message UltraEndlessSite {
    optional uint32 site_id = 1;
    repeated UltraEndlessFloor floor_list = 2;
    optional uint32 max_score_cost_time = 3;
}

message UltraEndlessTopRankRewardReq {

    enum CmdId {
        CMD_ID = 5215;
    }
}


message UltraEndlessTopRankRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 schedule_id = 2;
    optional uint32 rank = 3;
    optional RewardData reward_data = 4;

    enum CmdId {
        CMD_ID = 5216;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_RANK = 2;
        ALREADY_TAKEN = 3;
    }
}

message UnbindAccountReq {
    optional uint32 account_type = 1;
    optional string account_uid = 2;
    optional string account_token = 3;
    optional string token = 4;

    enum CmdId {
        CMD_ID = 961;
    }
}

message UnbindAccountRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 962;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ACCOUNT_VERIFY_ERROR = 2;
        ACCOUNT_TYPE_ERROR = 3;
        NOT_BIND = 4;
        IS_LOGIN = 5;
    }
}


message UniqueGachaData {
    optional uint32 ticket_hcoin_cost = 2;
    optional uint32 ticket_material_id = 3;
    optional uint32 left_gacha_times = 7;
    optional UniqueGachaSelectItemPool select_item_pool = 8;
}

message UniqueGachaSelectItemPool {
    repeated uint32 select_item_list = 1;
}

message UnlockAvatarSkillReq {
    optional uint32 avatar_id = 1;
    optional uint32 skill_id = 2;

    enum CmdId {
        CMD_ID = 88;
    }
}

message UnlockAvatarSkillRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 89;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        HAS_UNLOCK = 3;
        AVATAR_LEVEL_LACK = 4;
        AVATAR_STAR_LACK = 5;
        MATERIAL_LACK = 6;
    }
}

message UnlockDeviceSecurityPasswordReq {
    optional string password = 1;

    enum CmdId {
        CMD_ID = 5027;
    }
}


message UnlockDeviceSecurityPasswordRsp {
    optional Retcode retcode = 1;
    optional SecurityPasswordInfo security_password_info = 2;

    enum CmdId {
        CMD_ID = 5028;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TOO_MANY_FAILS = 2;
        WRONG_PASSWORD = 3;
    }
}

message UnlockDLCPhotoReq {
    optional uint32 unique_monster_id = 1;

    enum CmdId {
        CMD_ID = 3586;
    }
}

message UnlockDLCPhotoRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3587;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message UnlockDormHouseReq {
    optional uint32 house_id = 1;

    enum CmdId {
        CMD_ID = 609;
    }
}


message UnlockDormHouseRsp {
    optional Retcode retcode = 1;
    optional DormHouse house = 2;

    enum CmdId {
        CMD_ID = 610;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        REPEAT_UNLOCK = 2;
        MATERIAL_LIMIT = 3;
        LEVEL_LIMIT = 4;
    }
}

message UnlockFarmSlotReq {
    optional uint32 slot_id = 1;

    enum CmdId {
        CMD_ID = 1387;
    }
}

message UnlockFarmSlotRsp {
    optional Retcode retcode = 1;
    optional uint32 slot_id = 2;

    enum CmdId {
        CMD_ID = 1388;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FARM_LEVEL_LACK = 2;
        MATERIAL_LACK = 3;
    }
}

message UnlockFurnitureReq {
    optional uint32 furniture_id = 1;

    enum CmdId {
        CMD_ID = 680;
    }
}

message UnlockFurnitureRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 681;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        UNLOCK_FORBID = 2;
        HAS_UNLOCK = 3;
        HCOIN_LACK = 4;
        SCOIN_LACK = 5;
        MATERIAL_LACK = 6;
    }
}

message UnlockGobackFundReq {

    enum CmdId {
        CMD_ID = 1651;
    }
}

message UnlockGobackFundRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 1652;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ALREADY_UNLOCKED = 2;
        MCOIN_LACK = 3;
    }
}

message UnlockPrivilegeReq {
    optional uint32 privilege_id = 1;

    enum CmdId {
        CMD_ID = 1642;
    }
}

message UnlockPrivilegeRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 1643;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LEVEL_LACK = 2;
        NEWBIE_SCHEDULE_ERROR = 3;
        NEWBIE_DAY_LACK = 4;
        BUY_TIMES_LACK = 5;
        MCOIN_LACK = 6;
    }
}

message UnlockRpgTaleSiteReq {
    optional uint32 site_id = 1;
    optional uint32 tale_id = 2;
    optional bool is_only_check = 3;

    enum CmdId {
        CMD_ID = 2307;
    }
}


message UnlockRpgTaleSiteRsp {
    optional Retcode retcode = 1;
    optional uint32 site_id = 2;
    optional uint32 tale_id = 5;
    repeated RpgTaleFlag limit_flag_list = 6;
    optional bool is_only_check = 7;

    enum CmdId {
        CMD_ID = 2308;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        UNLOCKED = 2;
        MATERIAL_NOT_ENOUGH = 3;
        FLAG_LIMIT = 4;
    }
}

message UpdateAssistantAvatarIdReq {
    optional uint32 avatar_id = 1;

    enum CmdId {
        CMD_ID = 271;
    }
}

message UpdateAssistantAvatarIdRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 272;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
    }
}


message UpdateAvatarTeamNotify {
    optional AvatarTeam team = 1;

    enum CmdId {
        CMD_ID = 49;
    }
}

message UpdateClientSettingNotify {
    optional uint32 id = 1;
    optional bytes data = 3;

    enum CmdId {
        CMD_ID = 5002;
    }
}




message UpdateClientSettingReq {
    optional uint32 client_setting_type = 1;
    optional bool is_weekly_guide_switch_on = 2;
    repeated SnsShowPriviledge sns_show_priviledge_list = 3;
    optional AvatarArtifactSwitch avatar_artifact_switch = 4;
    optional MasterPupilTagSwitch master_pupil_tag_switch = 5;

    enum CmdId {
        CMD_ID = 1271;
    }
}


message UpdateCustomAvatarTeamReq {
    optional CustomAvatarTeam team = 1;

    enum CmdId {
        CMD_ID = 269;
    }
}

message UpdateCustomAvatarTeamRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 270;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        TEAM_ID_ERROR = 2;
        AVATAR_ID_ERROR = 3;
        AVATAR_NUM_ERROR = 4;
        SENSITIVE_WORDS = 5;
        NAME_LEN_ERROR = 6;
    }
}

message UpdateEquipmentProtectedStatusReq {
    optional bool is_protected = 1;
    repeated uint32 weapon_unique_id_list = 2;
    repeated uint32 stigmata_unique_id_list = 3;

    enum CmdId {
        CMD_ID = 74;
    }
}

message UpdateEquipmentProtectedStatusRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 75;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        EQUIPMENT_NOT_EXIST = 2;
    }
}




message UpdateLobbyLineupReq {
    optional uint32 avatar_id = 1;
    optional MpTeamMemberInfo member_info = 2;
    optional uint32 avatar_trial_id = 4;
    optional uint32 reclaim_avatar_id = 5;
    optional ReclaimMpAvatar reclaim_avatar_info = 6;
    optional uint32 elf_id = 7;
    repeated uint32 backup_avatar_id_list = 8;
    optional uint32 sc_dlc_avatar_id = 9;
    optional ScDLCMpAvatar sc_dlc_avatar_info = 10;

    enum CmdId {
        CMD_ID = 307;
    }
}

message UpdateLobbyLineupRsp {
    optional Retcode retcode = 1;
    optional uint32 avatar_id = 2;
    optional uint32 avatar_trial_id = 3;
    optional uint32 reclaim_avatar_id = 4;
    optional uint32 elf_id = 5;
    repeated uint32 backup_avatar_id_list = 6;

    enum CmdId {
        CMD_ID = 308;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_LOBBY = 2;
        AVATAR_NOT_EXIST = 3;
        STATUS_ERROR = 4;
        SERVER_BUSY = 5;
        ELF_NOT_EXIST = 6;
    }
}


message UpdateLobbySettingReq {
    optional string team_name = 1;
    optional string team_description = 2;
    optional uint32 min_level = 3;
    optional LobbyEnterType lobby_enter_type = 4;
    optional uint32 max_level = 5;

    enum CmdId {
        CMD_ID = 1365;
    }
}

message UpdateLobbySettingRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 1366;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_LOBBY = 2;
        NOT_LEADER = 3;
        TEAM_NAME_ERROR = 4;
    }
}


message UpdateMissionProgressReq {
    optional MissionFinishWay finish_way = 1;
    optional uint32 finish_para = 2;
    optional string finish_para_str = 3;
    optional uint32 progress_add = 4;
    optional uint32 stage_id = 5;

    enum CmdId {
        CMD_ID = 117;
    }
}

message UpdateMissionProgressRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 118;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        FINISH_WAY_ERROR = 2;
        PLAYER_STATUS_ERROR = 3;
    }
}

message UpdateRogueStageAvatarPositionReq {
    repeated uint32 avatar_id_list = 1;

    enum CmdId {
        CMD_ID = 286;
    }
}

message UpdateRogueStageAvatarPositionRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 287;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_JOIN_ARMADA = 2;
        NOT_INIT = 3;
        AVATAR_ERROR = 4;
    }
}


message UpdateRoomInfoReq {
    optional RoomInfo room_info = 1;

    enum CmdId {
        CMD_ID = 3171;
    }
}

message UpdateRoomInfoRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3172;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_IN_ROOM = 2;
        IN_MATCH = 3;
        NOT_LEADER = 4;
        STAGE_NOT_IN_SCHEDULE = 5;
        TOO_FREQUENT = 6;
    }
}

message UpdateScDLCFeverSuiteReq {
    optional uint32 suite_id = 1;
    optional string suite_name = 2;
    repeated uint32 skill_chip_id_list = 3;

    enum CmdId {
        CMD_ID = 6304;
    }
}

message UpdateScDLCFeverSuiteRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 6305;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        SENSITIVE_WORDS = 2;
        SLOT_LACK = 3;
        INVALID_SKILL_CHIP = 4;
        NAME_FORMAT_ERROR = 5;
    }
}

message UpdateTowerRaidBossReq {
    optional uint32 stage_id = 1;
    optional uint32 boss_left_hp = 2;

    enum CmdId {
        CMD_ID = 4189;
    }
}

message UpdateTowerRaidBossRsp {
    optional Retcode retcode = 1;
    optional uint32 stage_id = 2;
    optional uint32 boss_left_hp = 3;

    enum CmdId {
        CMD_ID = 4190;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_BEGIN = 2;
        STAGE_ERROR = 3;
    }
}

message UpgradeMissionThemeReq {
    optional uint32 theme_id = 1;

    enum CmdId {
        CMD_ID = 4207;
    }
}


message UpgradeMissionThemeRsp {
    optional Retcode retcode = 1;
    optional uint32 theme_id = 2;
    optional RewardData reward_data = 3;

    enum CmdId {
        CMD_ID = 4208;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        HCOIN_LACK = 3;
        MCOIN_LACK = 4;
        MATERIAL_LACK = 5;
    }
}


message UrgencyMsgNotify {
    optional string msg = 1;
    optional SettingDict client_setting = 2;

    enum CmdId {
        CMD_ID = 187;
    }
}


message UseMaterialReq {
    optional uint32 material_id = 1;
    optional uint32 num = 2;
    optional uint32 parameter = 3;
    optional uint32 simulate_magic = 4;
    optional EquipmentItemList consume_item_list = 5;

    enum CmdId {
        CMD_ID = 251;
    }
}



message UseMaterialRsp {
    optional Retcode retcode = 1;
    repeated RewardData gift_reward_list = 2;
    repeated DropItem drop_item_list = 3;
    optional uint32 material_id = 4;
    optional uint32 num = 5;
    optional uint32 overflow_item_id = 6;

    enum CmdId {
        CMD_ID = 252;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_LACK = 2;
        EQUIPMENT_FULL = 3;
        EQUIPMENT_MATERIAL_LIMIT = 4;
        EQUIPMENT_FRAGMENT_LIMIT = 5;
        STAMINA_FULL = 6;
        LEVEL_LACK = 7;
        EXTRA_STORY_CLOSED = 8;
        EQUIPMENT_EXPIRE = 9;
        BUFF_MATERIAL_FAIL = 10;
        ACTIVATE_AVATAR_REPEATE_FAIL = 11;
        ACTIVATE_AVATAR_LEVEL_LIMIT = 12;
        NO_ARMADA = 13;
        MATRIX_CLOSE = 14;
        EXPLORE_POWER_LIMIT = 15;
        INVALID_NUM = 16;
        TEAM_NOT_EXIST = 17;
        TEAM_FULL_ENERGE = 18;
        VITALITY_FULL = 19;
        FEATURE_CLOSED = 20;
        ACTIVITY_NOT_OPEN = 21;
        AVATAR_NEED = 22;
        CONSUME_ITEM_NOT_EXIST = 23;
        CONSUME_ITEM_IN_USE = 24;
        CONSUME_ITEM_REPEAT = 25;
        CONSUME_ITEM_PROTECTED = 26;
        COST_GACHA_TICKET = 27;
        COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 28;
        COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 29;
        CONSUME_ITEM_IN_FACILITY = 30;
        CONSUME_ITEM_GRAND_KEY = 31;
        CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 32;
    }
}


message UseOpenworldEndlessItemReq {
    optional uint32 item_id = 1;
    optional uint32 target_uid = 2;
    optional OpenworldInvasionItem invasion = 3;
    optional uint32 item_num = 4;

    enum CmdId {
        CMD_ID = 3422;
    }
}


message UseOpenworldEndlessItemRsp {
    optional Retcode retcode = 1;
    optional uint32 new_invasion_id = 2;
    optional uint32 item_id = 3;
    optional uint32 battle_id = 4;
    repeated OpenworldEndlessItem effect_item_list = 5;
    optional uint32 old_invaison_id = 6;
    optional uint32 target_id = 7;
    optional uint32 invasion_buff_num = 8;

    enum CmdId {
        CMD_ID = 3423;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ITEM_LACK = 2;
        INVASION_AVATAR_ERROR = 3;
        TARGET_ERROR = 4;
        TARGET_GROUP_ERROR = 5;
        OUT_OF_RANGE = 6;
        INVASION_FULL = 7;
        INVASION_ID_ERROR = 8;
        ENDLESS_STATUS_ERROR = 9;
        NOT_JOIN = 10;
        TRAP_FULL = 11;
    }
}

message UseReclaimItemReq {
    optional uint32 item_id = 1;
    optional uint32 num = 2;

    enum CmdId {
        CMD_ID = 1181;
    }
}

message UseReclaimItemRsp {
    optional Retcode retcode = 1;
    optional uint32 exp_added = 2;

    enum CmdId {
        CMD_ID = 1182;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        ITEM_ERROR = 2;
        ITEM_LACK = 3;
    }
}









message UserRankData {
    optional uint32 uid = 1;
    optional uint32 score = 2;
    optional uint32 rank = 3;
    optional string nick_name = 4;
    optional uint32 armada_id = 5;
    optional string armada_name = 6;
    optional uint32 avatar_id = 7;
    optional uint32 dress_id = 8;
    optional uint32 frame_id = 9;
    optional string house_name = 10;
    optional uint32 custom_head_id = 11;
    optional bool is_logoff = 12;
    repeated AvatarBriefInfo avatar_info_list = 31;
    repeated ElfBriefInfo elf_info_list = 32;
    optional string dlc_name = 33;
    optional UserRankWeeklyReportEndless weekly_report_endless_info = 34;
    optional UserRankWeeklyReportExBoss weekly_report_ex_boss_info = 35;
    optional uint32 ultra_endless_group_level = 36;
    optional UserRankWeeklyReportUltraEndless weekly_report_ultra_endless_info = 37;
    optional UserRankSlgBattle slg_battle_info = 39;
    repeated RanchMonsterBriefInfo monster_info_list = 40;
    optional MonsterCardActivityRankInfo monster_card_rank_info = 41;
}

message UserRankSlgBattle {
    optional uint32 country_id = 1;
}

enum UserRankType {
    USER_RANK_NONE = 0;
    USER_RANK_NORMAL = 1;
    USER_RANK_PERCENT = 2;
}


message UserRankWeeklyReportEndless {
    optional uint32 final_boss_id = 1;
    optional EndlessRewardType reward_type = 3;
    optional uint32 battle_config_id = 4;
}


message UserRankWeeklyReportExBoss {
    repeated FinishedExBossInfo finished_boss_info_list = 1;
    optional uint32 rank_percent = 2;
}

message UserRankWeeklyReportUltraEndless {
    optional uint32 group_level = 1;
    optional uint32 cup_num_before = 2;
    optional uint32 cup_num_after_schedule_settle = 3;
    optional uint32 battle_config_id = 4;
}

enum UserType {
    USER_TYPE_NONE = 0;
    USER_TYPE_ANDROID = 1;
    USER_TYPE_IOS = 2;
    USER_TYPE_PC = 3;
    USER_TYPE_CHANNEL = 4;
    USER_TYPE_WEGAME = 5;
    USER_TYPE_STEAM = 6;
}

message VerifyGoogleOrderNotify {
    optional GoogleType channel = 1;
    optional string param = 2;

    enum CmdId {
        CMD_ID = 247;
    }
    enum GoogleType {
        GOOGLE_JAPAN = 1;
        GOOGLE_TW = 2;
        GOOGLE_KR = 3;
        GOOGLE_OVERSEAS = 4;
        GOOGLE_GLOBAL = 5;
    }
}

message VerifyItunesOrderNotify {
    optional string receipt_data = 1;
    optional string device_uuid = 2;
    optional bool is_auto_reissue = 3;
    optional string currency_code = 4;
    optional string price_amount = 5;

    enum CmdId {
        CMD_ID = 82;
    }
}

message VerifyMyCardOrderNotify {
    optional string auth_code = 1;
    optional string product_name = 2;

    enum CmdId {
        CMD_ID = 370;
    }
}

message VerifySamSungOrderNotify {
    optional string purchase_id = 1;

    enum CmdId {
        CMD_ID = 1581;
    }
}

message VerifySteamOrderNotify {
    optional string order_id = 1;

    enum CmdId {
        CMD_ID = 1650;
    }
}

message VersionActivityData {
    optional uint32 id = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    optional bool is_take_reward = 4;
}

message VideoPopupData {
    optional uint32 id = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    optional string middle_image_path = 4;
    optional string video_icon = 5;
    optional string video_link = 6;
    optional uint32 video_link_open_type = 7;
    optional uint32 max_times = 8;
}

message VipReward {
    optional uint32 vip_level = 1;
    optional uint32 pay_hcoin = 2;
    repeated uint32 reward_id_list = 3;
    optional uint32 reward_batch = 4;
    repeated uint32 special_reward_id_list = 5;
    repeated uint32 is_special_shine_list = 6;
    repeated uint32 taken_reward_id_list = 7;
}

enum VipRewardStatus {
    VIP_REWARD_LOCKED = 1;
    VIP_REWARD_NOT_GET = 2;
    VIP_REWARD_HAS_GOT = 3;
    VIP_REWARD_HAS_GOT_BUT_SPECIAL = 4;
}

message VirtualAvatar {
    optional uint32 virtual_avatar_id = 1;
    optional uint32 virtual_weapon_id = 2;
    optional uint32 virtual_stigmata_id_1 = 3;
    optional uint32 virtual_stigmata_id_2 = 4;
    optional uint32 virtual_stigmata_id_3 = 5;
    optional uint32 virtual_buff_id = 6;
}



message VirtualAvatarGroup {
    optional uint32 group_id = 1;
    repeated VirtualAvatar virtual_avatar_list = 2;
    repeated uint32 virtual_weapon_id_list = 3;
    repeated uint32 virtual_stigmata_id_list = 4;
    repeated uint32 virtual_avatar_team_list = 5;
    repeated VirtualTrainRole virtual_role_list = 6;
    optional bool is_locked = 7;
}

message VirtualAvatarGroupBriefData {
    optional uint32 group_id = 1;
    optional uint32 chapter_id = 2;
}


message VirtualAvatarGroupChangeNotify {
    optional VirtualAvatarGroup virtual_avatar_group = 1;

    enum CmdId {
        CMD_ID = 3512;
    }
}


message VirtualGacha {
    optional uint32 box_id = 1;
    optional Status status = 2;
    repeated VirtualGachaPool pool_list = 3;

    enum Status {
        NORMAL = 0;
        EMPTY = 1;
    }
}

message VirtualGachaPool {
    optional uint32 pool_id = 1;
    optional uint32 gacha_times = 2;
    optional uint32 total_times = 3;
}

message VirtualGachaReq {
    optional uint32 box_id = 1;

    enum CmdId {
        CMD_ID = 3508;
    }
}


message VirtualGachaRsp {
    optional Retcode retcode = 1;
    optional uint32 item_id = 2;
    repeated uint32 candidate_item_id_list = 3;
    optional VirtualGacha gacha_status = 4;

    enum CmdId {
        CMD_ID = 3509;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        WAIT_CHOOSE = 2;
        MATERIAL_LACK = 3;
        EMPTY = 4;
    }
}

message VirtualTrainCommon {

    enum GroupType {
        GROUP_CHAPTER = 1;
        GROUP_RPG_TALE = 2;
    }
    enum ItemType {
        ITEM_NONE = 0;
        ITEM_AVATAR = 1;
        ITEM_WEAPON = 2;
        ITEM_STIGMATA = 3;
        ITEM_BUFF = 4;
    }
    enum VirtualAvatarType {
        VIRTUAL_AVATAR_NONE = 0;
        VIRTUAL_AVATAR_NORMAL = 1;
        VIRTUAL_AVATAR_QAVATAR = 2;
    }
}

message VirtualTrainCustom {
    optional uint32 custom_id = 1;
    optional uint32 level = 2;
    optional uint32 choosed_index = 3;
    optional uint32 max_index = 4;
}

message VirtualTrainDirectGachaNotify {
    optional uint32 group_id = 1;
    optional uint32 item_id = 2;

    enum CmdId {
        CMD_ID = 3513;
    }
}

message VirtualTrainEvoReq {
    optional uint32 group_id = 1;
    optional uint32 evo_avatar_id = 2;
    optional bool is_quick_evo = 3;

    enum CmdId {
        CMD_ID = 3522;
    }
}

message VirtualTrainEvoRsp {
    optional Retcode retcode = 1;
    optional uint32 group_id = 2;
    optional uint32 evo_avatar_id = 3;

    enum CmdId {
        CMD_ID = 3523;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        AVATAR_NOT_EXIST = 2;
        NO_NEXT_AVATAR = 3;
        CAN_NOT_EVO = 4;
        MATERIAL_LACK = 5;
        EVO_LIMIT = 6;
    }
}


message VirtualTrainItemDrop {
    optional uint32 item_id = 1;
    optional uint32 item_num = 2;
    repeated Material split_material_list = 3;
}


message VirtualTrainItemDropNotify {
    optional uint32 group_id = 1;
    optional DropSrcType drop_src_type = 2;
    repeated VirtualTrainItemDrop item_drop_list = 3;
    optional uint32 stage_id = 4;

    enum CmdId {
        CMD_ID = 3524;
    }
    enum DropSrcType {
        DROP_SRC_NONE = 0;
        DROP_SRC_RPG_STAGE = 1;
        DROP_SRC_RPG_MISSION = 2;
        DROP_SRC_RPG_QAVATAR = 3;
        DROP_SRC_GM = 10;
    }
}


message VirtualTrainRole {
    optional uint32 virtual_role_id = 1;
    repeated VirtualTrainCustom custom_list = 2;
}

message VirtualTrainRoleCustomChooseReq {
    optional uint32 group_id = 1;
    optional uint32 virtual_role_id = 2;
    optional uint32 custom_id = 3;
    optional uint32 index = 4;

    enum CmdId {
        CMD_ID = 3520;
    }
}

message VirtualTrainRoleCustomChooseRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 3521;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        LOCKED = 2;
        ROLE_NOT_EXIST = 3;
    }
}

message VirtualTrainRoleCustomLevelUpReq {
    optional uint32 group_id = 1;
    optional uint32 virtual_role_id = 2;
    optional uint32 custom_id = 3;

    enum CmdId {
        CMD_ID = 3518;
    }
}

message VirtualTrainRoleCustomLevelUpRsp {
    optional Retcode retcode = 1;
    optional uint32 group_id = 2;
    optional uint32 virtual_role_id = 3;
    optional uint32 custom_id = 4;
    optional uint32 level = 5;

    enum CmdId {
        CMD_ID = 3519;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        MATERIAL_NOT_ENOUGH = 2;
        LEVEL_MAX = 3;
        ROLE_NOT_EXIST = 4;
        STAGE_NOT_FINISH = 5;
        PRE_CUSTOM_LEVEL_LACK = 6;
    }
}

message WaitDelMaterialData {
    optional uint32 material_id = 1;
    optional uint32 num = 2;
}


message WantedMirrorRecoveryReq {
    optional EquipmentItemList consume_item_list = 1;

    enum CmdId {
        CMD_ID = 1517;
    }
}


message WantedMirrorRecoveryRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;

    enum CmdId {
        CMD_ID = 1518;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        NOT_OPEN = 2;
        LOCK = 3;
        CONSUME_ITEM_NOT_EXIST = 4;
        CONSUME_ITEM_IN_USE = 5;
        CONSUME_ITEM_REPEAT = 6;
        CONSUME_ITEM_PROTECTED = 7;
        COST_GACHA_TICKET = 8;
        COST_SENIOR_EQUIP_FROM_NEW_DEVICE = 9;
        COST_SENIOR_EQUIP_CANCEL_PROTECT_TOO_SOON = 10;
        CONSUME_ITEM_GRAND_KEY = 11;
        CONSUME_ITEM_IN_FACILITY = 12;
        LACK_TICKET = 13;
        CONSUME_ITEM_PROTECTED_BY_SECURITY_PASSWORD = 14;
    }
}

message WareHouseDemand {
    optional uint32 id = 1;
    optional uint32 uid = 2;
}

enum WareHouseStatus {
    WAREHOUSE_STATUS_NONE = 0;
    WAREHOUSE_STATUS_NORMAL = 1;
    WAREHOUSE_STATUS_DEMANDING = 2;
    WAREHOUSE_STATUS_FINISH = 3;
    WAREHOUSE_STATUS_CD = 4;
}

message WarshipAvatarData {
    optional uint32 warship_first_avatar_id = 1;
    optional uint32 warship_second_avatar_id = 2;
}

enum WarshipBgmPlayMode {
    WARSHIP_BGM_PLAY_MODE_RANDOM = 0;
    WARSHIP_BGM_PLAY_MODE_SINGLE = 1;
}

message WarshipComponent {
    optional uint32 type = 1;
    optional uint32 component_id = 2;
}

message WarshipItemReturnMaterialNotify {
    optional uint32 warship_item_id = 1;
    optional uint32 convert_num = 2;
    optional uint32 return_material_id = 3;
    optional uint32 return_material_num = 4;

    enum CmdId {
        CMD_ID = 5462;
    }
}

enum WarshipItemType {
    WARSHIP_ITEM_TYPE_NONE = 0;
    WARSHIP_ITEM_TYPE_WARSHIP = 1;
    WARSHIP_ITEM_TYPE_BGM = 2;
}

enum WarshipSettingType {
    WARSHIP_SETTING_BGM_PLAY_MODE = 1;
    WARSHIP_SETTING_BGM_WEATHER = 2;
}


message WarshipThemeData {
    optional uint32 warship_id = 1;
    repeated WarshipComponent component_list = 2;
    optional uint32 bgm_play_mode = 3;
    optional bool is_weather_fixed = 4;
    optional uint32 weather_idx = 5;
}

message WatchReplayReq {
    optional string key = 1;

    enum CmdId {
        CMD_ID = 5406;
    }
}

message WatchReplayRsp {
    optional Retcode retcode = 1;

    enum CmdId {
        CMD_ID = 5407;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message Weapon {
    optional uint32 unique_id = 1;
    optional uint32 id = 2;
    optional uint32 level = 3;
    optional uint32 exp = 4;
    optional bool is_protected = 5;
    optional uint32 cancel_protect_time = 6;
    optional bool is_extracted = 7;
    optional uint32 sub_weapon_id = 8;
    repeated uint32 quantum_branch_list = 9;
}

enum WeaponBranchType {
    WEAPON_DEFAULT = 1;
    WEAPON_BEFALL = 2;
}

message WeaponDetailData {
    optional uint32 id = 1;
    optional uint32 level = 2;
    optional uint32 unique_id = 3;
    optional uint32 sub_weapon_id = 4;
}

message WeaponInfo {
    optional uint32 weapon_id = 1;
    optional uint32 sub_weapon_id = 2;
}

enum WeaponType {
    WEAPON_DOUBLE_GUN = 1;
    WEAPON_SWORD = 2;
    WEAPON_HAND_GUN = 3;
    WEAPON_HEAVY_SWORD = 4;
    WEAPON_TAIL = 5;
    WEAPON_FIST = 6;
    WEAPON_SCYTHE = 7;
    WEAPON_LANCE = 8;
    WEAPON_BOW = 9;
    BladeRing = 10;
}

message WebActivity {
    optional uint32 activity_id = 1;
    optional uint32 show_type = 2;
}

enum WebActivityShowType {
    WEB_ACTIVITY_SHOW_TYPE_NONE = 0;
    WEB_ACTIVITY_SHOW_TYPE_TRACK_POINT = 1;
    WEB_ACTIVITY_SHOW_TYPE_FINISH = 2;
    WEB_ACTIVITY_SHOW_TYPE_HIDE = 3;
}

message WeekDayActivity {
    optional uint32 activity_id = 1;
    repeated uint32 stage_id_list = 2;
    optional uint32 enter_times = 3;
    optional uint32 begin_time = 4;
    optional uint32 end_time = 5;
    optional uint32 activity_end_time = 6;
    optional uint32 exchange_times = 7;
    optional uint32 mp_raid_next_refresh_time = 8;
    optional uint32 mp_raid_reset_times = 9;
    optional uint32 mp_member_today_enter_times = 10;
    repeated uint32 challenge_reward_granted_list = 11;
    optional uint32 activity_begin_time = 12;
    optional uint32 force_open_time = 13;
    optional uint32 mp_raid_score_sum = 14;
    optional bool is_get_mp_raid_special_reward = 15;
    repeated uint32 raid_score_reward_list = 16;
    optional uint32 schedule_id = 17;
}

enum WeekdayActivityEnterTimesType {
    WEEKDAY_ACTIVITY_ENTER_TIMES_DAILY = 0;
    WEEKDAY_ACTIVITY_ENTER_TIMES_WEEKLY = 1;
}

enum WeekDayActivityOpenType {
    WEEK_DAY_ACTIVITY_OPEN_DAILY = 0;
    WEEK_DAY_ACTIVITY_OPEN_WEEK_DAY = 1;
}

message WeekDayActivityStageCompensation {
    optional uint32 stage_id = 1;
    optional bool is_first_win = 2;
    repeated uint32 challenge_reward_list = 3;
}

message WeekDayActivitySweepReq {
    repeated uint32 stage_id_list = 1;

    enum CmdId {
        CMD_ID = 1664;
    }
}



message WeekDayActivitySweepRsp {
    optional Retcode retcode = 1;
    optional RewardData reward_data = 2;
    repeated DropItem drop_item_list = 3;

    enum CmdId {
        CMD_ID = 1665;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
    }
}

message WeeklyReportBlockZone {
    optional uint32 total_score = 1;
    repeated uint32 reward_id_list = 2;
}





message WeeklyReportEndless {
    optional EndlessType endless_type = 1;
    optional uint32 begin_time = 2;
    optional uint32 group_level = 3;
    optional uint32 final_boss_id = 4;
    optional uint32 score = 6;
    optional LineupBriefInfo lineup_info = 7;
    optional uint32 reward_progress = 8;
    optional EndlessRewardType reward_type = 9;
    optional uint32 single_mode_score = 10;
    optional uint32 battle_config_id = 11;
    optional uint32 single_mode_activity_id = 12;
    optional uint32 end_time = 13;
    optional RewardData greedy_reward_data = 14;
    optional uint32 greedy_max_finish_floor = 15;
}


message WeeklyReportExBoss {
    optional uint32 schedule_id = 1;
    optional uint32 rank_id = 2;
    optional uint32 times_score = 3;
    repeated WeeklyReportExBossGroup boss_group_list = 4;
    optional uint32 rank_percent = 5;
    optional uint32 rank = 6;
    optional uint32 begin_time = 7;
    optional uint32 end_time = 8;
    repeated uint32 reward_id_list = 9;
}


message WeeklyReportExBossGroup {
    optional uint32 boss_group_id = 1;
    optional FinishedExBossInfo finished_boss_info = 2;
}


message WeeklyReportUltraEndless {
    optional uint32 schedule_id = 1;
    optional uint32 group_level = 2;
    optional uint32 max_stage_score = 3;
    optional uint32 group_member_num = 4;
    optional uint32 rank = 5;
    optional uint32 cup_num_before_schedule_begin = 6;
    optional uint32 cup_num_after_schedule_settle = 7;
    optional uint32 top_rank = 8;
    optional uint32 top_rank_reward_id = 9;
    optional uint32 group_level_reward_id = 10;
    optional LineupBriefInfo lineup_info = 11;
    optional uint32 max_mission_num = 12;
    optional uint32 finished_mission_num = 13;
    repeated uint32 mission_reward_list = 14;
    optional uint32 begin_time = 15;
    optional uint32 end_time = 16;
    optional uint32 battle_config_id = 17;
}

message WeeklyRoutineMission {
    optional uint32 mission_id = 1;
    optional uint32 cur_contribution = 2;
    optional uint32 weekly_contribution = 3;
    optional uint32 mission_finish_times = 4;
}

message WikiDetailData {
    optional uint32 wiki_detail_type = 1;
    optional uint32 wiki_detail_num_get = 2;
    optional uint32 wiki_detail_score = 3;
    optional uint32 wiki_detail_num_total = 4;
}

enum WikiDetailType {
    WIKI_UNKNOWN = 0;
    WIKI_ALL = 1;
    WIKI_STIGMATA = 2;
    WIKI_WEAPON = 3;
    WIKI_DORM = 4;
    WIKI_CG = 5;
    WIKI_MEDAL = 6;
    WIKI_ACHIEVEMENT = 7;
    WIKI_SKIN = 8;
    WIKI_EMOJI = 9;
    WIKI_AVATAR = 10;
}

message WikiTakeActivitySuitRewardReq {
    optional uint32 suit_id = 1;

    enum CmdId {
        CMD_ID = 1592;
    }
}


message WikiTakeActivitySuitRewardRsp {
    optional Retcode retcode = 1;
    optional uint32 suit_id = 2;
    optional RewardData reward = 3;

    enum CmdId {
        CMD_ID = 1593;
    }
    enum Retcode {
        SUCC = 0;
        FAIL = 1;
        HAS_TAKE = 2;
        NOT_GET = 3;
    }
}

enum WikiType {
    WIKI_TYPE_OVERVIEW = 0;
    WIKI_TYPE_WEAPON = 1;
    WIKI_TYPE_STIGMATA = 2;
    WIKI_TYPE_FURNITURE = 3;
    WIKI_TYPE_CG = 4;
    WIKI_TYPE_MEDAL = 5;
    WIKI_TYPE_ACHIEVEMENT = 6;
    WIKI_TYPE_DRESS = 7;
    WIKI_TYPE_EMOJI = 8;
    WIKI_TYPE_AVATAR = 9;
    WIKI_TYPE_ACTIVITY = 10;
    WIKI_TYPE_MONSTER = 11;
}

message WishWellData {
    optional uint32 left_times = 1;
    optional uint32 set_id = 2;
    optional uint32 material_id = 3;
    optional uint32 material_num = 4;
    optional uint32 equip_need_num = 5;
    repeated Equip equip_list = 6;
    optional uint32 max_wish_times = 7;
    message Equip {
        optional uint32 equip_id = 1;
        optional uint32 equip_level = 2;
    }
}

enum WorldChatroomType {
    WORLD_CHATROOM_TYPE_NONE = 0;
    WORLD_CHATROOM_TYPE_NORMAL = 1;
    WORLD_CHATROOM_TYPE_ACTIVITY = 2;
}

message WorldMapData {
    optional uint32 world_map_id = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    optional uint32 high_light_min_level = 4;
    optional uint32 high_light_max_level = 5;
    optional uint32 weight = 6;
    optional uint32 advance_time = 7;
    optional uint32 id = 8;
}